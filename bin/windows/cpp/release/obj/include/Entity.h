// Generated by Haxe 3.3.0
#ifndef INCLUDED_Entity
#define INCLUDED_Entity

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Entity)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)



class HXCPP_CLASS_ATTRIBUTES Entity_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Entity_obj OBJ_;
		Entity_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Entity")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Entity"); }
		static hx::ObjectPtr< Entity_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Entity_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Entity","\x43","\x87","\xb0","\x39"); }

		static void __boot();
		static ::cpp::VirtualArray all;
		static  ::haxe::ds::ObjectMap entities;
		static ::cpp::VirtualArray get( ::Dynamic type);
		static ::Dynamic get_dyn();

		static Int id_max;
		Int id;
		void _hx_delete();
		::Dynamic _hx_delete_dyn();

};


#endif /* INCLUDED_Entity */ 
