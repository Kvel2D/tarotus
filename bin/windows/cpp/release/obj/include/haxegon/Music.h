// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxegon_Music
#define INCLUDED_haxegon_Music

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(haxegon,Music)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)
HX_DECLARE_CLASS2(openfl,media,SoundChannel)
HX_DECLARE_CLASS2(openfl,media,SoundTransform)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Music_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Music_obj OBJ_;
		Music_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Music")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Music"); }
		static hx::ObjectPtr< Music_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Music_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Music","\x85","\x40","\x88","\xa3"); }

		static void __boot();
		static void playSound(::String t,hx::Null< Int >  offset);
		static ::Dynamic playSound_dyn();

		static void stopSound();
		static ::Dynamic stopSound_dyn();

		static void loadSound(::String t,hx::Null< Float >  vol);
		static ::Dynamic loadSound_dyn();

		static void loadSong(::String t,hx::Null< Float >  vol);
		static ::Dynamic loadSong_dyn();

		static void playSong(::String t,hx::Null< Int >  time);
		static ::Dynamic playSong_dyn();

		static void stop();
		static ::Dynamic stop_dyn();

		static void fadeout();
		static ::Dynamic fadeout_dyn();

		static void init();
		static ::Dynamic init_dyn();

		static void loopMusic( ::openfl::events::Event e);
		static ::Dynamic loopMusic_dyn();

		static void stopMusic( ::openfl::events::Event e);
		static ::Dynamic stopMusic_dyn();

		static void processmusicfade();
		static ::Dynamic processmusicfade_dyn();

		static void processmusicfadein();
		static ::Dynamic processmusicfadein_dyn();

		static void processmusic();
		static ::Dynamic processmusic_dyn();

		static void updateallvolumes();
		static ::Dynamic updateallvolumes_dyn();

		static void processmute();
		static ::Dynamic processmute_dyn();

		static ::Array< ::Dynamic> musicchan;
		static  ::openfl::media::SoundChannel musicchannel;
		static ::String currentsong;
		static Int musicfade;
		static Int musicfadein;
		static  ::haxe::ds::StringMap effectindex;
		static ::Array< Float > volumelevels;
		static Int numeffects;
		static  ::haxe::ds::StringMap songindex;
		static ::Array< Float > songvolumelevels;
		static Int numsongs;
		static Int currentefchan;
		static ::Array< ::Dynamic> efchannel;
		static ::Array< ::Dynamic> efchan;
		static Int numplays;
		static Bool usingtickertext;
		static  ::openfl::media::SoundTransform temptransform;
		static Float globalsound;
		static Bool muted;
		static Int mutebutton;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Music */ 
