// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxegon_Gfx
#define INCLUDED_haxegon_Gfx

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(haxegon,Gfx)
HX_DECLARE_CLASS2(haxegon,util,AnimationContainer)
HX_DECLARE_CLASS2(haxegon,util,Tileset)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Gfx_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Gfx_obj OBJ_;
		Gfx_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Gfx")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Gfx"); }
		static hx::ObjectPtr< Gfx_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Gfx_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Gfx","\x59","\x39","\x36","\x00"); }

		static void __boot();
		static Int LEFT;
		static Int RIGHT;
		static Int TOP;
		static Int BOTTOM;
		static Int CENTER;
		static Int screen_width;
		static Int screen_height;
		static Int screen_widthMid;
		static Int screen_heightMid;
		static Bool clearscreeneachframe;
		static Int screenscale;
		static Int devicexres;
		static Int deviceyres;
		static Bool fullscreen;
		static ::String currenttilesetname;
		static  ::openfl::display::BitmapData backbuffer;
		static  ::openfl::display::BitmapData drawto;
		static void resize_screen(Float width,Float height,hx::Null< Int >  scale);
		static ::Dynamic resize_screen_dyn();

		static Bool showfps;
		static Int renderfps;
		static Int renderfps_max;
		static Int updatefps;
		static Int updatefps_max;
		static Int render_fps();
		static ::Dynamic render_fps_dyn();

		static Int update_fps();
		static ::Dynamic update_fps_dyn();

		static void reset();
		static ::Dynamic reset_dyn();

		static void reset_ifclear();
		static ::Dynamic reset_ifclear_dyn();

		static void rotation(Float angle,hx::Null< Float >  xpivot,hx::Null< Float >  ypivot);
		static ::Dynamic rotation_dyn();

		static void scale(Float xscale,Float yscale,hx::Null< Float >  xpivot,hx::Null< Float >  ypivot);
		static ::Dynamic scale_dyn();

		static void image_alpha(Float a);
		static ::Dynamic image_alpha_dyn();

		static void imagecolor(hx::Null< Int >  c,hx::Null< Int >  add);
		static ::Dynamic imagecolor_dyn();

		static void changetileset(::String tilesetname);
		static ::Dynamic changetileset_dyn();

		static Int numberoftiles();
		static ::Dynamic numberoftiles_dyn();

		static void load_tiles(::String imagename,Int width,Int height);
		static ::Dynamic load_tiles_dyn();

		static void createtiles(::String imagename,Float width,Float height,Int amount);
		static ::Dynamic createtiles_dyn();

		static Int tilewidth();
		static ::Dynamic tilewidth_dyn();

		static Int tileheight();
		static ::Dynamic tileheight_dyn();

		static void load_image(::String imagename);
		static ::Dynamic load_image_dyn();

		static void create_image(::String imagename,Float width,Float height);
		static ::Dynamic create_image_dyn();

		static void resize_image(::String imagename,Float scale);
		static ::Dynamic resize_image_dyn();

		static Int image_width(::String imagename);
		static ::Dynamic image_width_dyn();

		static Int image_height(::String imagename);
		static ::Dynamic image_height_dyn();

		static void draw_to_screen();
		static ::Dynamic draw_to_screen_dyn();

		static void draw_to_image(::String imagename);
		static ::Dynamic draw_to_image_dyn();

		static void drawtotile(Int tilenumber);
		static ::Dynamic drawtotile_dyn();

		static Float t1;
		static Float t2;
		static Float t3;
		static Float imagealignx(Float x);
		static ::Dynamic imagealignx_dyn();

		static Float imagealigny(Float y);
		static ::Dynamic imagealigny_dyn();

		static Float imagealignonimagex(Float x);
		static ::Dynamic imagealignonimagex_dyn();

		static Float imagealignonimagey(Float y);
		static ::Dynamic imagealignonimagey_dyn();

		static void draw_image(Float x,Float y,::String imagename);
		static ::Dynamic draw_image_dyn();

		static void grabtilefromscreen(Int tilenumber,Float x,Float y);
		static ::Dynamic grabtilefromscreen_dyn();

		static void grabtilefromimage(Int tilenumber,::String imagename,Float x,Float y);
		static ::Dynamic grabtilefromimage_dyn();

		static void grabimagefromscreen(::String imagename,Float x,Float y);
		static ::Dynamic grabimagefromscreen_dyn();

		static void grabimagefromimage(::String imagename,::String imagetocopyfrom,Float x,Float y,hx::Null< Float >  w,hx::Null< Float >  h);
		static ::Dynamic grabimagefromimage_dyn();

		static void copytile(Int totilenumber,::String fromtileset,Int fromtilenumber);
		static ::Dynamic copytile_dyn();

		static void draw_tile(Float x,Float y,Int t);
		static ::Dynamic draw_tile_dyn();

		static Int currentframe();
		static ::Dynamic currentframe_dyn();

		static void stopAnimation(::String animationname);
		static ::Dynamic stopAnimation_dyn();

		static void defineAnimation(::String animationname,::String tileset,Int startframe,Int endframe,Int delayperframe);
		static ::Dynamic defineAnimation_dyn();

		static void drawAnimation(Float x,Float y,::String animationname);
		static ::Dynamic drawAnimation_dyn();

		static Float tilealignx(Float x);
		static ::Dynamic tilealignx_dyn();

		static Float tilealigny(Float y);
		static ::Dynamic tilealigny_dyn();

		static Float tilealignontilex(Float x);
		static ::Dynamic tilealignontilex_dyn();

		static Float tilealignontiley(Float y);
		static ::Dynamic tilealignontiley_dyn();

		static void draw_line(Float _x1,Float _y1,Float _x2,Float _y2,Int col,hx::Null< Float >  alpha);
		static ::Dynamic draw_line_dyn();

		static void drawHexagon(Float x,Float y,Float radius,Float angle,Int col,hx::Null< Float >  alpha);
		static ::Dynamic drawHexagon_dyn();

		static void fillHexagon(Float x,Float y,Float radius,Float angle,Int col,hx::Null< Float >  alpha);
		static ::Dynamic fillHexagon_dyn();

		static void draw_circle(Float x,Float y,Float radius,Int col,hx::Null< Float >  alpha);
		static ::Dynamic draw_circle_dyn();

		static void fill_circle(Float x,Float y,Float radius,Int col,hx::Null< Float >  alpha);
		static ::Dynamic fill_circle_dyn();

		static void draw_tri(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3,Int col,hx::Null< Float >  alpha);
		static ::Dynamic draw_tri_dyn();

		static void fill_tri_array(::Array< Float > tri,Int col,hx::Null< Float >  alpha);
		static ::Dynamic fill_tri_array_dyn();

		static void fill_tri(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3,Int col,hx::Null< Float >  alpha);
		static ::Dynamic fill_tri_dyn();

		static void draw_box(Float x,Float y,Float width,Float height,Int col,hx::Null< Float >  alpha);
		static ::Dynamic draw_box_dyn();

		static void fill_box(Float x,Float y,Float width,Float height,Int col,hx::Null< Float >  alpha);
		static ::Dynamic fill_box_dyn();

		static void draw_poly(::Array< Float > poly,Int col,hx::Null< Float >  alpha);
		static ::Dynamic draw_poly_dyn();

		static void fill_poly(::Array< Float > poly,Int col,hx::Null< Float >  alpha);
		static ::Dynamic fill_poly_dyn();

		static void isosceles_curve(Float x1,Float y1,Float x2,Float y2,Float angle);
		static ::Dynamic isosceles_curve_dyn();

		static void draw_round_tri(Float x,Float y,Float radius,Float internal_angle,Float angle,Int col,hx::Null< Float >  alpha);
		static ::Dynamic draw_round_tri_dyn();

		static void fill_round_tri(Float x,Float y,Float radius,Float internal_angle,Float angle,Int col,hx::Null< Float >  alpha);
		static ::Dynamic fill_round_tri_dyn();

		static void clear_screen(hx::Null< Int >  col);
		static ::Dynamic clear_screen_dyn();

		static Int get_pixel(Float x,Float y);
		static ::Dynamic get_pixel_dyn();

		static void set_pixel(Float x,Float y,Int col,hx::Null< Float >  alpha);
		static ::Dynamic set_pixel_dyn();

		static Int getred(Int c);
		static ::Dynamic getred_dyn();

		static Int getgreen(Int c);
		static ::Dynamic getgreen_dyn();

		static Int getblue(Int c);
		static ::Dynamic getblue_dyn();

		static Int gethue(Int c);
		static ::Dynamic gethue_dyn();

		static Float getsaturation(Int c);
		static ::Dynamic getsaturation_dyn();

		static Float getlightness(Int c);
		static ::Dynamic getlightness_dyn();

		static void setzoom(Int t);
		static ::Dynamic setzoom_dyn();

		static void updategraphicsmode();
		static ::Dynamic updategraphicsmode_dyn();

		static void init( ::openfl::display::Stage stage);
		static ::Dynamic init_dyn();

		static void initgfx(Int width,Int height,Int scale);
		static ::Dynamic initgfx_dyn();

		static void settrect(Float x,Float y,Float w,Float h);
		static ::Dynamic settrect_dyn();

		static void settpoint(Float x,Float y);
		static ::Dynamic settpoint_dyn();

		static ::Array< ::Dynamic> tiles;
		static  ::haxe::ds::StringMap tilesetindex;
		static Int currenttileset;
		static ::Array< ::Dynamic> animations;
		static Int animationnum;
		static  ::haxe::ds::StringMap animationindex;
		static ::Array< ::Dynamic> images;
		static Int imagenum;
		static  ::openfl::geom::ColorTransform ct;
		static  ::openfl::geom::ColorTransform alphact;
		static  ::openfl::geom::Rectangle images_rect;
		static  ::openfl::geom::Point tl;
		static  ::openfl::geom::Rectangle trect;
		static  ::openfl::geom::Point tpoint;
		static  ::openfl::display::BitmapData tbuffer;
		static  ::haxe::ds::StringMap imageindex;
		static Bool transform;
		static Bool coltransform;
		static Float imagerotate;
		static Float imagerotatexpivot;
		static Float imagerotateypivot;
		static Float imagexscale;
		static Float imageyscale;
		static Float imagescalexpivot;
		static Float imagescaleypivot;
		static Float imagealphamult;
		static Float imageredmult;
		static Float imagegreenmult;
		static Float imagebluemult;
		static Float imageredadd;
		static Float imagegreenadd;
		static Float imageblueadd;
		static Int tempframe;
		static Float tempxalign;
		static Float tempyalign;
		static Float temprotate;
		static Bool changecolours;
		static ::String oldtileset;
		static Float tx;
		static Float ty;
		static Float tx2;
		static Float ty2;
		static  ::openfl::display::BitmapData transparentpixel;
		static Float line_thickness;
		static  ::openfl::display::BitmapData buffer;
		static  ::openfl::display::BitmapData temptile;
		static  ::openfl::display::Bitmap screen;
		static  ::openfl::display::Shape tempshape;
		static  ::openfl::geom::Matrix shapematrix;
		static Int alphamult;
		static  ::openfl::display::Stage gfxstage;
		static Bool initrun;
		static Bool skiprender;
		static Bool drawingtoscreen;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Gfx */ 
