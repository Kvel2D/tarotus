// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxegon_bitmapFont_BitmapTextField
#define INCLUDED_haxegon_bitmapFont_BitmapTextField

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(haxegon,bitmapFont,BitmapFont)
HX_DECLARE_CLASS2(haxegon,bitmapFont,BitmapGlyphCollection)
HX_DECLARE_CLASS2(haxegon,bitmapFont,BitmapTextField)
HX_DECLARE_CLASS2(haxegon,bitmapFont,TextBorderStyle)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace haxegon{
namespace bitmapFont{


class HXCPP_CLASS_ATTRIBUTES BitmapTextField_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef BitmapTextField_obj OBJ_;
		BitmapTextField_obj();

	public:
		void __construct( ::haxegon::bitmapFont::BitmapFont font,::String __o_text, ::Dynamic pixelSnapping,hx::Null< Bool >  __o_smoothing);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxegon.bitmapFont.BitmapTextField")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxegon.bitmapFont.BitmapTextField"); }
		static hx::ObjectPtr< BitmapTextField_obj > __new( ::haxegon::bitmapFont::BitmapFont font,::String __o_text, ::Dynamic pixelSnapping,hx::Null< Bool >  __o_smoothing);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BitmapTextField_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("BitmapTextField","\xbe","\x06","\xe0","\x0b"); }

		 ::haxegon::bitmapFont::BitmapFont font;
		::String text;
		::Array< ::String > _lines;
		::Array< Float > _linesWidth;
		::String alignment;
		Int lineSpacing;
		Int letterSpacing;
		Bool autoUpperCase;
		Bool wordWrap;
		Bool wrapByWord;
		Bool autoSize;
		Int padding;
		Float textWidth;
		Float textHeight;
		Float lineHeight;
		Int numSpacesInTab;
		::String _tabSpaces;
		Int textColor;
		Bool useTextColor;
		::hx::EnumBase borderStyle;
		Int borderColor;
		Float borderSize;
		Float borderQuality;
		 ::openfl::geom::Point shadowOffset;
		Bool background;
		Int backgroundColor;
		Bool multiLine;
		Int numLines;
		Float size;
		Bool smoothing;
		Bool updateImmediately;
		Bool _pendingTextChange;
		Bool _pendingGraphicChange;
		Bool _pendingTextGlyphsChange;
		Bool _pendingBorderGlyphsChange;
		Int _fieldWidth;
		Int _fieldHeight;
		 ::openfl::display::Bitmap _bitmap;
		 ::openfl::display::BitmapData _bitmapData;
		 ::haxegon::bitmapFont::BitmapGlyphCollection textGlyphs;
		 ::haxegon::bitmapFont::BitmapGlyphCollection borderGlyphs;
		 ::openfl::geom::Point _point;
		void dispose();
		::Dynamic dispose_dyn();

		void forceGraphicUpdate();
		::Dynamic forceGraphicUpdate_dyn();

		void checkImmediateChanges();
		::Dynamic checkImmediateChanges_dyn();

		void checkPendingChanges();
		::Dynamic checkPendingChanges_dyn();

		Int set_textColor(Int value);
		::Dynamic set_textColor_dyn();

		Bool set_useTextColor(Bool value);
		::Dynamic set_useTextColor_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

		void updateText();
		::Dynamic updateText_dyn();

		void computeTextSize();
		::Dynamic computeTextSize_dyn();

		Float getLineWidth(Int lineIndex);
		::Dynamic getLineWidth_dyn();

		Float getStringWidth(::String str,hx::Null< Bool >  fordrawing);
		::Dynamic getStringWidth_dyn();

		void cutLines();
		::Dynamic cutLines_dyn();

		void wrap();
		::Dynamic wrap_dyn();

		void splitLineIntoWords(::String line,::Array< ::String > words);
		::Dynamic splitLineIntoWords_dyn();

		void wrapLineByWord(::Array< ::String > words,::Array< ::String > newLines);
		::Dynamic wrapLineByWord_dyn();

		void wrapLineByCharacter(::Array< ::String > words,::Array< ::String > newLines);
		::Dynamic wrapLineByCharacter_dyn();

		void updateGraphic();
		::Dynamic updateGraphic_dyn();

		void blitLine(::String line, ::haxegon::bitmapFont::BitmapGlyphCollection glyphs,Int startX,Int startY);
		::Dynamic blitLine_dyn();

		void setBorderStyle(::hx::EnumBase Style,hx::Null< Int >  Color,hx::Null< Float >  Size,hx::Null< Float >  Quality);
		::Dynamic setBorderStyle_dyn();

		Float set_width(Float value);

		::String set_alignment(::String value);
		::Dynamic set_alignment_dyn();

		Bool set_multiLine(Bool value);
		::Dynamic set_multiLine_dyn();

		 ::haxegon::bitmapFont::BitmapFont set_font( ::haxegon::bitmapFont::BitmapFont value);
		::Dynamic set_font_dyn();

		Int set_lineSpacing(Int value);
		::Dynamic set_lineSpacing_dyn();

		Int set_letterSpacing(Int value);
		::Dynamic set_letterSpacing_dyn();

		Bool set_autoUpperCase(Bool value);
		::Dynamic set_autoUpperCase_dyn();

		Bool set_wordWrap(Bool value);
		::Dynamic set_wordWrap_dyn();

		Bool set_wrapByWord(Bool value);
		::Dynamic set_wrapByWord_dyn();

		Bool set_autoSize(Bool value);
		::Dynamic set_autoSize_dyn();

		Float set_size(Float value);
		::Dynamic set_size_dyn();

		Int set_padding(Int value);
		::Dynamic set_padding_dyn();

		Int set_numSpacesInTab(Int value);
		::Dynamic set_numSpacesInTab_dyn();

		Bool set_background(Bool value);
		::Dynamic set_background_dyn();

		Int set_backgroundColor(Int value);
		::Dynamic set_backgroundColor_dyn();

		::hx::EnumBase set_borderStyle(::hx::EnumBase style);
		::Dynamic set_borderStyle_dyn();

		Int set_borderColor(Int value);
		::Dynamic set_borderColor_dyn();

		Float set_borderSize(Float value);
		::Dynamic set_borderSize_dyn();

		Float set_borderQuality(Float value);
		::Dynamic set_borderQuality_dyn();

		Int get_numLines();
		::Dynamic get_numLines_dyn();

		Float get_textWidth();
		::Dynamic get_textWidth_dyn();

		Float get_textHeight();
		::Dynamic get_textHeight_dyn();

		Float get_lineHeight();
		::Dynamic get_lineHeight_dyn();

		Bool set_updateImmediately(Bool value);
		::Dynamic set_updateImmediately_dyn();

		Bool set_smoothing(Bool value);
		::Dynamic set_smoothing_dyn();

		void updateTextGlyphs();
		::Dynamic updateTextGlyphs_dyn();

		void updateBorderGlyphs();
		::Dynamic updateBorderGlyphs_dyn();

};

} // end namespace haxegon
} // end namespace bitmapFont

#endif /* INCLUDED_haxegon_bitmapFont_BitmapTextField */ 
