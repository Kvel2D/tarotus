// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxegon_util_Tileset
#define INCLUDED_haxegon_util_Tileset

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxegon,util,Tileset)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace haxegon{
namespace util{


class HXCPP_CLASS_ATTRIBUTES Tileset_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Tileset_obj OBJ_;
		Tileset_obj();

	public:
		void __construct(::String n,Int w,Int h);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxegon.util.Tileset")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxegon.util.Tileset"); }
		static hx::ObjectPtr< Tileset_obj > __new(::String n,Int w,Int h);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Tileset_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Tileset","\x14","\xa9","\xe4","\x12"); }

		::Array< ::Dynamic> tiles;
		::String name;
		Int width;
		Int height;
		Int animationspeed;
		Int timethisframe;
		Int currentframe;
		Int startframe;
		Int endframe;
};

} // end namespace haxegon
} // end namespace util

#endif /* INCLUDED_haxegon_util_Tileset */ 
