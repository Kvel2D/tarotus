// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxegon_Text
#define INCLUDED_haxegon_Text

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(haxegon,Text)
HX_DECLARE_CLASS2(haxegon,util,Fontclass)
HX_DECLARE_CLASS2(haxegon,util,Fontfile)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Text_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Text_obj OBJ_;
		Text_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Text")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Text"); }
		static hx::ObjectPtr< Text_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Text_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Text","\xcd","\xf8","\xd2","\x37"); }

		static void __boot();
		static ::Array< ::Dynamic> fontfile;
		static  ::haxe::ds::StringMap fontfileindex;
		static ::Array< ::Dynamic> typeface;
		static  ::haxe::ds::StringMap typefaceindex;
		static  ::openfl::geom::Matrix fontmatrix;
		static Int currentindex;
		static ::String currentfont;
		static Float currentsize;
		static  ::openfl::display::Stage gfxstage;
		static  ::openfl::display::BitmapData drawto;
		static Int LEFT;
		static Int RIGHT;
		static Int TOP;
		static Int BOTTOM;
		static Int CENTER;
		static Int textalign;
		static Float textrotate;
		static Float textrotatexpivot;
		static Float textrotateypivot;
		static Float textalphamult;
		static Float temprotate;
		static Float tempxscale;
		static Float tempyscale;
		static Float tempxpivot;
		static Float tempypivot;
		static Float tempalpha;
		static Float tempred;
		static Float tempgreen;
		static Float tempblue;
		static Bool changecolours;
		static  ::openfl::geom::ColorTransform alphact;
		static Int inputmaxlength;
		static ::String inputtext;
		static ::String lastentry;
		static Float input_textxp;
		static Float input_textyp;
		static Float input_responsexp;
		static Float input_responseyp;
		static Int input_textcol;
		static Int input_responsecol;
		static ::String input_text;
		static ::String input_response;
		static Int input_cursorglow;
		static ::String input_font;
		static Float input_textsize;
		static Int input_show;
		static void init( ::openfl::display::Stage stage);
		static ::Dynamic init_dyn();

		static void align(Int a);
		static ::Dynamic align_dyn();

		static void rotation(Float a,hx::Null< Int >  xpivot,hx::Null< Int >  ypivot);
		static ::Dynamic rotation_dyn();

		static void input_checkfortext();
		static ::Dynamic input_checkfortext_dyn();

		static Bool input(Float x,Float y,::String text,hx::Null< Int >  col,hx::Null< Int >  responsecol);
		static ::Dynamic input_dyn();

		static ::String get_input();
		static ::Dynamic get_input_dyn();

		static void drawstringinput();
		static ::Dynamic drawstringinput_dyn();

		static Float width(::String t);
		static ::Dynamic width_dyn();

		static Float height();
		static ::Dynamic height_dyn();

		static Float t1;
		static Float t2;
		static Float t3;
		static Float cachealignx(Float x,Int c);
		static ::Dynamic cachealignx_dyn();

		static Float cachealigny(Float y,Int c);
		static ::Dynamic cachealigny_dyn();

		static Float currentwidth();
		static ::Dynamic currentwidth_dyn();

		static Float alignx(Float x);
		static ::Dynamic alignx_dyn();

		static Float currentheight();
		static ::Dynamic currentheight_dyn();

		static Float aligny(Float y);
		static ::Dynamic aligny_dyn();

		static Float cachealigntextx(Int c,Float x);
		static ::Dynamic cachealigntextx_dyn();

		static Float cachealigntexty(Int c,Float y);
		static ::Dynamic cachealigntexty_dyn();

		static Float aligntextx(::String t,Float x);
		static ::Dynamic aligntextx_dyn();

		static Float aligntexty(Float y);
		static ::Dynamic aligntexty_dyn();

		static void reset_text_input();
		static ::Dynamic reset_text_input_dyn();

		static  ::haxe::ds::StringMap cachedtextindex;
		static ::Array< ::Dynamic> cachedtext;
		static Int cacheindex;
		static ::String cachelabel;
		static void cleartextcache();
		static ::Dynamic cleartextcache_dyn();

		static void display(Float x,Float y,::String text,hx::Null< Int >  col);
		static ::Dynamic display_dyn();

		static void cache_bitmap_text(::String text,Int col);
		static ::Dynamic cache_bitmap_text_dyn();

		static void display_bitmap(Float x,Float y,Int text,Float size);
		static ::Dynamic display_bitmap_dyn();

		static void display_ttf(Float x,Float y,::String text,hx::Null< Int >  col);
		static ::Dynamic display_ttf_dyn();

		static void createtypeface(::String t);
		static ::Dynamic createtypeface_dyn();

		static void setfont(::String t,hx::Null< Float >  s);
		static ::Dynamic setfont_dyn();

		static void change_size(Float t);
		static ::Dynamic change_size_dyn();

		static void addfont(::String t,hx::Null< Float >  defaultsize);
		static ::Dynamic addfont_dyn();

		static void addtypeface(::String _name,Float _size);
		static ::Dynamic addtypeface_dyn();

		static ::String getfonttypename(::String fontname);
		static ::Dynamic getfonttypename_dyn();

};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Text */ 
