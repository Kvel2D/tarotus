// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxegon_Input
#define INCLUDED_haxegon_Input

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(haxegon,Input)
HX_DECLARE_CLASS1(haxegon,Key)
HX_DECLARE_CLASS1(haxegon,Keystate)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Input_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Input_obj OBJ_;
		Input_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Input")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Input"); }
		static hx::ObjectPtr< Input_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Input_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Input","\xea","\x33","\x4b","\x51"); }

		static void __boot();
		static Bool pressed(::hx::EnumBase k);
		static ::Dynamic pressed_dyn();

		static Bool just_pressed(::hx::EnumBase k);
		static ::Dynamic just_pressed_dyn();

		static Bool just_released(::hx::EnumBase k);
		static ::Dynamic just_released_dyn();

		static void force_release(::hx::EnumBase k);
		static ::Dynamic force_release_dyn();

		static Int pressheldtime(::hx::EnumBase k);
		static ::Dynamic pressheldtime_dyn();

		static Bool delay_pressed(::hx::EnumBase k,Int repeatframes, ::Dynamic instantreps);
		static ::Dynamic delay_pressed_dyn();

		static void init( ::openfl::display::Stage stage);
		static ::Dynamic init_dyn();

		static void unload( ::openfl::display::DisplayObject stage);
		static ::Dynamic unload_dyn();

		static void update();
		static ::Dynamic update_dyn();

		static void reset();
		static ::Dynamic reset_dyn();

		static Bool iskeycodeheld(::hx::EnumBase k);
		static ::Dynamic iskeycodeheld_dyn();

		static ::Array< ::String > clipboardbuffer;
		static Bool selectall;
		static Bool cut;
		static Bool paste;
		static Bool undo;
		static Bool redo;
		static void handlecut( ::openfl::events::Event event);
		static ::Dynamic handlecut_dyn();

		static void handlecopy( ::openfl::events::Event event);
		static ::Dynamic handlecopy_dyn();

		static void handlepaste( ::openfl::events::Event event);
		static ::Dynamic handlepaste_dyn();

		static void handleselectall( ::openfl::events::Event event);
		static ::Dynamic handleselectall_dyn();

		static void handlekeydown( ::openfl::events::KeyboardEvent event);
		static ::Dynamic handlekeydown_dyn();

		static void handletextinput( ::openfl::events::TextEvent event);
		static ::Dynamic handletextinput_dyn();

		static void handledeactivate( ::openfl::events::Event e);
		static ::Dynamic handledeactivate_dyn();

		static ::String getchar();
		static ::Dynamic getchar_dyn();

		static void handlekeyup( ::openfl::events::KeyboardEvent event);
		static ::Dynamic handlekeyup_dyn();

		static void addkey(::hx::EnumBase KeyName,Int KeyCode);
		static ::Dynamic addkey_dyn();

		static void resetKeys();
		static ::Dynamic resetKeys_dyn();

		static ::String keyname(::hx::EnumBase k);
		static ::Dynamic keyname_dyn();

		static  ::haxe::ds::EnumValueMap keymap;
		static  ::haxe::ds::IntMap lookup;
		static ::Array< ::Dynamic> current;
		static ::Array< ::Dynamic> last;
		static ::Array< Int > keyheld;
		static  ::haxe::ds::StringMap _nativeCorrection;
		static Int numletters;
		static Int keycode;
		static Int charcode;
		static Int lastcharcode;
		static ::String keybuffer;
		static  ::openfl::display::Stage gamestage;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Input */ 
