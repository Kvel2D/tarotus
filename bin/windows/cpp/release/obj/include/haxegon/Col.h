// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxegon_Col
#define INCLUDED_haxegon_Col

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxegon,Col)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Col_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Col_obj OBJ_;
		Col_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Col")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Col"); }
		static hx::ObjectPtr< Col_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Col_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Col","\x20","\x38","\x33","\x00"); }

		static void __boot();
		static Int BLACK;
		static Int GREY;
		static Int GRAY;
		static Int WHITE;
		static Int RED;
		static Int PINK;
		static Int DARKBROWN;
		static Int BROWN;
		static Int ORANGE;
		static Int YELLOW;
		static Int DARKGREEN;
		static Int GREEN;
		static Int LIGHTGREEN;
		static Int NIGHTBLUE;
		static Int DARKBLUE;
		static Int BLUE;
		static Int LIGHTBLUE;
		static Int MAGENTA;
		static ::Array< Int > ALL;
		static Int TRANSPARENT;
		static Int rgb(Int r,Int g,Int b);
		static ::Dynamic rgb_dyn();

		static ::Array< Float > hslval;
		static Int hsl(Float hue,Float saturation,Float lightness);
		static ::Dynamic hsl_dyn();

};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Col */ 
