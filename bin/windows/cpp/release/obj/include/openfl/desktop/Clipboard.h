// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl_desktop_Clipboard
#define INCLUDED_openfl_desktop_Clipboard

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,desktop,Clipboard)

namespace openfl{
namespace desktop{


class HXCPP_CLASS_ATTRIBUTES Clipboard_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Clipboard_obj OBJ_;
		Clipboard_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.desktop.Clipboard")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.desktop.Clipboard"); }
		static hx::ObjectPtr< Clipboard_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Clipboard_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Clipboard","\xb6","\x45","\xaa","\xe3"); }

		static  ::openfl::desktop::Clipboard _hx___generalClipboard;
		static  ::openfl::desktop::Clipboard get_generalClipboard();
		static ::Dynamic get_generalClipboard_dyn();

		::Array< ::Dynamic> formats;
		::String _hx___htmlText;
		::String _hx___richText;
		Bool _hx___systemClipboard;
		::String _hx___text;
		void clear();
		::Dynamic clear_dyn();

		void clearData( ::Dynamic format);
		::Dynamic clearData_dyn();

		 ::Dynamic getData( ::Dynamic format, ::Dynamic transferMode);
		::Dynamic getData_dyn();

		Bool hasFormat( ::Dynamic format);
		::Dynamic hasFormat_dyn();

		Bool setData( ::Dynamic format, ::Dynamic data,hx::Null< Bool >  serializable);
		::Dynamic setData_dyn();

		Bool setDataHandler( ::Dynamic format, ::Dynamic handler,hx::Null< Bool >  serializable);
		::Dynamic setDataHandler_dyn();

};

} // end namespace openfl
} // end namespace desktop

#endif /* INCLUDED_openfl_desktop_Clipboard */ 
