// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl_desktop__ClipboardFormats_ClipboardFormats_Impl_
#define INCLUDED_openfl_desktop__ClipboardFormats_ClipboardFormats_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(openfl,desktop,_ClipboardFormats,ClipboardFormats_Impl_)

namespace openfl{
namespace desktop{
namespace _ClipboardFormats{


class HXCPP_CLASS_ATTRIBUTES ClipboardFormats_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ClipboardFormats_Impl__obj OBJ_;
		ClipboardFormats_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="openfl.desktop._ClipboardFormats.ClipboardFormats_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"openfl.desktop._ClipboardFormats.ClipboardFormats_Impl_"); }
		static hx::ObjectPtr< ClipboardFormats_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ClipboardFormats_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("ClipboardFormats_Impl_","\x66","\x9b","\x2d","\x63"); }

		static void __boot();
		static  ::Dynamic HTML_FORMAT;
		static  ::Dynamic RICH_TEXT_FORMAT;
		static  ::Dynamic TEXT_FORMAT;
		static  ::Dynamic fromString(::String value);
		static ::Dynamic fromString_dyn();

		static ::String toString(Int value);
		static ::Dynamic toString_dyn();

};

} // end namespace openfl
} // end namespace desktop
} // end namespace _ClipboardFormats

#endif /* INCLUDED_openfl_desktop__ClipboardFormats_ClipboardFormats_Impl_ */ 
