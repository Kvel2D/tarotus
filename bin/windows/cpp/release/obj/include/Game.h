// Generated by Haxe 3.3.0
#ifndef INCLUDED_Game
#define INCLUDED_Game

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Card)
HX_DECLARE_CLASS0(Dude)
HX_DECLARE_CLASS0(Entity)
HX_DECLARE_CLASS0(Game)
HX_DECLARE_CLASS0(GameState)
HX_DECLARE_CLASS0(Item)
HX_DECLARE_CLASS0(Player)



class HXCPP_CLASS_ATTRIBUTES Game_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Game_obj OBJ_;
		Game_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Game")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Game"); }
		static hx::ObjectPtr< Game_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Game_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Game","\x12","\x20","\x38","\x2f"); }

		static void __boot();
		static Bool DRAW_COORDINATES;
		static Bool UPDATE_CARDS;
		static Bool DRAW_IMAGE_COVER;
		static Bool DRAW_TRANSPARENT_COVER;
		static Bool REQUIRE_ARROWS;
		static Int tilesize;
		static Int cardmap_width;
		static Int cardmap_height;
		static Int card_width;
		static Int card_height;
		static Int map_width;
		static Int map_height;
		static Int inventory_slots;
		static Int inventory_x;
		static Int inventory_y;
		static Int inventory_slot_size;
		static Int move_visual_timer_max;
		static Int weapon_visual_timer_max;
		static Int bow_visual_timer_max;
		static Int card_flip_timer_max;
		static Int message_fade_length;
		static Int total_cards;
		static Int card_update_timer_max;
		::hx::EnumBase state;
		Int state_timer;
		 ::Dynamic flipped_card;
		Int drag_dx;
		Int drag_dy;
		 ::Item dragged_item;
		::String hover_info;
		::String message_text;
		Int message_time_left;
		::Array< ::Dynamic> walls;
		::Array< ::Dynamic> cards;
		Int cards_uncovered;
		Int card_update_timer;
		 ::Player player;
		::Array< ::Dynamic> inventory;
		::Array< ::Dynamic> card_a;
		::Array< ::Dynamic> card_b;
		::Array< ::Dynamic> card_c;
		::Array< ::Dynamic> history;
		 ::Dynamic random_enum( ::Dynamic enum_type,hx::Null< Int >  start_index);
		::Dynamic random_enum_dyn();

		void make_message(::String text);
		::Dynamic make_message_dyn();

		void update_dude_info( ::Dude dude);
		::Dynamic update_dude_info_dyn();

		::String serialize( ::Dynamic entity);
		::Dynamic serialize_dyn();

		void unserialize( ::Dynamic entity,::String fields_string);
		::Dynamic unserialize_dyn();

		void generate_card( ::Card card);
		::Dynamic generate_card_dyn();

		::Array< ::Dynamic> a_star(Int x1,Int y1,Int x2,Int y2,hx::Null< Bool >  ignore_covered_cards);
		::Dynamic a_star_dyn();

		void render();
		::Dynamic render_dyn();

		Bool out_of_bounds(Int x,Int y);
		::Dynamic out_of_bounds_dyn();

		Bool space_is_free(Int x,Int y, ::Dynamic ignored_entity);
		::Dynamic space_is_free_dyn();

		void update_player_turn();
		::Dynamic update_player_turn_dyn();

		void update_item_drag();
		::Dynamic update_item_drag_dyn();

		void update_player_visual();
		::Dynamic update_player_visual_dyn();

		void update_player_turn_result();
		::Dynamic update_player_turn_result_dyn();

		void update_enemy_visual();
		::Dynamic update_enemy_visual_dyn();

		void update_enemy_turn_result();
		::Dynamic update_enemy_turn_result_dyn();

		void update_card_flip();
		::Dynamic update_card_flip_dyn();

		void update();
		::Dynamic update_dyn();

};


#endif /* INCLUDED_Game */ 
