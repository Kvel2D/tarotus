// Generated by Haxe 3.3.0
#ifndef INCLUDED_Walls
#define INCLUDED_Walls

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Walls)



class HXCPP_CLASS_ATTRIBUTES Walls_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Walls_obj OBJ_;
		Walls_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Walls")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Walls"); }
		static hx::ObjectPtr< Walls_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Walls_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Walls","\x09","\x7c","\x4c","\x58"); }

		static void __boot();
		static ::Array< ::Dynamic> all;
		static ::Array< ::Dynamic> w1;
		static ::Array< ::Dynamic> w2;
		static ::Array< ::Dynamic> w3;
		static ::Array< ::Dynamic> w4;
		static ::Array< ::Dynamic> w5;
		static ::Array< ::Dynamic> w6;
		static ::Array< ::Dynamic> w7;
		static ::Array< ::Dynamic> w8;
		static ::Array< ::Dynamic> w9;
		static ::Array< ::Dynamic> w10;
		static ::Array< ::Dynamic> w11;
		static ::Array< ::Dynamic> w12;
		static ::Array< ::Dynamic> w13;
		static ::Array< ::Dynamic> w14;
		static ::Array< ::Dynamic> w15;
		static ::Array< ::Dynamic> w16;
		static ::Array< ::Dynamic> w17;
		static ::Array< ::Dynamic> w18;
		static ::Array< ::Dynamic> w19;
		static ::Array< ::Dynamic> w20;
		static ::Array< ::Dynamic> w21;
		static ::Array< ::Dynamic> w22;
		static ::Array< ::Dynamic> unmixed;
		static ::Array< ::Dynamic> reflect_horizontal(::Array< ::Dynamic> a);
		static ::Dynamic reflect_horizontal_dyn();

		static ::Array< ::Dynamic> reflect_vertical(::Array< ::Dynamic> a);
		static ::Dynamic reflect_vertical_dyn();

		static Bool same(::Array< ::Dynamic> a,::Array< ::Dynamic> b);
		static ::Dynamic same_dyn();

		static void generate();
		static ::Dynamic generate_dyn();

};


#endif /* INCLUDED_Walls */ 
