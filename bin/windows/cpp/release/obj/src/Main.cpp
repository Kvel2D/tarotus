// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MainState
#include <MainState.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif


void Main_obj::__construct(){
            	HX_STACK_FRAME("Main","new",0x6616a5cb,"Main.new","Main.hx",15,0x087e5c05)
            	HX_STACK_THIS(this)
HXLINE(  16)		::haxegon::Gfx_obj::resize_screen((int)1300,(int)1000,null());
HXLINE(  17)		::haxegon::Text_obj::setfont(HX_("Seraphimb1",0c,4c,db,ba),(int)30);
HXLINE(  19)		::haxegon::Gfx_obj::load_tiles(HX_("tiles",85,fd,34,10),(int)64,(int)64);
HXLINE(  20)		::haxegon::Gfx_obj::load_image(HX_("card",d0,1d,ba,41));
HXLINE(  22)		::Main_obj::game =  ::Game_obj::__new();
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

hx::ObjectPtr< Main_obj > Main_obj::__new()
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Main_obj::update(){
            	HX_STACK_FRAME("Main","update",0xb7afa57e,"Main.update","Main.hx",28,0x087e5c05)
            	HX_STACK_THIS(this)
HXLINE(  28)		::Main_obj::game->update();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,update,(void))

Int Main_obj::screen_width;

Int Main_obj::screen_height;

::hx::EnumBase Main_obj::state;

 ::Game Main_obj::game;


Main_obj::Main_obj()
{
}

hx::Val Main_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { outValue = game; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { outValue = state; return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { game=ioValue.Cast<  ::Game >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=ioValue.Cast< ::hx::EnumBase >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Main_obj::screen_width,HX_HCSTRING("screen_width","\xb3","\x91","\xd3","\x6e")},
	{hx::fsInt,(void *) &Main_obj::screen_height,HX_HCSTRING("screen_height","\x9a","\x63","\x9b","\x40")},
	{hx::fsObject /*::MainState*/ ,(void *) &Main_obj::state,HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsObject /*::Game*/ ,(void *) &Main_obj::game,HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Main_obj::screen_width,"screen_width");
	HX_MARK_MEMBER_NAME(Main_obj::screen_height,"screen_height");
	HX_MARK_MEMBER_NAME(Main_obj::state,"state");
	HX_MARK_MEMBER_NAME(Main_obj::game,"game");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Main_obj::screen_width,"screen_width");
	HX_VISIT_MEMBER_NAME(Main_obj::screen_height,"screen_height");
	HX_VISIT_MEMBER_NAME(Main_obj::state,"state");
	HX_VISIT_MEMBER_NAME(Main_obj::game,"game");
};

#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_HCSTRING("screen_width","\xb3","\x91","\xd3","\x6e"),
	HX_HCSTRING("screen_height","\x9a","\x63","\x9b","\x40"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("game","\xf2","\xf3","\x5e","\x44"),
	::String(null())
};

void Main_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACK_FRAME("Main","boot",0xe5d36c67,"Main.boot","Main.hx",10,0x087e5c05)
HXLINE(  10)		screen_width = (int)1300;
            	}
{
            	HX_STACK_FRAME("Main","boot",0xe5d36c67,"Main.boot","Main.hx",11,0x087e5c05)
HXLINE(  11)		screen_height = (int)1000;
            	}
{
            	HX_STACK_FRAME("Main","boot",0xe5d36c67,"Main.boot","Main.hx",12,0x087e5c05)
HXLINE(  12)		state = ::MainState_obj::MainState_Game_dyn();
            	}
}

