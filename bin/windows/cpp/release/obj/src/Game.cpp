// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_ArmorType
#include <ArmorType.h>
#endif
#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_CardType
#include <CardType.h>
#endif
#ifndef INCLUDED_ConsumableType
#include <ConsumableType.h>
#endif
#ifndef INCLUDED_Dude
#include <Dude.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_GameState
#include <GameState.h>
#endif
#ifndef INCLUDED_Item
#include <Item.h>
#endif
#ifndef INCLUDED_ItemType
#include <ItemType.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Walls
#include <Walls.h>
#endif
#ifndef INCLUDED_WeaponType
#include <WeaponType.h>
#endif
#ifndef INCLUDED_haxegon_Col
#include <haxegon/Col.h>
#endif
#ifndef INCLUDED_haxegon_Data
#include <haxegon/Data.h>
#endif
#ifndef INCLUDED_haxegon_GUI
#include <haxegon/GUI.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Input
#include <haxegon/Input.h>
#endif
#ifndef INCLUDED_haxegon_Key
#include <haxegon/Key.h>
#endif
#ifndef INCLUDED_haxegon_MathExtensions
#include <haxegon/MathExtensions.h>
#endif
#ifndef INCLUDED_haxegon_Mouse
#include <haxegon/Mouse.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif

static const Bool _hx_array_data_5[] = {
	0,1,0,0,0,
};
static const Bool _hx_array_data_6[] = {
	0,0,0,0,0,
};
static const Bool _hx_array_data_7[] = {
	0,1,0,1,0,
};
static const Bool _hx_array_data_8[] = {
	0,1,0,0,0,
};
static const Bool _hx_array_data_9[] = {
	0,0,0,0,0,
};
static const Bool _hx_array_data_10[] = {
	0,0,0,1,0,
};
static const Bool _hx_array_data_11[] = {
	0,0,0,0,0,
};
static const Bool _hx_array_data_12[] = {
	0,0,1,0,0,
};
static const Bool _hx_array_data_13[] = {
	0,0,0,0,0,
};
static const Float _hx_array_data_60[] = {
	(Float)0,16.,(Float)0,-16.,16.,(Float)0,
};
static const Float _hx_array_data_61[] = {
	(Float)0,8.,(Float)0,-8.,21.333333333333332,(Float)0,
};
static const Float _hx_array_data_62[] = {
	(Float)0,4.,(Float)0,-4.,16.,(Float)0,
};

void Game_obj::__construct(){
            	HX_STACK_FRAME("Game","new",0x79ba3204,"Game.new","Game.hx",37,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(  99)		this->history = ::Array_obj< ::Dynamic>::__new();
HXLINE(  93)		this->card_c = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< Bool >::fromData( _hx_array_data_5,5))->init(1,::Array_obj< Bool >::fromData( _hx_array_data_6,5))->init(2,::Array_obj< Bool >::fromData( _hx_array_data_7,5));
HXLINE(  87)		this->card_b = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< Bool >::fromData( _hx_array_data_8,5))->init(1,::Array_obj< Bool >::fromData( _hx_array_data_9,5))->init(2,::Array_obj< Bool >::fromData( _hx_array_data_10,5));
HXLINE(  81)		this->card_a = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< Bool >::fromData( _hx_array_data_11,5))->init(1,::Array_obj< Bool >::fromData( _hx_array_data_12,5))->init(2,::Array_obj< Bool >::fromData( _hx_array_data_13,5));
HXLINE(  79)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN(  79)		_hx_array_set_size_exact(this1,(int)5);
HXDLIN(  79)		this->inventory = this1;
HXLINE(  75)		this->card_update_timer = (int)10;
HXLINE(  72)		this->cards_uncovered = (int)0;
HXLINE(  71)		HX_VARI_NAME( ::Array< ::Dynamic>,this11,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN(  71)		_hx_array_set_size_exact(this11,(int)5);
HXDLIN(  71)		this->cards = this11;
HXLINE(  70)		this->walls = ::haxegon::Data_obj::bool_2dvector((int)15,(int)15,null());
HXLINE(  67)		this->message_time_left = (int)0;
HXLINE(  66)		this->message_text = HX_("",00,00,00,00);
HXLINE(  65)		this->hover_info = HX_("",00,00,00,00);
HXLINE(  64)		this->dragged_item = null();
HXLINE(  63)		this->drag_dy = (int)0;
HXLINE(  62)		this->drag_dx = (int)0;
HXLINE(  61)		this->flipped_card =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE(  56)		this->state_timer = (int)0;
HXLINE(  55)		this->state = ::GameState_obj::GameState_PlayerTurn_dyn();
HXLINE( 108)		::Walls_obj::generate();
HXLINE( 111)		::haxegon::Gfx_obj::create_image(HX_("card_front",ba,b9,93,03),(int)192,(int)320);
HXLINE( 112)		::haxegon::Gfx_obj::create_image(HX_("card_back",36,c6,d9,b3),(int)192,(int)320);
HXLINE( 113)		::haxegon::Gfx_obj::create_image(HX_("map_canvas",5b,27,f9,f9),(int)960,(int)960);
HXLINE( 115)		{
HXLINE( 115)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 115)			while((_g < (int)5)){
HXLINE( 115)				HX_VARI( Int,i) = _g++;
HXLINE( 116)				this->inventory->__unsafe_set(i,null());
            			}
            		}
HXLINE( 120)		{
HXLINE( 120)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 120)			HX_VARI_NAME( Int,_g2,"_g") = this->cards->length;
HXDLIN( 120)			while((_g1 < _g2)){
HXLINE( 120)				HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 121)				{
HXLINE( 121)					HX_VARI_NAME( ::Array< ::Dynamic>,this12,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 121)					_hx_array_set_size_exact(this12,(int)3);
HXDLIN( 121)					this->cards->__unsafe_set(i1,this12);
            				}
HXLINE( 123)				{
HXLINE( 123)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 123)					::Array< ::Dynamic> this2 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,i1)) );
HXDLIN( 123)					HX_VARI_NAME( Int,_g21,"_g2") = this2->length;
HXDLIN( 123)					while((_g3 < _g21)){
HXLINE( 123)						HX_VARI( Int,j) = _g3++;
HXLINE( 124)						{
HXLINE( 124)							::Array< ::Dynamic> this3 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,i1)) );
HXDLIN( 124)							this3->__unsafe_set(j, ::Card_obj::__new());
            						}
HXLINE( 125)						::Array< ::Dynamic> this4 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,i1)) );
HXDLIN( 125)						 ::Card _hx_tmp = ( ( ::Card)(_hx_array_unsafe_get(this4,j)) );
HXDLIN( 125)						_hx_tmp->x = i1;
HXLINE( 126)						::Array< ::Dynamic> this5 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,i1)) );
HXDLIN( 126)						 ::Card _hx_tmp1 = ( ( ::Card)(_hx_array_unsafe_get(this5,j)) );
HXDLIN( 126)						_hx_tmp1->y = j;
HXLINE( 128)						::Array< ::Dynamic> this6 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,i1)) );
HXDLIN( 128)						 ::Card _hx_tmp2 = ( ( ::Card)(_hx_array_unsafe_get(this6,j)) );
HXDLIN( 128)						_hx_tmp2->type = this->random_enum(hx::ClassOf< ::CardType >(),(int)1);
HXLINE( 129)						::Array< ::Dynamic> this7 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,i1)) );
HXDLIN( 129)						 ::Card _hx_tmp3 = ( ( ::Card)(_hx_array_unsafe_get(this7,j)) );
HXDLIN( 129)						_hx_tmp3->covered = true;
            					}
            				}
            			}
            		}
HXLINE( 132)		::Array< ::Dynamic> this8 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,(int)0)) );
HXDLIN( 132)		 ::Card _hx_tmp4 = ( ( ::Card)(_hx_array_unsafe_get(this8,(int)0)) );
HXDLIN( 132)		_hx_tmp4->covered = false;
HXLINE( 133)		this->cards_uncovered = (int)1;
HXLINE( 134)		::Array< ::Dynamic> this9 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,(int)0)) );
HXDLIN( 134)		 ::Card _hx_tmp5 = ( ( ::Card)(_hx_array_unsafe_get(this9,(int)0)) );
HXDLIN( 134)		_hx_tmp5->type = ::CardType_obj::CardType_None_dyn();
HXLINE( 136)		this->player =  ::Player_obj::__new();
HXLINE( 137)		this->player->x = (int)2;
HXLINE( 138)		this->player->y = (int)1;
HXLINE( 140)		{
HXLINE( 140)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 140)			while((_g4 < (int)5)){
HXLINE( 140)				HX_VARI( Int,x) = _g4++;
HXLINE( 141)				{
HXLINE( 141)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 141)					while((_g11 < (int)3)){
HXLINE( 141)						HX_VARI( Int,y) = _g11++;
HXLINE( 142)						::Array< ::Dynamic> this10 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,x)) );
HXDLIN( 142)						 ::Card _hx_tmp6 = ( ( ::Card)(_hx_array_unsafe_get(this10,y)) );
HXDLIN( 142)						this->generate_card(_hx_tmp6);
            					}
            				}
            			}
            		}
HXLINE( 146)		{
HXLINE( 146)			Int index = this->player->x;
HXDLIN( 146)			::Array< Bool > this111 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,index)) );
HXDLIN( 146)			Int index1 = this->player->y;
HXDLIN( 146)			this111->__unsafe_set(index1,false);
            		}
HXLINE( 147)		this->player->real_x = (this->player->x * (int)64);
HXLINE( 148)		this->player->real_y = (this->player->y * (int)64);
            	}

Dynamic Game_obj::__CreateEmpty() { return new Game_obj; }

hx::ObjectPtr< Game_obj > Game_obj::__new()
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Game_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic Game_obj::random_enum( ::Dynamic enum_type,hx::Null< Int >  __o_start_index){
Int start_index = __o_start_index.Default(0);
            	HX_STACK_FRAME("Game","random_enum",0xb865dfa1,"Game.random_enum","Game.hx",102,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(enum_type,"enum_type")
            	HX_STACK_ARG(start_index,"start_index")
HXLINE( 103)		Int to = (::Type_obj::allEnums(enum_type)->get_length() - (int)1);
HXDLIN( 103)		Int _hx_tmp = ((to - start_index) + (int)1);
HXDLIN( 103)		Float _hx_tmp1 = ::Math_obj::random();
HXDLIN( 103)		Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXDLIN( 103)		HX_VARI( Int,k) = (start_index + _hx_tmp2);
HXLINE( 104)		::cpp::VirtualArray _hx_tmp3 = ::Type_obj::allEnums(enum_type);
HXDLIN( 104)		return _hx_tmp3->__get(k);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Game_obj,random_enum,return )

void Game_obj::make_message(::String text){
            	HX_STACK_FRAME("Game","make_message",0xcfeab112,"Game.make_message","Game.hx",151,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(text,"text")
HXLINE( 152)		this->message_text = text;
HXLINE( 153)		this->message_time_left = (::Game_obj::message_fade_length * (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,make_message,(void))

void Game_obj::update_dude_info( ::Dude dude){
            	HX_STACK_FRAME("Game","update_dude_info",0x54ed04a1,"Game.update_dude_info","Game.hx",157,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dude,"dude")
HXLINE( 157)		::String _hx_tmp = ((((HX_("",00,00,00,00) + dude->name) + HX_("\n",0a,00,00,00)) + dude->hp) + HX_("/",2f,00,00,00));
HXDLIN( 157)		dude->info = (_hx_tmp + dude->hp_max);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,update_dude_info,(void))

::String Game_obj::serialize( ::Dynamic entity){
            	HX_STACK_FRAME("Game","serialize",0xc4979284,"Game.serialize","Game.hx",160,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(entity,"entity")
HXLINE( 161)		hx::Class _hx_tmp = ::Type_obj::getClass(entity);
HXDLIN( 161)		HX_VARI( ::Array< ::String >,fields) = ::Type_obj::getInstanceFields(_hx_tmp);
HXLINE( 162)		HX_VARI( ::String,fields_string) = HX_("",00,00,00,00);
HXLINE( 163)		{
HXLINE( 163)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 163)			while((_g < fields->length)){
HXLINE( 163)				HX_VARI( ::String,f) = fields->__get(_g);
HXDLIN( 163)				++_g;
HXLINE( 164)				 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(entity,f);
HXDLIN( 164)				HX_VARI( ::String,field) = ::Std_obj::string(_hx_tmp1);
HXLINE( 165)				Int _hx_tmp2 = field.indexOf(HX_("function",18,ab,52,14),null());
HXDLIN( 165)				if ((_hx_tmp2 != (int)-1)) {
HXLINE( 166)					continue;
            				}
HXLINE( 168)				::Array< ::String > _hx_tmp3 = field.split(HX_("_",5f,00,00,00));
HXDLIN( 168)				::String _hx_tmp4 = _hx_tmp3->__get((int)0);
HXDLIN( 168)				HX_VARI( hx::Class,enum_type) = ::Type_obj::resolveEnum(_hx_tmp4);
HXLINE( 169)				Bool _hx_tmp5 = hx::IsNotNull( enum_type );
HXDLIN( 169)				if (_hx_tmp5) {
HXLINE( 171)					HX_VARI( ::cpp::VirtualArray,enums) = ::Type_obj::allEnums(enum_type);
HXLINE( 172)					{
HXLINE( 172)						HX_VARI( Int,_g2) = (int)0;
HXDLIN( 172)						HX_VARI( Int,_g1) = enums->get_length();
HXDLIN( 172)						while((_g2 < _g1)){
HXLINE( 172)							HX_VARI( Int,i) = _g2++;
HXLINE( 173)							 ::Dynamic _hx_tmp6 = enums->__get(i);
HXDLIN( 173)							::String _hx_tmp7 = ::Std_obj::string(_hx_tmp6);
HXDLIN( 173)							if ((_hx_tmp7 == field)) {
HXLINE( 175)								::String _hx_tmp8 = (f + HX_("=",3d,00,00,00));
HXDLIN( 175)								::Array< ::String > _hx_tmp9 = field.split(HX_("_",5f,00,00,00));
HXDLIN( 175)								hx::AddEq(fields_string,((((_hx_tmp8 + _hx_tmp9->__get((int)0)) + HX_("_",5f,00,00,00)) + i) + HX_("|",7c,00,00,00)));
HXLINE( 176)								goto _hx_goto_15;
            							}
            						}
            						_hx_goto_15:;
            					}
            				}
            				else {
HXLINE( 180)					hx::AddEq(fields_string,(((f + HX_("=",3d,00,00,00)) + field) + HX_("|",7c,00,00,00)));
            				}
            			}
            		}
HXLINE( 183)		return fields_string;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,serialize,return )

void Game_obj::unserialize( ::Dynamic entity,::String fields_string){
            	HX_STACK_FRAME("Game","unserialize",0x656f8a0b,"Game.unserialize","Game.hx",186,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(entity,"entity")
            	HX_STACK_ARG(fields_string,"fields_string")
HXLINE( 187)		HX_VARI( ::Array< ::String >,fields) = fields_string.split(HX_("|",7c,00,00,00));
HXLINE( 188)		Int _hx_tmp = (fields->length - (int)1);
HXDLIN( 188)		fields->removeRange(_hx_tmp,(int)1);
HXLINE( 189)		{
HXLINE( 189)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 189)			while((_g < fields->length)){
HXLINE( 189)				HX_VARI( ::String,f) = fields->__get(_g);
HXDLIN( 189)				++_g;
HXLINE( 190)				HX_VARI( ::Array< ::String >,pair) = f.split(HX_("=",3d,00,00,00));
HXLINE( 191)				 ::EReg _hx_tmp1 =  ::EReg_obj::__new(HX_("^\\d+$",7f,2f,c6,5c),HX_("",00,00,00,00));
HXDLIN( 191)				::String _hx_tmp2 = pair->__get((int)0);
HXDLIN( 191)				Bool _hx_tmp3 = _hx_tmp1->match(_hx_tmp2);
HXDLIN( 191)				if (_hx_tmp3) {
HXLINE( 193)					::String _hx_tmp4 = pair->__get((int)0);
HXDLIN( 193)					::String _hx_tmp5 = pair->__get((int)1);
HXDLIN( 193)					Float _hx_tmp6 = ::Std_obj::parseFloat(_hx_tmp5);
HXDLIN( 193)					::Reflect_obj::setField(entity,_hx_tmp4,_hx_tmp6);
            				}
            				else {
HXLINE( 194)					Bool _hx_tmp7 = (pair->__get((int)1) == HX_("false",a3,35,4f,fb));
HXDLIN( 194)					if (_hx_tmp7) {
HXLINE( 196)						::String _hx_tmp8 = pair->__get((int)0);
HXDLIN( 196)						::Reflect_obj::setField(entity,_hx_tmp8,false);
            					}
            					else {
HXLINE( 197)						Bool _hx_tmp9 = (pair->__get((int)1) == HX_("true",4e,a7,03,4d));
HXDLIN( 197)						if (_hx_tmp9) {
HXLINE( 199)							::String _hx_tmp10 = pair->__get((int)0);
HXDLIN( 199)							::Reflect_obj::setField(entity,_hx_tmp10,true);
            						}
            						else {
HXLINE( 200)							::Array< ::String > _hx_tmp11 = pair->__get((int)1).split(HX_("_",5f,00,00,00));
HXDLIN( 200)							::String _hx_tmp12 = _hx_tmp11->__get((int)0);
HXDLIN( 200)							hx::Class _hx_tmp13 = ::Type_obj::resolveEnum(_hx_tmp12);
HXDLIN( 200)							Bool _hx_tmp14 = hx::IsNotNull( _hx_tmp13 );
HXDLIN( 200)							if (_hx_tmp14) {
HXLINE( 202)								::Array< ::String > _hx_tmp15 = pair->__get((int)1).split(HX_("_",5f,00,00,00));
HXDLIN( 202)								::String _hx_tmp16 = _hx_tmp15->__get((int)0);
HXDLIN( 202)								HX_VARI( hx::Class,enum_type) = ::Type_obj::resolveEnum(_hx_tmp16);
HXLINE( 203)								::Array< ::String > _hx_tmp17 = pair->__get((int)1).split(HX_("_",5f,00,00,00));
HXDLIN( 203)								::String _hx_tmp18 = _hx_tmp17->__get((int)1);
HXDLIN( 203)								HX_VARI(  ::Dynamic,enum_index) = ::Std_obj::parseInt(_hx_tmp18);
HXLINE( 204)								::cpp::VirtualArray _hx_tmp19 = ::Type_obj::allEnums(enum_type);
HXDLIN( 204)								HX_VARI(  ::Dynamic,enum_value) = _hx_tmp19->__get(enum_index);
HXLINE( 205)								::String _hx_tmp20 = pair->__get((int)0);
HXDLIN( 205)								::Reflect_obj::setField(entity,_hx_tmp20,enum_value);
            							}
            							else {
HXLINE( 208)								::String _hx_tmp21 = pair->__get((int)0);
HXDLIN( 208)								::String _hx_tmp22 = pair->__get((int)1);
HXDLIN( 208)								::Reflect_obj::setField(entity,_hx_tmp21,_hx_tmp22);
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Game_obj,unserialize,(void))

void Game_obj::generate_card( ::Card card){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Card,card) HXARGC(3)
            		 ::Dynamic _hx_run(Int card_x,Int card_y, ::Dynamic is_good){
            			HX_STACK_FRAME("Game","generate_card",0x5220f0fe,"Game.generate_card","Game.hx",222,0x56a4f9ec)
            			HX_STACK_ARG(card_x,"card_x")
            			HX_STACK_ARG(card_y,"card_y")
            			HX_STACK_ARG(is_good,"is_good")
HXLINE( 223)			HX_VARI(  ::Dynamic,out) =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),(int)0)
            				->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 224)			HX_VARI( Int,x_start) = (card->x * (int)3);
HXLINE( 225)			HX_VARI( Int,x_end) = (x_start + (int)3);
HXLINE( 226)			HX_VARI( Int,y_start) = (card->y * (int)5);
HXLINE( 227)			HX_VARI( Int,y_end) = (y_start + (int)5);
HXLINE( 229)			HX_VARI( Int,free_cell_amount) = (int)0;
HXLINE( 230)			{
HXLINE( 230)				HX_VARI_NAME( Int,_g11,"_g1") = x_start;
HXDLIN( 230)				while((_g11 < x_end)){
HXLINE( 230)					HX_VARI( Int,x) = _g11++;
HXLINE( 231)					{
HXLINE( 231)						HX_VARI( Int,_g3) = y_start;
HXDLIN( 231)						while((_g3 < y_end)){
HXLINE( 231)							HX_VARI( Int,y) = _g3++;
HXLINE( 232)							Bool _hx_tmp3 = ( (Bool)(is_good(x,y)) );
HXDLIN( 232)							if (_hx_tmp3) {
HXLINE( 233)								++free_cell_amount;
            							}
            						}
            					}
            				}
            			}
HXLINE( 238)			Int _hx_tmp4 = ((free_cell_amount - (int)1) + (int)1);
HXDLIN( 238)			Float _hx_tmp5 = ::Math_obj::random();
HXDLIN( 238)			HX_VARI_NAME( Int,k1,"k") = ::Math_obj::floor((_hx_tmp4 * _hx_tmp5));
HXLINE( 239)			HX_VARI_NAME( Int,i1,"i") = (int)0;
HXLINE( 240)			{
HXLINE( 240)				HX_VARI_NAME( Int,_g12,"_g1") = x_start;
HXDLIN( 240)				while((_g12 < x_end)){
HXLINE( 240)					HX_VARI_NAME( Int,x1,"x") = _g12++;
HXLINE( 241)					{
HXLINE( 241)						HX_VARI_NAME( Int,_g31,"_g3") = y_start;
HXDLIN( 241)						while((_g31 < y_end)){
HXLINE( 241)							HX_VARI_NAME( Int,y1,"y") = _g31++;
HXLINE( 242)							Bool _hx_tmp6 = ( (Bool)(is_good(x1,y1)) );
HXDLIN( 242)							if (_hx_tmp6) {
HXLINE( 243)								if ((i1 == k1)) {
HXLINE( 244)									out->__SetField(HX_("x",78,00,00,00),x1,hx::paccDynamic);
HXLINE( 245)									out->__SetField(HX_("y",79,00,00,00),y1,hx::paccDynamic);
HXLINE( 246)									return out;
            								}
HXLINE( 248)								++i1;
            							}
            						}
            					}
            				}
            			}
HXLINE( 253)			return out;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("Game","generate_card",0x5220f0fe,"Game.generate_card","Game.hx",213,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(card,"card")
HXLINE( 213)		HX_VARI(  ::Game,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 214)		Int _hx_tmp = ((::Walls_obj::all->length - (int)1) + (int)1);
HXDLIN( 214)		Float _hx_tmp1 = ::Math_obj::random();
HXDLIN( 214)		HX_VARI( Int,k) = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXLINE( 215)		HX_VARI( ::Array< ::Dynamic>,walls_preset) = ::Walls_obj::all->__get(k).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 216)		{
HXLINE( 216)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 216)			while((_g < (int)3)){
HXLINE( 216)				HX_VARI( Int,i) = _g++;
HXLINE( 217)				{
HXLINE( 217)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 217)					while((_g1 < (int)5)){
HXLINE( 217)						HX_VARI( Int,j) = _g1++;
HXLINE( 218)						{
HXLINE( 218)							Int index = ((card->x * (int)3) + i);
HXDLIN( 218)							::Array< Bool > this1 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,index)) );
HXDLIN( 218)							Int index1 = ((card->y * (int)5) + j);
HXDLIN( 218)							Int _hx_tmp2 = walls_preset->__get(i).StaticCast< ::Array< Int > >()->__get(j);
HXDLIN( 218)							this1->__unsafe_set(index1,(_hx_tmp2 == (int)1));
            						}
            					}
            				}
            			}
            		}
HXLINE( 222)		HX_VARI(  ::Dynamic,random_cell_in_card) =  ::Dynamic(new _hx_Closure_0(card));
HXLINE( 260)		HX_VARI( Bool,path_exists) = false;
HXLINE( 261)		while(!(path_exists)){
HXLINE( 262)			path_exists = true;
HXLINE( 264)			{
HXLINE( 264)				HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 264)				while((_g2 < (int)3)){
HXLINE( 264)					HX_VARI_NAME( Int,i2,"i") = _g2++;
HXLINE( 265)					if (!(path_exists)) {
HXLINE( 266)						goto _hx_goto_24;
            					}
HXLINE( 268)					{
HXLINE( 268)						HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 268)						while((_g13 < (int)5)){
HXLINE( 268)							HX_VARI_NAME( Int,j1,"j") = _g13++;
HXLINE( 269)							HX_VARI_NAME( Int,x2,"x") = ((card->x * (int)3) + i2);
HXLINE( 270)							HX_VARI_NAME( Int,y2,"y") = ((card->y * (int)5) + j1);
HXLINE( 271)							::Array< Bool > this2 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,x2)) );
HXDLIN( 271)							Bool _hx_tmp7 = ( (Bool)(_hx_array_unsafe_get(this2,y2)) );
HXDLIN( 271)							if (!(_hx_tmp7)) {
HXLINE( 272)								HX_VARI( ::Array< ::Dynamic>,path) = this->a_star(this->player->x,this->player->y,x2,y2,true);
HXLINE( 273)								if ((path->length == (int)0)) {
HXLINE( 274)									path_exists = false;
HXLINE( 275)									goto _hx_goto_25;
            								}
            							}
            						}
            						_hx_goto_25:;
            					}
            				}
            				_hx_goto_24:;
            			}
HXLINE( 281)			if (!(path_exists)) {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Game,_gthis) HXARGC(2)
            				Bool _hx_run(Int x3,Int y3){
            					HX_STACK_FRAME("Game","generate_card",0x5220f0fe,"Game.generate_card","Game.hx",282,0x56a4f9ec)
            					HX_STACK_ARG(x3,"x3")
            					HX_STACK_ARG(y3,"y3")
HXLINE( 282)					::Array< Bool > this3 = ( (::Array< Bool >)(_hx_array_unsafe_get(_gthis->walls,x3)) );
HXDLIN( 282)					return ( (Bool)(_hx_array_unsafe_get(this3,y3)) );
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE( 282)				HX_VARI(  ::Dynamic,random_wall) = random_cell_in_card(card->x,card->y, ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 283)				{
HXLINE( 283)					Int index2 = ( (Int)(random_wall->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 283)					::Array< Bool > this4 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,index2)) );
HXDLIN( 283)					Int index3 = ( (Int)(random_wall->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 283)					this4->__unsafe_set(index3,false);
            				}
            			}
            		}
HXLINE( 288)		if (hx::IsEq( card->type,::CardType_obj::CardType_Dude_dyn() )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Game,_gthis) HXARGC(2)
            			Bool _hx_run(Int x4,Int y4){
            				HX_STACK_FRAME("Game","generate_card",0x5220f0fe,"Game.generate_card","Game.hx",291,0x56a4f9ec)
            				HX_STACK_ARG(x4,"x4")
            				HX_STACK_ARG(y4,"y4")
HXLINE( 291)				::Array< Bool > this5 = ( (::Array< Bool >)(_hx_array_unsafe_get(_gthis->walls,x4)) );
HXDLIN( 291)				Bool _hx_tmp8 = ( (Bool)(_hx_array_unsafe_get(this5,y4)) );
HXDLIN( 291)				return !(_hx_tmp8);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 290)			HX_VARI(  ::Dude,dude) =  ::Dude_obj::__new();
HXLINE( 291)			HX_VARI(  ::Dynamic,free_cell) = random_cell_in_card(card->x,card->y, ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 292)			dude->x = ( (Int)(free_cell->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE( 293)			dude->y = ( (Int)(free_cell->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE( 294)			dude->real_x = (dude->x * (int)64);
HXLINE( 295)			dude->real_y = (dude->y * (int)64);
HXLINE( 296)			{
HXLINE( 296)				Int index4 = dude->x;
HXDLIN( 296)				::Array< Bool > this6 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,index4)) );
HXDLIN( 296)				Int index5 = dude->y;
HXDLIN( 296)				this6->__unsafe_set(index5,false);
            			}
HXLINE( 297)			this->update_dude_info(dude);
            		}
            		else {
HXLINE( 298)			if (hx::IsEq( card->type,::CardType_obj::CardType_Treasure_dyn() )) {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::Game,_gthis) HXARGC(2)
            				Bool _hx_run(Int x5,Int y5){
            					HX_STACK_FRAME("Game","generate_card",0x5220f0fe,"Game.generate_card","Game.hx",301,0x56a4f9ec)
            					HX_STACK_ARG(x5,"x5")
            					HX_STACK_ARG(y5,"y5")
HXLINE( 301)					::Array< Bool > this7 = ( (::Array< Bool >)(_hx_array_unsafe_get(_gthis->walls,x5)) );
HXDLIN( 301)					Bool _hx_tmp9 = ( (Bool)(_hx_array_unsafe_get(this7,y5)) );
HXDLIN( 301)					return !(_hx_tmp9);
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE( 300)				HX_VARI(  ::Item,item) =  ::Item_obj::__new();
HXLINE( 301)				HX_VARI_NAME(  ::Dynamic,free_cell1,"free_cell") = random_cell_in_card(card->x,card->y, ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 302)				item->x = ( (Int)(free_cell1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE( 303)				item->y = ( (Int)(free_cell1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE( 304)				item->type = this->random_enum(hx::ClassOf< ::ItemType >(),(int)1);
HXLINE( 306)				::String _hx_tmp10 = ::Std_obj::string(item->type);
HXDLIN( 306)				hx::AddEq(item->info,((HX_("\nI am ",13,c2,42,1d) + _hx_tmp10) + HX_("!",21,00,00,00)));
HXLINE( 308)				if (hx::IsEq( item->type,::ItemType_obj::ItemType_Consumable_dyn() )) {
HXLINE( 309)					item->consumable_type = this->random_enum(hx::ClassOf< ::ConsumableType >(),null());
HXLINE( 310)					item->value = (int)2;
HXLINE( 311)					item->tile = (int)8;
HXLINE( 312)					item->name = HX_("Potion",73,0f,04,33);
            				}
            				else {
HXLINE( 313)					if (hx::IsEq( item->type,::ItemType_obj::ItemType_Armor_dyn() )) {
HXLINE( 314)						item->armor_type = this->random_enum(hx::ClassOf< ::ArmorType >(),(int)1);
HXLINE( 315)						item->value = (int)5;
HXLINE( 316)						item->name = HX_("Armor",5f,1e,b9,b8);
HXLINE( 317)						{
HXLINE( 317)							Int _hx_tmp11 = ( ( ::hx::EnumBase)(item->armor_type) )->_hx_getIndex();
HXDLIN( 317)							switch((int)(_hx_tmp11)){
            								case (int)1: {
HXLINE( 318)									item->tile = (int)7;
            								}
            								break;
            								case (int)2: {
HXLINE( 320)									item->tile = (int)16;
            								}
            								break;
            								case (int)3: {
HXLINE( 319)									item->tile = (int)15;
            								}
            								break;
            								default:{
HXLINE( 321)									item->tile = (int)10;
            								}
            							}
            						}
            					}
            					else {
HXLINE( 323)						if (hx::IsEq( item->type,::ItemType_obj::ItemType_Weapon_dyn() )) {
HXLINE( 324)							item->weapon_type = this->random_enum(hx::ClassOf< ::WeaponType >(),(int)1);
HXLINE( 325)							item->name = HX_("Weapon",fc,0a,f8,30);
HXLINE( 326)							{
HXLINE( 326)								Int _hx_tmp12 = ( ( ::hx::EnumBase)(item->weapon_type) )->_hx_getIndex();
HXDLIN( 326)								switch((int)(_hx_tmp12)){
            									case (int)1: {
HXLINE( 327)										item->tile = (int)9;
            									}
            									break;
            									case (int)2: {
HXLINE( 328)										item->tile = (int)19;
            									}
            									break;
            									case (int)3: {
HXLINE( 329)										item->tile = (int)18;
            									}
            									break;
            									default:{
HXLINE( 330)										item->tile = (int)10;
            									}
            								}
            							}
            						}
            						else {
HXLINE( 332)							if (hx::IsEq( item->type,::ItemType_obj::ItemType_Arrows_dyn() )) {
HXLINE( 333)								Float _hx_tmp13 = ::Math_obj::random();
HXDLIN( 333)								Int _hx_tmp14 = ::Math_obj::floor(((int)5 * _hx_tmp13));
HXDLIN( 333)								item->amount = ((int)7 + _hx_tmp14);
HXLINE( 334)								item->tile = (int)14;
HXLINE( 335)								item->name = HX_("Arrows",aa,8a,8f,ec);
            							}
            						}
            					}
            				}
HXLINE( 337)				{
HXLINE( 337)					Int index6 = item->x;
HXDLIN( 337)					::Array< Bool > this8 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,index6)) );
HXDLIN( 337)					Int index7 = item->y;
HXDLIN( 337)					this8->__unsafe_set(index7,false);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,generate_card,(void))

::Array< ::Dynamic> Game_obj::a_star(Int x1,Int y1,Int x2,Int y2,hx::Null< Bool >  __o_ignore_covered_cards){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(4)
            		Int _hx_run(Int x11,Int y11,Int x21,Int y21){
            			HX_STACK_FRAME("Game","a_star",0x3c7e3c8c,"Game.a_star","Game.hx",343,0x56a4f9ec)
            			HX_STACK_ARG(x11,"x11")
            			HX_STACK_ARG(y11,"y11")
            			HX_STACK_ARG(x21,"x21")
            			HX_STACK_ARG(y21,"y21")
HXLINE( 343)			Float _hx_tmp = ::Math_obj::abs((x21 - x11));
HXDLIN( 343)			Float _hx_tmp1 = ::Math_obj::abs((y21 - y11));
HXDLIN( 343)			return ::Std_obj::_hx_int((_hx_tmp + _hx_tmp1));
            		}
            		HX_END_LOCAL_FUNC4(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< ::Dynamic> _hx_run(::Array< ::Dynamic> prev,Int x,Int y){
            			HX_STACK_FRAME("Game","a_star",0x3c7e3c8c,"Game.a_star","Game.hx",345,0x56a4f9ec)
            			HX_STACK_ARG(prev,"prev")
            			HX_STACK_ARG(x,"x")
            			HX_STACK_ARG(y,"y")
HXLINE( 346)			HX_VAR( Int,current_y);
HXDLIN( 346)			HX_VARI( Int,current_x) = x;
HXLINE( 341)			current_y = y;
HXLINE( 347)			HX_VAR( Int,temp_y);
HXDLIN( 347)			HX_VARI( Int,temp_x) = x;
HXLINE( 341)			temp_y = y;
HXLINE( 348)			HX_VARI_NAME( ::Array< ::Dynamic>,path1,"path") = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),x)
            				->setFixed(1,HX_("y",79,00,00,00),y)));
HXLINE( 349)			while(true){
HXLINE( 349)				::Array< ::Dynamic> this1 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(prev,current_x)) );
HXDLIN( 349)				 ::Dynamic _hx_tmp2 = _hx_array_unsafe_get(this1,current_y);
HXDLIN( 349)				if (!((( (Int)(_hx_tmp2->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) != (int)-1))) {
HXLINE( 349)					goto _hx_goto_26;
            				}
HXLINE( 341)				temp_x = current_x;
HXDLIN( 341)				temp_y = current_y;
HXLINE( 352)				::Array< ::Dynamic> this2 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(prev,temp_x)) );
HXDLIN( 352)				 ::Dynamic _hx_tmp3 = _hx_array_unsafe_get(this2,temp_y);
HXLINE( 341)				current_x = ( (Int)(_hx_tmp3->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE( 353)				::Array< ::Dynamic> this3 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(prev,temp_x)) );
HXDLIN( 353)				 ::Dynamic _hx_tmp4 = _hx_array_unsafe_get(this3,temp_y);
HXLINE( 341)				current_y = ( (Int)(_hx_tmp4->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE( 354)				path1->push( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("x",78,00,00,00),current_x)
            					->setFixed(1,HX_("y",79,00,00,00),current_y)));
            			}
            			_hx_goto_26:;
HXLINE( 356)			return path1;
            		}
            		HX_END_LOCAL_FUNC3(return)

Bool ignore_covered_cards = __o_ignore_covered_cards.Default(false);
            	HX_STACK_FRAME("Game","a_star",0x3c7e3c8c,"Game.a_star","Game.hx",341,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(ignore_covered_cards,"ignore_covered_cards")
HXLINE( 342)		HX_VARI(  ::Dynamic,heuristic_score) =  ::Dynamic(new _hx_Closure_0());
HXLINE( 345)		HX_VARI(  ::Dynamic,path) =  ::Dynamic(new _hx_Closure_1());
HXLINE( 359)		HX_VARI( ::Array< ::Dynamic>,move_map) = ::haxegon::Data_obj::bool_2dvector((int)15,(int)15,true);
HXLINE( 360)		{
HXLINE( 360)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 360)			HX_VARI( ::cpp::VirtualArray,_g1) = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN( 360)			while((_g < _g1->get_length())){
HXLINE( 360)				HX_VARI(  ::Dynamic,dude) = _g1->__get(_g);
HXDLIN( 360)				++_g;
HXLINE( 361)				{
HXLINE( 361)					Int index = ( (Int)(( ::Dynamic(dude->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) +  ::Dynamic(dude->__Field(HX_("dx",94,57,00,00),hx::paccDynamic)))) );
HXDLIN( 361)					::Array< Bool > this4 = ( (::Array< Bool >)(_hx_array_unsafe_get(move_map,index)) );
HXDLIN( 361)					Int index1 = ( (Int)(( ::Dynamic(dude->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) +  ::Dynamic(dude->__Field(HX_("dy",95,57,00,00),hx::paccDynamic)))) );
HXDLIN( 361)					this4->__unsafe_set(index1,false);
            				}
            			}
            		}
HXLINE( 363)		{
HXLINE( 363)			::Array< Bool > this5 = ( (::Array< Bool >)(_hx_array_unsafe_get(move_map,x1)) );
HXDLIN( 363)			this5->__unsafe_set(y1,false);
            		}
HXLINE( 364)		{
HXLINE( 364)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 364)			while((_g2 < (int)15)){
HXLINE( 364)				HX_VARI_NAME( Int,x3,"x") = _g2++;
HXLINE( 365)				{
HXLINE( 365)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 365)					while((_g11 < (int)15)){
HXLINE( 365)						HX_VARI_NAME( Int,y3,"y") = _g11++;
HXLINE( 366)						::Array< Bool > this6 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,x3)) );
HXDLIN( 366)						Bool _hx_tmp5 = ( (Bool)(_hx_array_unsafe_get(this6,y3)) );
HXDLIN( 366)						if (_hx_tmp5) {
HXLINE( 367)							::Array< Bool > this7 = ( (::Array< Bool >)(_hx_array_unsafe_get(move_map,x3)) );
HXDLIN( 367)							this7->__unsafe_set(y3,false);
            						}
            					}
            				}
            			}
            		}
HXLINE( 371)		if (!(ignore_covered_cards)) {
HXLINE( 372)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 372)			while((_g3 < (int)5)){
HXLINE( 372)				HX_VARI_NAME( Int,x4,"x") = _g3++;
HXLINE( 373)				{
HXLINE( 373)					HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 373)					while((_g12 < (int)3)){
HXLINE( 373)						HX_VARI_NAME( Int,y4,"y") = _g12++;
HXLINE( 374)						::Array< ::Dynamic> this8 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,x4)) );
HXDLIN( 374)						 ::Card _hx_tmp6 = ( ( ::Card)(_hx_array_unsafe_get(this8,y4)) );
HXDLIN( 374)						Bool _hx_tmp7 = _hx_tmp6->covered;
HXDLIN( 374)						if (_hx_tmp7) {
HXLINE( 375)							HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 375)							while((_g21 < (int)3)){
HXLINE( 375)								HX_VARI_NAME( Int,x22,"x2") = _g21++;
HXLINE( 376)								{
HXLINE( 376)									HX_VARI_NAME( Int,_g31,"_g3") = (int)0;
HXDLIN( 376)									while((_g31 < (int)5)){
HXLINE( 376)										HX_VARI_NAME( Int,y22,"y2") = _g31++;
HXLINE( 377)										{
HXLINE( 377)											::Array< Bool > this9 = ( (::Array< Bool >)(_hx_array_unsafe_get(move_map,((x4 * (int)3) + x22))) );
HXDLIN( 377)											this9->__unsafe_set(((y4 * (int)5) + y22),false);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 385)		HX_VARI( ::Array< ::Dynamic>,closed) = ::haxegon::Data_obj::bool_2dvector((int)15,(int)15,false);
HXLINE( 386)		HX_VARI( ::Array< ::Dynamic>,open) = ::haxegon::Data_obj::bool_2dvector((int)15,(int)15,false);
HXLINE( 387)		{
HXLINE( 387)			::Array< Bool > this10 = ( (::Array< Bool >)(_hx_array_unsafe_get(open,x1)) );
HXDLIN( 387)			this10->__unsafe_set(y1,true);
            		}
HXLINE( 388)		{
HXLINE( 388)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 388)			while((_g4 < (int)5)){
HXLINE( 388)				HX_VARI_NAME( Int,x5,"x") = _g4++;
HXLINE( 389)				{
HXLINE( 389)					HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 389)					while((_g13 < (int)3)){
HXLINE( 389)						HX_VARI_NAME( Int,y5,"y") = _g13++;
HXLINE( 390)						::Array< Bool > this11 = ( (::Array< Bool >)(_hx_array_unsafe_get(move_map,x5)) );
HXDLIN( 390)						Bool _hx_tmp8 = ( (Bool)(_hx_array_unsafe_get(this11,y5)) );
HXDLIN( 390)						if (!(_hx_tmp8)) {
HXLINE( 391)							::Array< Bool > this12 = ( (::Array< Bool >)(_hx_array_unsafe_get(open,x5)) );
HXDLIN( 391)							this12->__unsafe_set(y5,false);
            						}
            					}
            				}
            			}
            		}
HXLINE( 395)		HX_VARI( Int,open_length) = (int)1;
HXLINE( 396)		HX_VARI_NAME( ::Array< ::Dynamic>,this13,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 396)		_hx_array_set_size_exact(this13,(int)15);
HXDLIN( 396)		HX_VARI_NAME( ::Array< ::Dynamic>,prev1,"prev") = this13;
HXLINE( 397)		{
HXLINE( 397)			HX_VARI_NAME( Int,_g5,"_g") = (int)0;
HXDLIN( 397)			while((_g5 < (int)15)){
HXLINE( 397)				HX_VARI_NAME( Int,x6,"x") = _g5++;
HXLINE( 398)				{
HXLINE( 398)					HX_VARI_NAME( ::Array< ::Dynamic>,this14,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 398)					_hx_array_set_size_exact(this14,(int)15);
HXDLIN( 398)					prev1->__unsafe_set(x6,this14);
            				}
HXLINE( 399)				{
HXLINE( 399)					HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN( 399)					while((_g14 < (int)15)){
HXLINE( 399)						HX_VARI_NAME( Int,y6,"y") = _g14++;
HXLINE( 400)						{
HXLINE( 400)							::Array< ::Dynamic> this15 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(prev1,x6)) );
HXDLIN( 400)							this15->__unsafe_set(y6, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),(int)-1)
            								->setFixed(1,HX_("y",79,00,00,00),(int)-1)));
            						}
            					}
            				}
            			}
            		}
HXLINE( 404)		HX_VARI( ::Array< ::Dynamic>,g_score) = ::haxegon::Data_obj::int_2dvector((int)15,(int)15,(int)10000000);
HXLINE( 405)		{
HXLINE( 405)			::Array< Int > this16 = ( (::Array< Int >)(_hx_array_unsafe_get(g_score,x1)) );
HXDLIN( 405)			this16->__unsafe_set(y1,(int)0);
            		}
HXLINE( 406)		HX_VARI( ::Array< ::Dynamic>,f_score) = ::haxegon::Data_obj::int_2dvector((int)15,(int)15,(int)10000000);
HXLINE( 408)		{
HXLINE( 408)			::Array< Int > this17 = ( (::Array< Int >)(_hx_array_unsafe_get(f_score,x1)) );
HXDLIN( 408)			Int val = ( (Int)(heuristic_score(x1,y1,x2,y2)) );
HXDLIN( 408)			this17->__unsafe_set(y1,val);
            		}
HXLINE( 410)		while((open_length != (int)0)){
HXLINE( 412)			HX_VARI( Int,lowest_score) = (int)10000000;
HXLINE( 413)			HX_VARI(  ::Dynamic,lowest_node) =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),x1)
            				->setFixed(1,HX_("y",79,00,00,00),y1));
HXLINE( 414)			{
HXLINE( 414)				HX_VARI_NAME( Int,_g6,"_g") = (int)0;
HXDLIN( 414)				while((_g6 < (int)15)){
HXLINE( 414)					HX_VARI_NAME( Int,x7,"x") = _g6++;
HXLINE( 415)					{
HXLINE( 415)						HX_VARI_NAME( Int,_g15,"_g1") = (int)0;
HXDLIN( 415)						while((_g15 < (int)15)){
HXLINE( 415)							HX_VARI_NAME( Int,y7,"y") = _g15++;
HXLINE( 416)							Bool _hx_tmp9;
HXDLIN( 416)							::Array< Bool > this18 = ( (::Array< Bool >)(_hx_array_unsafe_get(open,x7)) );
HXDLIN( 416)							Bool _hx_tmp10 = ( (Bool)(_hx_array_unsafe_get(this18,y7)) );
HXDLIN( 416)							if (_hx_tmp10) {
HXLINE( 416)								::Array< Int > this19 = ( (::Array< Int >)(_hx_array_unsafe_get(f_score,x7)) );
HXDLIN( 416)								Int _hx_tmp11 = ( (Int)(_hx_array_unsafe_get(this19,y7)) );
HXDLIN( 416)								_hx_tmp9 = (_hx_tmp11 <= lowest_score);
            							}
            							else {
HXLINE( 416)								_hx_tmp9 = false;
            							}
HXDLIN( 416)							if (_hx_tmp9) {
HXLINE( 417)								lowest_node->__SetField(HX_("x",78,00,00,00),x7,hx::paccDynamic);
HXLINE( 418)								lowest_node->__SetField(HX_("y",79,00,00,00),y7,hx::paccDynamic);
HXLINE( 419)								::Array< Int > this20 = ( (::Array< Int >)(_hx_array_unsafe_get(f_score,x7)) );
HXDLIN( 419)								lowest_score = ( (Int)(_hx_array_unsafe_get(this20,y7)) );
            							}
            						}
            					}
            				}
            			}
HXLINE( 426)			Bool _hx_tmp12;
HXDLIN( 426)			if ((( (Int)(lowest_node->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) == x2)) {
HXLINE( 426)				_hx_tmp12 = (( (Int)(lowest_node->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) == y2);
            			}
            			else {
HXLINE( 426)				_hx_tmp12 = false;
            			}
HXDLIN( 426)			if (_hx_tmp12) {
HXLINE( 427)				return ( (::Array< ::Dynamic>)(path(prev1, ::Dynamic(lowest_node->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(lowest_node->__Field(HX_("y",79,00,00,00),hx::paccDynamic)))) );
            			}
HXLINE( 430)			{
HXLINE( 430)				Int index2 = ( (Int)(lowest_node->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 430)				::Array< Bool > this21 = ( (::Array< Bool >)(_hx_array_unsafe_get(open,index2)) );
HXDLIN( 430)				Int index3 = ( (Int)(lowest_node->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 430)				this21->__unsafe_set(index3,false);
            			}
HXLINE( 431)			--open_length;
HXLINE( 432)			{
HXLINE( 432)				Int index4 = ( (Int)(lowest_node->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 432)				::Array< Bool > this22 = ( (::Array< Bool >)(_hx_array_unsafe_get(closed,index4)) );
HXDLIN( 432)				Int index5 = ( (Int)(lowest_node->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 432)				this22->__unsafe_set(index5,true);
            			}
HXLINE( 433)			{
HXLINE( 433)				HX_VARI_NAME( Int,_g7,"_g") = (int)-1;
HXDLIN( 433)				while((_g7 < (int)2)){
HXLINE( 433)					HX_VARI( Int,dx) = _g7++;
HXLINE( 434)					{
HXLINE( 434)						HX_VARI_NAME( Int,_g16,"_g1") = (int)-1;
HXDLIN( 434)						while((_g16 < (int)2)){
HXLINE( 434)							HX_VARI( Int,dy) = _g16++;
HXLINE( 435)							Float _hx_tmp13 = ::Math_obj::abs(dx);
HXDLIN( 435)							Float _hx_tmp14 = ::Math_obj::abs(dy);
HXDLIN( 435)							if (((_hx_tmp13 + _hx_tmp14) != (int)1)) {
HXLINE( 436)								continue;
            							}
HXLINE( 438)							Int _hx_tmp15 = (( (Int)(lowest_node->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + dx);
HXDLIN( 438)							HX_VARI( Int,neighbor_x) = ::Std_obj::_hx_int(_hx_tmp15);
HXLINE( 439)							Int _hx_tmp16 = (( (Int)(lowest_node->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + dy);
HXDLIN( 439)							HX_VARI( Int,neighbor_y) = ::Std_obj::_hx_int(_hx_tmp16);
HXLINE( 440)							Bool _hx_tmp17;
HXDLIN( 440)							Bool _hx_tmp18 = !(this->out_of_bounds(neighbor_x,neighbor_y));
HXDLIN( 440)							if (_hx_tmp18) {
HXLINE( 440)								::Array< Bool > this23 = ( (::Array< Bool >)(_hx_array_unsafe_get(move_map,neighbor_x)) );
HXDLIN( 440)								Bool _hx_tmp19 = ( (Bool)(_hx_array_unsafe_get(this23,neighbor_y)) );
HXDLIN( 440)								_hx_tmp17 = !(_hx_tmp19);
            							}
            							else {
HXLINE( 440)								_hx_tmp17 = true;
            							}
HXDLIN( 440)							if (_hx_tmp17) {
HXLINE( 441)								continue;
            							}
HXLINE( 444)							::Array< Bool > this24 = ( (::Array< Bool >)(_hx_array_unsafe_get(closed,neighbor_x)) );
HXDLIN( 444)							Bool _hx_tmp20 = ( (Bool)(_hx_array_unsafe_get(this24,neighbor_y)) );
HXDLIN( 444)							if (_hx_tmp20) {
HXLINE( 445)								continue;
            							}
HXLINE( 447)							Int index6 = ( (Int)(lowest_node->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 447)							::Array< Int > this25 = ( (::Array< Int >)(_hx_array_unsafe_get(g_score,index6)) );
HXDLIN( 447)							Int index7 = ( (Int)(lowest_node->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 447)							Int _hx_tmp21 = ( (Int)(_hx_array_unsafe_get(this25,index7)) );
HXDLIN( 447)							HX_VARI( Int,tentative_g_score) = (_hx_tmp21 + (int)1);
HXLINE( 448)							::Array< Bool > this26 = ( (::Array< Bool >)(_hx_array_unsafe_get(open,neighbor_x)) );
HXDLIN( 448)							Bool _hx_tmp22 = ( (Bool)(_hx_array_unsafe_get(this26,neighbor_y)) );
HXDLIN( 448)							if (!(_hx_tmp22)) {
HXLINE( 449)								{
HXLINE( 449)									::Array< Bool > this27 = ( (::Array< Bool >)(_hx_array_unsafe_get(open,neighbor_x)) );
HXDLIN( 449)									this27->__unsafe_set(neighbor_y,true);
            								}
HXLINE( 450)								++open_length;
            							}
            							else {
HXLINE( 451)								::Array< Int > this28 = ( (::Array< Int >)(_hx_array_unsafe_get(g_score,neighbor_x)) );
HXDLIN( 451)								Int _hx_tmp23 = ( (Int)(_hx_array_unsafe_get(this28,neighbor_y)) );
HXDLIN( 451)								if ((tentative_g_score >= _hx_tmp23)) {
HXLINE( 452)									continue;
            								}
            							}
HXLINE( 455)							::Array< ::Dynamic> this29 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(prev1,neighbor_x)) );
HXDLIN( 455)							 ::Dynamic _hx_tmp24 = _hx_array_unsafe_get(this29,neighbor_y);
HXDLIN( 455)							_hx_tmp24->__SetField(HX_("x",78,00,00,00),( (Int)(lowest_node->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ),hx::paccDynamic);
HXLINE( 456)							::Array< ::Dynamic> this30 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(prev1,neighbor_x)) );
HXDLIN( 456)							 ::Dynamic _hx_tmp25 = _hx_array_unsafe_get(this30,neighbor_y);
HXDLIN( 456)							_hx_tmp25->__SetField(HX_("y",79,00,00,00),( (Int)(lowest_node->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ),hx::paccDynamic);
HXLINE( 457)							{
HXLINE( 457)								::Array< Int > this31 = ( (::Array< Int >)(_hx_array_unsafe_get(g_score,neighbor_x)) );
HXDLIN( 457)								this31->__unsafe_set(neighbor_y,tentative_g_score);
            							}
HXLINE( 458)							{
HXLINE( 458)								::Array< Int > this32 = ( (::Array< Int >)(_hx_array_unsafe_get(f_score,neighbor_x)) );
HXDLIN( 458)								::Array< Int > this33 = ( (::Array< Int >)(_hx_array_unsafe_get(g_score,neighbor_x)) );
HXDLIN( 458)								Int _hx_tmp26 = ( (Int)(_hx_array_unsafe_get(this33,neighbor_y)) );
HXDLIN( 458)								Int _hx_tmp27 = ( (Int)(heuristic_score(neighbor_x,neighbor_y,x2,y2)) );
HXDLIN( 458)								this32->__unsafe_set(neighbor_y,(_hx_tmp26 + _hx_tmp27));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 462)		return ::Array_obj< ::Dynamic>::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC5(Game_obj,a_star,return )

void Game_obj::render(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		void _hx_run(Float x,Float y, ::Item item){
            			HX_STACK_FRAME("Game","render",0x799ca832,"Game.render","Game.hx",466,0x56a4f9ec)
            			HX_STACK_ARG(x,"x")
            			HX_STACK_ARG(y,"y")
            			HX_STACK_ARG(item,"item")
HXLINE( 467)			::haxegon::Gfx_obj::draw_tile(x,y,item->tile);
HXLINE( 468)			::haxegon::Text_obj::display(x,y,item->name,null());
HXLINE( 469)			if (hx::IsEq( item->type,::ItemType_obj::ItemType_Arrows_dyn() )) {
HXLINE( 470)				Float _hx_tmp = (x + ((Float)6.4));
HXDLIN( 470)				Float _hx_tmp1 = (y + ((Float)32.));
HXDLIN( 470)				::String _hx_tmp2 = (HX_("",00,00,00,00) + item->amount);
HXDLIN( 470)				::haxegon::Text_obj::display(_hx_tmp,_hx_tmp1,_hx_tmp2,null());
            			}
            		}
            		HX_END_LOCAL_FUNC3((void))

            	HX_STACK_FRAME("Game","render",0x799ca832,"Game.render","Game.hx",465,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE( 466)		HX_VARI(  ::Dynamic,draw_item) =  ::Dynamic(new _hx_Closure_0());
HXLINE( 474)		{
HXLINE( 474)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 474)			while((_g < (int)15)){
HXLINE( 474)				HX_VARI_NAME( Int,x1,"x") = _g++;
HXLINE( 475)				{
HXLINE( 475)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 475)					while((_g1 < (int)15)){
HXLINE( 475)						HX_VARI_NAME( Int,y1,"y") = _g1++;
HXLINE( 476)						::Array< Bool > this1 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,x1)) );
HXDLIN( 476)						Bool _hx_tmp3 = ( (Bool)(_hx_array_unsafe_get(this1,y1)) );
HXDLIN( 476)						if (_hx_tmp3) {
HXLINE( 477)							::haxegon::Gfx_obj::draw_tile((x1 * (int)64),(y1 * (int)64),(int)1);
            						}
            						else {
HXLINE( 479)							::haxegon::Gfx_obj::draw_tile((x1 * (int)64),(y1 * (int)64),(int)2);
            						}
            					}
            				}
            			}
            		}
HXLINE( 492)		::haxegon::Gfx_obj::line_thickness = (int)7;
HXLINE( 493)		{
HXLINE( 493)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 493)			while((_g2 < (int)5)){
HXLINE( 493)				HX_VARI_NAME( Int,x2,"x") = _g2++;
HXLINE( 494)				::haxegon::Gfx_obj::draw_line(((x2 * (int)3) * (int)64),(int)0,((x2 * (int)3) * (int)64),(int)640,::haxegon::Col_obj::NIGHTBLUE,null());
            			}
            		}
HXLINE( 496)		{
HXLINE( 496)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 496)			while((_g3 < (int)3)){
HXLINE( 496)				HX_VARI_NAME( Int,y2,"y") = _g3++;
HXLINE( 497)				::haxegon::Gfx_obj::draw_line((int)0,((y2 * (int)5) * (int)64),(int)768,((y2 * (int)5) * (int)64),::haxegon::Col_obj::NIGHTBLUE,null());
            			}
            		}
HXLINE( 499)		::haxegon::Gfx_obj::line_thickness = (int)1;
HXLINE( 501)		{
HXLINE( 501)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 501)			HX_VARI_NAME( ::cpp::VirtualArray,_g11,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Item >());
HXDLIN( 501)			while((_g4 < _g11->get_length())){
HXLINE( 501)				HX_VARI_NAME(  ::Dynamic,item1,"item") = _g11->__get(_g4);
HXDLIN( 501)				++_g4;
HXLINE( 502)				 ::Dynamic _hx_tmp4 =  ::Dynamic(item1->__Field(HX_("on_ground",e7,c4,f8,94),hx::paccDynamic));
HXDLIN( 502)				if (( (Bool)(_hx_tmp4) )) {
HXLINE( 503)					Float _hx_tmp5 = ( ::Dynamic(item1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) * (int)64);
HXDLIN( 503)					Float _hx_tmp6 = ( ::Dynamic(item1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) * (int)64);
HXDLIN( 503)					draw_item(_hx_tmp5,_hx_tmp6,item1);
            				}
            			}
            		}
HXLINE( 506)		{
HXLINE( 506)			HX_VARI_NAME( Int,_g5,"_g") = (int)0;
HXDLIN( 506)			while((_g5 < (int)5)){
HXLINE( 506)				HX_VARI( Int,i) = _g5++;
HXLINE( 507)				::haxegon::Gfx_obj::draw_box((int)1000,((int)64 + (i * (int)64)),(int)64,(int)64,::haxegon::Col_obj::WHITE,null());
HXLINE( 508)				Bool _hx_tmp7 = hx::IsNotNull( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i)) ) );
HXDLIN( 508)				if (_hx_tmp7) {
HXLINE( 509)					draw_item((int)1000,((int)64 + (i * (int)64)),( ( ::Item)(_hx_array_unsafe_get(this->inventory,i)) ));
            				}
            			}
            		}
HXLINE( 513)		::haxegon::Gfx_obj::draw_tile(this->player->real_x,this->player->real_y,(int)0);
HXLINE( 515)		{
HXLINE( 515)			HX_VARI_NAME( Int,_g6,"_g") = (int)0;
HXDLIN( 515)			HX_VARI_NAME( ::cpp::VirtualArray,_g12,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN( 515)			while((_g6 < _g12->get_length())){
HXLINE( 515)				HX_VARI(  ::Dynamic,dude) = _g12->__get(_g6);
HXDLIN( 515)				++_g6;
HXLINE( 516)				Bool _hx_tmp8 = !(( (Bool)(dude->__Field(HX_("dead",a4,4e,66,42),hx::paccDynamic)) ));
HXDLIN( 516)				if (_hx_tmp8) {
HXLINE( 517)					::haxegon::Gfx_obj::draw_tile( ::Dynamic(dude->__Field(HX_("real_x",17,b2,97,fc),hx::paccDynamic)), ::Dynamic(dude->__Field(HX_("real_y",18,b2,97,fc),hx::paccDynamic)),(int)3);
HXLINE( 518)					 ::Dynamic _hx_tmp9 =  ::Dynamic(dude->__Field(HX_("real_x",17,b2,97,fc),hx::paccDynamic));
HXDLIN( 518)					 ::Dynamic _hx_tmp10 =  ::Dynamic(dude->__Field(HX_("real_y",18,b2,97,fc),hx::paccDynamic));
HXDLIN( 518)					::String _hx_tmp11 = ::Std_obj::string( ::Dynamic(dude->__Field(HX_("hp",08,5b,00,00),hx::paccDynamic)));
HXDLIN( 518)					::String _hx_tmp12 = ((HX_("",00,00,00,00) + _hx_tmp11) + HX_("/",2f,00,00,00));
HXDLIN( 518)					::String _hx_tmp13 = ::Std_obj::string( ::Dynamic(dude->__Field(HX_("hp_max",ad,ce,1c,51),hx::paccDynamic)));
HXDLIN( 518)					::haxegon::Text_obj::display(_hx_tmp9,_hx_tmp10,(_hx_tmp12 + _hx_tmp13),::haxegon::Col_obj::WHITE);
            				}
            			}
            		}
HXLINE( 522)		{
HXLINE( 522)			HX_VARI_NAME( Int,_g7,"_g") = (int)0;
HXDLIN( 522)			while((_g7 < (int)5)){
HXLINE( 522)				HX_VARI_NAME( Int,x3,"x") = _g7++;
HXLINE( 523)				{
HXLINE( 523)					HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 523)					while((_g13 < (int)3)){
HXLINE( 523)						HX_VARI_NAME( Int,y3,"y") = _g13++;
HXLINE( 524)						::Array< ::Dynamic> this2 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,x3)) );
HXDLIN( 524)						 ::Card _hx_tmp14 = ( ( ::Card)(_hx_array_unsafe_get(this2,y3)) );
HXDLIN( 524)						Bool _hx_tmp15 = _hx_tmp14->covered;
HXDLIN( 524)						if (_hx_tmp15) {
HXLINE( 526)							{
HXLINE( 526)								::Array< ::Dynamic> this3 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,x3)) );
HXDLIN( 526)								 ::Card _hx_tmp16 = ( ( ::Card)(_hx_array_unsafe_get(this3,y3)) );
HXDLIN( 526)								Int _hx_tmp17 = ( ( ::hx::EnumBase)(_hx_tmp16->type) )->_hx_getIndex();
HXDLIN( 526)								switch((int)(_hx_tmp17)){
            									case (int)0: {
            									}
            									break;
            									case (int)1: {
            									}
            									break;
            									case (int)2: {
            									}
            									break;
            									case (int)3: {
            									}
            									break;
            								}
            							}
HXLINE( 536)							::haxegon::Gfx_obj::draw_image(((x3 * (int)3) * (int)64),((y3 * (int)5) * (int)64),HX_("card",d0,1d,ba,41));
            						}
            					}
            				}
            			}
            		}
HXLINE( 542)		Bool _hx_tmp18 = hx::IsNotNull( this->dragged_item );
HXDLIN( 542)		if (_hx_tmp18) {
HXLINE( 543)			Int _hx_tmp19 = (::haxegon::Mouse_obj::x - this->drag_dx);
HXDLIN( 543)			Int _hx_tmp20 = (::haxegon::Mouse_obj::y - this->drag_dy);
HXDLIN( 543)			draw_item(_hx_tmp19,_hx_tmp20,this->dragged_item);
            		}
HXLINE( 546)		::haxegon::Text_obj::display((int)1000,(int)0,(HX_("",00,00,00,00) + ::haxegon::Gfx_obj::render_fps()),null());
HXLINE( 547)		::String _hx_tmp21 = ::Std_obj::string(this->state);
HXDLIN( 547)		::haxegon::Text_obj::display((int)1000,(int)30,(HX_("",00,00,00,00) + _hx_tmp21),null());
HXLINE( 549)		::String _hx_tmp22 = (HX_("Health: ",62,76,08,c3) + this->player->hp);
HXDLIN( 549)		::haxegon::Text_obj::display((int)1000,(int)500,_hx_tmp22,null());
HXLINE( 550)		::String _hx_tmp23 = (HX_("Armor: ",c5,e6,04,30) + this->player->armor);
HXDLIN( 550)		::haxegon::Text_obj::display((int)1000,(int)540,_hx_tmp23,null());
HXLINE( 551)		::haxegon::Text_obj::display((int)1000,(int)600,this->hover_info,null());
HXLINE( 555)		Bool _hx_tmp24 = (this->message_time_left > (int)0);
HXDLIN( 555)		if (_hx_tmp24) {
HXLINE( 556)			Int _hx_tmp25 = ::haxegon::Mouse_obj::x;
HXDLIN( 556)			Int _hx_tmp26 = ::haxegon::Mouse_obj::y;
HXDLIN( 556)			Float _hx_tmp27 = ::haxegon::Text_obj::width(this->message_text);
HXDLIN( 556)			Float _hx_tmp28 = ::haxegon::Text_obj::height();
HXDLIN( 556)			if (::haxegon::MathExtensions_obj::point_box_intersect(hx::ClassOf< ::Math >(),_hx_tmp25,_hx_tmp26,(int)1000,(int)700,_hx_tmp27,_hx_tmp28)) {
HXLINE( 557)				Float _hx_tmp29 = (::Game_obj::message_fade_length * ((Float)1.5));
HXDLIN( 557)				this->message_time_left = ::Std_obj::_hx_int(_hx_tmp29);
            			}
HXLINE( 559)			this->message_time_left--;
HXLINE( 560)			Bool _hx_tmp30 = (this->message_time_left > ::Game_obj::message_fade_length);
HXDLIN( 560)			if (_hx_tmp30) {
HXLINE( 561)				::haxegon::Text_obj::display((int)1000,(int)700,this->message_text,null());
            			}
            			else {
HXLINE( 563)				Float _hx_tmp31 = (((Float)this->message_time_left / (Float)::Game_obj::message_fade_length) * (int)255);
HXDLIN( 563)				HX_VARI( Int,c) = ::Std_obj::_hx_int(_hx_tmp31);
HXLINE( 564)				::haxegon::Text_obj::display((int)1000,(int)700,this->message_text,::haxegon::Col_obj::rgb(c,c,c));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,render,(void))

Bool Game_obj::out_of_bounds(Int x,Int y){
            	HX_STACK_FRAME("Game","out_of_bounds",0x6abf8850,"Game.out_of_bounds","Game.hx",570,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 570)		Bool _hx_tmp;
HXDLIN( 570)		Bool _hx_tmp1;
HXDLIN( 570)		if ((x >= (int)0)) {
HXLINE( 570)			_hx_tmp1 = (y < (int)0);
            		}
            		else {
HXLINE( 570)			_hx_tmp1 = true;
            		}
HXDLIN( 570)		if (!(_hx_tmp1)) {
HXLINE( 570)			_hx_tmp = (x >= (int)15);
            		}
            		else {
HXLINE( 570)			_hx_tmp = true;
            		}
HXDLIN( 570)		if (!(_hx_tmp)) {
HXLINE( 570)			return (y >= (int)15);
            		}
            		else {
HXLINE( 570)			return true;
            		}
HXDLIN( 570)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Game_obj,out_of_bounds,return )

Bool Game_obj::space_is_free(Int x,Int y, ::Dynamic ignored_entity){
            	HX_STACK_FRAME("Game","space_is_free",0x07745f4c,"Game.space_is_free","Game.hx",573,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(ignored_entity,"ignored_entity")
HXLINE( 574)		Bool _hx_tmp = this->out_of_bounds(x,y);
HXDLIN( 574)		if (_hx_tmp) {
HXLINE( 575)			return false;
            		}
HXLINE( 577)		{
HXLINE( 577)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 577)			HX_VARI( ::cpp::VirtualArray,_g1) = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN( 577)			while((_g < _g1->get_length())){
HXLINE( 577)				HX_VARI(  ::Dynamic,dude) = _g1->__get(_g);
HXDLIN( 577)				++_g;
HXLINE( 578)				Bool _hx_tmp1;
HXDLIN( 578)				Bool _hx_tmp2;
HXDLIN( 578)				if (hx::IsNotEq( dude,ignored_entity )) {
HXLINE( 578)					_hx_tmp2 = hx::IsEq( ( ::Dynamic(dude->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) +  ::Dynamic(dude->__Field(HX_("dx",94,57,00,00),hx::paccDynamic))),x );
            				}
            				else {
HXLINE( 578)					_hx_tmp2 = false;
            				}
HXDLIN( 578)				if (_hx_tmp2) {
HXLINE( 578)					_hx_tmp1 = hx::IsEq( ( ::Dynamic(dude->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) +  ::Dynamic(dude->__Field(HX_("dy",95,57,00,00),hx::paccDynamic))),y );
            				}
            				else {
HXLINE( 578)					_hx_tmp1 = false;
            				}
HXDLIN( 578)				if (_hx_tmp1) {
HXLINE( 579)					return false;
            				}
            			}
            		}
HXLINE( 582)		if (hx::IsNotEq( this->player,ignored_entity )) {
HXLINE( 583)			Bool _hx_tmp3;
HXDLIN( 583)			Bool _hx_tmp4;
HXDLIN( 583)			if (this->player->moved) {
HXLINE( 583)				_hx_tmp4 = ((this->player->x + this->player->dx) == x);
            			}
            			else {
HXLINE( 583)				_hx_tmp4 = false;
            			}
HXDLIN( 583)			if (_hx_tmp4) {
HXLINE( 583)				_hx_tmp3 = ((this->player->y + this->player->dy) == y);
            			}
            			else {
HXLINE( 583)				_hx_tmp3 = false;
            			}
HXDLIN( 583)			if (_hx_tmp3) {
HXLINE( 584)				return false;
            			}
            			else {
HXLINE( 585)				Bool _hx_tmp5;
HXDLIN( 585)				if ((this->player->x == x)) {
HXLINE( 585)					_hx_tmp5 = (this->player->y == y);
            				}
            				else {
HXLINE( 585)					_hx_tmp5 = false;
            				}
HXDLIN( 585)				if (_hx_tmp5) {
HXLINE( 586)					return false;
            				}
            			}
            		}
HXLINE( 589)		::Array< Bool > this1 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,x)) );
HXDLIN( 589)		Bool _hx_tmp6 = ( (Bool)(_hx_array_unsafe_get(this1,y)) );
HXDLIN( 589)		return !(_hx_tmp6);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Game_obj,space_is_free,return )

void Game_obj::update_player_turn(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 ::Dynamic _hx_run(Int x,Int y){
            			HX_STACK_FRAME("Game","update_player_turn",0x6d95f0c1,"Game.update_player_turn","Game.hx",595,0x56a4f9ec)
            			HX_STACK_ARG(x,"x")
            			HX_STACK_ARG(y,"y")
HXLINE( 595)			Int _hx_tmp = ::Std_obj::_hx_int(((Float)x / (Float)(int)3));
HXDLIN( 595)			Int _hx_tmp1 = ::Std_obj::_hx_int(((Float)y / (Float)(int)5));
HXDLIN( 595)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),_hx_tmp)
            				->setFixed(1,HX_("y",79,00,00,00),_hx_tmp1));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("Game","update_player_turn",0x6d95f0c1,"Game.update_player_turn","Game.hx",592,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE( 594)		HX_VARI(  ::Dynamic,card_at_position) =  ::Dynamic(new _hx_Closure_0());
HXLINE( 601)		this->player->dx = (int)0;
HXLINE( 602)		this->player->dy = (int)0;
HXLINE( 603)		Bool _hx_tmp2 = ::haxegon::Input_obj::pressed(::haxegon::Key_obj::A_dyn());
HXDLIN( 603)		if (_hx_tmp2) {
HXLINE( 604)			this->player->dx--;
            		}
HXLINE( 606)		Bool _hx_tmp3 = ::haxegon::Input_obj::pressed(::haxegon::Key_obj::D_dyn());
HXDLIN( 606)		if (_hx_tmp3) {
HXLINE( 607)			this->player->dx++;
            		}
HXLINE( 609)		Bool _hx_tmp4 = ::haxegon::Input_obj::pressed(::haxegon::Key_obj::W_dyn());
HXDLIN( 609)		if (_hx_tmp4) {
HXLINE( 610)			this->player->dy--;
            		}
HXLINE( 612)		Bool _hx_tmp5 = ::haxegon::Input_obj::pressed(::haxegon::Key_obj::S_dyn());
HXDLIN( 612)		if (_hx_tmp5) {
HXLINE( 613)			this->player->dy++;
            		}
HXLINE( 616)		Bool _hx_tmp6;
HXDLIN( 616)		if ((this->player->dy != (int)0)) {
HXLINE( 616)			_hx_tmp6 = (this->player->dx != (int)0);
            		}
            		else {
HXLINE( 616)			_hx_tmp6 = false;
            		}
HXDLIN( 616)		if (_hx_tmp6) {
HXLINE( 617)			this->player->dx = (int)0;
HXLINE( 618)			this->player->dy = (int)0;
            		}
HXLINE( 620)		HX_VARI( Int,move_x) = (this->player->x + this->player->dx);
HXLINE( 621)		HX_VARI( Int,move_y) = (this->player->y + this->player->dy);
HXLINE( 622)		Bool _hx_tmp7 = !(this->out_of_bounds(move_x,move_y));
HXDLIN( 622)		if (_hx_tmp7) {
HXLINE( 623)			HX_VARI(  ::Dynamic,move_card) = card_at_position(move_x,move_y);
HXLINE( 624)			Int index = ( (Int)(move_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 624)			::Array< ::Dynamic> this1 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,index)) );
HXDLIN( 624)			Int index1 = ( (Int)(move_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 624)			 ::Card _hx_tmp8 = ( ( ::Card)(_hx_array_unsafe_get(this1,index1)) );
HXDLIN( 624)			Bool _hx_tmp9 = _hx_tmp8->covered;
HXDLIN( 624)			if (_hx_tmp9) {
HXLINE( 625)				this->state = ::GameState_obj::GameState_CardFlip_dyn();
HXLINE( 626)				this->flipped_card->__SetField(HX_("x",78,00,00,00),( (Int)(move_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ),hx::paccDynamic);
HXLINE( 627)				this->flipped_card->__SetField(HX_("y",79,00,00,00),( (Int)(move_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ),hx::paccDynamic);
HXLINE( 630)				::haxegon::Gfx_obj::draw_to_image(HX_("map_canvas",5b,27,f9,f9));
HXLINE( 631)				::haxegon::Gfx_obj::clear_screen(::haxegon::Col_obj::BLACK);
HXLINE( 632)				this->render();
HXLINE( 633)				::haxegon::Gfx_obj::draw_to_image(HX_("card_back",36,c6,d9,b3));
HXLINE( 634)				::haxegon::Gfx_obj::clear_screen(::haxegon::Col_obj::BLACK);
HXLINE( 635)				Int _hx_tmp10 = ((-(( (Int)(move_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) )) * (int)3) * (int)64);
HXDLIN( 635)				Int _hx_tmp11 = ((-(( (Int)(move_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) )) * (int)5) * (int)64);
HXDLIN( 635)				::haxegon::Gfx_obj::draw_image(_hx_tmp10,_hx_tmp11,HX_("map_canvas",5b,27,f9,f9));
HXLINE( 637)				Int index2 = ( (Int)(move_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 637)				::Array< ::Dynamic> this2 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,index2)) );
HXDLIN( 637)				Int index3 = ( (Int)(move_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 637)				 ::Card _hx_tmp12 = ( ( ::Card)(_hx_array_unsafe_get(this2,index3)) );
HXDLIN( 637)				_hx_tmp12->covered = false;
HXLINE( 638)				::haxegon::Gfx_obj::draw_to_image(HX_("map_canvas",5b,27,f9,f9));
HXLINE( 639)				::haxegon::Gfx_obj::clear_screen(::haxegon::Col_obj::BLACK);
HXLINE( 640)				this->render();
HXLINE( 641)				Int index4 = ( (Int)(move_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 641)				::Array< ::Dynamic> this3 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,index4)) );
HXDLIN( 641)				Int index5 = ( (Int)(move_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 641)				 ::Card _hx_tmp13 = ( ( ::Card)(_hx_array_unsafe_get(this3,index5)) );
HXDLIN( 641)				_hx_tmp13->covered = true;
HXLINE( 642)				::haxegon::Gfx_obj::draw_to_image(HX_("card_front",ba,b9,93,03));
HXLINE( 643)				::haxegon::Gfx_obj::clear_screen(::haxegon::Col_obj::BLACK);
HXLINE( 644)				Int _hx_tmp14 = ((-(( (Int)(move_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) )) * (int)3) * (int)64);
HXDLIN( 644)				Int _hx_tmp15 = ((-(( (Int)(move_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) )) * (int)5) * (int)64);
HXDLIN( 644)				::haxegon::Gfx_obj::draw_image(_hx_tmp14,_hx_tmp15,HX_("map_canvas",5b,27,f9,f9));
HXLINE( 646)				::haxegon::Gfx_obj::draw_to_screen();
HXLINE( 649)				{
HXLINE( 649)					HX_VARI( Int,_g) = (int)0;
HXDLIN( 649)					HX_VARI( ::cpp::VirtualArray,_g1) = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN( 649)					while((_g < _g1->get_length())){
HXLINE( 649)						HX_VARI(  ::Dynamic,dude) = _g1->__get(_g);
HXDLIN( 649)						++_g;
HXLINE( 650)						HX_VARI(  ::Dynamic,dude_card) = card_at_position( ::Dynamic(dude->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(dude->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
HXLINE( 651)						Bool _hx_tmp16;
HXDLIN( 651)						if ((( (Int)(dude_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) == ( (Int)(move_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 651)							_hx_tmp16 = (( (Int)(dude_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) == ( (Int)(move_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            						}
            						else {
HXLINE( 651)							_hx_tmp16 = false;
            						}
HXDLIN( 651)						if (_hx_tmp16) {
HXLINE( 652)							dude->__SetField(HX_("active",c6,41,46,16),true,hx::paccDynamic);
            						}
            					}
            				}
            			}
HXLINE( 656)			Bool _hx_tmp17;
HXDLIN( 656)			Bool _hx_tmp18;
HXDLIN( 656)			Bool _hx_tmp19;
HXDLIN( 656)			if ((this->player->dx == (int)0)) {
HXLINE( 656)				_hx_tmp19 = (this->player->dy != (int)0);
            			}
            			else {
HXLINE( 656)				_hx_tmp19 = true;
            			}
HXDLIN( 656)			if (_hx_tmp19) {
HXLINE( 656)				_hx_tmp18 = hx::IsNotEq( this->state,::GameState_obj::GameState_CardFlip_dyn() );
            			}
            			else {
HXLINE( 656)				_hx_tmp18 = false;
            			}
HXDLIN( 656)			if (_hx_tmp18) {
HXLINE( 656)				_hx_tmp17 = this->space_is_free(move_x,move_y,this->player);
            			}
            			else {
HXLINE( 656)				_hx_tmp17 = false;
            			}
HXDLIN( 656)			if (_hx_tmp17) {
HXLINE( 657)				this->state = ::GameState_obj::GameState_PlayerVisual_dyn();
HXLINE( 658)				this->player->moved = true;
HXLINE( 659)				this->player->attacked = false;
            			}
            		}
HXLINE( 667)		Bool _hx_tmp20 = !(this->player->moved);
HXDLIN( 667)		if (_hx_tmp20) {
HXLINE( 668)			this->player->dx = (int)0;
HXLINE( 669)			this->player->dy = (int)0;
HXLINE( 672)			if (::haxegon::Mouse_obj::right_click()) {
HXLINE( 673)				HX_VARI( Float,dx) = ((::haxegon::Mouse_obj::x - (this->player->x * (int)64)) - ((Float)32.));
HXLINE( 674)				HX_VARI( Float,dy) = ((::haxegon::Mouse_obj::y - (this->player->y * (int)64)) - ((Float)32.));
HXLINE( 675)				Float _hx_tmp21 = ::Math_obj::abs(dx);
HXDLIN( 675)				Float _hx_tmp22 = ::Math_obj::abs(dy);
HXDLIN( 675)				if ((_hx_tmp21 >= _hx_tmp22)) {
HXLINE( 676)					this->player->dx = ::haxegon::MathExtensions_obj::sign(hx::ClassOf< ::Math >(),dx);
            				}
            				else {
HXLINE( 678)					this->player->dy = ::haxegon::MathExtensions_obj::sign(hx::ClassOf< ::Math >(),dy);
            				}
            			}
HXLINE( 682)			Bool _hx_tmp23;
HXDLIN( 682)			if ((this->player->dx == (int)0)) {
HXLINE( 682)				_hx_tmp23 = (this->player->dy == (int)0);
            			}
            			else {
HXLINE( 682)				_hx_tmp23 = false;
            			}
HXDLIN( 682)			if (_hx_tmp23) {
HXLINE( 685)				Bool _hx_tmp24 = ::haxegon::Input_obj::pressed(::haxegon::Key_obj::LEFT_dyn());
HXDLIN( 685)				if (_hx_tmp24) {
HXLINE( 686)					this->player->dx--;
            				}
HXLINE( 688)				Bool _hx_tmp25 = ::haxegon::Input_obj::pressed(::haxegon::Key_obj::RIGHT_dyn());
HXDLIN( 688)				if (_hx_tmp25) {
HXLINE( 689)					this->player->dx++;
            				}
HXLINE( 691)				Bool _hx_tmp26 = ::haxegon::Input_obj::pressed(::haxegon::Key_obj::UP_dyn());
HXDLIN( 691)				if (_hx_tmp26) {
HXLINE( 692)					this->player->dy--;
            				}
HXLINE( 694)				Bool _hx_tmp27 = ::haxegon::Input_obj::pressed(::haxegon::Key_obj::DOWN_dyn());
HXDLIN( 694)				if (_hx_tmp27) {
HXLINE( 695)					this->player->dy++;
            				}
            			}
HXLINE( 700)			Bool _hx_tmp28;
HXDLIN( 700)			if ((this->player->dy != (int)0)) {
HXLINE( 700)				_hx_tmp28 = (this->player->dx != (int)0);
            			}
            			else {
HXLINE( 700)				_hx_tmp28 = false;
            			}
HXDLIN( 700)			if (_hx_tmp28) {
HXLINE( 701)				this->player->dx = (int)0;
HXLINE( 702)				this->player->dy = (int)0;
            			}
HXLINE( 705)			Bool _hx_tmp29;
HXDLIN( 705)			if ((this->player->dx == (int)0)) {
HXLINE( 705)				_hx_tmp29 = (this->player->dy != (int)0);
            			}
            			else {
HXLINE( 705)				_hx_tmp29 = true;
            			}
HXDLIN( 705)			if (_hx_tmp29) {
HXLINE( 726)				this->state = ::GameState_obj::GameState_PlayerVisual_dyn();
HXLINE( 727)				this->player->attacked = true;
HXLINE( 728)				this->player->moved = false;
            			}
            		}
HXLINE( 734)		if (hx::IsEq( this->state,::GameState_obj::GameState_PlayerTurn_dyn() )) {
HXLINE( 735)			if (::haxegon::Mouse_obj::left_click()) {
HXLINE( 736)				Float _hx_tmp30 = ((Float)::haxegon::Mouse_obj::x / (Float)(int)64);
HXDLIN( 736)				HX_VARI_NAME( Int,x1,"x") = ::Std_obj::_hx_int(_hx_tmp30);
HXLINE( 737)				Float _hx_tmp31 = ((Float)::haxegon::Mouse_obj::y / (Float)(int)64);
HXDLIN( 737)				HX_VARI_NAME( Int,y1,"y") = ::Std_obj::_hx_int(_hx_tmp31);
HXLINE( 739)				Bool _hx_tmp32 = (::haxegon::Mouse_obj::x < (int)999);
HXDLIN( 739)				if (_hx_tmp32) {
HXLINE( 741)					{
HXLINE( 741)						HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 741)						HX_VARI_NAME( ::cpp::VirtualArray,_g11,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Item >());
HXDLIN( 741)						while((_g2 < _g11->get_length())){
HXLINE( 741)							HX_VARI(  ::Dynamic,item) = _g11->__get(_g2);
HXDLIN( 741)							++_g2;
HXLINE( 742)							Bool _hx_tmp33;
HXDLIN( 742)							if (hx::IsEq(  ::Dynamic(item->__Field(HX_("x",78,00,00,00),hx::paccDynamic)),x1 )) {
HXLINE( 742)								_hx_tmp33 = hx::IsEq(  ::Dynamic(item->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),y1 );
            							}
            							else {
HXLINE( 742)								_hx_tmp33 = false;
            							}
HXDLIN( 742)							if (_hx_tmp33) {
HXLINE( 743)								this->dragged_item = item;
HXLINE( 744)								Int _hx_tmp34 = ::haxegon::Mouse_obj::x;
HXDLIN( 744)								this->drag_dx = (_hx_tmp34 - (x1 * (int)64));
HXLINE( 745)								Int _hx_tmp35 = ::haxegon::Mouse_obj::y;
HXDLIN( 745)								this->drag_dy = (_hx_tmp35 - (y1 * (int)64));
HXLINE( 746)								goto _hx_goto_54;
            							}
            						}
            						_hx_goto_54:;
            					}
HXLINE( 749)					Bool _hx_tmp36;
HXDLIN( 749)					Bool _hx_tmp37;
HXDLIN( 749)					Bool _hx_tmp38 = hx::IsNotNull( this->dragged_item );
HXDLIN( 749)					if (_hx_tmp38) {
HXLINE( 750)						Int _hx_tmp39 = (this->dragged_item->x - this->player->x);
HXDLIN( 750)						Float _hx_tmp40 = ::Math_obj::abs(_hx_tmp39);
HXLINE( 749)						_hx_tmp37 = (_hx_tmp40 < (int)2);
            					}
            					else {
HXLINE( 749)						_hx_tmp37 = false;
            					}
HXDLIN( 749)					if (_hx_tmp37) {
HXLINE( 751)						Int _hx_tmp41 = (this->dragged_item->y - this->player->y);
HXDLIN( 751)						Float _hx_tmp42 = ::Math_obj::abs(_hx_tmp41);
HXLINE( 749)						_hx_tmp36 = (_hx_tmp42 < (int)2);
            					}
            					else {
HXLINE( 749)						_hx_tmp36 = false;
            					}
HXDLIN( 749)					if (_hx_tmp36) {
HXLINE( 752)						this->state = ::GameState_obj::GameState_ItemDrag_dyn();
HXLINE( 753)						this->dragged_item->on_ground = false;
            					}
            					else {
HXLINE( 755)						this->dragged_item = null();
            					}
            				}
            				else {
HXLINE( 759)					HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 759)					while((_g3 < (int)5)){
HXLINE( 759)						HX_VARI( Int,i) = _g3++;
HXLINE( 760)						Bool _hx_tmp43;
HXDLIN( 760)						Bool _hx_tmp44 = hx::IsNotNull( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i)) ) );
HXDLIN( 760)						if (_hx_tmp44) {
HXLINE( 760)							_hx_tmp43 = ::haxegon::MathExtensions_obj::point_box_intersect(hx::ClassOf< ::Math >(),::haxegon::Mouse_obj::x,::haxegon::Mouse_obj::y,(int)1000,((int)64 + (i * (int)64)),(int)64,(int)64);
            						}
            						else {
HXLINE( 760)							_hx_tmp43 = false;
            						}
HXDLIN( 760)						if (_hx_tmp43) {
HXLINE( 763)							this->state = ::GameState_obj::GameState_ItemDrag_dyn();
HXLINE( 764)							this->dragged_item = ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i)) );
HXLINE( 765)							this->inventory->__unsafe_set(i,null());
HXLINE( 767)							if (hx::IsEq( this->dragged_item->type,::ItemType_obj::ItemType_Armor_dyn() )) {
HXLINE( 768)								hx::SubEq(this->player->armor,this->dragged_item->value);
            							}
HXLINE( 770)							goto _hx_goto_55;
            						}
            					}
            					_hx_goto_55:;
            				}
            			}
            		}
HXLINE( 777)		this->render();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update_player_turn,(void))

void Game_obj::update_item_drag(){
            	HX_STACK_FRAME("Game","update_item_drag",0x9396ecc6,"Game.update_item_drag","Game.hx",780,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE( 781)		if (::haxegon::Mouse_obj::left_released()) {
HXLINE( 782)			HX_VARI( Bool,put_in_inventory) = false;
HXLINE( 783)			Bool _hx_tmp = (::haxegon::Mouse_obj::x > (int)995);
HXDLIN( 783)			if (_hx_tmp) {
HXLINE( 785)				HX_VARI( Int,slot_index) = (int)0;
HXLINE( 786)				{
HXLINE( 786)					HX_VARI( Int,_g) = (int)0;
HXDLIN( 786)					while((_g < (int)5)){
HXLINE( 786)						HX_VARI( Int,i) = _g++;
HXLINE( 787)						if (::haxegon::MathExtensions_obj::point_box_intersect(hx::ClassOf< ::Math >(),::haxegon::Mouse_obj::x,::haxegon::Mouse_obj::y,(int)1000,((int)64 + (i * (int)64)),(int)64,(int)64)) {
HXLINE( 790)							slot_index = i;
HXLINE( 791)							goto _hx_goto_56;
            						}
            					}
            					_hx_goto_56:;
            				}
HXLINE( 794)				HX_VARI( Bool,can_put_in_inventory) = true;
HXLINE( 797)				if (hx::IsEq( this->dragged_item->type,::ItemType_obj::ItemType_Armor_dyn() )) {
HXLINE( 798)					HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 798)					while((_g1 < (int)5)){
HXLINE( 798)						HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 799)						Bool _hx_tmp1;
HXDLIN( 799)						Bool _hx_tmp2;
HXDLIN( 799)						Bool _hx_tmp3;
HXDLIN( 799)						if ((i1 != slot_index)) {
HXLINE( 799)							_hx_tmp3 = hx::IsNotNull( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i1)) ) );
            						}
            						else {
HXLINE( 799)							_hx_tmp3 = false;
            						}
HXDLIN( 799)						if (_hx_tmp3) {
HXLINE( 799)							_hx_tmp2 = hx::IsEq( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i1)) )->type,::ItemType_obj::ItemType_Armor_dyn() );
            						}
            						else {
HXLINE( 799)							_hx_tmp2 = false;
            						}
HXDLIN( 799)						if (_hx_tmp2) {
HXLINE( 799)							_hx_tmp1 = hx::IsEq( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i1)) )->armor_type,this->dragged_item->armor_type );
            						}
            						else {
HXLINE( 799)							_hx_tmp1 = false;
            						}
HXDLIN( 799)						if (_hx_tmp1) {
HXLINE( 804)							can_put_in_inventory = false;
HXLINE( 805)							goto _hx_goto_57;
            						}
            					}
            					_hx_goto_57:;
            				}
HXLINE( 809)				if (hx::IsEq( this->dragged_item->type,::ItemType_obj::ItemType_Weapon_dyn() )) {
HXLINE( 810)					HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 810)					while((_g2 < (int)5)){
HXLINE( 810)						HX_VARI_NAME( Int,i2,"i") = _g2++;
HXLINE( 811)						Bool _hx_tmp4;
HXDLIN( 811)						Bool _hx_tmp5;
HXDLIN( 811)						Bool _hx_tmp6;
HXDLIN( 811)						if ((i2 != slot_index)) {
HXLINE( 811)							_hx_tmp6 = hx::IsNotNull( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i2)) ) );
            						}
            						else {
HXLINE( 811)							_hx_tmp6 = false;
            						}
HXDLIN( 811)						if (_hx_tmp6) {
HXLINE( 811)							_hx_tmp5 = hx::IsEq( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i2)) )->type,::ItemType_obj::ItemType_Weapon_dyn() );
            						}
            						else {
HXLINE( 811)							_hx_tmp5 = false;
            						}
HXDLIN( 811)						if (_hx_tmp5) {
HXLINE( 811)							_hx_tmp4 = hx::IsEq( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i2)) )->weapon_type,this->dragged_item->weapon_type );
            						}
            						else {
HXLINE( 811)							_hx_tmp4 = false;
            						}
HXDLIN( 811)						if (_hx_tmp4) {
HXLINE( 816)							can_put_in_inventory = false;
HXLINE( 817)							goto _hx_goto_58;
            						}
            					}
            					_hx_goto_58:;
            				}
HXLINE( 822)				if (can_put_in_inventory) {
HXLINE( 824)					Bool _hx_tmp7 = hx::IsNotNull( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,slot_index)) ) );
HXDLIN( 824)					if (_hx_tmp7) {
HXLINE( 825)						( ( ::Item)(_hx_array_unsafe_get(this->inventory,slot_index)) )->x = this->dragged_item->x;
HXLINE( 826)						( ( ::Item)(_hx_array_unsafe_get(this->inventory,slot_index)) )->y = this->dragged_item->y;
HXLINE( 827)						( ( ::Item)(_hx_array_unsafe_get(this->inventory,slot_index)) )->on_ground = true;
            					}
HXLINE( 830)					this->inventory->__unsafe_set(slot_index,this->dragged_item);
HXLINE( 831)					put_in_inventory = true;
HXLINE( 832)					this->dragged_item->x = (int)-1;
HXLINE( 833)					this->dragged_item->y = (int)-1;
HXLINE( 836)					if (hx::IsEq( this->dragged_item->type,::ItemType_obj::ItemType_Armor_dyn() )) {
HXLINE( 837)						hx::AddEq(this->player->armor,this->dragged_item->value);
            					}
            					else {
HXLINE( 838)						if (hx::IsEq( this->dragged_item->type,::ItemType_obj::ItemType_Weapon_dyn() )) {
HXLINE( 839)							this->player->weapon = this->dragged_item->weapon_type;
            						}
            					}
            				}
            			}
HXLINE( 844)			if (!(put_in_inventory)) {
HXLINE( 845)				this->dragged_item->on_ground = true;
HXLINE( 847)				Float _hx_tmp8 = ((Float)::haxegon::Mouse_obj::x / (Float)(int)64);
HXDLIN( 847)				HX_VARI( Int,drop_x) = ::Std_obj::_hx_int(_hx_tmp8);
HXLINE( 848)				Float _hx_tmp9 = ((Float)::haxegon::Mouse_obj::y / (Float)(int)64);
HXDLIN( 848)				HX_VARI( Int,drop_y) = ::Std_obj::_hx_int(_hx_tmp9);
HXLINE( 849)				Bool _hx_tmp10;
HXDLIN( 849)				Int _hx_tmp11 = (drop_x - this->player->x);
HXDLIN( 849)				Float _hx_tmp12 = ::Math_obj::abs(_hx_tmp11);
HXDLIN( 849)				if ((_hx_tmp12 < (int)2)) {
HXLINE( 849)					Int _hx_tmp13 = (drop_y - this->player->y);
HXDLIN( 849)					Float _hx_tmp14 = ::Math_obj::abs(_hx_tmp13);
HXDLIN( 849)					_hx_tmp10 = (_hx_tmp14 < (int)2);
            				}
            				else {
HXLINE( 849)					_hx_tmp10 = false;
            				}
HXDLIN( 849)				if (_hx_tmp10) {
HXLINE( 850)					this->dragged_item->x = drop_x;
HXLINE( 851)					this->dragged_item->y = drop_y;
HXLINE( 854)					Bool _hx_tmp15;
HXDLIN( 854)					Bool _hx_tmp16;
HXDLIN( 854)					if (hx::IsEq( this->dragged_item->type,::ItemType_obj::ItemType_Consumable_dyn() )) {
HXLINE( 854)						_hx_tmp16 = (drop_x == this->player->x);
            					}
            					else {
HXLINE( 854)						_hx_tmp16 = false;
            					}
HXDLIN( 854)					if (_hx_tmp16) {
HXLINE( 854)						_hx_tmp15 = (drop_y == this->player->y);
            					}
            					else {
HXLINE( 854)						_hx_tmp15 = false;
            					}
HXDLIN( 854)					if (_hx_tmp15) {
HXLINE( 855)						if (hx::IsEq( this->dragged_item->consumable_type,::ConsumableType_obj::ConsumableType_Potion_dyn() )) {
HXLINE( 856)							hx::AddEq(this->player->hp,this->dragged_item->value);
HXLINE( 857)							Bool _hx_tmp17 = (this->player->hp > this->player->hp_max);
HXDLIN( 857)							if (_hx_tmp17) {
HXLINE( 858)								this->player->hp = this->player->hp_max;
            							}
HXLINE( 860)							this->dragged_item->_hx_delete();
            						}
            					}
            				}
            			}
HXLINE( 867)			HX_VARI( Bool,no_weapon) = true;
HXLINE( 868)			{
HXLINE( 868)				HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 868)				while((_g3 < (int)5)){
HXLINE( 868)					HX_VARI_NAME( Int,i3,"i") = _g3++;
HXLINE( 869)					Bool _hx_tmp18;
HXDLIN( 869)					Bool _hx_tmp19;
HXDLIN( 869)					Bool _hx_tmp20 = hx::IsNotNull( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i3)) ) );
HXDLIN( 869)					if (_hx_tmp20) {
HXLINE( 869)						_hx_tmp19 = hx::IsEq( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i3)) )->type,::ItemType_obj::ItemType_Weapon_dyn() );
            					}
            					else {
HXLINE( 869)						_hx_tmp19 = false;
            					}
HXDLIN( 869)					if (_hx_tmp19) {
HXLINE( 869)						_hx_tmp18 = hx::IsNotEq( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i3)) )->weapon_type,::WeaponType_obj::WeaponType_None_dyn() );
            					}
            					else {
HXLINE( 869)						_hx_tmp18 = false;
            					}
HXDLIN( 869)					if (_hx_tmp18) {
HXLINE( 870)						no_weapon = false;
HXLINE( 871)						goto _hx_goto_59;
            					}
            				}
            				_hx_goto_59:;
            			}
HXLINE( 874)			if (no_weapon) {
HXLINE( 875)				this->player->weapon = ::WeaponType_obj::WeaponType_None_dyn();
            			}
HXLINE( 878)			this->dragged_item = null();
HXLINE( 879)			this->state = ::GameState_obj::GameState_PlayerTurn_dyn();
            		}
HXLINE( 882)		this->render();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update_item_drag,(void))

void Game_obj::update_player_visual(){
            	HX_STACK_FRAME("Game","update_player_visual",0x581b0104,"Game.update_player_visual","Game.hx",885,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE( 886)		Bool _hx_tmp = this->player->moved;
HXDLIN( 886)		if (_hx_tmp) {
HXLINE( 887)			Int _hx_tmp1 = (this->player->x * (int)64);
HXDLIN( 887)			Float _hx_tmp2 = ((this->player->dx * (int)64) * ((Float)this->state_timer / (Float)(int)7));
HXDLIN( 887)			this->player->real_x = ::Std_obj::_hx_int((_hx_tmp1 + _hx_tmp2));
HXLINE( 888)			Int _hx_tmp3 = (this->player->y * (int)64);
HXDLIN( 888)			Float _hx_tmp4 = ((this->player->dy * (int)64) * ((Float)this->state_timer / (Float)(int)7));
HXDLIN( 888)			this->player->real_y = ::Std_obj::_hx_int((_hx_tmp3 + _hx_tmp4));
            		}
HXLINE( 891)		this->render();
HXLINE( 894)		HX_VARI( Float,angle) = ((Float)0.0);
HXLINE( 895)		Bool _hx_tmp5;
HXDLIN( 895)		if ((this->player->dx == (int)1)) {
HXLINE( 895)			_hx_tmp5 = (this->player->dy == (int)0);
            		}
            		else {
HXLINE( 895)			_hx_tmp5 = false;
            		}
HXDLIN( 895)		if (_hx_tmp5) {
HXLINE( 896)			angle = (int)0;
            		}
            		else {
HXLINE( 897)			Bool _hx_tmp6;
HXDLIN( 897)			if ((this->player->dx == (int)0)) {
HXLINE( 897)				_hx_tmp6 = (this->player->dy == (int)1);
            			}
            			else {
HXLINE( 897)				_hx_tmp6 = false;
            			}
HXDLIN( 897)			if (_hx_tmp6) {
HXLINE( 898)				angle = (int)90;
            			}
            			else {
HXLINE( 899)				Bool _hx_tmp7;
HXDLIN( 899)				if ((this->player->dx == (int)-1)) {
HXLINE( 899)					_hx_tmp7 = (this->player->dy == (int)0);
            				}
            				else {
HXLINE( 899)					_hx_tmp7 = false;
            				}
HXDLIN( 899)				if (_hx_tmp7) {
HXLINE( 900)					angle = (int)180;
            				}
            				else {
HXLINE( 901)					Bool _hx_tmp8;
HXDLIN( 901)					if ((this->player->dx == (int)0)) {
HXLINE( 901)						_hx_tmp8 = (this->player->dy == (int)-1);
            					}
            					else {
HXLINE( 901)						_hx_tmp8 = false;
            					}
HXDLIN( 901)					if (_hx_tmp8) {
HXLINE( 902)						angle = (int)270;
            					}
            				}
            			}
            		}
HXLINE( 904)		Bool _hx_tmp9 = this->player->attacked;
HXDLIN( 904)		if (_hx_tmp9) {
HXLINE( 905)			HX_VARI( Int,attack_dst) = (int)0;
HXLINE( 906)			HX_VARI( Int,timer_max) = (int)0;
HXLINE( 908)			{
HXLINE( 908)				Int _hx_tmp10 = ( ( ::hx::EnumBase)(this->player->weapon) )->_hx_getIndex();
HXDLIN( 908)				switch((int)(_hx_tmp10)){
            					case (int)0: {
HXLINE( 910)						timer_max = (int)10;
HXLINE( 911)						attack_dst = (int)64;
            					}
            					break;
            					case (int)1: {
HXLINE( 914)						timer_max = (int)10;
HXLINE( 915)						attack_dst = (int)64;
            					}
            					break;
            					case (int)2: {
HXLINE( 918)						timer_max = (int)10;
HXLINE( 919)						attack_dst = (int)160;
            					}
            					break;
            					case (int)3: {
HXLINE( 922)						timer_max = (int)50;
HXLINE( 923)						Float _hx_tmp11 = ::Math_obj::max((int)15,(int)15);
HXDLIN( 923)						Int _hx_tmp12 = ::Std_obj::_hx_int(_hx_tmp11);
HXDLIN( 923)						attack_dst = (_hx_tmp12 * (int)64);
            					}
            					break;
            				}
            			}
HXLINE( 927)			Float _hx_tmp13 = (((Float)this->state_timer / (Float)timer_max) - ((Float)0.5));
HXDLIN( 927)			Float _hx_tmp14 = ::Math_obj::abs(_hx_tmp13);
HXDLIN( 927)			HX_VARI( Float,attack_progress) = (((Float)0.5) - _hx_tmp14);
HXLINE( 928)			HX_VARI( Float,visual_x) = ((((this->player->x + ((Float)0.5)) * (int)64) + ((this->player->dx * attack_progress) * attack_dst)) + ((Float)(this->player->dx * (int)64) / (Float)(int)2));
HXLINE( 929)			HX_VARI( Float,visual_y) = ((((this->player->y + ((Float)0.5)) * (int)64) + ((this->player->dy * attack_progress) * attack_dst)) + ((Float)(this->player->dy * (int)64) / (Float)(int)2));
HXLINE( 930)			HX_VARI( Int,visual_cell_x) = ::Std_obj::_hx_int(((Float)visual_x / (Float)(int)64));
HXLINE( 931)			HX_VARI( Int,visual_cell_y) = ::Std_obj::_hx_int(((Float)visual_y / (Float)(int)64));
HXLINE( 932)			HX_VARI( Int,visual_card_x) = ::Std_obj::_hx_int(((Float)visual_cell_x / (Float)(int)3));
HXLINE( 933)			HX_VARI( Int,visual_card_y) = ::Std_obj::_hx_int(((Float)visual_cell_y / (Float)(int)5));
HXLINE( 935)			{
HXLINE( 935)				Int _hx_tmp15 = ( ( ::hx::EnumBase)(this->player->weapon) )->_hx_getIndex();
HXDLIN( 935)				switch((int)(_hx_tmp15)){
            					case (int)0: {
HXLINE( 937)						::haxegon::Gfx_obj::fill_circle(visual_x,visual_y,(int)10,::haxegon::Col_obj::RED,null());
            					}
            					break;
            					case (int)1: {
HXLINE( 940)						HX_VARI( ::Array< Float >,tri) = ::Array_obj< Float >::fromData( _hx_array_data_60,6);
HXLINE( 941)						::haxegon::MathExtensions_obj::rotate_vertices(hx::ClassOf< ::Math >(),tri,(int)0,(int)0,angle);
HXLINE( 942)						::haxegon::MathExtensions_obj::translate_vertices(hx::ClassOf< ::Math >(),tri,visual_x,visual_y);
HXLINE( 943)						::haxegon::Gfx_obj::fill_tri_array(tri,::haxegon::Col_obj::RED,null());
            					}
            					break;
            					case (int)2: {
HXLINE( 946)						HX_VARI_NAME( ::Array< Float >,tri1,"tri") = ::Array_obj< Float >::fromData( _hx_array_data_61,6);
HXLINE( 947)						::haxegon::MathExtensions_obj::rotate_vertices(hx::ClassOf< ::Math >(),tri1,(int)0,(int)0,angle);
HXLINE( 948)						::haxegon::MathExtensions_obj::translate_vertices(hx::ClassOf< ::Math >(),tri1,visual_x,visual_y);
HXLINE( 949)						::haxegon::Gfx_obj::fill_tri_array(tri1,::haxegon::Col_obj::RED,null());
HXLINE( 952)						Bool _hx_tmp16;
HXDLIN( 952)						Bool _hx_tmp17;
HXDLIN( 952)						Bool _hx_tmp18 = !(this->out_of_bounds(visual_cell_x,visual_cell_y));
HXDLIN( 952)						if (_hx_tmp18) {
HXLINE( 953)							::Array< Bool > this1 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,visual_cell_x)) );
HXLINE( 952)							_hx_tmp17 = ( (Bool)(_hx_array_unsafe_get(this1,visual_cell_y)) );
            						}
            						else {
HXLINE( 952)							_hx_tmp17 = true;
            						}
HXDLIN( 952)						if (!(_hx_tmp17)) {
HXLINE( 954)							::Array< ::Dynamic> this2 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,visual_card_x)) );
HXDLIN( 954)							 ::Card _hx_tmp19 = ( ( ::Card)(_hx_array_unsafe_get(this2,visual_card_y)) );
HXLINE( 952)							_hx_tmp16 = _hx_tmp19->covered;
            						}
            						else {
HXLINE( 952)							_hx_tmp16 = true;
            						}
HXDLIN( 952)						if (_hx_tmp16) {
HXLINE( 956)							this->state_timer = (int)1000000;
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 960)						HX_VARI_NAME( ::Array< Float >,tri2,"tri") = ::Array_obj< Float >::fromData( _hx_array_data_62,6);
HXLINE( 961)						::haxegon::MathExtensions_obj::rotate_vertices(hx::ClassOf< ::Math >(),tri2,(int)0,(int)0,angle);
HXLINE( 963)						Float _hx_tmp20 = (((this->player->x + ((Float)0.5)) * (int)64) + ((this->player->dx * attack_progress) * attack_dst));
HXLINE( 964)						Float _hx_tmp21 = ((this->player->y + ((Float)0.5)) * (int)64);
HXDLIN( 964)						Float _hx_tmp22 = ((this->player->dy * attack_progress) * attack_dst);
HXLINE( 962)						::haxegon::MathExtensions_obj::translate_vertices(hx::ClassOf< ::Math >(),tri2,_hx_tmp20,(_hx_tmp21 + _hx_tmp22));
HXLINE( 965)						::haxegon::Gfx_obj::fill_tri_array(tri2,::haxegon::Col_obj::RED,null());
HXLINE( 968)						Bool _hx_tmp23;
HXDLIN( 968)						Bool _hx_tmp24;
HXDLIN( 968)						Bool _hx_tmp25 = !(this->out_of_bounds(visual_cell_x,visual_cell_y));
HXDLIN( 968)						if (_hx_tmp25) {
HXLINE( 969)							::Array< Bool > this3 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,visual_cell_x)) );
HXLINE( 968)							_hx_tmp24 = ( (Bool)(_hx_array_unsafe_get(this3,visual_cell_y)) );
            						}
            						else {
HXLINE( 968)							_hx_tmp24 = true;
            						}
HXDLIN( 968)						if (!(_hx_tmp24)) {
HXLINE( 970)							::Array< ::Dynamic> this4 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,visual_card_x)) );
HXDLIN( 970)							 ::Card _hx_tmp26 = ( ( ::Card)(_hx_array_unsafe_get(this4,visual_card_y)) );
HXLINE( 968)							_hx_tmp23 = _hx_tmp26->covered;
            						}
            						else {
HXLINE( 968)							_hx_tmp23 = true;
            						}
HXDLIN( 968)						if (_hx_tmp23) {
HXLINE( 972)							this->state_timer = (int)1000000;
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 979)		this->state_timer++;
HXLINE( 980)		HX_VARI( Int,max) = (int)0;
HXLINE( 981)		if (this->player->moved) {
HXLINE( 982)			max = (int)7;
            		}
            		else {
HXLINE( 983)			if (this->player->attacked) {
HXLINE( 984)				if (hx::IsEq( this->player->weapon,::WeaponType_obj::WeaponType_Bow_dyn() )) {
HXLINE( 985)					max = (int)50;
            				}
            				else {
HXLINE( 987)					max = (int)10;
            				}
            			}
            		}
HXLINE( 990)		Bool _hx_tmp27 = (this->state_timer > max);
HXDLIN( 990)		if (_hx_tmp27) {
HXLINE( 991)			this->state = ::GameState_obj::GameState_PlayerTurnResult_dyn();
HXLINE( 992)			this->state_timer = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update_player_visual,(void))

void Game_obj::update_player_turn_result(){
            	HX_STACK_FRAME("Game","update_player_turn_result",0x800b93db,"Game.update_player_turn_result","Game.hx",996,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE( 997)		Bool _hx_tmp = this->player->moved;
HXDLIN( 997)		if (_hx_tmp) {
HXLINE( 998)			hx::AddEq(this->player->x,this->player->dx);
HXLINE( 999)			hx::AddEq(this->player->y,this->player->dy);
HXLINE(1000)			this->player->real_x = (this->player->x * (int)64);
HXLINE(1001)			this->player->real_y = (this->player->y * (int)64);
            		}
            		else {
HXLINE(1002)			Bool _hx_tmp1 = this->player->attacked;
HXDLIN(1002)			if (_hx_tmp1) {
HXLINE(1004)				HX_VARI(  ::Dude,hit_dude) = null();
HXLINE(1006)				HX_VARI( Int,attack_distance) = (int)0;
HXLINE(1007)				{
HXLINE(1007)					Int _hx_tmp2 = ( ( ::hx::EnumBase)(this->player->weapon) )->_hx_getIndex();
HXDLIN(1007)					switch((int)(_hx_tmp2)){
            						case (int)0: {
HXLINE(1008)							attack_distance = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE(1009)							attack_distance = (int)1;
            						}
            						break;
            						case (int)2: {
HXLINE(1010)							attack_distance = (int)2;
            						}
            						break;
            						case (int)3: {
HXLINE(1011)							Float _hx_tmp3 = ::Math_obj::max((int)15,(int)15);
HXDLIN(1011)							attack_distance = ::Std_obj::_hx_int(_hx_tmp3);
            						}
            						break;
            					}
            				}
HXLINE(1013)				HX_VARI( ::Array< ::Dynamic>,hit_cells) = ::Array_obj< ::Dynamic>::__new();
HXLINE(1014)				HX_VARI( Int,i) = (int)0;
HXLINE(1015)				HX_VARI( Int,hit_x) = (int)0;
HXLINE(1016)				HX_VARI( Int,hit_y) = (int)0;
HXLINE(1017)				while((i <= attack_distance)){
HXLINE(1018)					hit_x = (this->player->x + (i * this->player->dx));
HXLINE(1019)					hit_y = (this->player->y + (i * this->player->dy));
HXLINE(1020)					Bool _hx_tmp4;
HXDLIN(1020)					Bool _hx_tmp5 = !(this->out_of_bounds(hit_x,hit_y));
HXDLIN(1020)					if (_hx_tmp5) {
HXLINE(1020)						::Array< Bool > this1 = ( (::Array< Bool >)(_hx_array_unsafe_get(this->walls,hit_x)) );
HXDLIN(1020)						_hx_tmp4 = ( (Bool)(_hx_array_unsafe_get(this1,hit_y)) );
            					}
            					else {
HXLINE(1020)						_hx_tmp4 = true;
            					}
HXDLIN(1020)					if (_hx_tmp4) {
HXLINE(1021)						goto _hx_goto_63;
            					}
            					else {
HXLINE(1023)						hit_cells->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("x",78,00,00,00),hit_x)
            							->setFixed(1,HX_("y",79,00,00,00),hit_y)));
            					}
HXLINE(1025)					++i;
            				}
            				_hx_goto_63:;
HXLINE(1027)				{
HXLINE(1027)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(1027)					HX_VARI( ::cpp::VirtualArray,_g2) = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1027)					while((_g1 < _g2->get_length())){
HXLINE(1027)						HX_VARI(  ::Dynamic,dude) = _g2->__get(_g1);
HXDLIN(1027)						++_g1;
HXLINE(1028)						if (( (Bool)(dude->__Field(HX_("active",c6,41,46,16),hx::paccDynamic)) )) {
HXLINE(1029)							{
HXLINE(1029)								HX_VARI( Int,_g3) = (int)0;
HXDLIN(1029)								while((_g3 < hit_cells->length)){
HXLINE(1029)									HX_VARI(  ::Dynamic,cell) = hit_cells->__get(_g3);
HXDLIN(1029)									++_g3;
HXLINE(1030)									Bool _hx_tmp6;
HXDLIN(1030)									if (hx::IsEq(  ::Dynamic(dude->__Field(HX_("x",78,00,00,00),hx::paccDynamic)),( (Int)(cell->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) )) {
HXLINE(1030)										_hx_tmp6 = hx::IsEq(  ::Dynamic(dude->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),( (Int)(cell->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) );
            									}
            									else {
HXLINE(1030)										_hx_tmp6 = false;
            									}
HXDLIN(1030)									if (_hx_tmp6) {
HXLINE(1031)										hit_dude = dude;
HXLINE(1032)										goto _hx_goto_65;
            									}
            								}
            								_hx_goto_65:;
            							}
HXLINE(1035)							Bool _hx_tmp7 = hx::IsNotNull( hit_dude );
HXDLIN(1035)							if (_hx_tmp7) {
HXLINE(1036)								goto _hx_goto_64;
            							}
            						}
            					}
            					_hx_goto_64:;
            				}
HXLINE(1040)				Bool _hx_tmp8 = hx::IsNotNull( hit_dude );
HXDLIN(1040)				if (_hx_tmp8) {
HXLINE(1041)					hit_dude->hp--;
HXLINE(1042)					Bool _hx_tmp9 = (hit_dude->hp <= (int)0);
HXDLIN(1042)					if (_hx_tmp9) {
HXLINE(1043)						hit_dude->dead = true;
            					}
            				}
            			}
            		}
HXLINE(1047)		this->player->moved = false;
HXLINE(1048)		this->player->attacked = false;
HXLINE(1049)		this->player->dx = (int)0;
HXLINE(1050)		this->player->dy = (int)0;
HXLINE(1053)		{
HXLINE(1053)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1053)			HX_VARI_NAME( ::cpp::VirtualArray,_g11,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1053)			while((_g < _g11->get_length())){
HXLINE(1053)				HX_VARI_NAME(  ::Dynamic,dude1,"dude") = _g11->__get(_g);
HXDLIN(1053)				++_g;
HXLINE(1054)				Bool _hx_tmp10;
HXDLIN(1054)				if (( (Bool)(dude1->__Field(HX_("active",c6,41,46,16),hx::paccDynamic)) )) {
HXLINE(1054)					_hx_tmp10 = !(( (Bool)(dude1->__Field(HX_("dead",a4,4e,66,42),hx::paccDynamic)) ));
            				}
            				else {
HXLINE(1054)					_hx_tmp10 = false;
            				}
HXDLIN(1054)				if (_hx_tmp10) {
HXLINE(1055)					HX_VARI( Float,dude_player_dx) = (this->player->x -  ::Dynamic(dude1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)));
HXLINE(1056)					HX_VARI( Float,dude_player_dy) = (this->player->y -  ::Dynamic(dude1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
HXLINE(1057)					if (this->player->moved) {
HXLINE(1058)						hx::AddEq(dude_player_dx,this->player->dx);
HXLINE(1059)						hx::AddEq(dude_player_dy,this->player->dy);
            					}
HXLINE(1062)					Float _hx_tmp11 = ::Math_obj::abs(dude_player_dx);
HXDLIN(1062)					Float _hx_tmp12 = ::Math_obj::abs(dude_player_dy);
HXDLIN(1062)					if (((_hx_tmp11 + _hx_tmp12) == (int)1)) {
HXLINE(1063)						dude1->__SetField(HX_("attacked",27,d6,dc,00),true,hx::paccDynamic);
HXLINE(1064)						dude1->__SetField(HX_("dx",94,57,00,00),::haxegon::MathExtensions_obj::sign(hx::ClassOf< ::Math >(),dude_player_dx),hx::paccDynamic);
HXLINE(1065)						dude1->__SetField(HX_("dy",95,57,00,00),::haxegon::MathExtensions_obj::sign(hx::ClassOf< ::Math >(),dude_player_dy),hx::paccDynamic);
            					}
HXLINE(1069)					Bool _hx_tmp13 = !(( (Bool)(dude1->__Field(HX_("attacked",27,d6,dc,00),hx::paccDynamic)) ));
HXDLIN(1069)					if (_hx_tmp13) {
HXLINE(1070)						HX_VARI( ::Array< ::Dynamic>,path) = this->a_star( ::Dynamic(dude1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(dude1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),this->player->x,this->player->y,null());
HXLINE(1071)						Bool _hx_tmp14 = (path->length > (int)1);
HXDLIN(1071)						if (_hx_tmp14) {
HXLINE(1072)							dude1->__SetField(HX_("moved",33,cc,65,0c),true,hx::paccDynamic);
HXLINE(1073)							Int _hx_tmp15 = (path->length - (int)2);
HXDLIN(1073)							dude1->__SetField(HX_("dx",94,57,00,00),(( (Int)(path->__get(_hx_tmp15)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) -  ::Dynamic(dude1->__Field(HX_("x",78,00,00,00),hx::paccDynamic))),hx::paccDynamic);
HXLINE(1074)							Int _hx_tmp16 = (path->length - (int)2);
HXDLIN(1074)							dude1->__SetField(HX_("dy",95,57,00,00),(( (Int)(path->__get(_hx_tmp16)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) -  ::Dynamic(dude1->__Field(HX_("y",79,00,00,00),hx::paccDynamic))),hx::paccDynamic);
            						}
            					}
            				}
            			}
            		}
HXLINE(1081)		{
HXLINE(1081)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN(1081)			HX_VARI_NAME( ::cpp::VirtualArray,_g12,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1081)			while((_g4 < _g12->get_length())){
HXLINE(1081)				HX_VARI_NAME(  ::Dynamic,dude2,"dude") = _g12->__get(_g4);
HXDLIN(1081)				++_g4;
HXLINE(1082)				this->update_dude_info(dude2);
            			}
            		}
HXLINE(1085)		this->render();
HXLINE(1087)		this->state = ::GameState_obj::GameState_EnemyVisual_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update_player_turn_result,(void))

void Game_obj::update_enemy_visual(){
            	HX_STACK_FRAME("Game","update_enemy_visual",0xff4e9ff1,"Game.update_enemy_visual","Game.hx",1090,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(1091)		HX_VARI( Bool,all_visuals_completed) = true;
HXLINE(1093)		{
HXLINE(1093)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1093)			HX_VARI( ::cpp::VirtualArray,_g1) = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1093)			while((_g < _g1->get_length())){
HXLINE(1093)				HX_VARI(  ::Dynamic,dude) = _g1->__get(_g);
HXDLIN(1093)				++_g;
HXLINE(1094)				 ::Dynamic _hx_tmp =  ::Dynamic(dude->__Field(HX_("moved",33,cc,65,0c),hx::paccDynamic));
HXDLIN(1094)				if (( (Bool)(_hx_tmp) )) {
HXLINE(1095)					Float _hx_tmp1 = ( ::Dynamic(dude->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) * (int)64);
HXDLIN(1095)					Float _hx_tmp2 = (( ::Dynamic(dude->__Field(HX_("dx",94,57,00,00),hx::paccDynamic)) * (int)64) * ((Float)this->state_timer / (Float)(int)7));
HXDLIN(1095)					dude->__SetField(HX_("real_x",17,b2,97,fc),::Std_obj::_hx_int((_hx_tmp1 + _hx_tmp2)),hx::paccDynamic);
HXLINE(1096)					Float _hx_tmp3 = ( ::Dynamic(dude->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) * (int)64);
HXDLIN(1096)					Float _hx_tmp4 = (( ::Dynamic(dude->__Field(HX_("dy",95,57,00,00),hx::paccDynamic)) * (int)64) * ((Float)this->state_timer / (Float)(int)7));
HXDLIN(1096)					dude->__SetField(HX_("real_y",18,b2,97,fc),::Std_obj::_hx_int((_hx_tmp3 + _hx_tmp4)),hx::paccDynamic);
HXLINE(1097)					if ((this->state_timer < (int)7)) {
HXLINE(1098)						all_visuals_completed = false;
            					}
            				}
            			}
            		}
HXLINE(1103)		this->render();
HXLINE(1105)		{
HXLINE(1105)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(1105)			HX_VARI_NAME( ::cpp::VirtualArray,_g11,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1105)			while((_g2 < _g11->get_length())){
HXLINE(1105)				HX_VARI_NAME(  ::Dynamic,dude1,"dude") = _g11->__get(_g2);
HXDLIN(1105)				++_g2;
HXLINE(1106)				 ::Dynamic _hx_tmp5 =  ::Dynamic(dude1->__Field(HX_("dead",a4,4e,66,42),hx::paccDynamic));
HXDLIN(1106)				if (( (Bool)(_hx_tmp5) )) {
HXLINE(1107)					Float _hx_tmp6 = ((Float)((int)20 * this->state_timer) / (Float)(int)7);
HXDLIN(1107)					::haxegon::Gfx_obj::rotation(_hx_tmp6,null(),null());
HXLINE(1108)					::haxegon::Gfx_obj::draw_tile( ::Dynamic(dude1->__Field(HX_("real_x",17,b2,97,fc),hx::paccDynamic)), ::Dynamic(dude1->__Field(HX_("real_y",18,b2,97,fc),hx::paccDynamic)),(int)3);
HXLINE(1109)					::haxegon::Gfx_obj::rotation((int)0,null(),null());
HXLINE(1110)					if ((this->state_timer < (int)7)) {
HXLINE(1111)						all_visuals_completed = false;
            					}
            				}
            				else {
HXLINE(1113)					 ::Dynamic _hx_tmp7 =  ::Dynamic(dude1->__Field(HX_("attacked",27,d6,dc,00),hx::paccDynamic));
HXDLIN(1113)					if (( (Bool)(_hx_tmp7) )) {
HXLINE(1114)						Float _hx_tmp8 = (((Float)this->state_timer / (Float)(int)10) - ((Float)0.5));
HXDLIN(1114)						Float _hx_tmp9 = ::Math_obj::abs(_hx_tmp8);
HXDLIN(1114)						HX_VARI( Float,attack_progress) = ((int)1 - _hx_tmp9);
HXLINE(1116)						Float _hx_tmp10 = ((( ::Dynamic(dude1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) + ((Float)0.5)) * (int)64) + (( ::Dynamic(dude1->__Field(HX_("dx",94,57,00,00),hx::paccDynamic)) * attack_progress) * (int)50));
HXLINE(1117)						Int _hx_tmp11 = (( ::Dynamic(dude1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) + ((Float)0.5)) * (int)64);
HXDLIN(1117)						Float _hx_tmp12 = (( ::Dynamic(dude1->__Field(HX_("dy",95,57,00,00),hx::paccDynamic)) * attack_progress) * (int)50);
HXLINE(1116)						::haxegon::Gfx_obj::fill_circle(_hx_tmp10,(_hx_tmp11 + _hx_tmp12),(int)10,::haxegon::Col_obj::BLUE,null());
HXLINE(1118)						if ((this->state_timer < (int)10)) {
HXLINE(1119)							all_visuals_completed = false;
            						}
            					}
            				}
            			}
            		}
HXLINE(1125)		this->state_timer++;
HXLINE(1126)		if (all_visuals_completed) {
HXLINE(1127)			this->state = ::GameState_obj::GameState_EnemyTurnResult_dyn();
HXLINE(1128)			this->state_timer = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update_enemy_visual,(void))

void Game_obj::update_enemy_turn_result(){
            	HX_STACK_FRAME("Game","update_enemy_turn_result",0x058fb9ce,"Game.update_enemy_turn_result","Game.hx",1132,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(1132)		HX_VARI(  ::Game,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1133)		HX_VARI( ::Array< ::Dynamic>,dead_dudes) = ::Array_obj< ::Dynamic>::__new();
HXLINE(1134)		{
HXLINE(1134)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1134)			HX_VARI( ::cpp::VirtualArray,_g1) = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1134)			while((_g < _g1->get_length())){
HXLINE(1134)				HX_VARI(  ::Dynamic,dude) = _g1->__get(_g);
HXDLIN(1134)				++_g;
HXLINE(1135)				 ::Dynamic _hx_tmp =  ::Dynamic(dude->__Field(HX_("active",c6,41,46,16),hx::paccDynamic));
HXDLIN(1135)				if (( (Bool)(_hx_tmp) )) {
HXLINE(1136)					 ::Dynamic _hx_tmp1 =  ::Dynamic(dude->__Field(HX_("moved",33,cc,65,0c),hx::paccDynamic));
HXDLIN(1136)					if (( (Bool)(_hx_tmp1) )) {
HXLINE(1137)						hx::AddEq(hx::FieldRef((dude).mPtr,HX_("x",78,00,00,00)), ::Dynamic(dude->__Field(HX_("dx",94,57,00,00),hx::paccDynamic)));
HXLINE(1138)						hx::AddEq(hx::FieldRef((dude).mPtr,HX_("y",79,00,00,00)), ::Dynamic(dude->__Field(HX_("dy",95,57,00,00),hx::paccDynamic)));
HXLINE(1139)						dude->__SetField(HX_("real_x",17,b2,97,fc),( ::Dynamic(dude->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) * (int)64),hx::paccDynamic);
HXLINE(1140)						dude->__SetField(HX_("real_y",18,b2,97,fc),( ::Dynamic(dude->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) * (int)64),hx::paccDynamic);
            					}
            					else {
HXLINE(1141)						 ::Dynamic _hx_tmp2 =  ::Dynamic(dude->__Field(HX_("attacked",27,d6,dc,00),hx::paccDynamic));
HXDLIN(1141)						if (( (Bool)(_hx_tmp2) )) {
HXLINE(1142)							Bool _hx_tmp3;
HXDLIN(1142)							if (hx::IsEq( this->player->x,( ::Dynamic(dude->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) +  ::Dynamic(dude->__Field(HX_("dx",94,57,00,00),hx::paccDynamic))) )) {
HXLINE(1142)								_hx_tmp3 = hx::IsEq( this->player->y,( ::Dynamic(dude->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) +  ::Dynamic(dude->__Field(HX_("dy",95,57,00,00),hx::paccDynamic))) );
            							}
            							else {
HXLINE(1142)								_hx_tmp3 = false;
            							}
HXDLIN(1142)							if (_hx_tmp3) {
HXLINE(1143)								this->player->hp--;
            							}
            						}
            						else {
HXLINE(1145)							 ::Dynamic _hx_tmp4 =  ::Dynamic(dude->__Field(HX_("dead",a4,4e,66,42),hx::paccDynamic));
HXDLIN(1145)							if (( (Bool)(_hx_tmp4) )) {
HXLINE(1146)								dead_dudes->push(dude);
            							}
            						}
            					}
HXLINE(1148)					dude->__SetField(HX_("moved",33,cc,65,0c),false,hx::paccDynamic);
HXLINE(1149)					dude->__SetField(HX_("attacked",27,d6,dc,00),false,hx::paccDynamic);
HXLINE(1150)					dude->__SetField(HX_("dx",94,57,00,00),(int)0,hx::paccDynamic);
HXLINE(1151)					dude->__SetField(HX_("dy",95,57,00,00),(int)0,hx::paccDynamic);
            				}
            			}
            		}
HXLINE(1155)		HX_VARI( ::cpp::VirtualArray,dudes) = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXLINE(1156)		{
HXLINE(1156)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(1156)			while((_g2 < dead_dudes->length)){
HXLINE(1156)				HX_VARI_NAME(  ::Dude,dude1,"dude") = dead_dudes->__get(_g2).StaticCast<  ::Dude >();
HXDLIN(1156)				++_g2;
HXLINE(1157)				dudes->remove(dude1);
            			}
            		}
HXLINE(1160)		{
HXLINE(1160)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN(1160)			while((_g3 < (int)5)){
HXLINE(1160)				HX_VARI( Int,x) = _g3++;
HXLINE(1161)				{
HXLINE(1161)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(1161)					while((_g11 < (int)3)){
HXLINE(1161)						HX_VARI( Int,y) = _g11++;
HXLINE(1162)						::Array< ::Dynamic> this1 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,x)) );
HXDLIN(1162)						 ::Card _hx_tmp5 = ( ( ::Card)(_hx_array_unsafe_get(this1,y)) );
HXDLIN(1162)						Bool _hx_tmp6 = !(_hx_tmp5->covered);
HXDLIN(1162)						if (_hx_tmp6) {
HXLINE(1163)							::Array< ::Dynamic> this2 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,x)) );
HXDLIN(1163)							 ::Card _hx_tmp7 = ( ( ::Card)(_hx_array_unsafe_get(this2,y)) );
HXDLIN(1163)							_hx_tmp7->age++;
            						}
            					}
            				}
            			}
            		}
HXLINE(1168)		HX_VARI( Float,uncovered_percentage) = ((Float)this->cards_uncovered / (Float)(int)15);
HXLINE(1170)		if ((uncovered_percentage > ((Float)0.3))) {
HXLINE(1171)			this->card_update_timer--;
HXLINE(1172)			if ((uncovered_percentage > ((Float)0.7))) {
HXLINE(1174)				this->card_update_timer--;
            			}
HXLINE(1176)			Bool _hx_tmp8 = (this->card_update_timer <= (int)0);
HXDLIN(1176)			if (_hx_tmp8) {
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				Int _hx_run( ::Card x2, ::Card y2){
            					HX_STACK_FRAME("Game","update_enemy_turn_result",0x058fb9ce,"Game.update_enemy_turn_result","Game.hx",1186,0x56a4f9ec)
            					HX_STACK_ARG(x2,"x2")
            					HX_STACK_ARG(y2,"y2")
HXLINE(1186)					return (y2->age - x2->age);
            				}
            				HX_END_LOCAL_FUNC2(return)

            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Game,_gthis) HXARGC(1)
            				Bool _hx_run( ::Card card){
            					HX_STACK_FRAME("Game","update_enemy_turn_result",0x058fb9ce,"Game.update_enemy_turn_result","Game.hx",1188,0x56a4f9ec)
            					HX_STACK_ARG(card,"card")
HXLINE(1189)					Bool _hx_tmp12;
HXDLIN(1189)					Float _hx_tmp13 = ((Float)_gthis->player->x / (Float)(int)3);
HXDLIN(1189)					Int _hx_tmp14 = ::Std_obj::_hx_int(_hx_tmp13);
HXDLIN(1189)					Bool _hx_tmp15 = (_hx_tmp14 == card->x);
HXDLIN(1189)					if (_hx_tmp15) {
HXLINE(1189)						Float _hx_tmp16 = ((Float)_gthis->player->y / (Float)(int)5);
HXDLIN(1189)						Int _hx_tmp17 = ::Std_obj::_hx_int(_hx_tmp16);
HXDLIN(1189)						_hx_tmp12 = (_hx_tmp17 == card->y);
            					}
            					else {
HXLINE(1189)						_hx_tmp12 = false;
            					}
HXDLIN(1189)					if (_hx_tmp12) {
HXLINE(1190)						return false;
            					}
HXLINE(1192)					{
HXLINE(1192)						HX_VARI_NAME( Int,_g5,"_g") = (int)0;
HXDLIN(1192)						HX_VARI_NAME( ::cpp::VirtualArray,_g13,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1192)						while((_g5 < _g13->get_length())){
HXLINE(1192)							HX_VARI_NAME(  ::Dynamic,dude2,"dude") = _g13->__get(_g5);
HXDLIN(1192)							++_g5;
HXLINE(1193)							Bool _hx_tmp18;
HXDLIN(1193)							Float _hx_tmp19 = ((Float) ::Dynamic(dude2->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) / (Float)(int)3);
HXDLIN(1193)							Int _hx_tmp20 = ::Std_obj::_hx_int(_hx_tmp19);
HXDLIN(1193)							Bool _hx_tmp21 = (_hx_tmp20 == card->x);
HXDLIN(1193)							if (_hx_tmp21) {
HXLINE(1193)								Float _hx_tmp22 = ((Float) ::Dynamic(dude2->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) / (Float)(int)5);
HXDLIN(1193)								Int _hx_tmp23 = ::Std_obj::_hx_int(_hx_tmp22);
HXDLIN(1193)								_hx_tmp18 = (_hx_tmp23 == card->y);
            							}
            							else {
HXLINE(1193)								_hx_tmp18 = false;
            							}
HXDLIN(1193)							if (_hx_tmp18) {
HXLINE(1194)								return false;
            							}
            						}
            					}
HXLINE(1197)					return true;
            				}
            				HX_END_LOCAL_FUNC1(return)

            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            				Bool _hx_run( ::Card card1){
            					HX_STACK_FRAME("Game","update_enemy_turn_result",0x058fb9ce,"Game.update_enemy_turn_result","Game.hx",1202,0x56a4f9ec)
            					HX_STACK_ARG(card1,"card1")
HXLINE(1202)					return true;
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE(1178)				HX_VARI( ::Array< ::Dynamic>,card_queue) = ::Array_obj< ::Dynamic>::__new();
HXLINE(1179)				{
HXLINE(1179)					HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN(1179)					while((_g4 < (int)5)){
HXLINE(1179)						HX_VARI_NAME( Int,x1,"x") = _g4++;
HXLINE(1180)						{
HXLINE(1180)							HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(1180)							while((_g12 < (int)3)){
HXLINE(1180)								HX_VARI_NAME( Int,y1,"y") = _g12++;
HXLINE(1181)								::Array< ::Dynamic> this3 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,x1)) );
HXDLIN(1181)								 ::Card _hx_tmp9 = ( ( ::Card)(_hx_array_unsafe_get(this3,y1)) );
HXDLIN(1181)								Bool _hx_tmp10 = !(_hx_tmp9->covered);
HXDLIN(1181)								if (_hx_tmp10) {
HXLINE(1182)									::Array< ::Dynamic> this4 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,x1)) );
HXDLIN(1182)									 ::Card _hx_tmp11 = ( ( ::Card)(_hx_array_unsafe_get(this4,y1)) );
HXDLIN(1182)									card_queue->push(_hx_tmp11);
            								}
            							}
            						}
            					}
            				}
HXLINE(1186)				card_queue->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(1188)				HX_VARI(  ::Dynamic,is_empty) =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(1200)				HX_VARI(  ::Dynamic,is_completed) =  ::Dynamic(new _hx_Closure_2());
HXLINE(1205)				HX_VARI(  ::Card,updated_card) = null();
HXLINE(1206)				{
HXLINE(1206)					HX_VARI_NAME( Int,_g6,"_g") = (int)0;
HXDLIN(1206)					while((_g6 < card_queue->length)){
HXLINE(1206)						HX_VARI_NAME(  ::Card,card2,"card") = card_queue->__get(_g6).StaticCast<  ::Card >();
HXDLIN(1206)						++_g6;
HXLINE(1207)						Bool _hx_tmp24;
HXDLIN(1207)						Bool _hx_tmp25 = ( (Bool)(is_empty(card2)) );
HXDLIN(1207)						if (_hx_tmp25) {
HXLINE(1207)							_hx_tmp24 = ( (Bool)(is_completed(card2)) );
            						}
            						else {
HXLINE(1207)							_hx_tmp24 = false;
            						}
HXDLIN(1207)						if (_hx_tmp24) {
HXLINE(1208)							updated_card = card2;
HXLINE(1209)							goto _hx_goto_77;
            						}
            					}
            					_hx_goto_77:;
            				}
HXLINE(1213)				Bool _hx_tmp26 = hx::IsNotNull( updated_card );
HXDLIN(1213)				if (_hx_tmp26) {
HXLINE(1214)					this->card_update_timer = (int)10;
HXLINE(1215)					updated_card->type = this->random_enum(hx::ClassOf< ::CardType >(),(int)1);
HXLINE(1216)					updated_card->covered = true;
HXLINE(1217)					this->generate_card(updated_card);
HXLINE(1218)					this->cards_uncovered--;
            				}
            			}
            		}
HXLINE(1223)		this->render();
HXLINE(1225)		this->state = ::GameState_obj::GameState_PlayerTurn_dyn();
HXLINE(1228)		HX_VARI( ::Array< ::String >,entity_states) = ::Array_obj< ::String >::__new();
HXLINE(1229)		::String _hx_tmp27 = this->serialize(this->player);
HXDLIN(1229)		entity_states->push(_hx_tmp27);
HXLINE(1230)		{
HXLINE(1230)			HX_VARI_NAME( Int,_g7,"_g") = (int)0;
HXDLIN(1230)			HX_VARI_NAME( ::cpp::VirtualArray,_g14,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1230)			while((_g7 < _g14->get_length())){
HXLINE(1230)				HX_VARI_NAME(  ::Dynamic,dude3,"dude") = _g14->__get(_g7);
HXDLIN(1230)				++_g7;
HXLINE(1231)				::String _hx_tmp28 = this->serialize(dude3);
HXDLIN(1231)				entity_states->push(_hx_tmp28);
            			}
            		}
HXLINE(1233)		this->history->push(entity_states);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update_enemy_turn_result,(void))

void Game_obj::update_card_flip(){
            	HX_STACK_FRAME("Game","update_card_flip",0xe7deada2,"Game.update_card_flip","Game.hx",1236,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(1237)		this->render();
HXLINE(1238)		Int _hx_tmp = ((( (Int)(this->flipped_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) * (int)3) * (int)64);
HXDLIN(1238)		Int _hx_tmp1 = ((( (Int)(this->flipped_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) * (int)5) * (int)64);
HXDLIN(1238)		::haxegon::Gfx_obj::fill_box(_hx_tmp,_hx_tmp1,(int)192,(int)320,::haxegon::Col_obj::BLACK,null());
HXLINE(1239)		Bool _hx_tmp2 = (((Float)this->state_timer / (Float)(int)30) < ((Float)0.5));
HXDLIN(1239)		if (_hx_tmp2) {
HXLINE(1240)			Float _hx_tmp3 = ((Float)((int)2 * this->state_timer) / (Float)(int)30);
HXDLIN(1240)			::haxegon::Gfx_obj::scale(((int)1 - _hx_tmp3),(int)1,null(),null());
HXLINE(1241)			Int _hx_tmp4 = ((( (Int)(this->flipped_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) * (int)3) * (int)64);
HXDLIN(1241)			Int _hx_tmp5 = ((( (Int)(this->flipped_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) * (int)5) * (int)64);
HXDLIN(1241)			::haxegon::Gfx_obj::draw_image(_hx_tmp4,_hx_tmp5,HX_("card_back",36,c6,d9,b3));
HXLINE(1242)			::haxegon::Gfx_obj::scale((int)1,(int)1,null(),null());
            		}
            		else {
HXLINE(1244)			Float _hx_tmp6 = (((Float)this->state_timer / (Float)(int)30) - ((Float)0.5));
HXDLIN(1244)			::haxegon::Gfx_obj::scale(((int)2 * _hx_tmp6),(int)1,null(),null());
HXLINE(1245)			Int _hx_tmp7 = ((( (Int)(this->flipped_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) * (int)3) * (int)64);
HXDLIN(1245)			Int _hx_tmp8 = ((( (Int)(this->flipped_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) * (int)5) * (int)64);
HXDLIN(1245)			::haxegon::Gfx_obj::draw_image(_hx_tmp7,_hx_tmp8,HX_("card_front",ba,b9,93,03));
HXLINE(1246)			::haxegon::Gfx_obj::scale((int)1,(int)1,null(),null());
            		}
HXLINE(1248)		::String _hx_tmp9 = (HX_("",00,00,00,00) + this->state_timer);
HXDLIN(1248)		::haxegon::Text_obj::display((int)0,(int)0,_hx_tmp9,::haxegon::Col_obj::YELLOW);
HXLINE(1250)		this->state_timer++;
HXLINE(1251)		Bool _hx_tmp10 = (this->state_timer > (int)30);
HXDLIN(1251)		if (_hx_tmp10) {
HXLINE(1252)			this->state = ::GameState_obj::GameState_PlayerTurn_dyn();
HXLINE(1253)			this->state_timer = (int)0;
HXLINE(1254)			Int index = ( (Int)(this->flipped_card->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(1254)			::Array< ::Dynamic> this1 = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(this->cards,index)) );
HXDLIN(1254)			Int index1 = ( (Int)(this->flipped_card->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(1254)			 ::Card _hx_tmp11 = ( ( ::Card)(_hx_array_unsafe_get(this1,index1)) );
HXDLIN(1254)			_hx_tmp11->covered = false;
HXLINE(1255)			this->cards_uncovered++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update_card_flip,(void))

void Game_obj::update(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Game,_gthis) HXARGC(1)
            		void _hx_run(::hx::EnumBase x){
            			HX_STACK_FRAME("Game","update",0xfb78c2e5,"Game.update","Game.hx",1321,0x56a4f9ec)
            			HX_STACK_ARG(x,"x")
HXLINE(1321)			_gthis->player->weapon = x;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("Game","update",0xfb78c2e5,"Game.update","Game.hx",1259,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(1259)		HX_VARI(  ::Game,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1260)		Bool _hx_tmp;
HXDLIN(1260)		Bool _hx_tmp1;
HXDLIN(1260)		Bool _hx_tmp2 = ::haxegon::Input_obj::just_pressed(::haxegon::Key_obj::Z_dyn());
HXDLIN(1260)		if (_hx_tmp2) {
HXLINE(1260)			_hx_tmp1 = (this->history->length > (int)0);
            		}
            		else {
HXLINE(1260)			_hx_tmp1 = false;
            		}
HXDLIN(1260)		if (_hx_tmp1) {
HXLINE(1260)			_hx_tmp = hx::IsEq( this->state,::GameState_obj::GameState_PlayerTurn_dyn() );
            		}
            		else {
HXLINE(1260)			_hx_tmp = false;
            		}
HXDLIN(1260)		if (_hx_tmp) {
HXLINE(1261)			HX_VARI( ::Array< ::String >,previous_state) = ( (::Array< ::String >)(this->history->pop()) );
HXLINE(1262)			::String _hx_tmp3 = previous_state->__get((int)0);
HXDLIN(1262)			this->unserialize(this->player,_hx_tmp3);
HXLINE(1263)			this->player->dx = (int)0;
HXLINE(1264)			this->player->dy = (int)0;
HXLINE(1265)			::cpp::VirtualArray _hx_tmp4 = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1265)			_hx_tmp4->splice((int)0,::Entity_obj::get(hx::ClassOf< ::Dude >())->get_length());
HXLINE(1266)			{
HXLINE(1266)				HX_VARI( Int,_g1) = (int)1;
HXDLIN(1266)				HX_VARI( Int,_g) = previous_state->length;
HXDLIN(1266)				while((_g1 < _g)){
HXLINE(1266)					HX_VARI( Int,i) = _g1++;
HXLINE(1267)					HX_VARI(  ::Dude,dude) =  ::Dude_obj::__new();
HXLINE(1268)					::String _hx_tmp5 = previous_state->__get(i);
HXDLIN(1268)					this->unserialize(dude,_hx_tmp5);
HXLINE(1269)					dude->dx = (int)0;
HXLINE(1270)					dude->dy = (int)0;
            				}
            			}
            		}
HXLINE(1276)		Float _hx_tmp6 = ((Float)::haxegon::Mouse_obj::x / (Float)(int)64);
HXDLIN(1276)		HX_VARI( Int,hover_x) = ::Std_obj::_hx_int(_hx_tmp6);
HXLINE(1277)		Float _hx_tmp7 = ((Float)::haxegon::Mouse_obj::y / (Float)(int)64);
HXDLIN(1277)		HX_VARI( Int,hover_y) = ::Std_obj::_hx_int(_hx_tmp7);
HXLINE(1278)		this->hover_info = HX_("",00,00,00,00);
HXLINE(1279)		Bool _hx_tmp8 = hx::IsNotNull( this->dragged_item );
HXDLIN(1279)		if (_hx_tmp8) {
HXLINE(1281)			this->hover_info = this->dragged_item->info;
            		}
            		else {
HXLINE(1282)			Bool _hx_tmp9 = !(this->out_of_bounds(hover_x,hover_y));
HXDLIN(1282)			if (_hx_tmp9) {
HXLINE(1284)				{
HXLINE(1284)					HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(1284)					HX_VARI_NAME( ::cpp::VirtualArray,_g11,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Dude >());
HXDLIN(1284)					while((_g2 < _g11->get_length())){
HXLINE(1284)						HX_VARI_NAME(  ::Dynamic,dude1,"dude") = _g11->__get(_g2);
HXDLIN(1284)						++_g2;
HXLINE(1285)						Bool _hx_tmp10;
HXDLIN(1285)						Bool _hx_tmp11;
HXDLIN(1285)						if (( (Bool)(dude1->__Field(HX_("active",c6,41,46,16),hx::paccDynamic)) )) {
HXLINE(1285)							_hx_tmp11 = hx::IsEq( hover_x, ::Dynamic(dude1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            						}
            						else {
HXLINE(1285)							_hx_tmp11 = false;
            						}
HXDLIN(1285)						if (_hx_tmp11) {
HXLINE(1285)							_hx_tmp10 = hx::IsEq( hover_y, ::Dynamic(dude1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            						}
            						else {
HXLINE(1285)							_hx_tmp10 = false;
            						}
HXDLIN(1285)						if (_hx_tmp10) {
HXLINE(1286)							this->hover_info =  ::Dynamic(dude1->__Field(HX_("info",6e,38,bb,45),hx::paccDynamic));
HXLINE(1287)							goto _hx_goto_80;
            						}
            					}
            					_hx_goto_80:;
            				}
HXLINE(1290)				if ((this->hover_info == HX_("",00,00,00,00))) {
HXLINE(1291)					HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN(1291)					HX_VARI_NAME( ::cpp::VirtualArray,_g12,"_g1") = ::Entity_obj::get(hx::ClassOf< ::Item >());
HXDLIN(1291)					while((_g3 < _g12->get_length())){
HXLINE(1291)						HX_VARI(  ::Dynamic,item) = _g12->__get(_g3);
HXDLIN(1291)						++_g3;
HXLINE(1292)						Bool _hx_tmp12;
HXDLIN(1292)						Bool _hx_tmp13;
HXDLIN(1292)						if (( (Bool)(item->__Field(HX_("on_ground",e7,c4,f8,94),hx::paccDynamic)) )) {
HXLINE(1292)							_hx_tmp13 = hx::IsEq( hover_x, ::Dynamic(item->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            						}
            						else {
HXLINE(1292)							_hx_tmp13 = false;
            						}
HXDLIN(1292)						if (_hx_tmp13) {
HXLINE(1292)							_hx_tmp12 = hx::IsEq( hover_y, ::Dynamic(item->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            						}
            						else {
HXLINE(1292)							_hx_tmp12 = false;
            						}
HXDLIN(1292)						if (_hx_tmp12) {
HXLINE(1293)							this->hover_info =  ::Dynamic(item->__Field(HX_("info",6e,38,bb,45),hx::paccDynamic));
HXLINE(1294)							goto _hx_goto_81;
            						}
            					}
            					_hx_goto_81:;
            				}
            			}
            			else {
HXLINE(1300)				HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN(1300)				while((_g4 < (int)5)){
HXLINE(1300)					HX_VARI_NAME( Int,i1,"i") = _g4++;
HXLINE(1301)					Bool _hx_tmp14;
HXDLIN(1301)					Bool _hx_tmp15 = hx::IsNotNull( ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i1)) ) );
HXDLIN(1301)					if (_hx_tmp15) {
HXLINE(1301)						_hx_tmp14 = ::haxegon::MathExtensions_obj::point_box_intersect(hx::ClassOf< ::Math >(),::haxegon::Mouse_obj::x,::haxegon::Mouse_obj::y,(int)1000,((int)64 + (i1 * (int)64)),(int)64,(int)64);
            					}
            					else {
HXLINE(1301)						_hx_tmp14 = false;
            					}
HXDLIN(1301)					if (_hx_tmp14) {
HXLINE(1305)						this->hover_info = ( ( ::Item)(_hx_array_unsafe_get(this->inventory,i1)) )->info;
HXLINE(1306)						goto _hx_goto_82;
            					}
            				}
            				_hx_goto_82:;
            			}
            		}
HXLINE(1311)		{
HXLINE(1311)			Int _hx_tmp16 = ( ( ::hx::EnumBase)(this->state) )->_hx_getIndex();
HXDLIN(1311)			switch((int)(_hx_tmp16)){
            				case (int)0: {
HXLINE(1312)					this->update_player_turn();
            				}
            				break;
            				case (int)1: {
HXLINE(1314)					this->update_player_visual();
            				}
            				break;
            				case (int)2: {
HXLINE(1315)					this->update_player_turn_result();
            				}
            				break;
            				case (int)3: {
HXLINE(1316)					this->update_enemy_visual();
            				}
            				break;
            				case (int)4: {
HXLINE(1317)					this->update_enemy_turn_result();
            				}
            				break;
            				case (int)5: {
HXLINE(1313)					this->update_item_drag();
            				}
            				break;
            				case (int)6: {
HXLINE(1318)					this->update_card_flip();
            				}
            				break;
            			}
            		}
HXLINE(1321)		::haxegon::GUI_obj::enum_setter((int)1000,(int)600, ::Dynamic(new _hx_Closure_0(_gthis)),this->player->weapon,hx::ClassOf< ::WeaponType >());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update,(void))

Bool Game_obj::DRAW_COORDINATES;

Bool Game_obj::UPDATE_CARDS;

Bool Game_obj::DRAW_IMAGE_COVER;

Bool Game_obj::DRAW_TRANSPARENT_COVER;

Bool Game_obj::REQUIRE_ARROWS;

Int Game_obj::tilesize;

Int Game_obj::cardmap_width;

Int Game_obj::cardmap_height;

Int Game_obj::card_width;

Int Game_obj::card_height;

Int Game_obj::map_width;

Int Game_obj::map_height;

Int Game_obj::inventory_slots;

Int Game_obj::inventory_x;

Int Game_obj::inventory_y;

Int Game_obj::inventory_slot_size;

Int Game_obj::move_visual_timer_max;

Int Game_obj::weapon_visual_timer_max;

Int Game_obj::bow_visual_timer_max;

Int Game_obj::card_flip_timer_max;

Int Game_obj::message_fade_length;

Int Game_obj::total_cards;

Int Game_obj::card_update_timer_max;


Game_obj::Game_obj()
{
}

void Game_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Game);
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(state_timer,"state_timer");
	HX_MARK_MEMBER_NAME(flipped_card,"flipped_card");
	HX_MARK_MEMBER_NAME(drag_dx,"drag_dx");
	HX_MARK_MEMBER_NAME(drag_dy,"drag_dy");
	HX_MARK_MEMBER_NAME(dragged_item,"dragged_item");
	HX_MARK_MEMBER_NAME(hover_info,"hover_info");
	HX_MARK_MEMBER_NAME(message_text,"message_text");
	HX_MARK_MEMBER_NAME(message_time_left,"message_time_left");
	HX_MARK_MEMBER_NAME(walls,"walls");
	HX_MARK_MEMBER_NAME(cards,"cards");
	HX_MARK_MEMBER_NAME(cards_uncovered,"cards_uncovered");
	HX_MARK_MEMBER_NAME(card_update_timer,"card_update_timer");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(inventory,"inventory");
	HX_MARK_MEMBER_NAME(card_a,"card_a");
	HX_MARK_MEMBER_NAME(card_b,"card_b");
	HX_MARK_MEMBER_NAME(card_c,"card_c");
	HX_MARK_MEMBER_NAME(history,"history");
	HX_MARK_END_CLASS();
}

void Game_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(state_timer,"state_timer");
	HX_VISIT_MEMBER_NAME(flipped_card,"flipped_card");
	HX_VISIT_MEMBER_NAME(drag_dx,"drag_dx");
	HX_VISIT_MEMBER_NAME(drag_dy,"drag_dy");
	HX_VISIT_MEMBER_NAME(dragged_item,"dragged_item");
	HX_VISIT_MEMBER_NAME(hover_info,"hover_info");
	HX_VISIT_MEMBER_NAME(message_text,"message_text");
	HX_VISIT_MEMBER_NAME(message_time_left,"message_time_left");
	HX_VISIT_MEMBER_NAME(walls,"walls");
	HX_VISIT_MEMBER_NAME(cards,"cards");
	HX_VISIT_MEMBER_NAME(cards_uncovered,"cards_uncovered");
	HX_VISIT_MEMBER_NAME(card_update_timer,"card_update_timer");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(inventory,"inventory");
	HX_VISIT_MEMBER_NAME(card_a,"card_a");
	HX_VISIT_MEMBER_NAME(card_b,"card_b");
	HX_VISIT_MEMBER_NAME(card_c,"card_c");
	HX_VISIT_MEMBER_NAME(history,"history");
}

hx::Val Game_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state); }
		if (HX_FIELD_EQ(inName,"walls") ) { return hx::Val( walls); }
		if (HX_FIELD_EQ(inName,"cards") ) { return hx::Val( cards); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player); }
		if (HX_FIELD_EQ(inName,"card_a") ) { return hx::Val( card_a); }
		if (HX_FIELD_EQ(inName,"card_b") ) { return hx::Val( card_b); }
		if (HX_FIELD_EQ(inName,"card_c") ) { return hx::Val( card_c); }
		if (HX_FIELD_EQ(inName,"a_star") ) { return hx::Val( a_star_dyn()); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"drag_dx") ) { return hx::Val( drag_dx); }
		if (HX_FIELD_EQ(inName,"drag_dy") ) { return hx::Val( drag_dy); }
		if (HX_FIELD_EQ(inName,"history") ) { return hx::Val( history); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { return hx::Val( inventory); }
		if (HX_FIELD_EQ(inName,"serialize") ) { return hx::Val( serialize_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hover_info") ) { return hx::Val( hover_info); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"state_timer") ) { return hx::Val( state_timer); }
		if (HX_FIELD_EQ(inName,"random_enum") ) { return hx::Val( random_enum_dyn()); }
		if (HX_FIELD_EQ(inName,"unserialize") ) { return hx::Val( unserialize_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"flipped_card") ) { return hx::Val( flipped_card); }
		if (HX_FIELD_EQ(inName,"dragged_item") ) { return hx::Val( dragged_item); }
		if (HX_FIELD_EQ(inName,"message_text") ) { return hx::Val( message_text); }
		if (HX_FIELD_EQ(inName,"make_message") ) { return hx::Val( make_message_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"generate_card") ) { return hx::Val( generate_card_dyn()); }
		if (HX_FIELD_EQ(inName,"out_of_bounds") ) { return hx::Val( out_of_bounds_dyn()); }
		if (HX_FIELD_EQ(inName,"space_is_free") ) { return hx::Val( space_is_free_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cards_uncovered") ) { return hx::Val( cards_uncovered); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"update_dude_info") ) { return hx::Val( update_dude_info_dyn()); }
		if (HX_FIELD_EQ(inName,"update_item_drag") ) { return hx::Val( update_item_drag_dyn()); }
		if (HX_FIELD_EQ(inName,"update_card_flip") ) { return hx::Val( update_card_flip_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"message_time_left") ) { return hx::Val( message_time_left); }
		if (HX_FIELD_EQ(inName,"card_update_timer") ) { return hx::Val( card_update_timer); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"update_player_turn") ) { return hx::Val( update_player_turn_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"update_enemy_visual") ) { return hx::Val( update_enemy_visual_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"update_player_visual") ) { return hx::Val( update_player_visual_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"update_enemy_turn_result") ) { return hx::Val( update_enemy_turn_result_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"update_player_turn_result") ) { return hx::Val( update_player_turn_result_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Game_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"message_fade_length") ) { outValue = message_fade_length; return true; }
	}
	return false;
}

hx::Val Game_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"walls") ) { walls=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cards") ) { cards=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"card_a") ) { card_a=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"card_b") ) { card_b=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"card_c") ) { card_c=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"drag_dx") ) { drag_dx=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drag_dy") ) { drag_dy=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"history") ) { history=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { inventory=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hover_info") ) { hover_info=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"state_timer") ) { state_timer=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"flipped_card") ) { flipped_card=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragged_item") ) { dragged_item=inValue.Cast<  ::Item >(); return inValue; }
		if (HX_FIELD_EQ(inName,"message_text") ) { message_text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cards_uncovered") ) { cards_uncovered=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"message_time_left") ) { message_time_left=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"card_update_timer") ) { card_update_timer=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Game_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"message_fade_length") ) { message_fade_length=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void Game_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("state_timer","\xd7","\xdf","\x11","\x52"));
	outFields->push(HX_HCSTRING("flipped_card","\x2d","\x1e","\xc9","\x16"));
	outFields->push(HX_HCSTRING("drag_dx","\x3f","\x32","\x4d","\xf1"));
	outFields->push(HX_HCSTRING("drag_dy","\x40","\x32","\x4d","\xf1"));
	outFields->push(HX_HCSTRING("dragged_item","\xa0","\xfa","\xef","\x2c"));
	outFields->push(HX_HCSTRING("hover_info","\x11","\x25","\xa1","\xe7"));
	outFields->push(HX_HCSTRING("message_text","\x65","\x61","\x7e","\xc3"));
	outFields->push(HX_HCSTRING("message_time_left","\x01","\xd9","\x91","\xea"));
	outFields->push(HX_HCSTRING("walls","\x29","\x0c","\x1f","\xc5"));
	outFields->push(HX_HCSTRING("cards","\xa3","\xf8","\x1f","\x41"));
	outFields->push(HX_HCSTRING("cards_uncovered","\x41","\x98","\xd4","\x05"));
	outFields->push(HX_HCSTRING("card_update_timer","\xde","\x4c","\x06","\x3b"));
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"));
	outFields->push(HX_HCSTRING("card_a","\xf2","\x84","\xd9","\xba"));
	outFields->push(HX_HCSTRING("card_b","\xf3","\x84","\xd9","\xba"));
	outFields->push(HX_HCSTRING("card_c","\xf4","\x84","\xd9","\xba"));
	outFields->push(HX_HCSTRING("history","\x54","\x35","\x47","\x64"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Game_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::GameState*/ ,(int)offsetof(Game_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(Game_obj,state_timer),HX_HCSTRING("state_timer","\xd7","\xdf","\x11","\x52")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Game_obj,flipped_card),HX_HCSTRING("flipped_card","\x2d","\x1e","\xc9","\x16")},
	{hx::fsInt,(int)offsetof(Game_obj,drag_dx),HX_HCSTRING("drag_dx","\x3f","\x32","\x4d","\xf1")},
	{hx::fsInt,(int)offsetof(Game_obj,drag_dy),HX_HCSTRING("drag_dy","\x40","\x32","\x4d","\xf1")},
	{hx::fsObject /*::Item*/ ,(int)offsetof(Game_obj,dragged_item),HX_HCSTRING("dragged_item","\xa0","\xfa","\xef","\x2c")},
	{hx::fsString,(int)offsetof(Game_obj,hover_info),HX_HCSTRING("hover_info","\x11","\x25","\xa1","\xe7")},
	{hx::fsString,(int)offsetof(Game_obj,message_text),HX_HCSTRING("message_text","\x65","\x61","\x7e","\xc3")},
	{hx::fsInt,(int)offsetof(Game_obj,message_time_left),HX_HCSTRING("message_time_left","\x01","\xd9","\x91","\xea")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Game_obj,walls),HX_HCSTRING("walls","\x29","\x0c","\x1f","\xc5")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Game_obj,cards),HX_HCSTRING("cards","\xa3","\xf8","\x1f","\x41")},
	{hx::fsInt,(int)offsetof(Game_obj,cards_uncovered),HX_HCSTRING("cards_uncovered","\x41","\x98","\xd4","\x05")},
	{hx::fsInt,(int)offsetof(Game_obj,card_update_timer),HX_HCSTRING("card_update_timer","\xde","\x4c","\x06","\x3b")},
	{hx::fsObject /*::Player*/ ,(int)offsetof(Game_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Game_obj,inventory),HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Game_obj,card_a),HX_HCSTRING("card_a","\xf2","\x84","\xd9","\xba")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Game_obj,card_b),HX_HCSTRING("card_b","\xf3","\x84","\xd9","\xba")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Game_obj,card_c),HX_HCSTRING("card_c","\xf4","\x84","\xd9","\xba")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Game_obj,history),HX_HCSTRING("history","\x54","\x35","\x47","\x64")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Game_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Game_obj::DRAW_COORDINATES,HX_HCSTRING("DRAW_COORDINATES","\xe0","\x96","\xec","\xf5")},
	{hx::fsBool,(void *) &Game_obj::UPDATE_CARDS,HX_HCSTRING("UPDATE_CARDS","\x8d","\x56","\xf0","\x71")},
	{hx::fsBool,(void *) &Game_obj::DRAW_IMAGE_COVER,HX_HCSTRING("DRAW_IMAGE_COVER","\xd8","\x0b","\x79","\x25")},
	{hx::fsBool,(void *) &Game_obj::DRAW_TRANSPARENT_COVER,HX_HCSTRING("DRAW_TRANSPARENT_COVER","\xcf","\x10","\x2c","\xad")},
	{hx::fsBool,(void *) &Game_obj::REQUIRE_ARROWS,HX_HCSTRING("REQUIRE_ARROWS","\x84","\x3b","\xef","\x69")},
	{hx::fsInt,(void *) &Game_obj::tilesize,HX_HCSTRING("tilesize","\xef","\x9a","\x80","\x9b")},
	{hx::fsInt,(void *) &Game_obj::cardmap_width,HX_HCSTRING("cardmap_width","\x13","\x8d","\xb0","\xd7")},
	{hx::fsInt,(void *) &Game_obj::cardmap_height,HX_HCSTRING("cardmap_height","\x3a","\x5c","\x1a","\x99")},
	{hx::fsInt,(void *) &Game_obj::card_width,HX_HCSTRING("card_width","\x17","\x57","\x68","\xc7")},
	{hx::fsInt,(void *) &Game_obj::card_height,HX_HCSTRING("card_height","\xb6","\x55","\x33","\x6a")},
	{hx::fsInt,(void *) &Game_obj::map_width,HX_HCSTRING("map_width","\xe3","\xe4","\x94","\x74")},
	{hx::fsInt,(void *) &Game_obj::map_height,HX_HCSTRING("map_height","\x6a","\xda","\x02","\x44")},
	{hx::fsInt,(void *) &Game_obj::inventory_slots,HX_HCSTRING("inventory_slots","\x92","\xfb","\xba","\x6b")},
	{hx::fsInt,(void *) &Game_obj::inventory_x,HX_HCSTRING("inventory_x","\xd5","\xa8","\x36","\xbc")},
	{hx::fsInt,(void *) &Game_obj::inventory_y,HX_HCSTRING("inventory_y","\xd6","\xa8","\x36","\xbc")},
	{hx::fsInt,(void *) &Game_obj::inventory_slot_size,HX_HCSTRING("inventory_slot_size","\x3f","\x33","\x25","\x3d")},
	{hx::fsInt,(void *) &Game_obj::move_visual_timer_max,HX_HCSTRING("move_visual_timer_max","\x99","\xec","\x5a","\xa1")},
	{hx::fsInt,(void *) &Game_obj::weapon_visual_timer_max,HX_HCSTRING("weapon_visual_timer_max","\x6e","\x44","\x5d","\xc0")},
	{hx::fsInt,(void *) &Game_obj::bow_visual_timer_max,HX_HCSTRING("bow_visual_timer_max","\x80","\x29","\xef","\x6f")},
	{hx::fsInt,(void *) &Game_obj::card_flip_timer_max,HX_HCSTRING("card_flip_timer_max","\x67","\x93","\xf9","\x0b")},
	{hx::fsInt,(void *) &Game_obj::message_fade_length,HX_HCSTRING("message_fade_length","\xd1","\xca","\xc0","\xa1")},
	{hx::fsInt,(void *) &Game_obj::total_cards,HX_HCSTRING("total_cards","\xa8","\xbe","\xa8","\xce")},
	{hx::fsInt,(void *) &Game_obj::card_update_timer_max,HX_HCSTRING("card_update_timer_max","\x83","\x63","\x2f","\xbc")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Game_obj_sMemberFields[] = {
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("state_timer","\xd7","\xdf","\x11","\x52"),
	HX_HCSTRING("flipped_card","\x2d","\x1e","\xc9","\x16"),
	HX_HCSTRING("drag_dx","\x3f","\x32","\x4d","\xf1"),
	HX_HCSTRING("drag_dy","\x40","\x32","\x4d","\xf1"),
	HX_HCSTRING("dragged_item","\xa0","\xfa","\xef","\x2c"),
	HX_HCSTRING("hover_info","\x11","\x25","\xa1","\xe7"),
	HX_HCSTRING("message_text","\x65","\x61","\x7e","\xc3"),
	HX_HCSTRING("message_time_left","\x01","\xd9","\x91","\xea"),
	HX_HCSTRING("walls","\x29","\x0c","\x1f","\xc5"),
	HX_HCSTRING("cards","\xa3","\xf8","\x1f","\x41"),
	HX_HCSTRING("cards_uncovered","\x41","\x98","\xd4","\x05"),
	HX_HCSTRING("card_update_timer","\xde","\x4c","\x06","\x3b"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"),
	HX_HCSTRING("card_a","\xf2","\x84","\xd9","\xba"),
	HX_HCSTRING("card_b","\xf3","\x84","\xd9","\xba"),
	HX_HCSTRING("card_c","\xf4","\x84","\xd9","\xba"),
	HX_HCSTRING("history","\x54","\x35","\x47","\x64"),
	HX_HCSTRING("random_enum","\xfd","\x39","\x8f","\xcd"),
	HX_HCSTRING("make_message","\x36","\x67","\xf0","\x3e"),
	HX_HCSTRING("update_dude_info","\xc5","\x9c","\x72","\xd2"),
	HX_HCSTRING("serialize","\xe0","\x5d","\xf2","\xf4"),
	HX_HCSTRING("unserialize","\x67","\xe4","\x98","\x7a"),
	HX_HCSTRING("generate_card","\x5a","\x9a","\x1a","\x08"),
	HX_HCSTRING("a_star","\xb0","\xff","\x0a","\xc8"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("out_of_bounds","\xac","\x31","\xb9","\x20"),
	HX_HCSTRING("space_is_free","\xa8","\x08","\x6e","\xbd"),
	HX_HCSTRING("update_player_turn","\xe5","\xd9","\xcc","\x89"),
	HX_HCSTRING("update_item_drag","\xea","\x84","\x1c","\x11"),
	HX_HCSTRING("update_player_visual","\x28","\x7b","\xb9","\x1e"),
	HX_HCSTRING("update_player_turn_result","\x37","\xd7","\x8b","\xeb"),
	HX_HCSTRING("update_enemy_visual","\x4d","\xb6","\x23","\x93"),
	HX_HCSTRING("update_enemy_turn_result","\xf2","\x15","\x60","\x10"),
	HX_HCSTRING("update_card_flip","\xc6","\x45","\x64","\x65"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Game_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Game_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Game_obj::DRAW_COORDINATES,"DRAW_COORDINATES");
	HX_MARK_MEMBER_NAME(Game_obj::UPDATE_CARDS,"UPDATE_CARDS");
	HX_MARK_MEMBER_NAME(Game_obj::DRAW_IMAGE_COVER,"DRAW_IMAGE_COVER");
	HX_MARK_MEMBER_NAME(Game_obj::DRAW_TRANSPARENT_COVER,"DRAW_TRANSPARENT_COVER");
	HX_MARK_MEMBER_NAME(Game_obj::REQUIRE_ARROWS,"REQUIRE_ARROWS");
	HX_MARK_MEMBER_NAME(Game_obj::tilesize,"tilesize");
	HX_MARK_MEMBER_NAME(Game_obj::cardmap_width,"cardmap_width");
	HX_MARK_MEMBER_NAME(Game_obj::cardmap_height,"cardmap_height");
	HX_MARK_MEMBER_NAME(Game_obj::card_width,"card_width");
	HX_MARK_MEMBER_NAME(Game_obj::card_height,"card_height");
	HX_MARK_MEMBER_NAME(Game_obj::map_width,"map_width");
	HX_MARK_MEMBER_NAME(Game_obj::map_height,"map_height");
	HX_MARK_MEMBER_NAME(Game_obj::inventory_slots,"inventory_slots");
	HX_MARK_MEMBER_NAME(Game_obj::inventory_x,"inventory_x");
	HX_MARK_MEMBER_NAME(Game_obj::inventory_y,"inventory_y");
	HX_MARK_MEMBER_NAME(Game_obj::inventory_slot_size,"inventory_slot_size");
	HX_MARK_MEMBER_NAME(Game_obj::move_visual_timer_max,"move_visual_timer_max");
	HX_MARK_MEMBER_NAME(Game_obj::weapon_visual_timer_max,"weapon_visual_timer_max");
	HX_MARK_MEMBER_NAME(Game_obj::bow_visual_timer_max,"bow_visual_timer_max");
	HX_MARK_MEMBER_NAME(Game_obj::card_flip_timer_max,"card_flip_timer_max");
	HX_MARK_MEMBER_NAME(Game_obj::message_fade_length,"message_fade_length");
	HX_MARK_MEMBER_NAME(Game_obj::total_cards,"total_cards");
	HX_MARK_MEMBER_NAME(Game_obj::card_update_timer_max,"card_update_timer_max");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Game_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Game_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Game_obj::DRAW_COORDINATES,"DRAW_COORDINATES");
	HX_VISIT_MEMBER_NAME(Game_obj::UPDATE_CARDS,"UPDATE_CARDS");
	HX_VISIT_MEMBER_NAME(Game_obj::DRAW_IMAGE_COVER,"DRAW_IMAGE_COVER");
	HX_VISIT_MEMBER_NAME(Game_obj::DRAW_TRANSPARENT_COVER,"DRAW_TRANSPARENT_COVER");
	HX_VISIT_MEMBER_NAME(Game_obj::REQUIRE_ARROWS,"REQUIRE_ARROWS");
	HX_VISIT_MEMBER_NAME(Game_obj::tilesize,"tilesize");
	HX_VISIT_MEMBER_NAME(Game_obj::cardmap_width,"cardmap_width");
	HX_VISIT_MEMBER_NAME(Game_obj::cardmap_height,"cardmap_height");
	HX_VISIT_MEMBER_NAME(Game_obj::card_width,"card_width");
	HX_VISIT_MEMBER_NAME(Game_obj::card_height,"card_height");
	HX_VISIT_MEMBER_NAME(Game_obj::map_width,"map_width");
	HX_VISIT_MEMBER_NAME(Game_obj::map_height,"map_height");
	HX_VISIT_MEMBER_NAME(Game_obj::inventory_slots,"inventory_slots");
	HX_VISIT_MEMBER_NAME(Game_obj::inventory_x,"inventory_x");
	HX_VISIT_MEMBER_NAME(Game_obj::inventory_y,"inventory_y");
	HX_VISIT_MEMBER_NAME(Game_obj::inventory_slot_size,"inventory_slot_size");
	HX_VISIT_MEMBER_NAME(Game_obj::move_visual_timer_max,"move_visual_timer_max");
	HX_VISIT_MEMBER_NAME(Game_obj::weapon_visual_timer_max,"weapon_visual_timer_max");
	HX_VISIT_MEMBER_NAME(Game_obj::bow_visual_timer_max,"bow_visual_timer_max");
	HX_VISIT_MEMBER_NAME(Game_obj::card_flip_timer_max,"card_flip_timer_max");
	HX_VISIT_MEMBER_NAME(Game_obj::message_fade_length,"message_fade_length");
	HX_VISIT_MEMBER_NAME(Game_obj::total_cards,"total_cards");
	HX_VISIT_MEMBER_NAME(Game_obj::card_update_timer_max,"card_update_timer_max");
};

#endif

hx::Class Game_obj::__mClass;

static ::String Game_obj_sStaticFields[] = {
	HX_HCSTRING("DRAW_COORDINATES","\xe0","\x96","\xec","\xf5"),
	HX_HCSTRING("UPDATE_CARDS","\x8d","\x56","\xf0","\x71"),
	HX_HCSTRING("DRAW_IMAGE_COVER","\xd8","\x0b","\x79","\x25"),
	HX_HCSTRING("DRAW_TRANSPARENT_COVER","\xcf","\x10","\x2c","\xad"),
	HX_HCSTRING("REQUIRE_ARROWS","\x84","\x3b","\xef","\x69"),
	HX_HCSTRING("tilesize","\xef","\x9a","\x80","\x9b"),
	HX_HCSTRING("cardmap_width","\x13","\x8d","\xb0","\xd7"),
	HX_HCSTRING("cardmap_height","\x3a","\x5c","\x1a","\x99"),
	HX_HCSTRING("card_width","\x17","\x57","\x68","\xc7"),
	HX_HCSTRING("card_height","\xb6","\x55","\x33","\x6a"),
	HX_HCSTRING("map_width","\xe3","\xe4","\x94","\x74"),
	HX_HCSTRING("map_height","\x6a","\xda","\x02","\x44"),
	HX_HCSTRING("inventory_slots","\x92","\xfb","\xba","\x6b"),
	HX_HCSTRING("inventory_x","\xd5","\xa8","\x36","\xbc"),
	HX_HCSTRING("inventory_y","\xd6","\xa8","\x36","\xbc"),
	HX_HCSTRING("inventory_slot_size","\x3f","\x33","\x25","\x3d"),
	HX_HCSTRING("move_visual_timer_max","\x99","\xec","\x5a","\xa1"),
	HX_HCSTRING("weapon_visual_timer_max","\x6e","\x44","\x5d","\xc0"),
	HX_HCSTRING("bow_visual_timer_max","\x80","\x29","\xef","\x6f"),
	HX_HCSTRING("card_flip_timer_max","\x67","\x93","\xf9","\x0b"),
	HX_HCSTRING("message_fade_length","\xd1","\xca","\xc0","\xa1"),
	HX_HCSTRING("total_cards","\xa8","\xbe","\xa8","\xce"),
	HX_HCSTRING("card_update_timer_max","\x83","\x63","\x2f","\xbc"),
	::String(null())
};

void Game_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Game","\x12","\x20","\x38","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Game_obj::__GetStatic;
	__mClass->mSetStaticField = &Game_obj::__SetStatic;
	__mClass->mMarkFunc = Game_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Game_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Game_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Game_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Game_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Game_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Game_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Game_obj::__boot()
{
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",38,0x56a4f9ec)
HXLINE(  38)		DRAW_COORDINATES = false;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",39,0x56a4f9ec)
HXLINE(  39)		UPDATE_CARDS = true;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",40,0x56a4f9ec)
HXLINE(  40)		DRAW_IMAGE_COVER = true;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",41,0x56a4f9ec)
HXLINE(  41)		DRAW_TRANSPARENT_COVER = false;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",42,0x56a4f9ec)
HXLINE(  42)		REQUIRE_ARROWS = false;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",43,0x56a4f9ec)
HXLINE(  43)		tilesize = (int)64;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",44,0x56a4f9ec)
HXLINE(  44)		cardmap_width = (int)5;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",45,0x56a4f9ec)
HXLINE(  45)		cardmap_height = (int)3;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",46,0x56a4f9ec)
HXLINE(  46)		card_width = (int)3;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",47,0x56a4f9ec)
HXLINE(  47)		card_height = (int)5;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",48,0x56a4f9ec)
HXLINE(  48)		map_width = (int)15;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",49,0x56a4f9ec)
HXLINE(  49)		map_height = (int)15;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",50,0x56a4f9ec)
HXLINE(  50)		inventory_slots = (int)5;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",51,0x56a4f9ec)
HXLINE(  51)		inventory_x = (int)1000;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",52,0x56a4f9ec)
HXLINE(  52)		inventory_y = (int)64;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",53,0x56a4f9ec)
HXLINE(  53)		inventory_slot_size = (int)64;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",57,0x56a4f9ec)
HXLINE(  57)		move_visual_timer_max = (int)7;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",58,0x56a4f9ec)
HXLINE(  58)		weapon_visual_timer_max = (int)10;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",59,0x56a4f9ec)
HXLINE(  59)		bow_visual_timer_max = (int)50;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",60,0x56a4f9ec)
HXLINE(  60)		card_flip_timer_max = (int)30;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",68,0x56a4f9ec)
HXLINE(  68)		message_fade_length = (int)180;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",73,0x56a4f9ec)
HXLINE(  73)		total_cards = (int)15;
            	}
{
            	HX_STACK_FRAME("Game","boot",0x014a920e,"Game.boot","Game.hx",74,0x56a4f9ec)
HXLINE(  74)		card_update_timer_max = (int)10;
            	}
}

