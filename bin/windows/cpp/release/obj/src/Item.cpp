// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_ArmorType
#include <ArmorType.h>
#endif
#ifndef INCLUDED_ConsumableType
#include <ConsumableType.h>
#endif
#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_Item
#include <Item.h>
#endif
#ifndef INCLUDED_ItemType
#include <ItemType.h>
#endif
#ifndef INCLUDED_WeaponType
#include <WeaponType.h>
#endif


void Item_obj::__construct(){
            	HX_STACK_FRAME("Item","new",0x6a90a7a5,"Item.new","Entity.hx",113,0x5c8a675b)
            	HX_STACK_THIS(this)
HXLINE( 126)		this->amount = (int)1;
HXLINE( 125)		this->value = (int)0;
HXLINE( 124)		this->consumable_type = ::ConsumableType_obj::ConsumableType_None_dyn();
HXLINE( 123)		this->weapon_type = ::WeaponType_obj::WeaponType_None_dyn();
HXLINE( 122)		this->armor_type = ::ArmorType_obj::ArmorType_None_dyn();
HXLINE( 121)		this->type = ::ItemType_obj::ItemType_None_dyn();
HXLINE( 119)		this->on_ground = true;
HXLINE( 118)		this->tile = (int)0;
HXLINE( 117)		this->info = HX_("Hello!\nItem info here",30,7d,40,3d);
HXLINE( 116)		this->name = HX_("",00,00,00,00);
HXLINE( 115)		this->y = (int)0;
HXLINE( 114)		this->x = (int)0;
HXLINE( 113)		super::__construct();
            	}

Dynamic Item_obj::__CreateEmpty() { return new Item_obj; }

hx::ObjectPtr< Item_obj > Item_obj::__new()
{
	hx::ObjectPtr< Item_obj > _hx_result = new Item_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Item_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Item_obj > _hx_result = new Item_obj();
	_hx_result->__construct();
	return _hx_result;
}


Item_obj::Item_obj()
{
}

void Item_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Item);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(info,"info");
	HX_MARK_MEMBER_NAME(tile,"tile");
	HX_MARK_MEMBER_NAME(on_ground,"on_ground");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(armor_type,"armor_type");
	HX_MARK_MEMBER_NAME(weapon_type,"weapon_type");
	HX_MARK_MEMBER_NAME(consumable_type,"consumable_type");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(amount,"amount");
	HX_MARK_END_CLASS();
}

void Item_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(info,"info");
	HX_VISIT_MEMBER_NAME(tile,"tile");
	HX_VISIT_MEMBER_NAME(on_ground,"on_ground");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(armor_type,"armor_type");
	HX_VISIT_MEMBER_NAME(weapon_type,"weapon_type");
	HX_VISIT_MEMBER_NAME(consumable_type,"consumable_type");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(amount,"amount");
}

hx::Val Item_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"info") ) { return hx::Val( info); }
		if (HX_FIELD_EQ(inName,"tile") ) { return hx::Val( tile); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"amount") ) { return hx::Val( amount); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"on_ground") ) { return hx::Val( on_ground); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"armor_type") ) { return hx::Val( armor_type); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"weapon_type") ) { return hx::Val( weapon_type); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"consumable_type") ) { return hx::Val( consumable_type); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Item_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tile") ) { tile=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"amount") ) { amount=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"on_ground") ) { on_ground=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"armor_type") ) { armor_type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"weapon_type") ) { weapon_type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"consumable_type") ) { consumable_type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Item_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));
	outFields->push(HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("on_ground","\xe7","\xc4","\xf8","\x94"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("armor_type","\xba","\x73","\xca","\xc2"));
	outFields->push(HX_HCSTRING("weapon_type","\x3d","\x1a","\x7a","\xbb"));
	outFields->push(HX_HCSTRING("consumable_type","\x16","\x3b","\x82","\x0d"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("amount","\xd8","\x11","\x03","\xd5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Item_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Item_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Item_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsString,(int)offsetof(Item_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(Item_obj,info),HX_HCSTRING("info","\x6e","\x38","\xbb","\x45")},
	{hx::fsInt,(int)offsetof(Item_obj,tile),HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c")},
	{hx::fsBool,(int)offsetof(Item_obj,on_ground),HX_HCSTRING("on_ground","\xe7","\xc4","\xf8","\x94")},
	{hx::fsObject /*::ItemType*/ ,(int)offsetof(Item_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::ArmorType*/ ,(int)offsetof(Item_obj,armor_type),HX_HCSTRING("armor_type","\xba","\x73","\xca","\xc2")},
	{hx::fsObject /*::WeaponType*/ ,(int)offsetof(Item_obj,weapon_type),HX_HCSTRING("weapon_type","\x3d","\x1a","\x7a","\xbb")},
	{hx::fsObject /*::ConsumableType*/ ,(int)offsetof(Item_obj,consumable_type),HX_HCSTRING("consumable_type","\x16","\x3b","\x82","\x0d")},
	{hx::fsInt,(int)offsetof(Item_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsInt,(int)offsetof(Item_obj,amount),HX_HCSTRING("amount","\xd8","\x11","\x03","\xd5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Item_obj_sStaticStorageInfo = 0;
#endif

static ::String Item_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"),
	HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c"),
	HX_HCSTRING("on_ground","\xe7","\xc4","\xf8","\x94"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("armor_type","\xba","\x73","\xca","\xc2"),
	HX_HCSTRING("weapon_type","\x3d","\x1a","\x7a","\xbb"),
	HX_HCSTRING("consumable_type","\x16","\x3b","\x82","\x0d"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("amount","\xd8","\x11","\x03","\xd5"),
	::String(null()) };

static void Item_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Item_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Item_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Item_obj::__mClass,"__mClass");
};

#endif

hx::Class Item_obj::__mClass;

void Item_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Item","\x33","\xf1","\x98","\x30");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Item_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Item_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Item_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Item_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Item_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Item_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

