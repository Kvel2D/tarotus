// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_WeaponType
#include <WeaponType.h>
#endif


void Player_obj::__construct(){
            	HX_STACK_FRAME("Player","new",0x8d5554f3,"Player.new","Entity.hx",77,0x5c8a675b)
            	HX_STACK_THIS(this)
HXLINE(  91)		this->weapon = ::WeaponType_obj::WeaponType_None_dyn();
HXLINE(  89)		this->armor = (int)0;
HXLINE(  88)		this->hp_max = (int)10;
HXLINE(  87)		this->hp = (int)5;
HXLINE(  85)		this->dy = (int)0;
HXLINE(  84)		this->dx = (int)0;
HXLINE(  83)		this->moved = false;
HXLINE(  82)		this->attacked = false;
HXLINE(  81)		this->real_y = (int)0;
HXLINE(  80)		this->real_x = (int)0;
HXLINE(  79)		this->y = (int)0;
HXLINE(  78)		this->x = (int)0;
HXLINE(  77)		super::__construct();
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

hx::ObjectPtr< Player_obj > Player_obj::__new()
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}


Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(real_x,"real_x");
	HX_MARK_MEMBER_NAME(real_y,"real_y");
	HX_MARK_MEMBER_NAME(attacked,"attacked");
	HX_MARK_MEMBER_NAME(moved,"moved");
	HX_MARK_MEMBER_NAME(dx,"dx");
	HX_MARK_MEMBER_NAME(dy,"dy");
	HX_MARK_MEMBER_NAME(hp,"hp");
	HX_MARK_MEMBER_NAME(hp_max,"hp_max");
	HX_MARK_MEMBER_NAME(armor,"armor");
	HX_MARK_MEMBER_NAME(weapon,"weapon");
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(real_x,"real_x");
	HX_VISIT_MEMBER_NAME(real_y,"real_y");
	HX_VISIT_MEMBER_NAME(attacked,"attacked");
	HX_VISIT_MEMBER_NAME(moved,"moved");
	HX_VISIT_MEMBER_NAME(dx,"dx");
	HX_VISIT_MEMBER_NAME(dy,"dy");
	HX_VISIT_MEMBER_NAME(hp,"hp");
	HX_VISIT_MEMBER_NAME(hp_max,"hp_max");
	HX_VISIT_MEMBER_NAME(armor,"armor");
	HX_VISIT_MEMBER_NAME(weapon,"weapon");
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { return hx::Val( dx); }
		if (HX_FIELD_EQ(inName,"dy") ) { return hx::Val( dy); }
		if (HX_FIELD_EQ(inName,"hp") ) { return hx::Val( hp); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { return hx::Val( moved); }
		if (HX_FIELD_EQ(inName,"armor") ) { return hx::Val( armor); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"real_x") ) { return hx::Val( real_x); }
		if (HX_FIELD_EQ(inName,"real_y") ) { return hx::Val( real_y); }
		if (HX_FIELD_EQ(inName,"hp_max") ) { return hx::Val( hp_max); }
		if (HX_FIELD_EQ(inName,"weapon") ) { return hx::Val( weapon); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"attacked") ) { return hx::Val( attacked); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Int >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { dx=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dy") ) { dy=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hp") ) { hp=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { moved=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"armor") ) { armor=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"real_x") ) { real_x=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"real_y") ) { real_y=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hp_max") ) { hp_max=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weapon") ) { weapon=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"attacked") ) { attacked=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("real_x","\x17","\xb2","\x97","\xfc"));
	outFields->push(HX_HCSTRING("real_y","\x18","\xb2","\x97","\xfc"));
	outFields->push(HX_HCSTRING("attacked","\x27","\xd6","\xdc","\x00"));
	outFields->push(HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"));
	outFields->push(HX_HCSTRING("dx","\x94","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("dy","\x95","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("hp","\x08","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("hp_max","\xad","\xce","\x1c","\x51"));
	outFields->push(HX_HCSTRING("armor","\x7f","\xae","\x8b","\x25"));
	outFields->push(HX_HCSTRING("weapon","\xdc","\x96","\x63","\xfc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Player_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,real_x),HX_HCSTRING("real_x","\x17","\xb2","\x97","\xfc")},
	{hx::fsInt,(int)offsetof(Player_obj,real_y),HX_HCSTRING("real_y","\x18","\xb2","\x97","\xfc")},
	{hx::fsBool,(int)offsetof(Player_obj,attacked),HX_HCSTRING("attacked","\x27","\xd6","\xdc","\x00")},
	{hx::fsBool,(int)offsetof(Player_obj,moved),HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c")},
	{hx::fsInt,(int)offsetof(Player_obj,dx),HX_HCSTRING("dx","\x94","\x57","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,dy),HX_HCSTRING("dy","\x95","\x57","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,hp),HX_HCSTRING("hp","\x08","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,hp_max),HX_HCSTRING("hp_max","\xad","\xce","\x1c","\x51")},
	{hx::fsInt,(int)offsetof(Player_obj,armor),HX_HCSTRING("armor","\x7f","\xae","\x8b","\x25")},
	{hx::fsObject /*::WeaponType*/ ,(int)offsetof(Player_obj,weapon),HX_HCSTRING("weapon","\xdc","\x96","\x63","\xfc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("real_x","\x17","\xb2","\x97","\xfc"),
	HX_HCSTRING("real_y","\x18","\xb2","\x97","\xfc"),
	HX_HCSTRING("attacked","\x27","\xd6","\xdc","\x00"),
	HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"),
	HX_HCSTRING("dx","\x94","\x57","\x00","\x00"),
	HX_HCSTRING("dy","\x95","\x57","\x00","\x00"),
	HX_HCSTRING("hp","\x08","\x5b","\x00","\x00"),
	HX_HCSTRING("hp_max","\xad","\xce","\x1c","\x51"),
	HX_HCSTRING("armor","\x7f","\xae","\x8b","\x25"),
	HX_HCSTRING("weapon","\xdc","\x96","\x63","\xfc"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

