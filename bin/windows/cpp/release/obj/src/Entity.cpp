// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif


void Entity_obj::__construct(){
            	HX_STACK_FRAME("Entity","new",0x9c9485b5,"Entity.new","Entity.hx",37,0x5c8a675b)
            	HX_STACK_THIS(this)
HXLINE(  49)		this->id = (int)0;
HXLINE(  52)		HX_VARI( hx::Class,type) = ::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this));
HXLINE(  53)		Bool _hx_tmp = !(::Entity_obj::entities->exists(type));
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  54)			::Entity_obj::entities->set(type,::cpp::VirtualArray_obj::__new());
            		}
HXLINE(  56)		( (::cpp::VirtualArray)(::Entity_obj::entities->get(type)) )->push(hx::ObjectPtr<OBJ_>(this));
HXLINE(  57)		::Entity_obj::all->push(hx::ObjectPtr<OBJ_>(this));
HXLINE(  59)		this->id = ::Entity_obj::id_max;
HXLINE(  60)		::Entity_obj::id_max++;
            	}

Dynamic Entity_obj::__CreateEmpty() { return new Entity_obj; }

hx::ObjectPtr< Entity_obj > Entity_obj::__new()
{
	hx::ObjectPtr< Entity_obj > _hx_result = new Entity_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Entity_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Entity_obj > _hx_result = new Entity_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Entity_obj::_hx_delete(){
            	HX_STACK_FRAME("Entity","delete",0xd2664df6,"Entity.delete","Entity.hx",63,0x5c8a675b)
            	HX_STACK_THIS(this)
HXLINE(  64)		{
HXLINE(  64)			HX_VARI(  ::Dynamic,tmp) = ::Entity_obj::entities->iterator();
HXDLIN(  64)			while(true){
HXLINE(  64)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  64)				if (_hx_tmp) {
HXLINE(  64)					goto _hx_goto_0;
            				}
HXDLIN(  64)				HX_VARI( ::cpp::VirtualArray,type) = ( (::cpp::VirtualArray)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  65)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  65)				while((_g < type->get_length())){
HXLINE(  65)					HX_VARI(  ::Dynamic,entity) = type->__get(_g);
HXDLIN(  65)					++_g;
HXLINE(  66)					if (hx::IsEq( entity,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  68)						type->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE(  69)						goto _hx_goto_1;
            					}
            				}
            				_hx_goto_1:;
            			}
            			_hx_goto_0:;
            		}
HXLINE(  73)		::Entity_obj::all->remove(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entity_obj,_hx_delete,(void))

::cpp::VirtualArray Entity_obj::all;

 ::haxe::ds::ObjectMap Entity_obj::entities;

::cpp::VirtualArray Entity_obj::get( ::Dynamic type){
            	HX_STACK_FRAME("Entity","get",0x9c8f35eb,"Entity.get","Entity.hx",41,0x5c8a675b)
            	HX_STACK_ARG(type,"type")
HXLINE(  42)		Bool _hx_tmp = !(::Entity_obj::entities->exists(type));
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  43)			::Entity_obj::entities->set(type,::cpp::VirtualArray_obj::__new());
            		}
HXLINE(  45)		return ( (::cpp::VirtualArray)(::Entity_obj::entities->get(type)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,get,return )

Int Entity_obj::id_max;


Entity_obj::Entity_obj()
{
}

hx::Val Entity_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Entity_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { outValue = all; return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"id_max") ) { outValue = id_max; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"entities") ) { outValue = entities; return true; }
	}
	return false;
}

hx::Val Entity_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Entity_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { all=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"id_max") ) { id_max=ioValue.Cast< Int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"entities") ) { entities=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

void Entity_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Entity_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Entity_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Entity_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Entity_obj::all,HX_HCSTRING("all","\x21","\xf9","\x49","\x00")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(void *) &Entity_obj::entities,HX_HCSTRING("entities","\x41","\x96","\x95","\x92")},
	{hx::fsInt,(void *) &Entity_obj::id_max,HX_HCSTRING("id_max","\x00","\x35","\xa9","\xce")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Entity_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("delete","\x2b","\xc0","\xd8","\x6a"),
	::String(null()) };

static void Entity_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Entity_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Entity_obj::all,"all");
	HX_MARK_MEMBER_NAME(Entity_obj::entities,"entities");
	HX_MARK_MEMBER_NAME(Entity_obj::id_max,"id_max");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Entity_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Entity_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Entity_obj::all,"all");
	HX_VISIT_MEMBER_NAME(Entity_obj::entities,"entities");
	HX_VISIT_MEMBER_NAME(Entity_obj::id_max,"id_max");
};

#endif

hx::Class Entity_obj::__mClass;

static ::String Entity_obj_sStaticFields[] = {
	HX_HCSTRING("all","\x21","\xf9","\x49","\x00"),
	HX_HCSTRING("entities","\x41","\x96","\x95","\x92"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("id_max","\x00","\x35","\xa9","\xce"),
	::String(null())
};

void Entity_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Entity","\x43","\x87","\xb0","\x39");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Entity_obj::__GetStatic;
	__mClass->mSetStaticField = &Entity_obj::__SetStatic;
	__mClass->mMarkFunc = Entity_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Entity_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Entity_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Entity_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Entity_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Entity_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Entity_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Entity_obj::__boot()
{
{
            	HX_STACK_FRAME("Entity","boot",0x5d79793d,"Entity.boot","Entity.hx",38,0x5c8a675b)
HXLINE(  38)		all = ::cpp::VirtualArray_obj::__new();
            	}
{
            	HX_STACK_FRAME("Entity","boot",0x5d79793d,"Entity.boot","Entity.hx",39,0x5c8a675b)
HXLINE(  39)		entities =  ::haxe::ds::ObjectMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("Entity","boot",0x5d79793d,"Entity.boot","Entity.hx",48,0x5c8a675b)
HXLINE(  48)		id_max = (int)0;
            	}
}

