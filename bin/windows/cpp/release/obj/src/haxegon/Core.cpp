// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxegon_Core
#include <haxegon/Core.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Input
#include <haxegon/Input.h>
#endif
#ifndef INCLUDED_haxegon_Mouse
#include <haxegon/Mouse.h>
#endif
#ifndef INCLUDED_haxegon_Music
#include <haxegon/Music.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace haxegon{

void Core_obj::__construct(){
            	HX_STACK_FRAME("haxegon.Core","new",0xdbd4873f,"haxegon.Core.new","haxegon/Core.hx",20,0x74bad730)
            	HX_STACK_THIS(this)
HXLINE(  29)		this->TARGETFRAMERATE = (int)60;
HXLINE(  46)		super::__construct();
HXLINE(  48)		::haxegon::Gfx_obj::initrun = true;
HXLINE(  49)		this->init();
            	}

Dynamic Core_obj::__CreateEmpty() { return new Core_obj; }

hx::ObjectPtr< Core_obj > Core_obj::__new()
{
	hx::ObjectPtr< Core_obj > _hx_result = new Core_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Core_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Core_obj > _hx_result = new Core_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Core_obj::init(){
            	HX_STACK_FRAME("haxegon.Core","init",0x7ada8751,"haxegon.Core.init","haxegon/Core.hx",52,0x74bad730)
            	HX_STACK_THIS(this)
HXLINE(  53)		this->maxelapsed = ((Float)0.0333);
HXLINE(  54)		this->maxframeskip = (int)5;
HXLINE(  55)		this->tickrate = (int)20;
HXLINE(  56)		this->_delta = (int)0;
HXLINE(  59)		Bool _hx_tmp = ::haxegon::Gfx_obj::initrun;
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  60)			this->addEventListener(HX_("addedToStage",63,22,55,0c),this->addedtostage_dyn(),null(),null(),null());
HXLINE(  61)			::openfl::Lib_obj::current->addChild(hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE(  63)			this->loaded();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,init,(void))

void Core_obj::addedtostage( ::openfl::events::Event e){
            	HX_STACK_FRAME("haxegon.Core","addedtostage",0xd26d7fe4,"haxegon.Core.addedtostage","haxegon/Core.hx",67,0x74bad730)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE(  68)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->addedtostage_dyn(),null());
HXLINE(  69)		this->loaded();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Core_obj,addedtostage,(void))

void Core_obj::loaded(){
            	HX_STACK_FRAME("haxegon.Core","loaded",0x8d2ae686,"haxegon.Core.loaded","haxegon/Core.hx",72,0x74bad730)
            	HX_STACK_THIS(this)
HXLINE(  74)		Bool _hx_tmp = ::haxegon::Gfx_obj::initrun;
HXDLIN(  74)		if (_hx_tmp) {
HXLINE(  75)			::haxegon::Input_obj::init(this->stage);
HXLINE(  76)			::haxegon::Mouse_obj::init(this->stage);
            		}
HXLINE(  79)		::haxegon::Gfx_obj::init(this->stage);
HXLINE(  81)		::haxegon::Music_obj::init();
HXLINE(  84)		::haxegon::Gfx_obj::resize_screen((int)768,(int)480,null());
HXLINE(  85)		::haxegon::Text_obj::setfont(HX_("opensans",1d,35,b0,02),(int)24);
HXLINE(  87)		this->main =  ::Main_obj::__new();
HXLINE(  90)		this->_rate = ((Float)(int)1000 / (Float)this->TARGETFRAMERATE);
HXLINE(  92)		Float _hx_tmp1 = this->_rate;
HXDLIN(  92)		Float _hx_tmp2 = (this->maxframeskip + ((Float)0.98));
HXDLIN(  92)		this->_skip = (_hx_tmp1 * _hx_tmp2);
HXLINE(  93)		this->_last = (this->_prev = ::openfl::Lib_obj::getTimer());
HXLINE(  94)		Bool _hx_tmp3 = hx::IsNotNull( this->_timer );
HXDLIN(  94)		if (_hx_tmp3) {
HXLINE(  94)			this->_timer->stop();
            		}
HXLINE(  95)		this->_timer =  ::haxe::Timer_obj::__new(this->tickrate);
HXLINE(  97)		this->stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->onenterframe_dyn(),null(),null(),null());
HXLINE(  98)		::haxegon::Gfx_obj::updatefps = (int)0;
HXLINE(  99)		::haxegon::Gfx_obj::renderfps = (int)0;
HXLINE( 100)		this->_framesthissecond_counter = (int)-1;
HXLINE( 102)		::haxegon::Gfx_obj::initrun = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,loaded,(void))

void Core_obj::onenterframe( ::openfl::events::Event FlashEvent){
            	HX_STACK_FRAME("haxegon.Core","onenterframe",0x774c2735,"haxegon.Core.onenterframe","haxegon/Core.hx",106,0x74bad730)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FlashEvent,"FlashEvent")
HXLINE( 106)		this->ontimer();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Core_obj,onenterframe,(void))

void Core_obj::ontimer(){
            	HX_STACK_FRAME("haxegon.Core","ontimer",0x02b500a5,"haxegon.Core.ontimer","haxegon/Core.hx",109,0x74bad730)
            	HX_STACK_THIS(this)
HXLINE( 110)		::haxegon::Gfx_obj::skiprender = false;
HXLINE( 111)		this->_skipedupdate = (int)0;
HXLINE( 114)		this->_time = ::openfl::Lib_obj::getTimer();
HXLINE( 115)		hx::AddEq(this->_delta,(this->_time - this->_last));
HXLINE( 116)		this->_last = this->_time;
HXLINE( 118)		Bool _hx_tmp = (this->_framesthissecond_counter == (int)-1);
HXDLIN( 118)		if (_hx_tmp) {
HXLINE( 119)			this->_framesthissecond_counter = this->_time;
            		}
HXLINE( 123)		if ((this->_delta < this->_rate)) {
HXLINE( 123)			return;
            		}
HXLINE( 127)		Bool _hx_tmp1 = (this->_delta > (((Float)1.5) * this->_rate));
HXDLIN( 127)		if (_hx_tmp1) {
HXLINE( 128)			hx::SubEq(this->_delta,((Float)0.01));
            		}
HXLINE( 132)		this->_gametime = ::Std_obj::_hx_int(this->_time);
HXLINE( 135)		Bool _hx_tmp2 = (this->_delta > this->_skip);
HXDLIN( 135)		if (_hx_tmp2) {
HXLINE( 135)			this->_delta = this->_skip;
            		}
HXLINE( 136)		while((this->_delta >= this->_rate)){
HXLINE( 139)			this->_updatetime = this->_time;
HXLINE( 140)			hx::SubEq(this->_delta,this->_rate);
HXLINE( 141)			this->_prev = this->_time;
HXLINE( 144)			Bool _hx_tmp3 = ::haxegon::Gfx_obj::clearscreeneachframe;
HXDLIN( 144)			if (_hx_tmp3) {
HXLINE( 144)				::haxegon::Gfx_obj::skiprender = true;
            			}
HXLINE( 145)			this->_skipedupdate++;
HXLINE( 146)			Bool _hx_tmp4 = (this->_skipedupdate > (int)1);
HXDLIN( 146)			if (_hx_tmp4) {
HXLINE( 146)				this->doupdate();
            			}
HXLINE( 149)			this->_time = ::openfl::Lib_obj::getTimer();
            		}
HXLINE( 153)		this->_rendertime = this->_time;
HXLINE( 156)		::haxegon::Gfx_obj::skiprender = false;
HXDLIN( 156)		this->doupdate();
HXLINE( 157)		::haxegon::Gfx_obj::renderfps++;
HXLINE( 159)		Bool _hx_tmp5 = ((this->_rendertime - this->_framesthissecond_counter) > (int)1000);
HXDLIN( 159)		if (_hx_tmp5) {
HXLINE( 161)			this->_framesthissecond_counter = ::openfl::Lib_obj::getTimer();
HXLINE( 162)			::haxegon::Gfx_obj::updatefps_max = ::haxegon::Gfx_obj::updatefps;
HXLINE( 163)			::haxegon::Gfx_obj::renderfps_max = ::haxegon::Gfx_obj::renderfps;
HXLINE( 164)			::haxegon::Gfx_obj::renderfps = (int)0;
HXLINE( 165)			::haxegon::Gfx_obj::updatefps = (int)0;
            		}
HXLINE( 169)		this->_time = ::openfl::Lib_obj::getTimer();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,ontimer,(void))

void Core_obj::doupdate(){
            	HX_STACK_FRAME("haxegon.Core","doupdate",0x78499895,"haxegon.Core.doupdate","haxegon/Core.hx",172,0x74bad730)
            	HX_STACK_THIS(this)
HXLINE( 173)		::haxegon::Gfx_obj::updatefps++;
HXLINE( 174)		Float _hx_tmp = ::openfl::Lib_obj::current->get_mouseX();
HXDLIN( 174)		Float _hx_tmp1 = ((Float)_hx_tmp / (Float)::haxegon::Gfx_obj::screenscale);
HXDLIN( 174)		Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 174)		Float _hx_tmp3 = ::openfl::Lib_obj::current->get_mouseY();
HXDLIN( 174)		Float _hx_tmp4 = ((Float)_hx_tmp3 / (Float)::haxegon::Gfx_obj::screenscale);
HXDLIN( 174)		Int _hx_tmp5 = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 174)		::haxegon::Mouse_obj::update(_hx_tmp2,_hx_tmp5);
HXLINE( 175)		::haxegon::Input_obj::update();
HXLINE( 177)		Bool _hx_tmp6 = !(::haxegon::Gfx_obj::skiprender);
HXDLIN( 177)		if (_hx_tmp6) {
HXLINE( 178)			::haxegon::Gfx_obj::drawto->lock();
HXLINE( 179)			Bool _hx_tmp7 = ::haxegon::Gfx_obj::clearscreeneachframe;
HXDLIN( 179)			if (_hx_tmp7) {
HXLINE( 179)				::haxegon::Gfx_obj::clear_screen(null());
            			}
            		}
HXLINE( 181)		this->main->update();
HXLINE( 182)		Bool _hx_tmp8 = !(::haxegon::Gfx_obj::skiprender);
HXDLIN( 182)		if (_hx_tmp8) {
HXLINE( 183)			::haxegon::Text_obj::drawstringinput();
HXLINE( 184)			::haxegon::Debug_obj::showLog();
HXLINE( 186)			::haxegon::Gfx_obj::drawto->unlock(null());
            		}
HXLINE( 193)		::haxegon::Mouse_obj::mousewheel = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,doupdate,(void))


Core_obj::Core_obj()
{
}

void Core_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Core);
	HX_MARK_MEMBER_NAME(main,"main");
	HX_MARK_MEMBER_NAME(maxelapsed,"maxelapsed");
	HX_MARK_MEMBER_NAME(maxframeskip,"maxframeskip");
	HX_MARK_MEMBER_NAME(tickrate,"tickrate");
	HX_MARK_MEMBER_NAME(TARGETFRAMERATE,"TARGETFRAMERATE");
	HX_MARK_MEMBER_NAME(_delta,"_delta");
	HX_MARK_MEMBER_NAME(_time,"_time");
	HX_MARK_MEMBER_NAME(_last,"_last");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_rate,"_rate");
	HX_MARK_MEMBER_NAME(_skip,"_skip");
	HX_MARK_MEMBER_NAME(_prev,"_prev");
	HX_MARK_MEMBER_NAME(_skipedupdate,"_skipedupdate");
	HX_MARK_MEMBER_NAME(_updatetime,"_updatetime");
	HX_MARK_MEMBER_NAME(_rendertime,"_rendertime");
	HX_MARK_MEMBER_NAME(_gametime,"_gametime");
	HX_MARK_MEMBER_NAME(_framesthissecond_counter,"_framesthissecond_counter");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Core_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(main,"main");
	HX_VISIT_MEMBER_NAME(maxelapsed,"maxelapsed");
	HX_VISIT_MEMBER_NAME(maxframeskip,"maxframeskip");
	HX_VISIT_MEMBER_NAME(tickrate,"tickrate");
	HX_VISIT_MEMBER_NAME(TARGETFRAMERATE,"TARGETFRAMERATE");
	HX_VISIT_MEMBER_NAME(_delta,"_delta");
	HX_VISIT_MEMBER_NAME(_time,"_time");
	HX_VISIT_MEMBER_NAME(_last,"_last");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_rate,"_rate");
	HX_VISIT_MEMBER_NAME(_skip,"_skip");
	HX_VISIT_MEMBER_NAME(_prev,"_prev");
	HX_VISIT_MEMBER_NAME(_skipedupdate,"_skipedupdate");
	HX_VISIT_MEMBER_NAME(_updatetime,"_updatetime");
	HX_VISIT_MEMBER_NAME(_rendertime,"_rendertime");
	HX_VISIT_MEMBER_NAME(_gametime,"_gametime");
	HX_VISIT_MEMBER_NAME(_framesthissecond_counter,"_framesthissecond_counter");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Core_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { return hx::Val( main); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_time") ) { return hx::Val( _time); }
		if (HX_FIELD_EQ(inName,"_last") ) { return hx::Val( _last); }
		if (HX_FIELD_EQ(inName,"_rate") ) { return hx::Val( _rate); }
		if (HX_FIELD_EQ(inName,"_skip") ) { return hx::Val( _skip); }
		if (HX_FIELD_EQ(inName,"_prev") ) { return hx::Val( _prev); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_delta") ) { return hx::Val( _delta); }
		if (HX_FIELD_EQ(inName,"_timer") ) { return hx::Val( _timer); }
		if (HX_FIELD_EQ(inName,"loaded") ) { return hx::Val( loaded_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ontimer") ) { return hx::Val( ontimer_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tickrate") ) { return hx::Val( tickrate); }
		if (HX_FIELD_EQ(inName,"doupdate") ) { return hx::Val( doupdate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_gametime") ) { return hx::Val( _gametime); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxelapsed") ) { return hx::Val( maxelapsed); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_updatetime") ) { return hx::Val( _updatetime); }
		if (HX_FIELD_EQ(inName,"_rendertime") ) { return hx::Val( _rendertime); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maxframeskip") ) { return hx::Val( maxframeskip); }
		if (HX_FIELD_EQ(inName,"addedtostage") ) { return hx::Val( addedtostage_dyn()); }
		if (HX_FIELD_EQ(inName,"onenterframe") ) { return hx::Val( onenterframe_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_skipedupdate") ) { return hx::Val( _skipedupdate); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"TARGETFRAMERATE") ) { return hx::Val( TARGETFRAMERATE); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_framesthissecond_counter") ) { return hx::Val( _framesthissecond_counter); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Core_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { main=inValue.Cast<  ::Main >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_time") ) { _time=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_last") ) { _last=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rate") ) { _rate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_skip") ) { _skip=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_prev") ) { _prev=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_delta") ) { _delta=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tickrate") ) { tickrate=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_gametime") ) { _gametime=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxelapsed") ) { maxelapsed=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_updatetime") ) { _updatetime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rendertime") ) { _rendertime=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maxframeskip") ) { maxframeskip=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_skipedupdate") ) { _skipedupdate=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"TARGETFRAMERATE") ) { TARGETFRAMERATE=inValue.Cast< Int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_framesthissecond_counter") ) { _framesthissecond_counter=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Core_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("main","\x39","\x38","\x56","\x48"));
	outFields->push(HX_HCSTRING("maxelapsed","\x18","\xea","\x93","\x57"));
	outFields->push(HX_HCSTRING("maxframeskip","\x08","\x2a","\xad","\x44"));
	outFields->push(HX_HCSTRING("tickrate","\xbd","\x88","\x02","\x76"));
	outFields->push(HX_HCSTRING("TARGETFRAMERATE","\xfc","\xc3","\x58","\x02"));
	outFields->push(HX_HCSTRING("_delta","\x39","\x2f","\x0e","\xd3"));
	outFields->push(HX_HCSTRING("_time","\xec","\xe7","\x0d","\x00"));
	outFields->push(HX_HCSTRING("_last","\x35","\x26","\xbe","\xfa"));
	outFields->push(HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"));
	outFields->push(HX_HCSTRING("_rate","\xbf","\x6e","\xb5","\xfe"));
	outFields->push(HX_HCSTRING("_skip","\x5e","\x32","\x66","\xff"));
	outFields->push(HX_HCSTRING("_prev","\xd2","\xda","\x6f","\xfd"));
	outFields->push(HX_HCSTRING("_skipedupdate","\x06","\xb0","\xdb","\xc6"));
	outFields->push(HX_HCSTRING("_updatetime","\xb5","\x57","\x62","\xed"));
	outFields->push(HX_HCSTRING("_rendertime","\x82","\x67","\xb7","\xd1"));
	outFields->push(HX_HCSTRING("_gametime","\x5e","\x98","\xdf","\x15"));
	outFields->push(HX_HCSTRING("_framesthissecond_counter","\x54","\x11","\x8b","\x8e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Core_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Main*/ ,(int)offsetof(Core_obj,main),HX_HCSTRING("main","\x39","\x38","\x56","\x48")},
	{hx::fsFloat,(int)offsetof(Core_obj,maxelapsed),HX_HCSTRING("maxelapsed","\x18","\xea","\x93","\x57")},
	{hx::fsInt,(int)offsetof(Core_obj,maxframeskip),HX_HCSTRING("maxframeskip","\x08","\x2a","\xad","\x44")},
	{hx::fsInt,(int)offsetof(Core_obj,tickrate),HX_HCSTRING("tickrate","\xbd","\x88","\x02","\x76")},
	{hx::fsInt,(int)offsetof(Core_obj,TARGETFRAMERATE),HX_HCSTRING("TARGETFRAMERATE","\xfc","\xc3","\x58","\x02")},
	{hx::fsFloat,(int)offsetof(Core_obj,_delta),HX_HCSTRING("_delta","\x39","\x2f","\x0e","\xd3")},
	{hx::fsFloat,(int)offsetof(Core_obj,_time),HX_HCSTRING("_time","\xec","\xe7","\x0d","\x00")},
	{hx::fsFloat,(int)offsetof(Core_obj,_last),HX_HCSTRING("_last","\x35","\x26","\xbe","\xfa")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(Core_obj,_timer),HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c")},
	{hx::fsFloat,(int)offsetof(Core_obj,_rate),HX_HCSTRING("_rate","\xbf","\x6e","\xb5","\xfe")},
	{hx::fsFloat,(int)offsetof(Core_obj,_skip),HX_HCSTRING("_skip","\x5e","\x32","\x66","\xff")},
	{hx::fsFloat,(int)offsetof(Core_obj,_prev),HX_HCSTRING("_prev","\xd2","\xda","\x6f","\xfd")},
	{hx::fsInt,(int)offsetof(Core_obj,_skipedupdate),HX_HCSTRING("_skipedupdate","\x06","\xb0","\xdb","\xc6")},
	{hx::fsFloat,(int)offsetof(Core_obj,_updatetime),HX_HCSTRING("_updatetime","\xb5","\x57","\x62","\xed")},
	{hx::fsFloat,(int)offsetof(Core_obj,_rendertime),HX_HCSTRING("_rendertime","\x82","\x67","\xb7","\xd1")},
	{hx::fsFloat,(int)offsetof(Core_obj,_gametime),HX_HCSTRING("_gametime","\x5e","\x98","\xdf","\x15")},
	{hx::fsFloat,(int)offsetof(Core_obj,_framesthissecond_counter),HX_HCSTRING("_framesthissecond_counter","\x54","\x11","\x8b","\x8e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Core_obj_sStaticStorageInfo = 0;
#endif

static ::String Core_obj_sMemberFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	HX_HCSTRING("maxelapsed","\x18","\xea","\x93","\x57"),
	HX_HCSTRING("maxframeskip","\x08","\x2a","\xad","\x44"),
	HX_HCSTRING("tickrate","\xbd","\x88","\x02","\x76"),
	HX_HCSTRING("TARGETFRAMERATE","\xfc","\xc3","\x58","\x02"),
	HX_HCSTRING("_delta","\x39","\x2f","\x0e","\xd3"),
	HX_HCSTRING("_time","\xec","\xe7","\x0d","\x00"),
	HX_HCSTRING("_last","\x35","\x26","\xbe","\xfa"),
	HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"),
	HX_HCSTRING("_rate","\xbf","\x6e","\xb5","\xfe"),
	HX_HCSTRING("_skip","\x5e","\x32","\x66","\xff"),
	HX_HCSTRING("_prev","\xd2","\xda","\x6f","\xfd"),
	HX_HCSTRING("_skipedupdate","\x06","\xb0","\xdb","\xc6"),
	HX_HCSTRING("_updatetime","\xb5","\x57","\x62","\xed"),
	HX_HCSTRING("_rendertime","\x82","\x67","\xb7","\xd1"),
	HX_HCSTRING("_gametime","\x5e","\x98","\xdf","\x15"),
	HX_HCSTRING("_framesthissecond_counter","\x54","\x11","\x8b","\x8e"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("addedtostage","\xa3","\x8a","\xd6","\xab"),
	HX_HCSTRING("loaded","\x05","\x48","\x6f","\x58"),
	HX_HCSTRING("onenterframe","\xf4","\x31","\xb5","\x50"),
	HX_HCSTRING("ontimer","\x46","\xee","\x45","\x13"),
	HX_HCSTRING("doupdate","\xd4","\x97","\x88","\xe6"),
	::String(null()) };

static void Core_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Core_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Core_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Core_obj::__mClass,"__mClass");
};

#endif

hx::Class Core_obj::__mClass;

void Core_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Core","\xcd","\x7b","\x9a","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Core_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Core_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Core_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Core_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Core_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Core_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
