// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxegon_Col
#include <haxegon/Col.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif

namespace haxegon{

void Debug_obj::__construct() { }

Dynamic Debug_obj::__CreateEmpty() { return new Debug_obj; }

hx::ObjectPtr< Debug_obj > Debug_obj::__new()
{
	hx::ObjectPtr< Debug_obj > _hx_result = new Debug_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Debug_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Debug_obj > _hx_result = new Debug_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Debug_obj::showTest;

::Array< ::String > Debug_obj::debuglog;

void Debug_obj::clearLog(){
            	HX_STACK_FRAME("haxegon.Debug","clearLog",0xdb3bce60,"haxegon.Debug.clearLog","haxegon/Debug.hx",21,0x3e51dcba)
HXLINE(  21)		::haxegon::Debug_obj::debuglog = ::Array_obj< ::String >::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,clearLog,(void))

void Debug_obj::log( ::Dynamic t){
            	HX_STACK_FRAME("haxegon.Debug","log",0x8907cfbb,"haxegon.Debug.log","haxegon/Debug.hx",25,0x3e51dcba)
            	HX_STACK_ARG(t,"t")
HXLINE(  26)		::String _hx_tmp = ::Std_obj::string(t);
HXDLIN(  26)		::haxegon::Debug_obj::debuglog->push(_hx_tmp);
HXLINE(  27)		::haxegon::Debug_obj::showTest = true;
HXLINE(  28)		Bool _hx_tmp1 = (::haxegon::Debug_obj::debuglog->length > (int)20);
HXDLIN(  28)		if (_hx_tmp1) {
HXLINE(  29)			::haxegon::Debug_obj::debuglog->reverse();
HXLINE(  30)			::haxegon::Debug_obj::debuglog->pop();
HXLINE(  31)			::haxegon::Debug_obj::debuglog->reverse();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,log,(void))

void Debug_obj::test( ::Dynamic t){
            	HX_STACK_FRAME("haxegon.Debug","test",0x63101d3b,"haxegon.Debug.test","haxegon/Debug.hx",36,0x3e51dcba)
            	HX_STACK_ARG(t,"t")
HXLINE(  37)		::String _hx_tmp = ::Std_obj::string(t);
HXDLIN(  37)		::haxegon::Debug_obj::debuglog[(int)0] = _hx_tmp;
HXLINE(  38)		::haxegon::Debug_obj::showTest = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,test,(void))

void Debug_obj::showLog(){
            	HX_STACK_FRAME("haxegon.Debug","showLog",0xf737963e,"haxegon.Debug.showLog","haxegon/Debug.hx",42,0x3e51dcba)
HXLINE(  42)		Bool _hx_tmp = ::haxegon::Debug_obj::showTest;
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  43)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  43)			HX_VARI( Int,_g) = ::haxegon::Debug_obj::debuglog->length;
HXDLIN(  43)			while((_g1 < _g)){
HXLINE(  43)				HX_VARI( Int,k) = _g1++;
HXLINE(  44)				{
HXLINE(  44)					HX_VARI( Int,_g2) = (int)-1;
HXDLIN(  44)					while((_g2 < (int)2)){
HXLINE(  44)						HX_VARI( Int,j) = _g2++;
HXLINE(  45)						{
HXLINE(  45)							HX_VARI( Int,_g3) = (int)-1;
HXDLIN(  45)							while((_g3 < (int)2)){
HXLINE(  45)								HX_VARI( Int,i) = _g3++;
HXLINE(  46)								Int _hx_tmp1 = ((int)2 + i);
HXDLIN(  46)								Int _hx_tmp2 = ((::haxegon::Debug_obj::debuglog->length - (int)1) - k);
HXDLIN(  46)								Float _hx_tmp3 = ::haxegon::Text_obj::height();
HXDLIN(  46)								Int _hx_tmp4 = ::Std_obj::_hx_int(((int)2 + (_hx_tmp2 * (_hx_tmp3 + (int)2))));
HXDLIN(  46)								Int _hx_tmp5 = (j + _hx_tmp4);
HXDLIN(  46)								::String _hx_tmp6 = ::haxegon::Debug_obj::debuglog->__get(k);
HXDLIN(  46)								::haxegon::Text_obj::display(_hx_tmp1,_hx_tmp5,_hx_tmp6,::haxegon::Col_obj::rgb((int)0,(int)0,(int)0));
            							}
            						}
            					}
            				}
HXLINE(  49)				Int _hx_tmp7 = ((::haxegon::Debug_obj::debuglog->length - (int)1) - k);
HXDLIN(  49)				Float _hx_tmp8 = ::haxegon::Text_obj::height();
HXDLIN(  49)				Int _hx_tmp9 = ::Std_obj::_hx_int(((int)2 + (_hx_tmp7 * (_hx_tmp8 + (int)2))));
HXDLIN(  49)				::String _hx_tmp10 = ::haxegon::Debug_obj::debuglog->__get(k);
HXDLIN(  49)				::haxegon::Text_obj::display((int)2,_hx_tmp9,_hx_tmp10,::haxegon::Col_obj::rgb((int)255,(int)255,(int)255));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,showLog,(void))


Debug_obj::Debug_obj()
{
}

bool Debug_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { outValue = log_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"test") ) { outValue = test_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"showLog") ) { outValue = showLog_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"showTest") ) { outValue = showTest; return true; }
		if (HX_FIELD_EQ(inName,"debuglog") ) { outValue = debuglog; return true; }
		if (HX_FIELD_EQ(inName,"clearLog") ) { outValue = clearLog_dyn(); return true; }
	}
	return false;
}

bool Debug_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"showTest") ) { showTest=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"debuglog") ) { debuglog=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Debug_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Debug_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Debug_obj::showTest,HX_HCSTRING("showTest","\xef","\x8b","\x80","\xb4")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Debug_obj::debuglog,HX_HCSTRING("debuglog","\x11","\xf8","\xee","\x90")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Debug_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Debug_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Debug_obj::showTest,"showTest");
	HX_MARK_MEMBER_NAME(Debug_obj::debuglog,"debuglog");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Debug_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Debug_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Debug_obj::showTest,"showTest");
	HX_VISIT_MEMBER_NAME(Debug_obj::debuglog,"debuglog");
};

#endif

hx::Class Debug_obj::__mClass;

static ::String Debug_obj_sStaticFields[] = {
	HX_HCSTRING("showTest","\xef","\x8b","\x80","\xb4"),
	HX_HCSTRING("debuglog","\x11","\xf8","\xee","\x90"),
	HX_HCSTRING("clearLog","\xf7","\x50","\x0e","\x31"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"),
	HX_HCSTRING("showLog","\x87","\xb3","\x9e","\x7b"),
	::String(null())
};

void Debug_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Debug","\x25","\x34","\x50","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Debug_obj::__GetStatic;
	__mClass->mSetStaticField = &Debug_obj::__SetStatic;
	__mClass->mMarkFunc = Debug_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Debug_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Debug_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Debug_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Debug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Debug_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Debug_obj::__boot()
{
{
            	HX_STACK_FRAME("haxegon.Debug","boot",0x5731d91b,"haxegon.Debug.boot","haxegon/Debug.hx",17,0x3e51dcba)
HXLINE(  17)		debuglog = ::Array_obj< ::String >::__new();
            	}
}

} // end namespace haxegon
