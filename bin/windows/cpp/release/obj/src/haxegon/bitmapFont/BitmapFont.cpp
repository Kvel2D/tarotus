// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapFont
#include <haxegon/bitmapFont/BitmapFont.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapGlyphCollection
#include <haxegon/bitmapFont/BitmapGlyphCollection.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapGlyphFrame
#include <haxegon/bitmapFont/BitmapGlyphFrame.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace haxegon{
namespace bitmapFont{

void BitmapFont_obj::__construct(::String name, ::openfl::display::BitmapData bitmap){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","new",0xfa898172,"haxegon.bitmapFont.BitmapFont.new","haxegon/bitmapFont/BitmapFont.hx",15,0x0e43809e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(bitmap,"bitmap")
HXLINE( 160)		this->spaceWidth = (int)0;
HXLINE( 155)		this->minOffsetX = (int)0;
HXLINE( 147)		this->italic = false;
HXLINE( 145)		this->bold = false;
HXLINE( 143)		this->lineHeight = (int)0;
HXLINE( 141)		this->size = (int)0;
HXLINE( 174)		this->bitmap = bitmap;
HXLINE( 175)		this->fontName = name;
HXLINE( 176)		this->glyphs =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 177)		::haxegon::bitmapFont::BitmapFont_obj::store(name,hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic BitmapFont_obj::__CreateEmpty() { return new BitmapFont_obj; }

hx::ObjectPtr< BitmapFont_obj > BitmapFont_obj::__new(::String name, ::openfl::display::BitmapData bitmap)
{
	hx::ObjectPtr< BitmapFont_obj > _hx_result = new BitmapFont_obj();
	_hx_result->__construct(name,bitmap);
	return _hx_result;
}

Dynamic BitmapFont_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapFont_obj > _hx_result = new BitmapFont_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void BitmapFont_obj::dispose(){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","dispose",0xbde522b1,"haxegon.bitmapFont.BitmapFont.dispose","haxegon/bitmapFont/BitmapFont.hx",185,0x0e43809e)
            	HX_STACK_THIS(this)
HXLINE( 186)		Bool _hx_tmp = hx::IsNotNull( this->bitmap );
HXDLIN( 186)		if (_hx_tmp) {
HXLINE( 188)			this->bitmap->dispose();
            		}
HXLINE( 191)		this->bitmap = null();
HXLINE( 195)		this->glyphs = null();
HXLINE( 196)		this->fontName = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,dispose,(void))

void BitmapFont_obj::addGlyphFrame(Int charCode, ::openfl::geom::Rectangle frame,hx::Null< Int >  __o_offsetX,hx::Null< Int >  __o_offsetY,hx::Null< Int >  __o_xAdvance){
Int offsetX = __o_offsetX.Default(0);
Int offsetY = __o_offsetY.Default(0);
Int xAdvance = __o_xAdvance.Default(0);
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","addGlyphFrame",0xb5629ff4,"haxegon.bitmapFont.BitmapFont.addGlyphFrame","haxegon/bitmapFont/BitmapFont.hx",516,0x0e43809e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charCode,"charCode")
            	HX_STACK_ARG(frame,"frame")
            	HX_STACK_ARG(offsetX,"offsetX")
            	HX_STACK_ARG(offsetY,"offsetY")
            	HX_STACK_ARG(xAdvance,"xAdvance")
HXLINE( 517)		Bool _hx_tmp;
HXDLIN( 517)		Bool _hx_tmp1;
HXDLIN( 517)		if ((frame->width != (int)0)) {
HXLINE( 517)			_hx_tmp1 = (frame->height == (int)0);
            		}
            		else {
HXLINE( 517)			_hx_tmp1 = true;
            		}
HXDLIN( 517)		if (!(_hx_tmp1)) {
HXLINE( 517)			_hx_tmp = hx::IsNotNull( this->glyphs->get(charCode).StaticCast<  ::haxegon::bitmapFont::BitmapGlyphFrame >() );
            		}
            		else {
HXLINE( 517)			_hx_tmp = true;
            		}
HXDLIN( 517)		if (_hx_tmp) {
HXLINE( 517)			return;
            		}
HXLINE( 519)		HX_VARI(  ::haxegon::bitmapFont::BitmapGlyphFrame,glyphFrame) =  ::haxegon::bitmapFont::BitmapGlyphFrame_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 520)		glyphFrame->charCode = charCode;
HXLINE( 521)		glyphFrame->xoffset = offsetX;
HXLINE( 522)		glyphFrame->yoffset = offsetY;
HXLINE( 523)		glyphFrame->xadvance = xAdvance;
HXLINE( 524)		glyphFrame->rect = frame;
HXLINE( 530)		this->glyphs->set(charCode,glyphFrame);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapFont_obj,addGlyphFrame,(void))

 ::haxegon::bitmapFont::BitmapGlyphCollection BitmapFont_obj::prepareGlyphs(Float scale,Int color,hx::Null< Bool >  __o_useColor,hx::Null< Bool >  __o_smoothing){
Bool useColor = __o_useColor.Default(true);
Bool smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","prepareGlyphs",0xfadfd9c0,"haxegon.bitmapFont.BitmapFont.prepareGlyphs","haxegon/bitmapFont/BitmapFont.hx",545,0x0e43809e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(useColor,"useColor")
            	HX_STACK_ARG(smoothing,"smoothing")
HXLINE( 545)		return  ::haxegon::bitmapFont::BitmapGlyphCollection_obj::__new(hx::ObjectPtr<OBJ_>(this),scale,color,useColor,smoothing);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapFont_obj,prepareGlyphs,return )

Int BitmapFont_obj::spaceCode;

Int BitmapFont_obj::tabCode;

Int BitmapFont_obj::newLineCode;

::String BitmapFont_obj::defaultFontKey;

::String BitmapFont_obj::defaultFontData;

 ::haxe::ds::StringMap BitmapFont_obj::fonts;

void BitmapFont_obj::store(::String fontKey, ::haxegon::bitmapFont::BitmapFont font){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","store",0xbbe7ad73,"haxegon.bitmapFont.BitmapFont.store","haxegon/bitmapFont/BitmapFont.hx",34,0x0e43809e)
            	HX_STACK_ARG(fontKey,"fontKey")
            	HX_STACK_ARG(font,"font")
HXLINE(  34)		Bool _hx_tmp = !(::haxegon::bitmapFont::BitmapFont_obj::fonts->exists(fontKey));
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  36)			::haxegon::bitmapFont::BitmapFont_obj::fonts->set(fontKey,font);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,store,(void))

 ::haxegon::bitmapFont::BitmapFont BitmapFont_obj::get(::String fontKey){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","get",0xfa8431a8,"haxegon.bitmapFont.BitmapFont.get","haxegon/bitmapFont/BitmapFont.hx",47,0x0e43809e)
            	HX_STACK_ARG(fontKey,"fontKey")
HXLINE(  47)		return ::haxegon::bitmapFont::BitmapFont_obj::fonts->get(fontKey).StaticCast<  ::haxegon::bitmapFont::BitmapFont >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,get,return )

void BitmapFont_obj::remove(::String fontKey){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","remove",0xa41d6272,"haxegon.bitmapFont.BitmapFont.remove","haxegon/bitmapFont/BitmapFont.hx",55,0x0e43809e)
            	HX_STACK_ARG(fontKey,"fontKey")
HXLINE(  56)		HX_VARI(  ::haxegon::bitmapFont::BitmapFont,font) = ::haxegon::bitmapFont::BitmapFont_obj::fonts->get(fontKey).StaticCast<  ::haxegon::bitmapFont::BitmapFont >();
HXLINE(  57)		::haxegon::bitmapFont::BitmapFont_obj::fonts->remove(fontKey);
HXLINE(  59)		Bool _hx_tmp = hx::IsNotNull( font );
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  61)			font->dispose();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,remove,(void))

void BitmapFont_obj::clearFonts(){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","clearFonts",0xa67a6c25,"haxegon.bitmapFont.BitmapFont.clearFonts","haxegon/bitmapFont/BitmapFont.hx",69,0x0e43809e)
HXLINE(  70)		{
HXLINE(  70)			HX_VARI(  ::Dynamic,tmp) = ::haxegon::bitmapFont::BitmapFont_obj::fonts->iterator();
HXDLIN(  70)			while(true){
HXLINE(  70)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  70)				if (_hx_tmp) {
HXLINE(  70)					goto _hx_goto_0;
            				}
HXDLIN(  70)				HX_VARI(  ::haxegon::bitmapFont::BitmapFont,font) = ( ( ::haxegon::bitmapFont::BitmapFont)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  72)				font->dispose();
            			}
            			_hx_goto_0:;
            		}
HXLINE(  75)		::haxegon::bitmapFont::BitmapFont_obj::fonts =  ::haxe::ds::StringMap_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,clearFonts,(void))

 ::haxegon::bitmapFont::BitmapFont BitmapFont_obj::getDefaultFont(){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","getDefaultFont",0x8f494e68,"haxegon.bitmapFont.BitmapFont.getDefaultFont","haxegon/bitmapFont/BitmapFont.hx",82,0x0e43809e)
HXLINE(  83)		HX_VARI(  ::haxegon::bitmapFont::BitmapFont,font) = ::haxegon::bitmapFont::BitmapFont_obj::get(HX_("defaultFontKey",4f,88,64,c5));
HXLINE(  85)		Bool _hx_tmp = hx::IsNotNull( font );
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  87)			return font;
            		}
HXLINE(  90)		HX_VARI( ::String,letters) = HX_("",00,00,00,00);
HXLINE(  91)		HX_VARI(  ::openfl::display::BitmapData,bd) =  ::openfl::display::BitmapData_obj::__new((int)700,(int)9,true,(int)-7829368);
HXLINE(  93)		HX_VARI( Int,letterPos) = (int)0;
HXLINE(  94)		HX_VARI( Int,i) = (int)0;
HXLINE(  96)		while((i < HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).length)){
HXLINE(  98)			::String _hx_tmp1 = HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).substr(i,(int)1);
HXDLIN(  98)			hx::AddEq(letters,_hx_tmp1);
HXLINE( 100)			Int _hx_tmp2 = ++i;
HXDLIN( 100)			::String _hx_tmp3 = HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).substr(_hx_tmp2,(int)1);
HXDLIN( 100)			HX_VARI( Int,gw) = ::Std_obj::parseInt(_hx_tmp3);
HXLINE( 101)			Int _hx_tmp4 = ++i;
HXDLIN( 101)			::String _hx_tmp5 = HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).substr(_hx_tmp4,(int)1);
HXDLIN( 101)			HX_VARI( Int,gh) = ::Std_obj::parseInt(_hx_tmp5);
HXLINE( 103)			{
HXLINE( 103)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 103)				while((_g1 < gh)){
HXLINE( 103)					HX_VARI( Int,py) = _g1++;
HXLINE( 105)					{
HXLINE( 105)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 105)						while((_g3 < gw)){
HXLINE( 105)							HX_VARI( Int,px) = _g3++;
HXLINE( 107)							++i;
HXLINE( 109)							::String _hx_tmp6 = HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).substr(i,(int)1);
HXDLIN( 109)							if ((_hx_tmp6 == HX_("1",31,00,00,00))) {
HXLINE( 111)								bd->setPixel32((((int)1 + (letterPos * (int)7)) + px),((int)1 + py),(int)-1);
            							}
            							else {
HXLINE( 115)								bd->setPixel32((((int)1 + (letterPos * (int)7)) + px),((int)1 + py),(int)0);
            							}
            						}
            					}
            				}
            			}
HXLINE( 120)			++i;
HXLINE( 121)			++letterPos;
            		}
HXLINE( 124)		return ::haxegon::bitmapFont::BitmapFont_obj::fromXNA(HX_("defaultFontKey",4f,88,64,c5),bd,letters,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,getDefaultFont,return )

::String BitmapFont_obj::DEFAULT_GLYPHS;

 ::openfl::geom::Point BitmapFont_obj::POINT;

 ::openfl::geom::Matrix BitmapFont_obj::MATRIX;

 ::openfl::geom::ColorTransform BitmapFont_obj::COLOR_TRANSFORM;

 ::haxegon::bitmapFont::BitmapFont BitmapFont_obj::fromAngelCode( ::openfl::display::BitmapData Source, ::Xml Data){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","fromAngelCode",0xf4624856,"haxegon.bitmapFont.BitmapFont.fromAngelCode","haxegon/bitmapFont/BitmapFont.hx",207,0x0e43809e)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Data,"Data")
HXLINE( 208)		 ::Xml _hx_tmp = Data->firstElement();
HXDLIN( 208)		HX_VARI(  ::haxe::xml::Fast,fast) =  ::haxe::xml::Fast_obj::__new(_hx_tmp);
HXLINE( 209)		::String _hx_tmp1 = fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("face",9d,b4,b5,43));
HXDLIN( 209)		HX_VARI( ::String,fontName) = ::Std_obj::string(_hx_tmp1);
HXLINE( 211)		HX_VARI(  ::haxegon::bitmapFont::BitmapFont,font) = ::haxegon::bitmapFont::BitmapFont_obj::get(fontName);
HXLINE( 213)		Bool _hx_tmp2 = hx::IsNotNull( font );
HXDLIN( 213)		if (_hx_tmp2) {
HXLINE( 215)			return font;
            		}
HXLINE( 218)		font =  ::haxegon::bitmapFont::BitmapFont_obj::__new(fontName,Source);
HXLINE( 219)		::String _hx_tmp3 = fast->node->resolve(HX_("common",2b,75,2e,c7))->att->resolve(HX_("lineHeight",fb,02,f4,d6));
HXDLIN( 219)		font->lineHeight = ::Std_obj::parseInt(_hx_tmp3);
HXLINE( 220)		::String _hx_tmp4 = fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("size",c1,a0,53,4c));
HXDLIN( 220)		font->size = ::Std_obj::parseInt(_hx_tmp4);
HXLINE( 221)		::String _hx_tmp5 = fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("face",9d,b4,b5,43));
HXDLIN( 221)		font->fontName = ::Std_obj::string(_hx_tmp5);
HXLINE( 222)		::String _hx_tmp6 = fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("bold",85,81,1b,41));
HXDLIN( 222)		 ::Dynamic _hx_tmp7 = ::Std_obj::parseInt(_hx_tmp6);
HXDLIN( 222)		font->bold = hx::IsNotEq( _hx_tmp7,(int)0 );
HXLINE( 223)		::String _hx_tmp8 = fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("italic",f0,2e,64,06));
HXDLIN( 223)		 ::Dynamic _hx_tmp9 = ::Std_obj::parseInt(_hx_tmp8);
HXDLIN( 223)		font->italic = hx::IsNotEq( _hx_tmp9,(int)0 );
HXLINE( 225)		HX_VAR(  ::openfl::geom::Rectangle,frame);
HXLINE( 226)		HX_VAR( ::String,glyph);
HXLINE( 227)		HX_VAR( Int,charCode);
HXLINE( 228)		HX_VARI( Int,spaceCharCode) = HX_(" ",20,00,00,00).charCodeAt((int)0);
HXLINE( 229)		HX_VAR( Int,xOffset);
HXDLIN( 229)		HX_VAR( Int,yOffset);
HXDLIN( 229)		HX_VAR( Int,xAdvance);
HXLINE( 230)		HX_VAR( Int,frameHeight);
HXLINE( 232)		HX_VARI(  ::haxe::xml::Fast,chars) = fast->node->resolve(HX_("chars",dd,9c,b3,45));
HXLINE( 234)		{
HXLINE( 234)			HX_VAR(  ::_List::ListNode,_g_head);
HXDLIN( 234)			 ::List _this = chars->nodes->resolve(HX_("char",d6,5e,bf,41));
HXLINE( 206)			_g_head = _this->h;
HXLINE( 234)			while(true){
HXLINE( 234)				Bool _hx_tmp10 = !(hx::IsNotNull( _g_head ));
HXDLIN( 234)				if (_hx_tmp10) {
HXLINE( 234)					goto _hx_goto_4;
            				}
HXDLIN( 234)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXLINE( 206)				_g_head = _g_head->next;
HXLINE( 236)				frame =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 237)				::String _hx_tmp11 = val->att->resolve(HX_("x",78,00,00,00));
HXDLIN( 237)				frame->x = ::Std_obj::parseInt(_hx_tmp11);
HXLINE( 238)				::String _hx_tmp12 = val->att->resolve(HX_("y",79,00,00,00));
HXDLIN( 238)				frame->y = ::Std_obj::parseInt(_hx_tmp12);
HXLINE( 239)				::String _hx_tmp13 = val->att->resolve(HX_("width",06,b6,62,ca));
HXDLIN( 239)				frame->width = ::Std_obj::parseInt(_hx_tmp13);
HXLINE( 240)				::String _hx_tmp14 = val->att->resolve(HX_("height",e7,07,4c,02));
HXDLIN( 240)				frameHeight = ::Std_obj::parseInt(_hx_tmp14);
HXLINE( 241)				frame->height = frameHeight;
HXLINE( 243)				Bool _hx_tmp15 = val->has->resolve(HX_("xoffset",0b,42,4f,de));
HXDLIN( 243)				if (_hx_tmp15) {
HXLINE( 243)					::String _hx_tmp16 = val->att->resolve(HX_("xoffset",0b,42,4f,de));
HXDLIN( 243)					xOffset = ::Std_obj::parseInt(_hx_tmp16);
            				}
            				else {
HXLINE( 243)					xOffset = (int)0;
            				}
HXLINE( 244)				Bool _hx_tmp17 = val->has->resolve(HX_("yoffset",cc,b8,e4,07));
HXDLIN( 244)				if (_hx_tmp17) {
HXLINE( 244)					::String _hx_tmp18 = val->att->resolve(HX_("yoffset",cc,b8,e4,07));
HXDLIN( 244)					yOffset = ::Std_obj::parseInt(_hx_tmp18);
            				}
            				else {
HXLINE( 244)					yOffset = (int)0;
            				}
HXLINE( 245)				Bool _hx_tmp19 = val->has->resolve(HX_("xadvance",0a,87,b1,be));
HXDLIN( 245)				if (_hx_tmp19) {
HXLINE( 245)					::String _hx_tmp20 = val->att->resolve(HX_("xadvance",0a,87,b1,be));
HXDLIN( 245)					xAdvance = ::Std_obj::parseInt(_hx_tmp20);
            				}
            				else {
HXLINE( 245)					xAdvance = (int)0;
            				}
HXLINE( 247)				Int _hx_tmp21;
HXDLIN( 247)				if ((font->minOffsetX > xOffset)) {
HXLINE( 247)					_hx_tmp21 = xOffset;
            				}
            				else {
HXLINE( 247)					_hx_tmp21 = font->minOffsetX;
            				}
HXDLIN( 247)				font->minOffsetX = _hx_tmp21;
HXLINE( 249)				glyph = null();
HXLINE( 250)				charCode = (int)-1;
HXLINE( 252)				Bool _hx_tmp22 = val->has->resolve(HX_("letter",e6,ac,08,a3));
HXDLIN( 252)				if (_hx_tmp22) {
HXLINE( 254)					glyph = val->att->resolve(HX_("letter",e6,ac,08,a3));
            				}
            				else {
HXLINE( 256)					Bool _hx_tmp23 = val->has->resolve(HX_("id",db,5b,00,00));
HXDLIN( 256)					if (_hx_tmp23) {
HXLINE( 258)						::String _hx_tmp24 = val->att->resolve(HX_("id",db,5b,00,00));
HXDLIN( 258)						charCode = ::Std_obj::parseInt(_hx_tmp24);
            					}
            				}
HXLINE( 261)				Bool _hx_tmp25;
HXDLIN( 261)				if ((charCode == (int)-1)) {
HXLINE( 261)					_hx_tmp25 = hx::IsNull( glyph );
            				}
            				else {
HXLINE( 261)					_hx_tmp25 = false;
            				}
HXDLIN( 261)				if (_hx_tmp25) {
HXLINE( 263)					HX_STACK_DO_THROW(HX_("Invalid font xml data!",46,95,43,b9));
            				}
HXLINE( 266)				Bool _hx_tmp26 = hx::IsNotNull( glyph );
HXDLIN( 266)				if (_hx_tmp26) {
HXLINE( 268)					::String _hx_tmp27 = glyph;
HXDLIN( 268)					::String _hx_switch_0 = _hx_tmp27;
            					if (  (_hx_switch_0==HX_("&amp;",dd,d4,aa,21)) ){
HXLINE( 272)						glyph = HX_("&",26,00,00,00);
HXDLIN( 272)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_0==HX_("&gt;",08,a9,6c,19)) ){
HXLINE( 273)						glyph = HX_(">",3e,00,00,00);
HXDLIN( 273)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_0==HX_("&lt;",4d,74,70,19)) ){
HXLINE( 274)						glyph = HX_("<",3c,00,00,00);
HXDLIN( 274)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_0==HX_("&quot;",2c,d9,81,8f)) ){
HXLINE( 271)						glyph = HX_("\"",22,00,00,00);
HXDLIN( 271)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_0==HX_("space",c6,8c,66,81)) ){
HXLINE( 270)						glyph = HX_(" ",20,00,00,00);
HXDLIN( 270)						goto _hx_goto_5;
            					}
            					/* default */{
HXLINE( 275)						glyph = glyph;
            					}
            					_hx_goto_5:;
HXLINE( 278)					charCode = ::haxe::Utf8_obj::charCodeAt(glyph,(int)0);
            				}
HXLINE( 281)				font->addGlyphFrame(charCode,frame,xOffset,yOffset,xAdvance);
HXLINE( 283)				if ((charCode == spaceCharCode)) {
HXLINE( 285)					font->spaceWidth = xAdvance;
            				}
            				else {
HXLINE( 289)					Int _hx_tmp28;
HXDLIN( 289)					if ((font->lineHeight > (frameHeight + yOffset))) {
HXLINE( 289)						_hx_tmp28 = font->lineHeight;
            					}
            					else {
HXLINE( 289)						_hx_tmp28 = (frameHeight + yOffset);
            					}
HXDLIN( 289)					font->lineHeight = _hx_tmp28;
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 293)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,fromAngelCode,return )

 ::haxegon::bitmapFont::BitmapFont BitmapFont_obj::fromXNA(::String key, ::openfl::display::BitmapData source,::String letters,hx::Null< Int >  __o_glyphBGColor){
Int glyphBGColor = __o_glyphBGColor.Default(0);
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","fromXNA",0x5a9ec573,"haxegon.bitmapFont.BitmapFont.fromXNA","haxegon/bitmapFont/BitmapFont.hx",307,0x0e43809e)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(letters,"letters")
            	HX_STACK_ARG(glyphBGColor,"glyphBGColor")
HXLINE( 308)		HX_VARI(  ::haxegon::bitmapFont::BitmapFont,font) = ::haxegon::bitmapFont::BitmapFont_obj::get(key);
HXLINE( 310)		Bool _hx_tmp = hx::IsNotNull( font );
HXDLIN( 310)		if (_hx_tmp) {
HXLINE( 312)			return font;
            		}
HXLINE( 315)		font =  ::haxegon::bitmapFont::BitmapFont_obj::__new(key,source);
HXLINE( 316)		font->fontName = key;
HXLINE( 318)		Bool _hx_tmp1 = hx::IsNull( letters );
HXDLIN( 318)		if (_hx_tmp1) {
HXLINE( 318)			letters = HX_(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",6f,61,48,0a);
            		}
            		else {
HXLINE( 318)			letters = letters;
            		}
HXLINE( 321)		HX_VARI( Int,globalBGColor) = source->getPixel((int)0,(int)0);
HXLINE( 322)		HX_VARI( Int,cy) = (int)0;
HXLINE( 323)		HX_VAR( Int,cx);
HXLINE( 324)		HX_VARI( Int,letterIdx) = (int)0;
HXLINE( 325)		HX_VAR( Int,charCode);
HXLINE( 326)		HX_VARI( Int,numLetters) = ::haxe::Utf8_obj::length(letters);
HXLINE( 327)		HX_VAR(  ::openfl::geom::Rectangle,rect);
HXLINE( 330)		while(true){
HXLINE( 330)			Bool _hx_tmp2;
HXDLIN( 330)			if ((cy < source->height)) {
HXLINE( 330)				_hx_tmp2 = (letterIdx < numLetters);
            			}
            			else {
HXLINE( 330)				_hx_tmp2 = false;
            			}
HXDLIN( 330)			if (!(_hx_tmp2)) {
HXLINE( 330)				goto _hx_goto_6;
            			}
HXLINE( 332)			HX_VARI( Int,rowHeight) = (int)0;
HXLINE( 333)			cx = (int)0;
HXLINE( 335)			while(true){
HXLINE( 335)				Bool _hx_tmp3;
HXDLIN( 335)				if ((cx < source->width)) {
HXLINE( 335)					_hx_tmp3 = (letterIdx < numLetters);
            				}
            				else {
HXLINE( 335)					_hx_tmp3 = false;
            				}
HXDLIN( 335)				if (!(_hx_tmp3)) {
HXLINE( 335)					goto _hx_goto_7;
            				}
HXLINE( 337)				Int _hx_tmp4 = source->getPixel(cx,cy);
HXDLIN( 337)				Int _hx_tmp5 = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 337)				if ((_hx_tmp5 != globalBGColor)) {
HXLINE( 340)					HX_VARI( Int,gx) = cx;
HXLINE( 341)					HX_VARI( Int,gy) = cy;
HXLINE( 344)					while(true){
HXLINE( 344)						Int _hx_tmp6 = source->getPixel(gx,cy);
HXDLIN( 344)						Int _hx_tmp7 = ::Std_obj::_hx_int(_hx_tmp6);
HXDLIN( 344)						if (!((_hx_tmp7 != globalBGColor))) {
HXLINE( 344)							goto _hx_goto_8;
            						}
HXDLIN( 344)						++gx;
            					}
            					_hx_goto_8:;
HXLINE( 345)					while(true){
HXLINE( 345)						Int _hx_tmp8 = source->getPixel(cx,gy);
HXDLIN( 345)						Int _hx_tmp9 = ::Std_obj::_hx_int(_hx_tmp8);
HXDLIN( 345)						if (!((_hx_tmp9 != globalBGColor))) {
HXLINE( 345)							goto _hx_goto_9;
            						}
HXDLIN( 345)						++gy;
            					}
            					_hx_goto_9:;
HXLINE( 347)					HX_VARI( Int,gw) = (gx - cx);
HXLINE( 348)					HX_VARI( Int,gh) = (gy - cy);
HXLINE( 350)					charCode = ::haxe::Utf8_obj::charCodeAt(letters,letterIdx);
HXLINE( 352)					rect =  ::openfl::geom::Rectangle_obj::__new(cx,cy,gw,gh);
HXLINE( 356)					font->addGlyphFrame(charCode,rect,(int)0,(int)0,gw);
HXLINE( 358)					if ((charCode == (int)32)) {
HXLINE( 360)						font->spaceWidth = gw;
            					}
HXLINE( 364)					Bool _hx_tmp10 = (gh > rowHeight);
HXDLIN( 364)					if (_hx_tmp10) {
HXLINE( 364)						rowHeight = gh;
            					}
HXLINE( 365)					Bool _hx_tmp11 = (gh > font->size);
HXDLIN( 365)					if (_hx_tmp11) {
HXLINE( 365)						font->size = gh;
            					}
HXLINE( 368)					hx::AddEq(cx,gw);
HXLINE( 369)					++letterIdx;
            				}
HXLINE( 372)				++cx;
            			}
            			_hx_goto_7:;
HXLINE( 376)			hx::AddEq(cy,(rowHeight + (int)1));
            		}
            		_hx_goto_6:;
HXLINE( 379)		font->lineHeight = font->size;
HXLINE( 382)		::haxegon::bitmapFont::BitmapFont_obj::POINT->x = (::haxegon::bitmapFont::BitmapFont_obj::POINT->y = (int)0);
HXLINE( 383)		HX_VARI( Int,bgColor32) = source->getPixel32((int)0,(int)0);
HXLINE( 385)		source->threshold(source,source->rect,::haxegon::bitmapFont::BitmapFont_obj::POINT,HX_("==",60,35,00,00),bgColor32,(int)0,(int)-1,true);
HXLINE( 389)		if ((glyphBGColor != (int)0)) {
HXLINE( 392)			source->threshold(source,source->rect,::haxegon::bitmapFont::BitmapFont_obj::POINT,HX_("==",60,35,00,00),glyphBGColor,(int)0,(int)-1,true);
            		}
HXLINE( 398)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(BitmapFont_obj,fromXNA,return )

 ::openfl::display::BitmapData BitmapFont_obj::replaceColor( ::openfl::display::BitmapData bitmapData,Int color,Int newColor){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","replaceColor",0xd733f93d,"haxegon.bitmapFont.BitmapFont.replaceColor","haxegon/bitmapFont/BitmapFont.hx",402,0x0e43809e)
            	HX_STACK_ARG(bitmapData,"bitmapData")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(newColor,"newColor")
HXLINE( 403)		HX_VARI( Int,row) = (int)0;
HXLINE( 404)		HX_VARI( Int,column) = (int)0;
HXLINE( 405)		HX_VARI( Int,rows) = bitmapData->height;
HXLINE( 406)		HX_VARI( Int,columns) = bitmapData->width;
HXLINE( 407)		bitmapData->lock();
HXLINE( 408)		while((row < rows)){
HXLINE( 410)			column = (int)0;
HXLINE( 411)			while((column < columns)){
HXLINE( 413)				Int _hx_tmp = bitmapData->getPixel32(column,row);
HXDLIN( 413)				if ((_hx_tmp == color)) {
HXLINE( 415)					bitmapData->setPixel32(column,row,newColor);
            				}
HXLINE( 417)				++column;
            			}
HXLINE( 419)			++row;
            		}
HXLINE( 421)		bitmapData->unlock(null());
HXLINE( 423)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapFont_obj,replaceColor,return )

 ::haxegon::bitmapFont::BitmapFont BitmapFont_obj::fromMonospace(::String key, ::openfl::display::BitmapData source,::String letters, ::openfl::geom::Point charSize, ::openfl::geom::Rectangle region, ::openfl::geom::Point spacing){
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","fromMonospace",0x590f8a8b,"haxegon.bitmapFont.BitmapFont.fromMonospace","haxegon/bitmapFont/BitmapFont.hx",438,0x0e43809e)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(letters,"letters")
            	HX_STACK_ARG(charSize,"charSize")
            	HX_STACK_ARG(region,"region")
            	HX_STACK_ARG(spacing,"spacing")
HXLINE( 439)		HX_VARI(  ::haxegon::bitmapFont::BitmapFont,font) = ::haxegon::bitmapFont::BitmapFont_obj::get(key);
HXLINE( 440)		Bool _hx_tmp = hx::IsNotNull( font );
HXDLIN( 440)		if (_hx_tmp) {
HXLINE( 441)			return font;
            		}
HXLINE( 443)		Bool _hx_tmp1 = hx::IsNull( letters );
HXDLIN( 443)		if (_hx_tmp1) {
HXLINE( 443)			letters = HX_(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",6f,61,48,0a);
            		}
            		else {
HXLINE( 443)			letters = letters;
            		}
HXLINE( 445)		Bool _hx_tmp2 = hx::IsNull( region );
HXDLIN( 445)		if (_hx_tmp2) {
HXLINE( 445)			region = source->rect;
            		}
            		else {
HXLINE( 445)			region = region;
            		}
HXLINE( 447)		Bool _hx_tmp3;
HXDLIN( 447)		Bool _hx_tmp4 = (region->width != (int)0);
HXDLIN( 447)		if (_hx_tmp4) {
HXLINE( 447)			Float _hx_tmp5 = region->get_right();
HXDLIN( 447)			_hx_tmp3 = (_hx_tmp5 > source->width);
            		}
            		else {
HXLINE( 447)			_hx_tmp3 = true;
            		}
HXDLIN( 447)		if (_hx_tmp3) {
HXLINE( 449)			region->width = (source->width - region->x);
            		}
HXLINE( 452)		Bool _hx_tmp6;
HXDLIN( 452)		Bool _hx_tmp7 = (region->height != (int)0);
HXDLIN( 452)		if (_hx_tmp7) {
HXLINE( 452)			Float _hx_tmp8 = region->get_bottom();
HXDLIN( 452)			_hx_tmp6 = (_hx_tmp8 > source->height);
            		}
            		else {
HXLINE( 452)			_hx_tmp6 = true;
            		}
HXDLIN( 452)		if (_hx_tmp6) {
HXLINE( 454)			region->height = (source->height - region->y);
            		}
HXLINE( 457)		Bool _hx_tmp9 = hx::IsNull( spacing );
HXDLIN( 457)		if (_hx_tmp9) {
HXLINE( 457)			spacing =  ::openfl::geom::Point_obj::__new((int)0,(int)0);
            		}
            		else {
HXLINE( 457)			spacing = spacing;
            		}
HXLINE( 459)		HX_VARI( Int,bitmapWidth) = ::Std_obj::_hx_int(region->width);
HXLINE( 460)		HX_VARI( Int,bitmapHeight) = ::Std_obj::_hx_int(region->height);
HXLINE( 462)		HX_VARI( Int,startX) = ::Std_obj::_hx_int(region->x);
HXLINE( 463)		HX_VARI( Int,startY) = ::Std_obj::_hx_int(region->y);
HXLINE( 465)		HX_VARI( Int,xSpacing) = ::Std_obj::_hx_int(spacing->x);
HXLINE( 466)		HX_VARI( Int,ySpacing) = ::Std_obj::_hx_int(spacing->y);
HXLINE( 468)		HX_VARI( Int,charWidth) = ::Std_obj::_hx_int(charSize->x);
HXLINE( 469)		HX_VARI( Int,charHeight) = ::Std_obj::_hx_int(charSize->y);
HXLINE( 471)		HX_VARI( Int,spacedWidth) = (charWidth + xSpacing);
HXLINE( 472)		HX_VARI( Int,spacedHeight) = (charHeight + ySpacing);
HXLINE( 474)		HX_VAR( Int,numRows);
HXDLIN( 474)		if ((charHeight == (int)0)) {
HXLINE( 474)			numRows = (int)1;
            		}
            		else {
HXLINE( 474)			numRows = ::Std_obj::_hx_int(((Float)(bitmapHeight + ySpacing) / (Float)spacedHeight));
            		}
HXLINE( 475)		HX_VAR( Int,numCols);
HXDLIN( 475)		if ((charWidth == (int)0)) {
HXLINE( 475)			numCols = (int)1;
            		}
            		else {
HXLINE( 475)			numCols = ::Std_obj::_hx_int(((Float)(bitmapWidth + xSpacing) / (Float)spacedWidth));
            		}
HXLINE( 477)		font =  ::haxegon::bitmapFont::BitmapFont_obj::__new(key,source);
HXLINE( 478)		font->fontName = key;
HXLINE( 479)		font->lineHeight = (font->size = charHeight);
HXLINE( 481)		HX_VAR(  ::openfl::geom::Rectangle,charRect);
HXLINE( 483)		font->spaceWidth = charWidth;
HXLINE( 484)		HX_VARI( Int,letterIndex) = (int)0;
HXLINE( 485)		HX_VARI( Int,numLetters) = letters.length;
HXLINE( 487)		{
HXLINE( 487)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 487)			HX_VARI( Int,_g) = numRows;
HXDLIN( 487)			while((_g1 < _g)){
HXLINE( 487)				HX_VARI( Int,j) = _g1++;
HXLINE( 489)				{
HXLINE( 489)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 489)					HX_VARI( Int,_g2) = numCols;
HXDLIN( 489)					while((_g3 < _g2)){
HXLINE( 489)						HX_VARI( Int,i) = _g3++;
HXLINE( 491)						charRect =  ::openfl::geom::Rectangle_obj::__new((startX + (i * spacedWidth)),(startY + (j * spacedHeight)),charWidth,charHeight);
HXLINE( 492)						Int _hx_tmp10 = ::haxe::Utf8_obj::charCodeAt(letters,letterIndex);
HXDLIN( 492)						font->addGlyphFrame(_hx_tmp10,charRect,(int)0,(int)0,charWidth);
HXLINE( 494)						++letterIndex;
HXLINE( 496)						if ((letterIndex >= numLetters)) {
HXLINE( 498)							return font;
            						}
            					}
            				}
            			}
            		}
HXLINE( 503)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(BitmapFont_obj,fromMonospace,return )


BitmapFont_obj::BitmapFont_obj()
{
}

void BitmapFont_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapFont);
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(lineHeight,"lineHeight");
	HX_MARK_MEMBER_NAME(bold,"bold");
	HX_MARK_MEMBER_NAME(italic,"italic");
	HX_MARK_MEMBER_NAME(fontName,"fontName");
	HX_MARK_MEMBER_NAME(minOffsetX,"minOffsetX");
	HX_MARK_MEMBER_NAME(spaceWidth,"spaceWidth");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(glyphs,"glyphs");
	HX_MARK_END_CLASS();
}

void BitmapFont_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(lineHeight,"lineHeight");
	HX_VISIT_MEMBER_NAME(bold,"bold");
	HX_VISIT_MEMBER_NAME(italic,"italic");
	HX_VISIT_MEMBER_NAME(fontName,"fontName");
	HX_VISIT_MEMBER_NAME(minOffsetX,"minOffsetX");
	HX_VISIT_MEMBER_NAME(spaceWidth,"spaceWidth");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(glyphs,"glyphs");
}

hx::Val BitmapFont_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size); }
		if (HX_FIELD_EQ(inName,"bold") ) { return hx::Val( bold); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { return hx::Val( italic); }
		if (HX_FIELD_EQ(inName,"bitmap") ) { return hx::Val( bitmap); }
		if (HX_FIELD_EQ(inName,"glyphs") ) { return hx::Val( glyphs); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { return hx::Val( fontName); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineHeight") ) { return hx::Val( lineHeight); }
		if (HX_FIELD_EQ(inName,"minOffsetX") ) { return hx::Val( minOffsetX); }
		if (HX_FIELD_EQ(inName,"spaceWidth") ) { return hx::Val( spaceWidth); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addGlyphFrame") ) { return hx::Val( addGlyphFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"prepareGlyphs") ) { return hx::Val( prepareGlyphs_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapFont_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fonts") ) { outValue = fonts; return true; }
		if (HX_FIELD_EQ(inName,"store") ) { outValue = store_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"POINT") ) { outValue = POINT; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"MATRIX") ) { outValue = MATRIX; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromXNA") ) { outValue = fromXNA_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearFonts") ) { outValue = clearFonts_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"replaceColor") ) { outValue = replaceColor_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromAngelCode") ) { outValue = fromAngelCode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromMonospace") ) { outValue = fromMonospace_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getDefaultFont") ) { outValue = getDefaultFont_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"COLOR_TRANSFORM") ) { outValue = COLOR_TRANSFORM; return true; }
	}
	return false;
}

hx::Val BitmapFont_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bold") ) { bold=inValue.Cast< Bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { italic=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glyphs") ) { glyphs=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { fontName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineHeight") ) { lineHeight=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minOffsetX") ) { minOffsetX=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spaceWidth") ) { spaceWidth=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapFont_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fonts") ) { fonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"POINT") ) { POINT=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"MATRIX") ) { MATRIX=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"COLOR_TRANSFORM") ) { COLOR_TRANSFORM=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

void BitmapFont_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6"));
	outFields->push(HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"));
	outFields->push(HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"));
	outFields->push(HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb"));
	outFields->push(HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d"));
	outFields->push(HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b"));
	outFields->push(HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"));
	outFields->push(HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapFont_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapFont_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,lineHeight),HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6")},
	{hx::fsBool,(int)offsetof(BitmapFont_obj,bold),HX_HCSTRING("bold","\x85","\x81","\x1b","\x41")},
	{hx::fsBool,(int)offsetof(BitmapFont_obj,italic),HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06")},
	{hx::fsString,(int)offsetof(BitmapFont_obj,fontName),HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,minOffsetX),HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,spaceWidth),HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(BitmapFont_obj,bitmap),HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(BitmapFont_obj,glyphs),HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapFont_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BitmapFont_obj::spaceCode,HX_HCSTRING("spaceCode","\x13","\x45","\x91","\x73")},
	{hx::fsInt,(void *) &BitmapFont_obj::tabCode,HX_HCSTRING("tabCode","\x22","\x86","\x3a","\x3a")},
	{hx::fsInt,(void *) &BitmapFont_obj::newLineCode,HX_HCSTRING("newLineCode","\xc1","\xeb","\xca","\xa3")},
	{hx::fsString,(void *) &BitmapFont_obj::defaultFontKey,HX_HCSTRING("defaultFontKey","\x4f","\x88","\x64","\xc5")},
	{hx::fsString,(void *) &BitmapFont_obj::defaultFontData,HX_HCSTRING("defaultFontData","\x7a","\x31","\xef","\xed")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &BitmapFont_obj::fonts,HX_HCSTRING("fonts","\xc4","\xb7","\x91","\x04")},
	{hx::fsString,(void *) &BitmapFont_obj::DEFAULT_GLYPHS,HX_HCSTRING("DEFAULT_GLYPHS","\x65","\x50","\x02","\x42")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &BitmapFont_obj::POINT,HX_HCSTRING("POINT","\x30","\xec","\x7d","\x44")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &BitmapFont_obj::MATRIX,HX_HCSTRING("MATRIX","\x41","\xe2","\x4a","\x6e")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(void *) &BitmapFont_obj::COLOR_TRANSFORM,HX_HCSTRING("COLOR_TRANSFORM","\x10","\x14","\x5c","\xf4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapFont_obj_sMemberFields[] = {
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6"),
	HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"),
	HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"),
	HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb"),
	HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d"),
	HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("addGlyphFrame","\x62","\x24","\x22","\x2f"),
	HX_HCSTRING("prepareGlyphs","\x2e","\x5e","\x9f","\x74"),
	::String(null()) };

static void BitmapFont_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::spaceCode,"spaceCode");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::tabCode,"tabCode");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::newLineCode,"newLineCode");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::defaultFontKey,"defaultFontKey");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::defaultFontData,"defaultFontData");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::fonts,"fonts");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::DEFAULT_GLYPHS,"DEFAULT_GLYPHS");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::POINT,"POINT");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::MATRIX,"MATRIX");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::COLOR_TRANSFORM,"COLOR_TRANSFORM");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapFont_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::spaceCode,"spaceCode");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::tabCode,"tabCode");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::newLineCode,"newLineCode");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::defaultFontKey,"defaultFontKey");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::defaultFontData,"defaultFontData");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::fonts,"fonts");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::DEFAULT_GLYPHS,"DEFAULT_GLYPHS");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::POINT,"POINT");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::MATRIX,"MATRIX");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::COLOR_TRANSFORM,"COLOR_TRANSFORM");
};

#endif

hx::Class BitmapFont_obj::__mClass;

static ::String BitmapFont_obj_sStaticFields[] = {
	HX_HCSTRING("spaceCode","\x13","\x45","\x91","\x73"),
	HX_HCSTRING("tabCode","\x22","\x86","\x3a","\x3a"),
	HX_HCSTRING("newLineCode","\xc1","\xeb","\xca","\xa3"),
	HX_HCSTRING("defaultFontKey","\x4f","\x88","\x64","\xc5"),
	HX_HCSTRING("defaultFontData","\x7a","\x31","\xef","\xed"),
	HX_HCSTRING("fonts","\xc4","\xb7","\x91","\x04"),
	HX_HCSTRING("store","\xe1","\x13","\x16","\x84"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clearFonts","\xf7","\xf6","\x9b","\xd9"),
	HX_HCSTRING("getDefaultFont","\x3a","\xaa","\x1d","\x9d"),
	HX_HCSTRING("DEFAULT_GLYPHS","\x65","\x50","\x02","\x42"),
	HX_HCSTRING("POINT","\x30","\xec","\x7d","\x44"),
	HX_HCSTRING("MATRIX","\x41","\xe2","\x4a","\x6e"),
	HX_HCSTRING("COLOR_TRANSFORM","\x10","\x14","\x5c","\xf4"),
	HX_HCSTRING("fromAngelCode","\xc4","\xcc","\x21","\x6e"),
	HX_HCSTRING("fromXNA","\x61","\x23","\x06","\x58"),
	HX_HCSTRING("replaceColor","\x8f","\x5c","\xeb","\x3d"),
	HX_HCSTRING("fromMonospace","\xf9","\x0e","\xcf","\xd2"),
	::String(null())
};

void BitmapFont_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.bitmapFont.BitmapFont","\x80","\xa0","\x33","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapFont_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapFont_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapFont_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapFont_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapFont_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapFont_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapFont_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapFont_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapFont_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapFont_obj::__boot()
{
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",17,0x0e43809e)
HXLINE(  17)		spaceCode = (int)32;
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",18,0x0e43809e)
HXLINE(  18)		tabCode = (int)9;
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",19,0x0e43809e)
HXLINE(  19)		newLineCode = (int)10;
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",21,0x0e43809e)
HXLINE(  21)		defaultFontKey = HX_("defaultFontKey",4f,88,64,c5);
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",23,0x0e43809e)
HXLINE(  23)		defaultFontData = HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a);
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",25,0x0e43809e)
HXLINE(  25)		fonts =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",130,0x0e43809e)
HXLINE( 130)		DEFAULT_GLYPHS = HX_(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",6f,61,48,0a);
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",132,0x0e43809e)
HXLINE( 132)		POINT =  ::openfl::geom::Point_obj::__new(null(),null());
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",134,0x0e43809e)
HXLINE( 134)		MATRIX =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            	}
{
            	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","boot",0x35e0c2e0,"haxegon.bitmapFont.BitmapFont.boot","haxegon/bitmapFont/BitmapFont.hx",136,0x0e43809e)
HXLINE( 136)		COLOR_TRANSFORM =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
            	}
}

} // end namespace haxegon
} // end namespace bitmapFont
