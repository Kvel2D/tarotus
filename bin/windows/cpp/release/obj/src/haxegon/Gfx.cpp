// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Col
#include <haxegon/Col.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_MathExtensions
#include <haxegon/MathExtensions.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_haxegon_util_AnimationContainer
#include <haxegon/util/AnimationContainer.h>
#endif
#ifndef INCLUDED_haxegon_util_Tileset
#include <haxegon/util/Tileset.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_system_Capabilities
#include <openfl/system/Capabilities.h>
#endif

namespace haxegon{

void Gfx_obj::__construct() { }

Dynamic Gfx_obj::__CreateEmpty() { return new Gfx_obj; }

hx::ObjectPtr< Gfx_obj > Gfx_obj::__new()
{
	hx::ObjectPtr< Gfx_obj > _hx_result = new Gfx_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Gfx_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Gfx_obj > _hx_result = new Gfx_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Gfx_obj::LEFT;

Int Gfx_obj::RIGHT;

Int Gfx_obj::TOP;

Int Gfx_obj::BOTTOM;

Int Gfx_obj::CENTER;

Int Gfx_obj::screen_width;

Int Gfx_obj::screen_height;

Int Gfx_obj::screen_widthMid;

Int Gfx_obj::screen_heightMid;

Bool Gfx_obj::clearscreeneachframe;

Int Gfx_obj::screenscale;

Int Gfx_obj::devicexres;

Int Gfx_obj::deviceyres;

Bool Gfx_obj::fullscreen;

::String Gfx_obj::currenttilesetname;

 ::openfl::display::BitmapData Gfx_obj::backbuffer;

 ::openfl::display::BitmapData Gfx_obj::drawto;

void Gfx_obj::resize_screen(Float width,Float height,hx::Null< Int >  __o_scale){
Int scale = __o_scale.Default(1);
            	HX_STACK_FRAME("haxegon.Gfx","resize_screen",0xe441ecb4,"haxegon.Gfx.resize_screen","haxegon/Gfx.hx",46,0xa6405f94)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(scale,"scale")
HXLINE(  47)		Int _hx_tmp = ::Std_obj::_hx_int(width);
HXDLIN(  47)		Int _hx_tmp1 = ::Std_obj::_hx_int(height);
HXDLIN(  47)		::haxegon::Gfx_obj::initgfx(_hx_tmp,_hx_tmp1,scale);
HXLINE(  51)		::haxegon::Text_obj::init(::haxegon::Gfx_obj::gfxstage);
HXLINE(  52)		::haxegon::Gfx_obj::showfps = false;
HXLINE(  53)		::haxegon::Gfx_obj::gfxstage->addChild(::haxegon::Gfx_obj::screen);
HXLINE(  55)		::haxegon::Gfx_obj::updategraphicsmode();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,resize_screen,(void))

Bool Gfx_obj::showfps;

Int Gfx_obj::renderfps;

Int Gfx_obj::renderfps_max;

Int Gfx_obj::updatefps;

Int Gfx_obj::updatefps_max;

Int Gfx_obj::render_fps(){
            	HX_STACK_FRAME("haxegon.Gfx","render_fps",0xccac6403,"haxegon.Gfx.render_fps","haxegon/Gfx.hx",65,0xa6405f94)
HXLINE(  65)		return ::haxegon::Gfx_obj::renderfps_max;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,render_fps,return )

Int Gfx_obj::update_fps(){
            	HX_STACK_FRAME("haxegon.Gfx","update_fps",0xe8575436,"haxegon.Gfx.update_fps","haxegon/Gfx.hx",69,0xa6405f94)
HXLINE(  69)		return ::haxegon::Gfx_obj::updatefps_max;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,update_fps,return )

void Gfx_obj::reset(){
            	HX_STACK_FRAME("haxegon.Gfx","reset",0xe45877ec,"haxegon.Gfx.reset","haxegon/Gfx.hx",74,0xa6405f94)
HXLINE(  75)		::haxegon::Gfx_obj::transform = false;
HXLINE(  76)		::haxegon::Gfx_obj::imagerotate = (int)0;
HXLINE(  77)		::haxegon::Gfx_obj::imagerotatexpivot = (int)0;
HXDLIN(  77)		::haxegon::Gfx_obj::imagerotateypivot = (int)0;
HXLINE(  78)		::haxegon::Gfx_obj::imagexscale = ((Float)1.0);
HXDLIN(  78)		::haxegon::Gfx_obj::imageyscale = ((Float)1.0);
HXLINE(  79)		::haxegon::Gfx_obj::imagescalexpivot = (int)0;
HXDLIN(  79)		::haxegon::Gfx_obj::imagescaleypivot = (int)0;
HXLINE(  81)		::haxegon::Gfx_obj::coltransform = false;
HXLINE(  82)		::haxegon::Gfx_obj::imagealphamult = ((Float)1.0);
HXDLIN(  82)		::haxegon::Gfx_obj::imageredmult = ((Float)1.0);
HXDLIN(  82)		::haxegon::Gfx_obj::imagegreenmult = ((Float)1.0);
HXDLIN(  82)		::haxegon::Gfx_obj::imagebluemult = ((Float)1.0);
HXLINE(  83)		::haxegon::Gfx_obj::imageredadd = ((Float)0.0);
HXDLIN(  83)		::haxegon::Gfx_obj::imagegreenadd = ((Float)0.0);
HXDLIN(  83)		::haxegon::Gfx_obj::imageblueadd = ((Float)0.0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,reset,(void))

void Gfx_obj::reset_ifclear(){
            	HX_STACK_FRAME("haxegon.Gfx","reset_ifclear",0x037c91fd,"haxegon.Gfx.reset_ifclear","haxegon/Gfx.hx",88,0xa6405f94)
HXLINE(  89)		Bool _hx_tmp = (::haxegon::Gfx_obj::imagerotate == (int)0);
HXDLIN(  89)		if (_hx_tmp) {
HXLINE(  90)			Bool _hx_tmp1 = (::haxegon::Gfx_obj::imagexscale == ((Float)1.0));
HXDLIN(  90)			if (_hx_tmp1) {
HXLINE(  91)				Bool _hx_tmp2 = (::haxegon::Gfx_obj::imageyscale == ((Float)1.0));
HXDLIN(  91)				if (_hx_tmp2) {
HXLINE(  92)					::haxegon::Gfx_obj::transform = false;
            				}
            			}
            		}
HXLINE(  97)		Bool _hx_tmp3 = (::haxegon::Gfx_obj::imagealphamult == ((Float)1.0));
HXDLIN(  97)		if (_hx_tmp3) {
HXLINE(  98)			Bool _hx_tmp4;
HXDLIN(  98)			Bool _hx_tmp5;
HXDLIN(  98)			Bool _hx_tmp6;
HXDLIN(  98)			Bool _hx_tmp7;
HXDLIN(  98)			Bool _hx_tmp8;
HXDLIN(  98)			if ((::haxegon::Gfx_obj::imageredmult == ((Float)1.0))) {
HXLINE(  98)				_hx_tmp8 = (::haxegon::Gfx_obj::imagegreenmult == ((Float)1.0));
            			}
            			else {
HXLINE(  98)				_hx_tmp8 = false;
            			}
HXDLIN(  98)			if (_hx_tmp8) {
HXLINE(  98)				_hx_tmp7 = (::haxegon::Gfx_obj::imagebluemult == ((Float)1.0));
            			}
            			else {
HXLINE(  98)				_hx_tmp7 = false;
            			}
HXDLIN(  98)			if (_hx_tmp7) {
HXLINE(  98)				_hx_tmp6 = (::haxegon::Gfx_obj::imageredadd == ((Float)0.0));
            			}
            			else {
HXLINE(  98)				_hx_tmp6 = false;
            			}
HXDLIN(  98)			if (_hx_tmp6) {
HXLINE(  98)				_hx_tmp5 = (::haxegon::Gfx_obj::imagegreenadd == ((Float)0.0));
            			}
            			else {
HXLINE(  98)				_hx_tmp5 = false;
            			}
HXDLIN(  98)			if (_hx_tmp5) {
HXLINE(  98)				_hx_tmp4 = (::haxegon::Gfx_obj::imageblueadd == ((Float)0.0));
            			}
            			else {
HXLINE(  98)				_hx_tmp4 = false;
            			}
HXDLIN(  98)			if (_hx_tmp4) {
HXLINE(  99)				::haxegon::Gfx_obj::coltransform = false;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,reset_ifclear,(void))

void Gfx_obj::rotation(Float angle,hx::Null< Float >  __o_xpivot,hx::Null< Float >  __o_ypivot){
Float xpivot = __o_xpivot.Default(-15000);
Float ypivot = __o_ypivot.Default(-15000);
            	HX_STACK_FRAME("haxegon.Gfx","rotation",0x5ff1ff41,"haxegon.Gfx.rotation","haxegon/Gfx.hx",106,0xa6405f94)
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(xpivot,"xpivot")
            	HX_STACK_ARG(ypivot,"ypivot")
HXLINE( 107)		::haxegon::Gfx_obj::imagerotate = angle;
HXLINE( 108)		::haxegon::Gfx_obj::imagerotatexpivot = xpivot;
HXLINE( 109)		::haxegon::Gfx_obj::imagerotateypivot = ypivot;
HXLINE( 110)		::haxegon::Gfx_obj::transform = true;
HXLINE( 111)		::haxegon::Gfx_obj::reset_ifclear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,rotation,(void))

void Gfx_obj::scale(Float xscale,Float yscale,hx::Null< Float >  __o_xpivot,hx::Null< Float >  __o_ypivot){
Float xpivot = __o_xpivot.Default(-15000);
Float ypivot = __o_ypivot.Default(-15000);
            	HX_STACK_FRAME("haxegon.Gfx","scale",0x765efca7,"haxegon.Gfx.scale","haxegon/Gfx.hx",114,0xa6405f94)
            	HX_STACK_ARG(xscale,"xscale")
            	HX_STACK_ARG(yscale,"yscale")
            	HX_STACK_ARG(xpivot,"xpivot")
            	HX_STACK_ARG(ypivot,"ypivot")
HXLINE( 115)		::haxegon::Gfx_obj::imagexscale = xscale;
HXLINE( 116)		::haxegon::Gfx_obj::imageyscale = yscale;
HXLINE( 117)		::haxegon::Gfx_obj::imagescalexpivot = xpivot;
HXLINE( 118)		::haxegon::Gfx_obj::imagescaleypivot = ypivot;
HXLINE( 120)		::haxegon::Gfx_obj::transform = true;
HXLINE( 121)		::haxegon::Gfx_obj::reset_ifclear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,scale,(void))

void Gfx_obj::image_alpha(Float a){
            	HX_STACK_FRAME("haxegon.Gfx","image_alpha",0x4bfea617,"haxegon.Gfx.image_alpha","haxegon/Gfx.hx",126,0xa6405f94)
            	HX_STACK_ARG(a,"a")
HXLINE( 127)		::haxegon::Gfx_obj::imagealphamult = a;
HXLINE( 128)		::haxegon::Gfx_obj::coltransform = true;
HXLINE( 129)		::haxegon::Gfx_obj::reset_ifclear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,image_alpha,(void))

void Gfx_obj::imagecolor(hx::Null< Int >  __o_c,hx::Null< Int >  __o_add){
Int c = __o_c.Default(16777215);
Int add = __o_add.Default(0);
            	HX_STACK_FRAME("haxegon.Gfx","imagecolor",0x9e5f50eb,"haxegon.Gfx.imagecolor","haxegon/Gfx.hx",134,0xa6405f94)
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(add,"add")
HXLINE( 158)		::haxegon::Gfx_obj::imageredmult = ((Float)::haxegon::Gfx_obj::getred(c) / (Float)(int)255);
HXLINE( 159)		::haxegon::Gfx_obj::imagegreenmult = ((Float)::haxegon::Gfx_obj::getgreen(c) / (Float)(int)255);
HXLINE( 160)		::haxegon::Gfx_obj::imagebluemult = ((Float)::haxegon::Gfx_obj::getblue(c) / (Float)(int)255);
HXLINE( 161)		::haxegon::Gfx_obj::imageredadd = ::haxegon::Gfx_obj::getred(add);
HXLINE( 162)		::haxegon::Gfx_obj::imagegreenadd = ::haxegon::Gfx_obj::getgreen(add);
HXLINE( 163)		::haxegon::Gfx_obj::imageblueadd = ::haxegon::Gfx_obj::getblue(add);
HXLINE( 165)		::haxegon::Gfx_obj::coltransform = true;
HXLINE( 166)		::haxegon::Gfx_obj::reset_ifclear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,imagecolor,(void))

void Gfx_obj::changetileset(::String tilesetname){
            	HX_STACK_FRAME("haxegon.Gfx","changetileset",0x2cde10e1,"haxegon.Gfx.changetileset","haxegon/Gfx.hx",172,0xa6405f94)
            	HX_STACK_ARG(tilesetname,"tilesetname")
HXLINE( 172)		if ((::haxegon::Gfx_obj::currenttilesetname != tilesetname)) {
HXLINE( 173)			Bool _hx_tmp = ::haxegon::Gfx_obj::tilesetindex->exists(tilesetname);
HXDLIN( 173)			if (_hx_tmp) {
HXLINE( 174)				::haxegon::Gfx_obj::currenttileset = ::haxegon::Gfx_obj::tilesetindex->get(tilesetname);
HXLINE( 175)				::haxegon::Gfx_obj::currenttilesetname = tilesetname;
            			}
            			else {
HXLINE( 177)				HX_STACK_DO_THROW(((HX_("ERROR: Cannot change to tileset \"",52,68,39,26) + tilesetname) + HX_("\", no tileset with that name found.",0d,af,8b,7a)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,changetileset,(void))

Int Gfx_obj::numberoftiles(){
            	HX_STACK_FRAME("haxegon.Gfx","numberoftiles",0x664f3082,"haxegon.Gfx.numberoftiles","haxegon/Gfx.hx",183,0xa6405f94)
HXLINE( 183)		return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,numberoftiles,return )

void Gfx_obj::load_tiles(::String imagename,Int width,Int height){
            	HX_STACK_FRAME("haxegon.Gfx","load_tiles",0x6815882f,"haxegon.Gfx.load_tiles","haxegon/Gfx.hx",188,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 189)		 ::openfl::display::BitmapData _hx_tmp = ::openfl::Assets_obj::getBitmapData(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".png",3b,2d,bd,1e)),null());
HXDLIN( 189)		::haxegon::Gfx_obj::buffer =  ::openfl::display::Bitmap_obj::__new(_hx_tmp,null(),null())->bitmapData;
HXLINE( 190)		Bool _hx_tmp1 = hx::IsNull( ::haxegon::Gfx_obj::buffer );
HXDLIN( 190)		if (_hx_tmp1) {
HXLINE( 191)			HX_STACK_DO_THROW(((HX_("ERROR: In load_tiles, cannot find data/graphics/",96,3d,c1,33) + imagename) + HX_(".png.",93,66,ca,c6)));
            		}
HXLINE( 195)		 ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,width,height);
HXLINE( 196)		::haxegon::Gfx_obj::tiles->push( ::haxegon::util::Tileset_obj::__new(imagename,width,height));
HXLINE( 197)		{
HXLINE( 197)			Int value = (::haxegon::Gfx_obj::tiles->length - (int)1);
HXDLIN( 197)			::haxegon::Gfx_obj::tilesetindex->set(imagename,value);
            		}
HXLINE( 198)		::haxegon::Gfx_obj::currenttileset = (::haxegon::Gfx_obj::tiles->length - (int)1);
HXLINE( 200)		HX_VAR( Int,tilerows);
HXLINE( 201)		HX_VAR( Int,tilecolumns);
HXLINE( 202)		Int _hx_tmp2 = (::haxegon::Gfx_obj::buffer->width - hx::Mod(::haxegon::Gfx_obj::buffer->width,width));
HXDLIN( 202)		tilecolumns = ::Std_obj::_hx_int(((Float)_hx_tmp2 / (Float)width));
HXLINE( 203)		Int _hx_tmp3 = (::haxegon::Gfx_obj::buffer->height - hx::Mod(::haxegon::Gfx_obj::buffer->height,height));
HXDLIN( 203)		tilerows = ::Std_obj::_hx_int(((Float)_hx_tmp3 / (Float)height));
HXLINE( 205)		{
HXLINE( 205)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 205)			while((_g1 < tilerows)){
HXLINE( 205)				HX_VARI( Int,j) = _g1++;
HXLINE( 206)				{
HXLINE( 206)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 206)					while((_g3 < tilecolumns)){
HXLINE( 206)						HX_VARI( Int,i) = _g3++;
HXLINE( 207)						HX_VARI(  ::openfl::display::BitmapData,t) =  ::openfl::display::BitmapData_obj::__new(width,height,true,(int)0);
HXLINE( 208)						::haxegon::Gfx_obj::settrect((i * width),(j * height),width,height);
HXLINE( 209)						t->copyPixels(::haxegon::Gfx_obj::buffer,::haxegon::Gfx_obj::trect,::haxegon::Gfx_obj::tl,null(),null(),null());
HXLINE( 210)						::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->push(t);
            					}
            				}
            			}
            		}
HXLINE( 214)		::haxegon::Gfx_obj::changetileset(imagename);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,load_tiles,(void))

void Gfx_obj::createtiles(::String imagename,Float width,Float height,Int amount){
            	HX_STACK_FRAME("haxegon.Gfx","createtiles",0xc157e6e6,"haxegon.Gfx.createtiles","haxegon/Gfx.hx",219,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(amount,"amount")
HXLINE( 220)		Int _hx_tmp = ::Std_obj::_hx_int(width);
HXDLIN( 220)		Int _hx_tmp1 = ::Std_obj::_hx_int(height);
HXDLIN( 220)		::haxegon::Gfx_obj::tiles->push( ::haxegon::util::Tileset_obj::__new(imagename,_hx_tmp,_hx_tmp1));
HXLINE( 221)		{
HXLINE( 221)			Int value = (::haxegon::Gfx_obj::tiles->length - (int)1);
HXDLIN( 221)			::haxegon::Gfx_obj::tilesetindex->set(imagename,value);
            		}
HXLINE( 222)		::haxegon::Gfx_obj::currenttileset = (::haxegon::Gfx_obj::tiles->length - (int)1);
HXLINE( 224)		{
HXLINE( 224)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 224)			while((_g1 < amount)){
HXLINE( 224)				++_g1;
HXLINE( 225)				Int _hx_tmp2 = ::Std_obj::_hx_int(width);
HXDLIN( 225)				Int _hx_tmp3 = ::Std_obj::_hx_int(height);
HXDLIN( 225)				HX_VARI(  ::openfl::display::BitmapData,t) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp2,_hx_tmp3,true,(int)0);
HXLINE( 226)				::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->push(t);
            			}
            		}
HXLINE( 229)		::haxegon::Gfx_obj::changetileset(imagename);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,createtiles,(void))

Int Gfx_obj::tilewidth(){
            	HX_STACK_FRAME("haxegon.Gfx","tilewidth",0xe96ea4b5,"haxegon.Gfx.tilewidth","haxegon/Gfx.hx",235,0xa6405f94)
HXLINE( 235)		return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->width;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,tilewidth,return )

Int Gfx_obj::tileheight(){
            	HX_STACK_FRAME("haxegon.Gfx","tileheight",0x0db0f258,"haxegon.Gfx.tileheight","haxegon/Gfx.hx",241,0xa6405f94)
HXLINE( 241)		return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->height;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,tileheight,return )

void Gfx_obj::load_image(::String imagename){
            	HX_STACK_FRAME("haxegon.Gfx","load_image",0x1549aa05,"haxegon.Gfx.load_image","haxegon/Gfx.hx",246,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
HXLINE( 247)		 ::openfl::display::BitmapData _hx_tmp = ::openfl::Assets_obj::getBitmapData(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".png",3b,2d,bd,1e)),null());
HXDLIN( 247)		::haxegon::Gfx_obj::buffer =  ::openfl::display::Bitmap_obj::__new(_hx_tmp,null(),null())->bitmapData;
HXLINE( 248)		Bool _hx_tmp1 = hx::IsNull( ::haxegon::Gfx_obj::buffer );
HXDLIN( 248)		if (_hx_tmp1) {
HXLINE( 249)			HX_STACK_DO_THROW(((HX_("ERROR: In loadimage, cannot find data/graphics/",65,80,ac,cb) + imagename) + HX_(".png.",93,66,ca,c6)));
            		}
HXLINE( 253)		{
HXLINE( 253)			Int value = ::haxegon::Gfx_obj::images->length;
HXDLIN( 253)			::haxegon::Gfx_obj::imageindex->set(imagename,value);
            		}
HXLINE( 255)		HX_VARI(  ::openfl::display::BitmapData,t) =  ::openfl::display::BitmapData_obj::__new(::haxegon::Gfx_obj::buffer->width,::haxegon::Gfx_obj::buffer->height,true,(int)0);
HXLINE( 256)		::haxegon::Gfx_obj::settrect((int)0,(int)0,::haxegon::Gfx_obj::buffer->width,::haxegon::Gfx_obj::buffer->height);
HXLINE( 257)		t->copyPixels(::haxegon::Gfx_obj::buffer,::haxegon::Gfx_obj::trect,::haxegon::Gfx_obj::tl,null(),null(),null());
HXLINE( 258)		::haxegon::Gfx_obj::images->push(t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,load_image,(void))

void Gfx_obj::create_image(::String imagename,Float width,Float height){
            	HX_STACK_FRAME("haxegon.Gfx","create_image",0x06b9b21b,"haxegon.Gfx.create_image","haxegon/Gfx.hx",263,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 264)		{
HXLINE( 264)			Int value = ::haxegon::Gfx_obj::images->length;
HXDLIN( 264)			::haxegon::Gfx_obj::imageindex->set(imagename,value);
            		}
HXLINE( 266)		Int _hx_tmp = ::Math_obj::floor(width);
HXDLIN( 266)		Int _hx_tmp1 = ::Math_obj::floor(height);
HXDLIN( 266)		HX_VARI(  ::openfl::display::BitmapData,t) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp,_hx_tmp1,true,(int)0);
HXLINE( 267)		::haxegon::Gfx_obj::images->push(t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,create_image,(void))

void Gfx_obj::resize_image(::String imagename,Float scale){
            	HX_STACK_FRAME("haxegon.Gfx","resize_image",0xc8722f13,"haxegon.Gfx.resize_image","haxegon/Gfx.hx",272,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
            	HX_STACK_ARG(scale,"scale")
HXLINE( 273)		HX_VARI( Int,oldindex) = ( (Int)(::haxegon::Gfx_obj::imageindex->get(imagename)) );
HXLINE( 274)		Float _hx_tmp = (::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->width * scale);
HXDLIN( 274)		Int _hx_tmp1 = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN( 274)		Float _hx_tmp2 = (::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->height * scale);
HXDLIN( 274)		Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 274)		HX_VARI(  ::openfl::display::BitmapData,newbitmap) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp1,_hx_tmp3,true,(int)0);
HXLINE( 275)		HX_VAR( Int,pixelalpha);
HXLINE( 276)		HX_VAR( Int,pixel);
HXLINE( 278)		::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->lock();
HXLINE( 279)		newbitmap->lock();
HXLINE( 281)		{
HXLINE( 281)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 281)			HX_VARI( Int,_g) = ::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->height;
HXDLIN( 281)			while((_g1 < _g)){
HXLINE( 281)				HX_VARI( Int,j) = _g1++;
HXLINE( 282)				{
HXLINE( 282)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 282)					HX_VARI( Int,_g2) = ::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->width;
HXDLIN( 282)					while((_g3 < _g2)){
HXLINE( 282)						HX_VARI( Int,i) = _g3++;
HXLINE( 283)						pixel = ::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->getPixel(i,j);
HXLINE( 284)						Int _hx_tmp4 = ::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->getPixel32(i,j);
HXDLIN( 284)						pixelalpha = ((int)((int)_hx_tmp4 >> (int)(int)24) & (int)(int)255);
HXLINE( 285)						Int _hx_tmp5 = ::Math_obj::ceil((i * scale));
HXDLIN( 285)						Int _hx_tmp6 = ::Math_obj::ceil((j * scale));
HXDLIN( 285)						Int _hx_tmp7 = ::Math_obj::ceil(scale);
HXDLIN( 285)						Int _hx_tmp8 = ::Math_obj::ceil(scale);
HXDLIN( 285)						::haxegon::Gfx_obj::settrect(_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8);
HXLINE( 286)						newbitmap->fillRect(::haxegon::Gfx_obj::trect,(((int)pixelalpha << (int)(int)24) + pixel));
            					}
            				}
            			}
            		}
HXLINE( 290)		::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->unlock(null());
HXLINE( 291)		newbitmap->unlock(null());
HXLINE( 293)		::haxegon::Gfx_obj::images->__get(oldindex).StaticCast<  ::openfl::display::BitmapData >()->dispose();
HXLINE( 294)		::haxegon::Gfx_obj::images[oldindex] = newbitmap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,resize_image,(void))

Int Gfx_obj::image_width(::String imagename){
            	HX_STACK_FRAME("haxegon.Gfx","image_width",0xf4cab4bf,"haxegon.Gfx.image_width","haxegon/Gfx.hx",299,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
HXLINE( 300)		Bool _hx_tmp = ::haxegon::Gfx_obj::imageindex->exists(imagename);
HXDLIN( 300)		if (_hx_tmp) {
HXLINE( 301)			::haxegon::Gfx_obj::imagenum = ::haxegon::Gfx_obj::imageindex->get(imagename);
            		}
            		else {
HXLINE( 303)			HX_STACK_DO_THROW(((HX_("ERROR: In imagewidth, cannot find image \"",87,07,da,a5) + imagename) + HX_("\".",cc,1d,00,00)));
            		}
HXLINE( 307)		return ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->width;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,image_width,return )

Int Gfx_obj::image_height(::String imagename){
            	HX_STACK_FRAME("haxegon.Gfx","image_height",0xf2e2eb0e,"haxegon.Gfx.image_height","haxegon/Gfx.hx",312,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
HXLINE( 313)		Bool _hx_tmp = ::haxegon::Gfx_obj::imageindex->exists(imagename);
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 314)			::haxegon::Gfx_obj::imagenum = ::haxegon::Gfx_obj::imageindex->get(imagename);
            		}
            		else {
HXLINE( 316)			HX_STACK_DO_THROW(((HX_("ERROR: In imageheight, cannot find image \"",aa,7e,8a,7a) + imagename) + HX_("\".",cc,1d,00,00)));
            		}
HXLINE( 320)		return ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->height;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,image_height,return )

void Gfx_obj::draw_to_screen(){
            	HX_STACK_FRAME("haxegon.Gfx","draw_to_screen",0x5a7c57f8,"haxegon.Gfx.draw_to_screen","haxegon/Gfx.hx",325,0xa6405f94)
HXLINE( 326)		::haxegon::Gfx_obj::drawingtoscreen = true;
HXLINE( 327)		::haxegon::Gfx_obj::drawto->unlock(null());
HXLINE( 328)		::haxegon::Gfx_obj::drawto = ::haxegon::Gfx_obj::backbuffer;
HXLINE( 329)		::haxegon::Gfx_obj::drawto->lock();
HXLINE( 331)		::haxegon::Text_obj::drawto = ::haxegon::Gfx_obj::drawto;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,draw_to_screen,(void))

void Gfx_obj::draw_to_image(::String imagename){
            	HX_STACK_FRAME("haxegon.Gfx","draw_to_image",0x04abd84f,"haxegon.Gfx.draw_to_image","haxegon/Gfx.hx",336,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
HXLINE( 337)		::haxegon::Gfx_obj::drawingtoscreen = false;
HXLINE( 338)		::haxegon::Gfx_obj::imagenum = ::haxegon::Gfx_obj::imageindex->get(imagename);
HXLINE( 340)		::haxegon::Gfx_obj::drawto->unlock(null());
HXLINE( 341)		::haxegon::Gfx_obj::drawto = ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >();
HXLINE( 342)		::haxegon::Gfx_obj::drawto->lock();
HXLINE( 344)		::haxegon::Text_obj::drawto = ::haxegon::Gfx_obj::drawto;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,draw_to_image,(void))

void Gfx_obj::drawtotile(Int tilenumber){
            	HX_STACK_FRAME("haxegon.Gfx","drawtotile",0x806e99f0,"haxegon.Gfx.drawtotile","haxegon/Gfx.hx",348,0xa6405f94)
            	HX_STACK_ARG(tilenumber,"tilenumber")
HXLINE( 349)		::haxegon::Gfx_obj::drawingtoscreen = false;
HXLINE( 350)		::haxegon::Gfx_obj::drawto->unlock(null());
HXLINE( 351)		::haxegon::Gfx_obj::drawto = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(tilenumber).StaticCast<  ::openfl::display::BitmapData >();
HXLINE( 352)		::haxegon::Gfx_obj::drawto->lock();
HXLINE( 354)		::haxegon::Text_obj::drawto = ::haxegon::Gfx_obj::drawto;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,drawtotile,(void))

Float Gfx_obj::t1;

Float Gfx_obj::t2;

Float Gfx_obj::t3;

Float Gfx_obj::imagealignx(Float x){
            	HX_STACK_FRAME("haxegon.Gfx","imagealignx",0x6c1b4d8b,"haxegon.Gfx.imagealignx","haxegon/Gfx.hx",362,0xa6405f94)
            	HX_STACK_ARG(x,"x")
HXLINE( 363)		if ((x <= (int)-5000)) {
HXLINE( 364)			::haxegon::Gfx_obj::t1 = (x - ::haxegon::Gfx_obj::CENTER);
HXLINE( 365)			::haxegon::Gfx_obj::t2 = (x - ::haxegon::Gfx_obj::LEFT);
HXLINE( 366)			::haxegon::Gfx_obj::t3 = (x - ::haxegon::Gfx_obj::RIGHT);
HXLINE( 367)			Bool _hx_tmp;
HXDLIN( 367)			Bool _hx_tmp1 = (::haxegon::Gfx_obj::t1 != (int)0);
HXDLIN( 367)			if (_hx_tmp1) {
HXLINE( 367)				Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 367)				Float _hx_tmp3 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 367)				if ((_hx_tmp2 < _hx_tmp3)) {
HXLINE( 367)					Float _hx_tmp4 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 367)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Gfx_obj::t3);
HXDLIN( 367)					_hx_tmp = (_hx_tmp4 < _hx_tmp5);
            				}
            				else {
HXLINE( 367)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 367)				_hx_tmp = true;
            			}
HXDLIN( 367)			if (_hx_tmp) {
HXLINE( 368)				Float _hx_tmp6 = (::haxegon::Gfx_obj::t1 + ::haxegon::Gfx_obj::screen_widthMid);
HXDLIN( 368)				Float _hx_tmp7 = ((Float)::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->width / (Float)(int)2);
HXDLIN( 368)				Int _hx_tmp8 = ::Std_obj::_hx_int(_hx_tmp7);
HXDLIN( 368)				return (_hx_tmp6 - _hx_tmp8);
            			}
            			else {
HXLINE( 369)				Bool _hx_tmp9;
HXDLIN( 369)				Bool _hx_tmp10 = (::haxegon::Gfx_obj::t2 != (int)0);
HXDLIN( 369)				if (_hx_tmp10) {
HXLINE( 369)					Float _hx_tmp11 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 369)					Float _hx_tmp12 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 369)					if ((_hx_tmp11 < _hx_tmp12)) {
HXLINE( 369)						Float _hx_tmp13 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 369)						Float _hx_tmp14 = ::Math_obj::abs(::haxegon::Gfx_obj::t3);
HXDLIN( 369)						_hx_tmp9 = (_hx_tmp13 < _hx_tmp14);
            					}
            					else {
HXLINE( 369)						_hx_tmp9 = false;
            					}
            				}
            				else {
HXLINE( 369)					_hx_tmp9 = true;
            				}
HXDLIN( 369)				if (_hx_tmp9) {
HXLINE( 370)					return ::haxegon::Gfx_obj::t2;
            				}
            				else {
HXLINE( 372)					return (::haxegon::Gfx_obj::t3 + ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->width);
            				}
            			}
            		}
HXLINE( 376)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,imagealignx,return )

Float Gfx_obj::imagealigny(Float y){
            	HX_STACK_FRAME("haxegon.Gfx","imagealigny",0x6c1b4d8c,"haxegon.Gfx.imagealigny","haxegon/Gfx.hx",379,0xa6405f94)
            	HX_STACK_ARG(y,"y")
HXLINE( 380)		if ((y <= (int)-5000)) {
HXLINE( 381)			::haxegon::Gfx_obj::t1 = (y - ::haxegon::Gfx_obj::CENTER);
HXLINE( 382)			::haxegon::Gfx_obj::t2 = (y - ::haxegon::Gfx_obj::TOP);
HXLINE( 383)			::haxegon::Gfx_obj::t3 = (y - ::haxegon::Gfx_obj::BOTTOM);
HXLINE( 384)			Bool _hx_tmp;
HXDLIN( 384)			Bool _hx_tmp1 = (::haxegon::Gfx_obj::t1 != (int)0);
HXDLIN( 384)			if (_hx_tmp1) {
HXLINE( 384)				Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 384)				Float _hx_tmp3 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 384)				if ((_hx_tmp2 < _hx_tmp3)) {
HXLINE( 384)					Float _hx_tmp4 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 384)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Gfx_obj::t3);
HXDLIN( 384)					_hx_tmp = (_hx_tmp4 < _hx_tmp5);
            				}
            				else {
HXLINE( 384)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 384)				_hx_tmp = true;
            			}
HXDLIN( 384)			if (_hx_tmp) {
HXLINE( 385)				Float _hx_tmp6 = (::haxegon::Gfx_obj::t1 + ::haxegon::Gfx_obj::screen_heightMid);
HXDLIN( 385)				Float _hx_tmp7 = ((Float)::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->height / (Float)(int)2);
HXDLIN( 385)				Int _hx_tmp8 = ::Std_obj::_hx_int(_hx_tmp7);
HXDLIN( 385)				return (_hx_tmp6 - _hx_tmp8);
            			}
            			else {
HXLINE( 386)				Bool _hx_tmp9;
HXDLIN( 386)				Bool _hx_tmp10 = (::haxegon::Gfx_obj::t2 != (int)0);
HXDLIN( 386)				if (_hx_tmp10) {
HXLINE( 386)					Float _hx_tmp11 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 386)					Float _hx_tmp12 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 386)					if ((_hx_tmp11 < _hx_tmp12)) {
HXLINE( 386)						Float _hx_tmp13 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 386)						Float _hx_tmp14 = ::Math_obj::abs(::haxegon::Gfx_obj::t3);
HXDLIN( 386)						_hx_tmp9 = (_hx_tmp13 < _hx_tmp14);
            					}
            					else {
HXLINE( 386)						_hx_tmp9 = false;
            					}
            				}
            				else {
HXLINE( 386)					_hx_tmp9 = true;
            				}
HXDLIN( 386)				if (_hx_tmp9) {
HXLINE( 387)					return ::haxegon::Gfx_obj::t2;
            				}
            				else {
HXLINE( 389)					return (::haxegon::Gfx_obj::t3 + ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->height);
            				}
            			}
            		}
HXLINE( 393)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,imagealigny,return )

Float Gfx_obj::imagealignonimagex(Float x){
            	HX_STACK_FRAME("haxegon.Gfx","imagealignonimagex",0x32019e69,"haxegon.Gfx.imagealignonimagex","haxegon/Gfx.hx",396,0xa6405f94)
            	HX_STACK_ARG(x,"x")
HXLINE( 397)		if ((x <= (int)-5000)) {
HXLINE( 398)			::haxegon::Gfx_obj::t1 = (x - ::haxegon::Gfx_obj::CENTER);
HXLINE( 399)			::haxegon::Gfx_obj::t2 = (x - ::haxegon::Gfx_obj::LEFT);
HXLINE( 400)			::haxegon::Gfx_obj::t3 = (x - ::haxegon::Gfx_obj::RIGHT);
HXLINE( 401)			Bool _hx_tmp;
HXDLIN( 401)			Bool _hx_tmp1 = (::haxegon::Gfx_obj::t1 != (int)0);
HXDLIN( 401)			if (_hx_tmp1) {
HXLINE( 401)				Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 401)				Float _hx_tmp3 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 401)				if ((_hx_tmp2 < _hx_tmp3)) {
HXLINE( 401)					Float _hx_tmp4 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 401)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Gfx_obj::t3);
HXDLIN( 401)					_hx_tmp = (_hx_tmp4 < _hx_tmp5);
            				}
            				else {
HXLINE( 401)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 401)				_hx_tmp = true;
            			}
HXDLIN( 401)			if (_hx_tmp) {
HXLINE( 402)				Float _hx_tmp6 = ::haxegon::Gfx_obj::t1;
HXDLIN( 402)				Float _hx_tmp7 = ((Float)::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->width / (Float)(int)2);
HXDLIN( 402)				Int _hx_tmp8 = ::Std_obj::_hx_int(_hx_tmp7);
HXDLIN( 402)				return (_hx_tmp6 + _hx_tmp8);
            			}
            			else {
HXLINE( 403)				Bool _hx_tmp9;
HXDLIN( 403)				Bool _hx_tmp10 = (::haxegon::Gfx_obj::t2 != (int)0);
HXDLIN( 403)				if (_hx_tmp10) {
HXLINE( 403)					Float _hx_tmp11 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 403)					Float _hx_tmp12 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 403)					if ((_hx_tmp11 < _hx_tmp12)) {
HXLINE( 403)						Float _hx_tmp13 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 403)						Float _hx_tmp14 = ::Math_obj::abs(::haxegon::Gfx_obj::t3);
HXDLIN( 403)						_hx_tmp9 = (_hx_tmp13 < _hx_tmp14);
            					}
            					else {
HXLINE( 403)						_hx_tmp9 = false;
            					}
            				}
            				else {
HXLINE( 403)					_hx_tmp9 = true;
            				}
HXDLIN( 403)				if (_hx_tmp9) {
HXLINE( 404)					return ::haxegon::Gfx_obj::t2;
            				}
            				else {
HXLINE( 406)					return (::haxegon::Gfx_obj::t3 + ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->width);
            				}
            			}
            		}
HXLINE( 410)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,imagealignonimagex,return )

Float Gfx_obj::imagealignonimagey(Float y){
            	HX_STACK_FRAME("haxegon.Gfx","imagealignonimagey",0x32019e6a,"haxegon.Gfx.imagealignonimagey","haxegon/Gfx.hx",413,0xa6405f94)
            	HX_STACK_ARG(y,"y")
HXLINE( 414)		if ((y <= (int)-5000)) {
HXLINE( 415)			::haxegon::Gfx_obj::t1 = (y - ::haxegon::Gfx_obj::CENTER);
HXLINE( 416)			::haxegon::Gfx_obj::t2 = (y - ::haxegon::Gfx_obj::TOP);
HXLINE( 417)			::haxegon::Gfx_obj::t3 = (y - ::haxegon::Gfx_obj::BOTTOM);
HXLINE( 418)			Bool _hx_tmp;
HXDLIN( 418)			Bool _hx_tmp1 = (::haxegon::Gfx_obj::t1 != (int)0);
HXDLIN( 418)			if (_hx_tmp1) {
HXLINE( 418)				Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 418)				Float _hx_tmp3 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 418)				if ((_hx_tmp2 < _hx_tmp3)) {
HXLINE( 418)					Float _hx_tmp4 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 418)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Gfx_obj::t3);
HXDLIN( 418)					_hx_tmp = (_hx_tmp4 < _hx_tmp5);
            				}
            				else {
HXLINE( 418)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 418)				_hx_tmp = true;
            			}
HXDLIN( 418)			if (_hx_tmp) {
HXLINE( 419)				Float _hx_tmp6 = ::haxegon::Gfx_obj::t1;
HXDLIN( 419)				Float _hx_tmp7 = ((Float)::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->height / (Float)(int)2);
HXDLIN( 419)				Int _hx_tmp8 = ::Std_obj::_hx_int(_hx_tmp7);
HXDLIN( 419)				return (_hx_tmp6 + _hx_tmp8);
            			}
            			else {
HXLINE( 420)				Bool _hx_tmp9;
HXDLIN( 420)				Bool _hx_tmp10 = (::haxegon::Gfx_obj::t2 != (int)0);
HXDLIN( 420)				if (_hx_tmp10) {
HXLINE( 420)					Float _hx_tmp11 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 420)					Float _hx_tmp12 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 420)					if ((_hx_tmp11 < _hx_tmp12)) {
HXLINE( 420)						Float _hx_tmp13 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 420)						Float _hx_tmp14 = ::Math_obj::abs(::haxegon::Gfx_obj::t3);
HXDLIN( 420)						_hx_tmp9 = (_hx_tmp13 < _hx_tmp14);
            					}
            					else {
HXLINE( 420)						_hx_tmp9 = false;
            					}
            				}
            				else {
HXLINE( 420)					_hx_tmp9 = true;
            				}
HXDLIN( 420)				if (_hx_tmp9) {
HXLINE( 421)					return ::haxegon::Gfx_obj::t2;
            				}
            				else {
HXLINE( 423)					return (::haxegon::Gfx_obj::t3 + ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->height);
            				}
            			}
            		}
HXLINE( 427)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,imagealignonimagey,return )

void Gfx_obj::draw_image(Float x,Float y,::String imagename){
            	HX_STACK_FRAME("haxegon.Gfx","draw_image",0xa1e1f663,"haxegon.Gfx.draw_image","haxegon/Gfx.hx",430,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(imagename,"imagename")
HXLINE( 431)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 431)			Bool _hx_tmp;
HXDLIN( 431)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 431)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 431)				_hx_tmp = false;
            			}
HXDLIN( 431)			if (_hx_tmp) {
HXLINE( 431)				return;
            			}
            		}
HXLINE( 432)		Bool _hx_tmp1 = !(::haxegon::Gfx_obj::imageindex->exists(imagename));
HXDLIN( 432)		if (_hx_tmp1) {
HXLINE( 433)			HX_STACK_DO_THROW(((HX_("ERROR: In draw_image, cannot find image \"",92,88,e5,79) + imagename) + HX_("\".",cc,1d,00,00)));
            		}
HXLINE( 436)		::haxegon::Gfx_obj::imagenum = ::haxegon::Gfx_obj::imageindex->get(imagename);
HXLINE( 437)		x = ::haxegon::Gfx_obj::imagealignx(x);
HXDLIN( 437)		y = ::haxegon::Gfx_obj::imagealigny(y);
HXLINE( 439)		Bool _hx_tmp2;
HXDLIN( 439)		if (!(::haxegon::Gfx_obj::transform)) {
HXLINE( 439)			_hx_tmp2 = !(::haxegon::Gfx_obj::coltransform);
            		}
            		else {
HXLINE( 439)			_hx_tmp2 = false;
            		}
HXDLIN( 439)		if (_hx_tmp2) {
HXLINE( 440)			Int _hx_tmp3 = ::Std_obj::_hx_int(x);
HXDLIN( 440)			Int _hx_tmp4 = ::Std_obj::_hx_int(y);
HXDLIN( 440)			::haxegon::Gfx_obj::settpoint(_hx_tmp3,_hx_tmp4);
HXLINE( 441)			 ::openfl::display::BitmapData _hx_tmp5 = ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 441)			::haxegon::Gfx_obj::drawto->copyPixels(_hx_tmp5,::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->rect,::haxegon::Gfx_obj::tpoint,null(),null(),true);
            		}
            		else {
HXLINE( 443)			::haxegon::Gfx_obj::tempxalign = (int)0;
HXDLIN( 443)			::haxegon::Gfx_obj::tempyalign = (int)0;
HXLINE( 445)			::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 447)			Bool _hx_tmp6;
HXDLIN( 447)			if ((::haxegon::Gfx_obj::imagexscale == ((Float)1.0))) {
HXLINE( 447)				_hx_tmp6 = (::haxegon::Gfx_obj::imageyscale != ((Float)1.0));
            			}
            			else {
HXLINE( 447)				_hx_tmp6 = true;
            			}
HXDLIN( 447)			if (_hx_tmp6) {
HXLINE( 448)				Bool _hx_tmp7 = (::haxegon::Gfx_obj::imagescalexpivot != ((Float)0.0));
HXDLIN( 448)				if (_hx_tmp7) {
HXLINE( 448)					::haxegon::Gfx_obj::tempxalign = ::haxegon::Gfx_obj::imagealignonimagex(::haxegon::Gfx_obj::imagescalexpivot);
            				}
HXLINE( 449)				Bool _hx_tmp8 = (::haxegon::Gfx_obj::imagescaleypivot != ((Float)0.0));
HXDLIN( 449)				if (_hx_tmp8) {
HXLINE( 449)					::haxegon::Gfx_obj::tempyalign = ::haxegon::Gfx_obj::imagealignonimagey(::haxegon::Gfx_obj::imagescaleypivot);
            				}
HXLINE( 450)				::haxegon::Gfx_obj::shapematrix->translate(-(::haxegon::Gfx_obj::tempxalign),-(::haxegon::Gfx_obj::tempyalign));
HXLINE( 451)				::haxegon::Gfx_obj::shapematrix->scale(::haxegon::Gfx_obj::imagexscale,::haxegon::Gfx_obj::imageyscale);
HXLINE( 452)				::haxegon::Gfx_obj::shapematrix->translate(::haxegon::Gfx_obj::tempxalign,::haxegon::Gfx_obj::tempyalign);
            			}
HXLINE( 455)			Bool _hx_tmp9 = (::haxegon::Gfx_obj::imagerotate != (int)0);
HXDLIN( 455)			if (_hx_tmp9) {
HXLINE( 456)				Bool _hx_tmp10 = (::haxegon::Gfx_obj::imagerotatexpivot != ((Float)0.0));
HXDLIN( 456)				if (_hx_tmp10) {
HXLINE( 456)					::haxegon::Gfx_obj::tempxalign = ::haxegon::Gfx_obj::imagealignonimagex(::haxegon::Gfx_obj::imagerotatexpivot);
            				}
HXLINE( 457)				Bool _hx_tmp11 = (::haxegon::Gfx_obj::imagerotateypivot != ((Float)0.0));
HXDLIN( 457)				if (_hx_tmp11) {
HXLINE( 457)					::haxegon::Gfx_obj::tempyalign = ::haxegon::Gfx_obj::imagealignonimagey(::haxegon::Gfx_obj::imagerotateypivot);
            				}
HXLINE( 458)				::haxegon::Gfx_obj::shapematrix->translate(-(::haxegon::Gfx_obj::tempxalign),-(::haxegon::Gfx_obj::tempyalign));
HXLINE( 459)				Float _hx_tmp12 = ((Float)(::haxegon::Gfx_obj::imagerotate * ((Float)3.1415)) / (Float)(int)180);
HXDLIN( 459)				::haxegon::Gfx_obj::shapematrix->rotate(_hx_tmp12);
HXLINE( 460)				::haxegon::Gfx_obj::shapematrix->translate(::haxegon::Gfx_obj::tempxalign,::haxegon::Gfx_obj::tempyalign);
            			}
HXLINE( 463)			::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 464)			Bool _hx_tmp13 = ::haxegon::Gfx_obj::coltransform;
HXDLIN( 464)			if (_hx_tmp13) {
HXLINE( 465)				::haxegon::Gfx_obj::alphact->alphaMultiplier = ::haxegon::Gfx_obj::imagealphamult;
HXLINE( 466)				::haxegon::Gfx_obj::alphact->redMultiplier = ::haxegon::Gfx_obj::imageredmult;
HXLINE( 467)				::haxegon::Gfx_obj::alphact->greenMultiplier = ::haxegon::Gfx_obj::imagegreenmult;
HXLINE( 468)				::haxegon::Gfx_obj::alphact->blueMultiplier = ::haxegon::Gfx_obj::imagebluemult;
HXLINE( 469)				::haxegon::Gfx_obj::alphact->redOffset = ::haxegon::Gfx_obj::imageredadd;
HXLINE( 470)				::haxegon::Gfx_obj::alphact->greenOffset = ::haxegon::Gfx_obj::imagegreenadd;
HXLINE( 471)				::haxegon::Gfx_obj::alphact->blueOffset = ::haxegon::Gfx_obj::imageblueadd;
HXLINE( 472)				 ::openfl::display::BitmapData _hx_tmp14 = ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 472)				::haxegon::Gfx_obj::drawto->draw(_hx_tmp14,::haxegon::Gfx_obj::shapematrix,::haxegon::Gfx_obj::alphact,null(),null(),null());
            			}
            			else {
HXLINE( 474)				 ::openfl::display::BitmapData _hx_tmp15 = ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 474)				::haxegon::Gfx_obj::drawto->draw(_hx_tmp15,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            			}
HXLINE( 476)			::haxegon::Gfx_obj::shapematrix->identity();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,draw_image,(void))

void Gfx_obj::grabtilefromscreen(Int tilenumber,Float x,Float y){
            	HX_STACK_FRAME("haxegon.Gfx","grabtilefromscreen",0xf0757d93,"haxegon.Gfx.grabtilefromscreen","haxegon/Gfx.hx",480,0xa6405f94)
            	HX_STACK_ARG(tilenumber,"tilenumber")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 481)		if ((::haxegon::Gfx_obj::currenttileset == (int)-1)) {
HXLINE( 482)			HX_STACK_DO_THROW(HX_("ERROR: In grabtilefromscreen, there is no tileset currently set. Use Gfx.changetileset(\"tileset name\") to set the current tileset.",09,22,44,31));
            		}
HXLINE( 486)		::haxegon::Gfx_obj::settrect(x,y,::haxegon::Gfx_obj::tilewidth(),::haxegon::Gfx_obj::tileheight());
HXLINE( 487)		::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(tilenumber).StaticCast<  ::openfl::display::BitmapData >()->copyPixels(::haxegon::Gfx_obj::backbuffer,::haxegon::Gfx_obj::trect,::haxegon::Gfx_obj::tl,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,grabtilefromscreen,(void))

void Gfx_obj::grabtilefromimage(Int tilenumber,::String imagename,Float x,Float y){
            	HX_STACK_FRAME("haxegon.Gfx","grabtilefromimage",0x9ce09f14,"haxegon.Gfx.grabtilefromimage","haxegon/Gfx.hx",490,0xa6405f94)
            	HX_STACK_ARG(tilenumber,"tilenumber")
            	HX_STACK_ARG(imagename,"imagename")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 491)		Bool _hx_tmp = !(::haxegon::Gfx_obj::imageindex->exists(imagename));
HXDLIN( 491)		if (_hx_tmp) {
HXLINE( 492)			HX_STACK_DO_THROW(((HX_("ERROR: In grabtilefromimage, \"",84,27,26,25) + imagename) + HX_("\" does not exist.",0d,75,ac,03)));
            		}
HXLINE( 496)		if ((::haxegon::Gfx_obj::currenttileset == (int)-1)) {
HXLINE( 497)			HX_STACK_DO_THROW(HX_("ERROR: In grabtilefromimage, there is no tileset currently set. Use Gfx.changetileset(\"tileset name\") to set the current tileset.",b6,81,9d,15));
            		}
HXLINE( 501)		::haxegon::Gfx_obj::imagenum = ::haxegon::Gfx_obj::imageindex->get(imagename);
HXLINE( 503)		::haxegon::Gfx_obj::settrect(x,y,::haxegon::Gfx_obj::tilewidth(),::haxegon::Gfx_obj::tileheight());
HXLINE( 504)		 ::openfl::display::BitmapData _hx_tmp1 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(tilenumber).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 504)		 ::openfl::display::BitmapData _hx_tmp2 = ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 504)		_hx_tmp1->copyPixels(_hx_tmp2,::haxegon::Gfx_obj::trect,::haxegon::Gfx_obj::tl,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,grabtilefromimage,(void))

void Gfx_obj::grabimagefromscreen(::String imagename,Float x,Float y){
            	HX_STACK_FRAME("haxegon.Gfx","grabimagefromscreen",0xd71e6802,"haxegon.Gfx.grabimagefromscreen","haxegon/Gfx.hx",507,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 508)		Bool _hx_tmp = !(::haxegon::Gfx_obj::imageindex->exists(imagename));
HXDLIN( 508)		if (_hx_tmp) {
HXLINE( 509)			HX_STACK_DO_THROW(((HX_("ERROR: In grabimagefromscreen, \"",d6,35,64,28) + imagename) + HX_("\" does not exist. You need to create an image label first before using this function.",b2,cd,e3,50)));
            		}
HXLINE( 512)		::haxegon::Gfx_obj::imagenum = ::haxegon::Gfx_obj::imageindex->get(imagename);
HXLINE( 514)		::haxegon::Gfx_obj::settrect(x,y,::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->width,::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->height);
HXLINE( 515)		::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->copyPixels(::haxegon::Gfx_obj::backbuffer,::haxegon::Gfx_obj::trect,::haxegon::Gfx_obj::tl,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,grabimagefromscreen,(void))

void Gfx_obj::grabimagefromimage(::String imagename,::String imagetocopyfrom,Float x,Float y,hx::Null< Float >  __o_w,hx::Null< Float >  __o_h){
Float w = __o_w.Default(0);
Float h = __o_h.Default(0);
            	HX_STACK_FRAME("haxegon.Gfx","grabimagefromimage",0x3ea11785,"haxegon.Gfx.grabimagefromimage","haxegon/Gfx.hx",518,0xa6405f94)
            	HX_STACK_ARG(imagename,"imagename")
            	HX_STACK_ARG(imagetocopyfrom,"imagetocopyfrom")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(w,"w")
            	HX_STACK_ARG(h,"h")
HXLINE( 519)		Bool _hx_tmp = !(::haxegon::Gfx_obj::imageindex->exists(imagename));
HXDLIN( 519)		if (_hx_tmp) {
HXLINE( 520)			HX_STACK_DO_THROW(((HX_("ERROR: In grabimagefromimage, \"",9f,12,e1,df) + imagename) + HX_("\" does not exist. You need to create an image label first before using this function.",b2,cd,e3,50)));
            		}
HXLINE( 524)		::haxegon::Gfx_obj::imagenum = ::haxegon::Gfx_obj::imageindex->get(imagename);
HXLINE( 525)		Bool _hx_tmp1 = !(::haxegon::Gfx_obj::imageindex->exists(imagetocopyfrom));
HXDLIN( 525)		if (_hx_tmp1) {
HXLINE( 526)			::haxe::Log_obj::trace(((HX_("ERROR: No image called \"",f5,27,9b,de) + imagetocopyfrom) + HX_("\" found.",ea,f7,ec,ca)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),526,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("grabimagefromimage",c2,93,93,43)));
            		}
HXLINE( 528)		HX_VARI( Int,imagenumfrom) = ( (Int)(::haxegon::Gfx_obj::imageindex->get(imagetocopyfrom)) );
HXLINE( 530)		Bool _hx_tmp2;
HXDLIN( 530)		if ((w == (int)0)) {
HXLINE( 530)			_hx_tmp2 = (h == (int)0);
            		}
            		else {
HXLINE( 530)			_hx_tmp2 = false;
            		}
HXDLIN( 530)		if (_hx_tmp2) {
HXLINE( 531)			::haxegon::Gfx_obj::settrect(x,y,::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->width,::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >()->height);
            		}
            		else {
HXLINE( 533)			::haxegon::Gfx_obj::settrect(x,y,w,h);
            		}
HXLINE( 535)		 ::openfl::display::BitmapData _hx_tmp3 = ::haxegon::Gfx_obj::images->__get(::haxegon::Gfx_obj::imagenum).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 535)		 ::openfl::display::BitmapData _hx_tmp4 = ::haxegon::Gfx_obj::images->__get(imagenumfrom).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 535)		_hx_tmp3->copyPixels(_hx_tmp4,::haxegon::Gfx_obj::trect,::haxegon::Gfx_obj::tl,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,grabimagefromimage,(void))

void Gfx_obj::copytile(Int totilenumber,::String fromtileset,Int fromtilenumber){
            	HX_STACK_FRAME("haxegon.Gfx","copytile",0x3e2dc766,"haxegon.Gfx.copytile","haxegon/Gfx.hx",539,0xa6405f94)
            	HX_STACK_ARG(totilenumber,"totilenumber")
            	HX_STACK_ARG(fromtileset,"fromtileset")
            	HX_STACK_ARG(fromtilenumber,"fromtilenumber")
HXLINE( 539)		Bool _hx_tmp = ::haxegon::Gfx_obj::tilesetindex->exists(fromtileset);
HXDLIN( 539)		if (_hx_tmp) {
HXLINE( 540)			Bool _hx_tmp1;
HXDLIN( 540)			Int _hx_tmp2 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->width;
HXDLIN( 540)			Bool _hx_tmp3 = (_hx_tmp2 == ::haxegon::Gfx_obj::tiles->__get(( (Int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::util::Tileset >()->width);
HXDLIN( 540)			if (_hx_tmp3) {
HXLINE( 540)				Int _hx_tmp4 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->height;
HXDLIN( 540)				_hx_tmp1 = (_hx_tmp4 == ::haxegon::Gfx_obj::tiles->__get(( (Int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::util::Tileset >()->height);
            			}
            			else {
HXLINE( 540)				_hx_tmp1 = false;
            			}
HXDLIN( 540)			if (_hx_tmp1) {
HXLINE( 541)				 ::openfl::display::BitmapData _hx_tmp5 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(totilenumber).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 541)				 ::openfl::display::BitmapData _hx_tmp6 = ::haxegon::Gfx_obj::tiles->__get(( (Int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(fromtilenumber).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 541)				_hx_tmp5->copyPixels(_hx_tmp6,::haxegon::Gfx_obj::tiles->__get(( (Int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(fromtilenumber).StaticCast<  ::openfl::display::BitmapData >()->rect,::haxegon::Gfx_obj::tl,null(),null(),null());
            			}
            			else {
HXLINE( 543)				::String _hx_tmp7 = ((HX_("ERROR: Tilesets ",53,90,b4,a9) + ::haxegon::Gfx_obj::currenttilesetname) + HX_(" (",08,1c,00,00));
HXDLIN( 543)				::String _hx_tmp8 = ::Std_obj::string(::haxegon::Gfx_obj::tilewidth());
HXDLIN( 543)				::String _hx_tmp9 = ((_hx_tmp7 + _hx_tmp8) + HX_("x",78,00,00,00));
HXDLIN( 543)				::String _hx_tmp10 = ::Std_obj::string(::haxegon::Gfx_obj::tileheight());
HXDLIN( 543)				::String _hx_tmp11 = ((((_hx_tmp9 + _hx_tmp10) + HX_(") and ",c0,dc,e5,11)) + fromtileset) + HX_(" (",08,1c,00,00));
HXDLIN( 543)				::String _hx_tmp12 = ::Std_obj::string(::haxegon::Gfx_obj::tiles->__get(( (Int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::util::Tileset >()->width);
HXDLIN( 543)				::String _hx_tmp13 = ((_hx_tmp11 + _hx_tmp12) + HX_("x",78,00,00,00));
HXDLIN( 543)				::String _hx_tmp14 = ::Std_obj::string(::haxegon::Gfx_obj::tiles->__get(( (Int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::util::Tileset >()->height);
HXDLIN( 543)				::haxe::Log_obj::trace(((_hx_tmp13 + _hx_tmp14) + HX_(") are different sizes. Maybe try just drawing to the tile you want instead with Gfx.drawtotile()?",f2,8f,4a,62)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),543,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("copytile",63,05,c2,e6)));
HXLINE( 544)				return;
            			}
            		}
            		else {
HXLINE( 547)			::haxe::Log_obj::trace(((HX_("ERROR: Tileset ",da,b6,8b,d0) + fromtileset) + HX_(" hasn't been loaded or created.",3d,f4,b3,81)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),547,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("copytile",63,05,c2,e6)));
HXLINE( 548)			return;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,copytile,(void))

void Gfx_obj::draw_tile(Float x,Float y,Int t){
            	HX_STACK_FRAME("haxegon.Gfx","draw_tile",0x5bc9ad26,"haxegon.Gfx.draw_tile","haxegon/Gfx.hx",552,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(t,"t")
HXLINE( 553)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 553)			Bool _hx_tmp;
HXDLIN( 553)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 553)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 553)				_hx_tmp = false;
            			}
HXDLIN( 553)			if (_hx_tmp) {
HXLINE( 553)				return;
            			}
            		}
HXLINE( 554)		if ((::haxegon::Gfx_obj::currenttileset == (int)-1)) {
HXLINE( 555)			HX_STACK_DO_THROW(HX_("ERROR: No tileset currently set. Use Gfx.changetileset(\"tileset name\") to set the current tileset.",24,f1,bb,17));
            		}
HXLINE( 558)		if ((t >= ::haxegon::Gfx_obj::numberoftiles())) {
HXLINE( 559)			if ((t == ::haxegon::Gfx_obj::numberoftiles())) {
HXLINE( 560)				::String _hx_tmp1 = ::Std_obj::string(t);
HXDLIN( 560)				::String _hx_tmp2 = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + _hx_tmp1) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 560)				::String _hx_tmp3 = ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles());
HXDLIN( 560)				::String _hx_tmp4 = ((((_hx_tmp2 + _hx_tmp3) + HX_(" tiles in tileset \"",d6,c5,31,7b)) + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->name) + HX_("\". (Because this includes tile number 0, ",5e,3b,b7,de));
HXDLIN( 560)				::String _hx_tmp5 = ::Std_obj::string(t);
HXDLIN( 560)				HX_STACK_DO_THROW(((_hx_tmp4 + _hx_tmp5) + HX_(" is not a valid tile.)",6f,3b,18,05)));
            			}
            			else {
HXLINE( 563)				::String _hx_tmp6 = ::Std_obj::string(t);
HXDLIN( 563)				::String _hx_tmp7 = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + _hx_tmp6) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 563)				::String _hx_tmp8 = ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles());
HXDLIN( 563)				HX_STACK_DO_THROW(((((_hx_tmp7 + _hx_tmp8) + HX_(" tiles in tileset \"",d6,c5,31,7b)) + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->name) + HX_("\".",cc,1d,00,00)));
            			}
            		}
HXLINE( 568)		x = ::haxegon::Gfx_obj::tilealignx(x);
HXDLIN( 568)		y = ::haxegon::Gfx_obj::tilealigny(y);
HXLINE( 570)		Bool _hx_tmp9;
HXDLIN( 570)		if (!(::haxegon::Gfx_obj::transform)) {
HXLINE( 570)			_hx_tmp9 = !(::haxegon::Gfx_obj::coltransform);
            		}
            		else {
HXLINE( 570)			_hx_tmp9 = false;
            		}
HXDLIN( 570)		if (_hx_tmp9) {
HXLINE( 571)			Int _hx_tmp10 = ::Std_obj::_hx_int(x);
HXDLIN( 571)			Int _hx_tmp11 = ::Std_obj::_hx_int(y);
HXDLIN( 571)			::haxegon::Gfx_obj::settpoint(_hx_tmp10,_hx_tmp11);
HXLINE( 572)			 ::openfl::display::BitmapData _hx_tmp12 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(t).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 572)			::haxegon::Gfx_obj::drawto->copyPixels(_hx_tmp12,::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(t).StaticCast<  ::openfl::display::BitmapData >()->rect,::haxegon::Gfx_obj::tpoint,null(),null(),true);
            		}
            		else {
HXLINE( 574)			::haxegon::Gfx_obj::tempxalign = (int)0;
HXDLIN( 574)			::haxegon::Gfx_obj::tempyalign = (int)0;
HXLINE( 576)			::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 578)			Bool _hx_tmp13;
HXDLIN( 578)			if ((::haxegon::Gfx_obj::imagexscale == ((Float)1.0))) {
HXLINE( 578)				_hx_tmp13 = (::haxegon::Gfx_obj::imageyscale != ((Float)1.0));
            			}
            			else {
HXLINE( 578)				_hx_tmp13 = true;
            			}
HXDLIN( 578)			if (_hx_tmp13) {
HXLINE( 579)				Bool _hx_tmp14 = (::haxegon::Gfx_obj::imagescalexpivot != ((Float)0.0));
HXDLIN( 579)				if (_hx_tmp14) {
HXLINE( 579)					::haxegon::Gfx_obj::tempxalign = ::haxegon::Gfx_obj::tilealignontilex(::haxegon::Gfx_obj::imagescalexpivot);
            				}
HXLINE( 580)				Bool _hx_tmp15 = (::haxegon::Gfx_obj::imagescaleypivot != ((Float)0.0));
HXDLIN( 580)				if (_hx_tmp15) {
HXLINE( 580)					::haxegon::Gfx_obj::tempyalign = ::haxegon::Gfx_obj::tilealignontiley(::haxegon::Gfx_obj::imagescaleypivot);
            				}
HXLINE( 581)				::haxegon::Gfx_obj::shapematrix->translate(-(::haxegon::Gfx_obj::tempxalign),-(::haxegon::Gfx_obj::tempyalign));
HXLINE( 582)				::haxegon::Gfx_obj::shapematrix->scale(::haxegon::Gfx_obj::imagexscale,::haxegon::Gfx_obj::imageyscale);
HXLINE( 583)				::haxegon::Gfx_obj::shapematrix->translate(::haxegon::Gfx_obj::tempxalign,::haxegon::Gfx_obj::tempyalign);
            			}
HXLINE( 586)			Bool _hx_tmp16 = (::haxegon::Gfx_obj::imagerotate != (int)0);
HXDLIN( 586)			if (_hx_tmp16) {
HXLINE( 587)				Bool _hx_tmp17 = (::haxegon::Gfx_obj::imagerotatexpivot != ((Float)0.0));
HXDLIN( 587)				if (_hx_tmp17) {
HXLINE( 587)					::haxegon::Gfx_obj::tempxalign = ::haxegon::Gfx_obj::tilealignontilex(::haxegon::Gfx_obj::imagerotatexpivot);
            				}
HXLINE( 588)				Bool _hx_tmp18 = (::haxegon::Gfx_obj::imagerotateypivot != ((Float)0.0));
HXDLIN( 588)				if (_hx_tmp18) {
HXLINE( 588)					::haxegon::Gfx_obj::tempyalign = ::haxegon::Gfx_obj::tilealignontiley(::haxegon::Gfx_obj::imagerotateypivot);
            				}
HXLINE( 589)				::haxegon::Gfx_obj::shapematrix->translate(-(::haxegon::Gfx_obj::tempxalign),-(::haxegon::Gfx_obj::tempyalign));
HXLINE( 590)				Float _hx_tmp19 = ((Float)(::haxegon::Gfx_obj::imagerotate * ((Float)3.1415)) / (Float)(int)180);
HXDLIN( 590)				::haxegon::Gfx_obj::shapematrix->rotate(_hx_tmp19);
HXLINE( 591)				::haxegon::Gfx_obj::shapematrix->translate(::haxegon::Gfx_obj::tempxalign,::haxegon::Gfx_obj::tempyalign);
            			}
HXLINE( 594)			::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 595)			Bool _hx_tmp20 = ::haxegon::Gfx_obj::coltransform;
HXDLIN( 595)			if (_hx_tmp20) {
HXLINE( 596)				::haxegon::Gfx_obj::alphact->alphaMultiplier = ::haxegon::Gfx_obj::imagealphamult;
HXLINE( 597)				::haxegon::Gfx_obj::alphact->redMultiplier = ::haxegon::Gfx_obj::imageredmult;
HXLINE( 598)				::haxegon::Gfx_obj::alphact->greenMultiplier = ::haxegon::Gfx_obj::imagegreenmult;
HXLINE( 599)				::haxegon::Gfx_obj::alphact->blueMultiplier = ::haxegon::Gfx_obj::imagebluemult;
HXLINE( 600)				::haxegon::Gfx_obj::alphact->redOffset = ::haxegon::Gfx_obj::imageredadd;
HXLINE( 601)				::haxegon::Gfx_obj::alphact->greenOffset = ::haxegon::Gfx_obj::imagegreenadd;
HXLINE( 602)				::haxegon::Gfx_obj::alphact->blueOffset = ::haxegon::Gfx_obj::imageblueadd;
HXLINE( 603)				 ::openfl::display::BitmapData _hx_tmp21 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(t).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 603)				::haxegon::Gfx_obj::drawto->draw(_hx_tmp21,::haxegon::Gfx_obj::shapematrix,::haxegon::Gfx_obj::alphact,null(),null(),null());
            			}
            			else {
HXLINE( 605)				 ::openfl::display::BitmapData _hx_tmp22 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->tiles->__get(t).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 605)				::haxegon::Gfx_obj::drawto->draw(_hx_tmp22,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            			}
HXLINE( 607)			::haxegon::Gfx_obj::shapematrix->identity();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,draw_tile,(void))

Int Gfx_obj::currentframe(){
            	HX_STACK_FRAME("haxegon.Gfx","currentframe",0x1a0a6cd7,"haxegon.Gfx.currentframe","haxegon/Gfx.hx",614,0xa6405f94)
HXLINE( 614)		return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->currentframe;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,currentframe,return )

void Gfx_obj::stopAnimation(::String animationname){
            	HX_STACK_FRAME("haxegon.Gfx","stopAnimation",0x6209e1bf,"haxegon.Gfx.stopAnimation","haxegon/Gfx.hx",619,0xa6405f94)
            	HX_STACK_ARG(animationname,"animationname")
HXLINE( 620)		::haxegon::Gfx_obj::animationnum = ::haxegon::Gfx_obj::animationindex->get(animationname);
HXLINE( 621)		::haxegon::Gfx_obj::animations->__get(::haxegon::Gfx_obj::animationnum).StaticCast<  ::haxegon::util::AnimationContainer >()->reset();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,stopAnimation,(void))

void Gfx_obj::defineAnimation(::String animationname,::String tileset,Int startframe,Int endframe,Int delayperframe){
            	HX_STACK_FRAME("haxegon.Gfx","defineAnimation",0x0ee547a6,"haxegon.Gfx.defineAnimation","haxegon/Gfx.hx",624,0xa6405f94)
            	HX_STACK_ARG(animationname,"animationname")
            	HX_STACK_ARG(tileset,"tileset")
            	HX_STACK_ARG(startframe,"startframe")
            	HX_STACK_ARG(endframe,"endframe")
            	HX_STACK_ARG(delayperframe,"delayperframe")
HXLINE( 625)		if ((delayperframe < (int)1)) {
HXLINE( 626)			HX_STACK_DO_THROW(HX_("ERROR: Cannot have a delay per frame of less than 1.",a3,ad,bc,a9));
            		}
HXLINE( 629)		{
HXLINE( 629)			Int value = ::haxegon::Gfx_obj::animations->length;
HXDLIN( 629)			::haxegon::Gfx_obj::animationindex->set(animationname,value);
            		}
HXLINE( 630)		::haxegon::Gfx_obj::animations->push( ::haxegon::util::AnimationContainer_obj::__new(animationname,tileset,startframe,endframe,delayperframe));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Gfx_obj,defineAnimation,(void))

void Gfx_obj::drawAnimation(Float x,Float y,::String animationname){
            	HX_STACK_FRAME("haxegon.Gfx","drawAnimation",0xfe23157d,"haxegon.Gfx.drawAnimation","haxegon/Gfx.hx",633,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(animationname,"animationname")
HXLINE( 634)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 634)			Bool _hx_tmp;
HXDLIN( 634)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 634)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 634)				_hx_tmp = false;
            			}
HXDLIN( 634)			if (_hx_tmp) {
HXLINE( 634)				return;
            			}
            		}
HXLINE( 635)		::haxegon::Gfx_obj::oldtileset = ::haxegon::Gfx_obj::currenttilesetname;
HXLINE( 636)		Bool _hx_tmp1 = !(::haxegon::Gfx_obj::animationindex->exists(animationname));
HXDLIN( 636)		if (_hx_tmp1) {
HXLINE( 637)			HX_STACK_DO_THROW(((HX_("ERROR: No animated named \"",8f,14,a8,83) + animationname) + HX_("\" is defined. Define one first using Gfx.defineAnimation!",35,24,bc,4e)));
            		}
HXLINE( 640)		::haxegon::Gfx_obj::animationnum = ::haxegon::Gfx_obj::animationindex->get(animationname);
HXLINE( 641)		::haxegon::Gfx_obj::changetileset(::haxegon::Gfx_obj::animations->__get(::haxegon::Gfx_obj::animationnum).StaticCast<  ::haxegon::util::AnimationContainer >()->tileset);
HXLINE( 643)		::haxegon::Gfx_obj::animations->__get(::haxegon::Gfx_obj::animationnum).StaticCast<  ::haxegon::util::AnimationContainer >()->update();
HXLINE( 644)		::haxegon::Gfx_obj::tempframe = ::haxegon::Gfx_obj::animations->__get(::haxegon::Gfx_obj::animationnum).StaticCast<  ::haxegon::util::AnimationContainer >()->currentframe;
HXLINE( 646)		::haxegon::Gfx_obj::draw_tile(x,y,::haxegon::Gfx_obj::tempframe);
HXLINE( 648)		::haxegon::Gfx_obj::changetileset(::haxegon::Gfx_obj::oldtileset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,drawAnimation,(void))

Float Gfx_obj::tilealignx(Float x){
            	HX_STACK_FRAME("haxegon.Gfx","tilealignx",0x48ff8084,"haxegon.Gfx.tilealignx","haxegon/Gfx.hx",651,0xa6405f94)
            	HX_STACK_ARG(x,"x")
HXLINE( 652)		Bool _hx_tmp = (x == ::haxegon::Gfx_obj::CENTER);
HXDLIN( 652)		if (_hx_tmp) {
HXLINE( 652)			Int _hx_tmp1 = ::haxegon::Gfx_obj::screen_widthMid;
HXDLIN( 652)			Float _hx_tmp2 = ((Float)::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->width / (Float)(int)2);
HXDLIN( 652)			Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 652)			return (_hx_tmp1 - _hx_tmp3);
            		}
HXLINE( 653)		Bool _hx_tmp4;
HXDLIN( 653)		if ((x != ::haxegon::Gfx_obj::LEFT)) {
HXLINE( 653)			_hx_tmp4 = (x == ::haxegon::Gfx_obj::TOP);
            		}
            		else {
HXLINE( 653)			_hx_tmp4 = true;
            		}
HXDLIN( 653)		if (_hx_tmp4) {
HXLINE( 653)			return (int)0;
            		}
HXLINE( 654)		Bool _hx_tmp5;
HXDLIN( 654)		if ((x != ::haxegon::Gfx_obj::RIGHT)) {
HXLINE( 654)			_hx_tmp5 = (x == ::haxegon::Gfx_obj::BOTTOM);
            		}
            		else {
HXLINE( 654)			_hx_tmp5 = true;
            		}
HXDLIN( 654)		if (_hx_tmp5) {
HXLINE( 654)			return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->width;
            		}
HXLINE( 655)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilealignx,return )

Float Gfx_obj::tilealigny(Float y){
            	HX_STACK_FRAME("haxegon.Gfx","tilealigny",0x48ff8085,"haxegon.Gfx.tilealigny","haxegon/Gfx.hx",658,0xa6405f94)
            	HX_STACK_ARG(y,"y")
HXLINE( 659)		Bool _hx_tmp = (y == ::haxegon::Gfx_obj::CENTER);
HXDLIN( 659)		if (_hx_tmp) {
HXLINE( 659)			Int _hx_tmp1 = ::haxegon::Gfx_obj::screen_heightMid;
HXDLIN( 659)			Float _hx_tmp2 = ((Float)::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->height / (Float)(int)2);
HXDLIN( 659)			Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 659)			return (_hx_tmp1 - _hx_tmp3);
            		}
HXLINE( 660)		Bool _hx_tmp4;
HXDLIN( 660)		if ((y != ::haxegon::Gfx_obj::LEFT)) {
HXLINE( 660)			_hx_tmp4 = (y == ::haxegon::Gfx_obj::TOP);
            		}
            		else {
HXLINE( 660)			_hx_tmp4 = true;
            		}
HXDLIN( 660)		if (_hx_tmp4) {
HXLINE( 660)			return (int)0;
            		}
HXLINE( 661)		Bool _hx_tmp5;
HXDLIN( 661)		if ((y != ::haxegon::Gfx_obj::RIGHT)) {
HXLINE( 661)			_hx_tmp5 = (y == ::haxegon::Gfx_obj::BOTTOM);
            		}
            		else {
HXLINE( 661)			_hx_tmp5 = true;
            		}
HXDLIN( 661)		if (_hx_tmp5) {
HXLINE( 661)			return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->height;
            		}
HXLINE( 662)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilealigny,return )

Float Gfx_obj::tilealignontilex(Float x){
            	HX_STACK_FRAME("haxegon.Gfx","tilealignontilex",0x53e63d17,"haxegon.Gfx.tilealignontilex","haxegon/Gfx.hx",665,0xa6405f94)
            	HX_STACK_ARG(x,"x")
HXLINE( 666)		Bool _hx_tmp = (x == ::haxegon::Gfx_obj::CENTER);
HXDLIN( 666)		if (_hx_tmp) {
HXLINE( 666)			Float _hx_tmp1 = ((Float)::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->width / (Float)(int)2);
HXDLIN( 666)			return ::Std_obj::_hx_int(_hx_tmp1);
            		}
HXLINE( 667)		Bool _hx_tmp2;
HXDLIN( 667)		if ((x != ::haxegon::Gfx_obj::LEFT)) {
HXLINE( 667)			_hx_tmp2 = (x == ::haxegon::Gfx_obj::TOP);
            		}
            		else {
HXLINE( 667)			_hx_tmp2 = true;
            		}
HXDLIN( 667)		if (_hx_tmp2) {
HXLINE( 667)			return (int)0;
            		}
HXLINE( 668)		Bool _hx_tmp3;
HXDLIN( 668)		if ((x != ::haxegon::Gfx_obj::RIGHT)) {
HXLINE( 668)			_hx_tmp3 = (x == ::haxegon::Gfx_obj::BOTTOM);
            		}
            		else {
HXLINE( 668)			_hx_tmp3 = true;
            		}
HXDLIN( 668)		if (_hx_tmp3) {
HXLINE( 668)			return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->width;
            		}
HXLINE( 669)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilealignontilex,return )

Float Gfx_obj::tilealignontiley(Float y){
            	HX_STACK_FRAME("haxegon.Gfx","tilealignontiley",0x53e63d18,"haxegon.Gfx.tilealignontiley","haxegon/Gfx.hx",672,0xa6405f94)
            	HX_STACK_ARG(y,"y")
HXLINE( 673)		Bool _hx_tmp = (y == ::haxegon::Gfx_obj::CENTER);
HXDLIN( 673)		if (_hx_tmp) {
HXLINE( 673)			Float _hx_tmp1 = ((Float)::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->height / (Float)(int)2);
HXDLIN( 673)			return ::Std_obj::_hx_int(_hx_tmp1);
            		}
HXLINE( 674)		Bool _hx_tmp2;
HXDLIN( 674)		if ((y != ::haxegon::Gfx_obj::LEFT)) {
HXLINE( 674)			_hx_tmp2 = (y == ::haxegon::Gfx_obj::TOP);
            		}
            		else {
HXLINE( 674)			_hx_tmp2 = true;
            		}
HXDLIN( 674)		if (_hx_tmp2) {
HXLINE( 674)			return (int)0;
            		}
HXLINE( 675)		Bool _hx_tmp3;
HXDLIN( 675)		if ((y != ::haxegon::Gfx_obj::RIGHT)) {
HXLINE( 675)			_hx_tmp3 = (y == ::haxegon::Gfx_obj::BOTTOM);
            		}
            		else {
HXLINE( 675)			_hx_tmp3 = true;
            		}
HXDLIN( 675)		if (_hx_tmp3) {
HXLINE( 675)			return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::util::Tileset >()->height;
            		}
HXLINE( 676)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilealignontiley,return )

void Gfx_obj::draw_line(Float _x1,Float _y1,Float _x2,Float _y2,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","draw_line",0x567ff9ec,"haxegon.Gfx.draw_line","haxegon/Gfx.hx",679,0xa6405f94)
            	HX_STACK_ARG(_x1,"_x1")
            	HX_STACK_ARG(_y1,"_y1")
            	HX_STACK_ARG(_x2,"_x2")
            	HX_STACK_ARG(_y2,"_y2")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 680)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 680)			Bool _hx_tmp;
HXDLIN( 680)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 680)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 680)				_hx_tmp = false;
            			}
HXDLIN( 680)			if (_hx_tmp) {
HXLINE( 680)				return;
            			}
            		}
HXLINE( 681)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 682)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineStyle(::haxegon::Gfx_obj::line_thickness,col,alpha,null(),null(),null(),null(),null());
HXLINE( 683)		::haxegon::Gfx_obj::tempshape->get_graphics()->moveTo(_x1,_y1);
HXLINE( 684)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo(_x2,_y2);
HXLINE( 686)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 687)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,draw_line,(void))

void Gfx_obj::drawHexagon(Float x,Float y,Float radius,Float angle,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","drawHexagon",0x0362ee19,"haxegon.Gfx.drawHexagon","haxegon/Gfx.hx",690,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 691)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 691)			Bool _hx_tmp;
HXDLIN( 691)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 691)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 691)				_hx_tmp = false;
            			}
HXDLIN( 691)			if (_hx_tmp) {
HXLINE( 691)				return;
            			}
            		}
HXLINE( 692)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 693)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineStyle(::haxegon::Gfx_obj::line_thickness,col,alpha,null(),null(),null(),null(),null());
HXLINE( 695)		Float _hx_tmp1 = (::Math_obj::PI * (int)2);
HXDLIN( 695)		::haxegon::Gfx_obj::temprotate = ((Float)_hx_tmp1 / (Float)(int)6);
HXLINE( 697)		Float _hx_tmp2 = ::Math_obj::cos(angle);
HXDLIN( 697)		::haxegon::Gfx_obj::tx = (_hx_tmp2 * radius);
HXLINE( 698)		Float _hx_tmp3 = ::Math_obj::sin(angle);
HXDLIN( 698)		::haxegon::Gfx_obj::ty = (_hx_tmp3 * radius);
HXLINE( 700)		::haxegon::Gfx_obj::tempshape->get_graphics()->moveTo(::haxegon::Gfx_obj::tx,::haxegon::Gfx_obj::ty);
HXLINE( 701)		{
HXLINE( 701)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 701)			while((_g < (int)7)){
HXLINE( 701)				HX_VARI( Int,i) = _g++;
HXLINE( 702)				Float _hx_tmp4 = (angle + (::haxegon::Gfx_obj::temprotate * i));
HXDLIN( 702)				Float _hx_tmp5 = ::Math_obj::cos(_hx_tmp4);
HXDLIN( 702)				::haxegon::Gfx_obj::tx = (_hx_tmp5 * radius);
HXLINE( 703)				Float _hx_tmp6 = (angle + (::haxegon::Gfx_obj::temprotate * i));
HXDLIN( 703)				Float _hx_tmp7 = ::Math_obj::sin(_hx_tmp6);
HXDLIN( 703)				::haxegon::Gfx_obj::ty = (_hx_tmp7 * radius);
HXLINE( 705)				::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo(::haxegon::Gfx_obj::tx,::haxegon::Gfx_obj::ty);
            			}
            		}
HXLINE( 708)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 709)		::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 710)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,drawHexagon,(void))

void Gfx_obj::fillHexagon(Float x,Float y,Float radius,Float angle,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","fillHexagon",0xddb6297a,"haxegon.Gfx.fillHexagon","haxegon/Gfx.hx",713,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 714)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 714)			Bool _hx_tmp;
HXDLIN( 714)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 714)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 714)				_hx_tmp = false;
            			}
HXDLIN( 714)			if (_hx_tmp) {
HXLINE( 714)				return;
            			}
            		}
HXLINE( 715)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 716)		Float _hx_tmp1 = (::Math_obj::PI * (int)2);
HXDLIN( 716)		::haxegon::Gfx_obj::temprotate = ((Float)_hx_tmp1 / (Float)(int)6);
HXLINE( 718)		Float _hx_tmp2 = ::Math_obj::cos(angle);
HXDLIN( 718)		::haxegon::Gfx_obj::tx = (_hx_tmp2 * radius);
HXLINE( 719)		Float _hx_tmp3 = ::Math_obj::sin(angle);
HXDLIN( 719)		::haxegon::Gfx_obj::ty = (_hx_tmp3 * radius);
HXLINE( 721)		::haxegon::Gfx_obj::tempshape->get_graphics()->moveTo(::haxegon::Gfx_obj::tx,::haxegon::Gfx_obj::ty);
HXLINE( 722)		::haxegon::Gfx_obj::tempshape->get_graphics()->beginFill(col,alpha);
HXLINE( 723)		{
HXLINE( 723)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 723)			while((_g < (int)7)){
HXLINE( 723)				HX_VARI( Int,i) = _g++;
HXLINE( 724)				Float _hx_tmp4 = (angle + (::haxegon::Gfx_obj::temprotate * i));
HXDLIN( 724)				Float _hx_tmp5 = ::Math_obj::cos(_hx_tmp4);
HXDLIN( 724)				::haxegon::Gfx_obj::tx = (_hx_tmp5 * radius);
HXLINE( 725)				Float _hx_tmp6 = (angle + (::haxegon::Gfx_obj::temprotate * i));
HXDLIN( 725)				Float _hx_tmp7 = ::Math_obj::sin(_hx_tmp6);
HXDLIN( 725)				::haxegon::Gfx_obj::ty = (_hx_tmp7 * radius);
HXLINE( 727)				::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo(::haxegon::Gfx_obj::tx,::haxegon::Gfx_obj::ty);
            			}
            		}
HXLINE( 729)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 731)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 732)		::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 733)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,fillHexagon,(void))

void Gfx_obj::draw_circle(Float x,Float y,Float radius,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","draw_circle",0x5b50c208,"haxegon.Gfx.draw_circle","haxegon/Gfx.hx",736,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 737)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 737)			Bool _hx_tmp;
HXDLIN( 737)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 737)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 737)				_hx_tmp = false;
            			}
HXDLIN( 737)			if (_hx_tmp) {
HXLINE( 737)				return;
            			}
            		}
HXLINE( 738)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 739)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineStyle(::haxegon::Gfx_obj::line_thickness,col,alpha,null(),null(),null(),null(),null());
HXLINE( 740)		::haxegon::Gfx_obj::tempshape->get_graphics()->drawCircle((int)0,(int)0,radius);
HXLINE( 742)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 743)		::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 744)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Gfx_obj,draw_circle,(void))

void Gfx_obj::fill_circle(Float x,Float y,Float radius,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","fill_circle",0x35a3fd69,"haxegon.Gfx.fill_circle","haxegon/Gfx.hx",747,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 748)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 748)			Bool _hx_tmp;
HXDLIN( 748)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 748)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 748)				_hx_tmp = false;
            			}
HXDLIN( 748)			if (_hx_tmp) {
HXLINE( 748)				return;
            			}
            		}
HXLINE( 749)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 750)		::haxegon::Gfx_obj::tempshape->get_graphics()->beginFill(col,alpha);
HXLINE( 751)		::haxegon::Gfx_obj::tempshape->get_graphics()->drawCircle((int)0,(int)0,radius);
HXLINE( 752)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 754)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 755)		::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 756)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Gfx_obj,fill_circle,(void))

void Gfx_obj::draw_tri(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","draw_tri",0xc01fee33,"haxegon.Gfx.draw_tri","haxegon/Gfx.hx",759,0xa6405f94)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 760)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 760)			Bool _hx_tmp;
HXDLIN( 760)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 760)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 760)				_hx_tmp = false;
            			}
HXDLIN( 760)			if (_hx_tmp) {
HXLINE( 760)				return;
            			}
            		}
HXLINE( 761)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 762)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineStyle(::haxegon::Gfx_obj::line_thickness,col,alpha,null(),null(),null(),null(),null());
HXLINE( 763)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 764)		 ::openfl::display::Graphics _hx_tmp1 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 764)		_hx_tmp1->lineTo((x2 - x1),(y2 - y1));
HXLINE( 765)		 ::openfl::display::Graphics _hx_tmp2 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 765)		_hx_tmp2->lineTo((x3 - x1),(y3 - y1));
HXLINE( 766)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 767)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 769)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 770)		::haxegon::Gfx_obj::shapematrix->translate(x1,y1);
HXLINE( 771)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Gfx_obj,draw_tri,(void))

void Gfx_obj::fill_tri_array(::Array< Float > tri,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","fill_tri_array",0xdb45228c,"haxegon.Gfx.fill_tri_array","haxegon/Gfx.hx",774,0xa6405f94)
            	HX_STACK_ARG(tri,"tri")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 775)		Bool _hx_tmp = (tri->length != (int)6);
HXDLIN( 775)		if (_hx_tmp) {
HXLINE( 776)			::haxe::Log_obj::trace(HX_("Gfx.fill_tri_array(): tri array size must be 6",52,bf,3e,17),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),776,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("fill_tri_array",49,7c,db,e0)));
HXLINE( 777)			return;
            		}
HXLINE( 779)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 779)			Bool _hx_tmp1;
HXDLIN( 779)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 779)				_hx_tmp1 = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 779)				_hx_tmp1 = false;
            			}
HXDLIN( 779)			if (_hx_tmp1) {
HXLINE( 779)				return;
            			}
            		}
HXLINE( 780)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 781)		::haxegon::Gfx_obj::tempshape->get_graphics()->beginFill(col,alpha);
HXLINE( 782)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 783)		 ::openfl::display::Graphics _hx_tmp2 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 783)		Float _hx_tmp3 = (tri->__get((int)2) - tri->__get((int)0));
HXDLIN( 783)		Float _hx_tmp4 = (tri->__get((int)3) - tri->__get((int)1));
HXDLIN( 783)		_hx_tmp2->lineTo(_hx_tmp3,_hx_tmp4);
HXLINE( 784)		 ::openfl::display::Graphics _hx_tmp5 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 784)		Float _hx_tmp6 = (tri->__get((int)4) - tri->__get((int)0));
HXDLIN( 784)		Float _hx_tmp7 = (tri->__get((int)5) - tri->__get((int)1));
HXDLIN( 784)		_hx_tmp5->lineTo(_hx_tmp6,_hx_tmp7);
HXLINE( 785)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 786)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 788)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 789)		Float _hx_tmp8 = tri->__get((int)0);
HXDLIN( 789)		Float _hx_tmp9 = tri->__get((int)1);
HXDLIN( 789)		::haxegon::Gfx_obj::shapematrix->translate(_hx_tmp8,_hx_tmp9);
HXLINE( 790)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,fill_tri_array,(void))

void Gfx_obj::fill_tri(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","fill_tri",0xccc83c32,"haxegon.Gfx.fill_tri","haxegon/Gfx.hx",793,0xa6405f94)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 794)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 794)			Bool _hx_tmp;
HXDLIN( 794)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 794)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 794)				_hx_tmp = false;
            			}
HXDLIN( 794)			if (_hx_tmp) {
HXLINE( 794)				return;
            			}
            		}
HXLINE( 795)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 796)		::haxegon::Gfx_obj::tempshape->get_graphics()->beginFill(col,alpha);
HXLINE( 797)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 798)		 ::openfl::display::Graphics _hx_tmp1 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 798)		_hx_tmp1->lineTo((x2 - x1),(y2 - y1));
HXLINE( 799)		 ::openfl::display::Graphics _hx_tmp2 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 799)		_hx_tmp2->lineTo((x3 - x1),(y3 - y1));
HXLINE( 800)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 801)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 803)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 804)		::haxegon::Gfx_obj::shapematrix->translate(x1,y1);
HXLINE( 805)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Gfx_obj,fill_tri,(void))

void Gfx_obj::draw_box(Float x,Float y,Float width,Float height,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","draw_box",0xc0124313,"haxegon.Gfx.draw_box","haxegon/Gfx.hx",808,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 809)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 809)			Bool _hx_tmp;
HXDLIN( 809)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 809)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 809)				_hx_tmp = false;
            			}
HXDLIN( 809)			if (_hx_tmp) {
HXLINE( 809)				return;
            			}
            		}
HXLINE( 810)		Bool _hx_tmp1 = (width < (int)0);
HXDLIN( 810)		if (_hx_tmp1) {
HXLINE( 811)			width = -(width);
HXLINE( 812)			hx::SubEq(x,width);
            		}
HXLINE( 814)		Bool _hx_tmp2 = (height < (int)0);
HXDLIN( 814)		if (_hx_tmp2) {
HXLINE( 815)			height = -(height);
HXLINE( 816)			hx::SubEq(y,height);
            		}
HXLINE( 818)		Bool _hx_tmp3 = (::haxegon::Gfx_obj::line_thickness < (int)2);
HXDLIN( 818)		if (_hx_tmp3) {
HXLINE( 819)			::haxegon::Gfx_obj::fill_box(x,y,width,(int)1,col,alpha);
HXLINE( 820)			::haxegon::Gfx_obj::fill_box(x,((y + height) - (int)1),(width - (int)1),(int)1,col,alpha);
HXLINE( 821)			::haxegon::Gfx_obj::fill_box(x,(y + (int)1),(int)1,(height - (int)1),col,alpha);
HXLINE( 822)			::haxegon::Gfx_obj::fill_box(((x + width) - (int)1),(y + (int)1),(int)1,(height - (int)1),col,alpha);
            		}
            		else {
HXLINE( 824)			::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 825)			::haxegon::Gfx_obj::tempshape->get_graphics()->lineStyle(::haxegon::Gfx_obj::line_thickness,col,alpha,null(),null(),null(),null(),null());
HXLINE( 826)			::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo(width,(int)0);
HXLINE( 827)			::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo(width,height);
HXLINE( 828)			::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,height);
HXLINE( 829)			::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 831)			::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 832)			::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 833)			::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,draw_box,(void))

void Gfx_obj::fill_box(Float x,Float y,Float width,Float height,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","fill_box",0xccba9112,"haxegon.Gfx.fill_box","haxegon/Gfx.hx",837,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 838)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 838)			Bool _hx_tmp;
HXDLIN( 838)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 838)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 838)				_hx_tmp = false;
            			}
HXDLIN( 838)			if (_hx_tmp) {
HXLINE( 838)				return;
            			}
            		}
HXLINE( 839)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 840)		::haxegon::Gfx_obj::tempshape->get_graphics()->beginFill(col,alpha);
HXLINE( 841)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo(width,(int)0);
HXLINE( 842)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo(width,height);
HXLINE( 843)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,height);
HXLINE( 844)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 845)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 847)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 848)		::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 849)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,fill_box,(void))

void Gfx_obj::draw_poly(::Array< Float > poly,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","draw_poly",0x59296044,"haxegon.Gfx.draw_poly","haxegon/Gfx.hx",852,0xa6405f94)
            	HX_STACK_ARG(poly,"poly")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 853)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 853)			Bool _hx_tmp;
HXDLIN( 853)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 853)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 853)				_hx_tmp = false;
            			}
HXDLIN( 853)			if (_hx_tmp) {
HXLINE( 853)				return;
            			}
            		}
HXLINE( 854)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 855)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineStyle(::haxegon::Gfx_obj::line_thickness,col,alpha,null(),null(),null(),null(),null());
HXLINE( 856)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 857)		{
HXLINE( 857)			HX_VARI( Int,_g1) = (int)1;
HXDLIN( 857)			Float _hx_tmp1 = ((Float)poly->length / (Float)(int)2);
HXDLIN( 857)			HX_VARI( Int,_g) = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 857)			while((_g1 < _g)){
HXLINE( 857)				HX_VARI( Int,i) = _g1++;
HXLINE( 858)				 ::openfl::display::Graphics _hx_tmp2 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 858)				Float _hx_tmp3 = (poly->__get((i * (int)2)) - poly->__get((int)0));
HXDLIN( 858)				Float _hx_tmp4 = (poly->__get(((i * (int)2) + (int)1)) - poly->__get((int)1));
HXDLIN( 858)				_hx_tmp2->lineTo(_hx_tmp3,_hx_tmp4);
            			}
            		}
HXLINE( 860)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 861)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 863)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 864)		Float _hx_tmp5 = poly->__get((int)0);
HXDLIN( 864)		Float _hx_tmp6 = poly->__get((int)1);
HXDLIN( 864)		::haxegon::Gfx_obj::shapematrix->translate(_hx_tmp5,_hx_tmp6);
HXLINE( 865)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,draw_poly,(void))

void Gfx_obj::fill_poly(::Array< Float > poly,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","fill_poly",0x5fc55165,"haxegon.Gfx.fill_poly","haxegon/Gfx.hx",868,0xa6405f94)
            	HX_STACK_ARG(poly,"poly")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 869)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 869)			Bool _hx_tmp;
HXDLIN( 869)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 869)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 869)				_hx_tmp = false;
            			}
HXDLIN( 869)			if (_hx_tmp) {
HXLINE( 869)				return;
            			}
            		}
HXLINE( 870)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 871)		::haxegon::Gfx_obj::tempshape->get_graphics()->beginFill(col,alpha);
HXLINE( 872)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 873)		{
HXLINE( 873)			HX_VARI( Int,_g1) = (int)1;
HXDLIN( 873)			Float _hx_tmp1 = ((Float)poly->length / (Float)(int)2);
HXDLIN( 873)			HX_VARI( Int,_g) = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 873)			while((_g1 < _g)){
HXLINE( 873)				HX_VARI( Int,i) = _g1++;
HXLINE( 874)				 ::openfl::display::Graphics _hx_tmp2 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 874)				Float _hx_tmp3 = (poly->__get((i * (int)2)) - poly->__get((int)0));
HXDLIN( 874)				Float _hx_tmp4 = (poly->__get(((i * (int)2) + (int)1)) - poly->__get((int)1));
HXDLIN( 874)				_hx_tmp2->lineTo(_hx_tmp3,_hx_tmp4);
            			}
            		}
HXLINE( 876)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 877)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 879)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 880)		Float _hx_tmp5 = poly->__get((int)0);
HXDLIN( 880)		Float _hx_tmp6 = poly->__get((int)1);
HXDLIN( 880)		::haxegon::Gfx_obj::shapematrix->translate(_hx_tmp5,_hx_tmp6);
HXLINE( 881)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,fill_poly,(void))

void Gfx_obj::isosceles_curve(Float x1,Float y1,Float x2,Float y2,Float angle){
            	HX_STACK_FRAME("haxegon.Gfx","isosceles_curve",0xb3157bf7,"haxegon.Gfx.isosceles_curve","haxegon/Gfx.hx",884,0xa6405f94)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 885)		::haxegon::Gfx_obj::tempshape->get_graphics()->moveTo(x1,y1);
HXLINE( 886)		HX_VARI( Float,l) = ::haxegon::MathExtensions_obj::dst(hx::ClassOf< ::Math >(),x1,y1,x2,y2);
HXLINE( 887)		Float _hx_tmp = ((Float)l / (Float)(int)2);
HXDLIN( 887)		Float _hx_tmp1 = ::Math_obj::cos(angle);
HXDLIN( 887)		HX_VARI( Float,h) = ((Float)_hx_tmp / (Float)_hx_tmp1);
HXLINE( 888)		Float _hx_tmp2 = ::Math_obj::atan2((y2 - y1),(x2 - x1));
HXDLIN( 888)		HX_VARI( Float,h_angle) = (_hx_tmp2 - angle);
HXLINE( 889)		Float _hx_tmp3 = ::Math_obj::cos(h_angle);
HXDLIN( 889)		HX_VARI( Float,dx) = (h * _hx_tmp3);
HXLINE( 890)		Float _hx_tmp4 = ::Math_obj::sin(h_angle);
HXDLIN( 890)		HX_VARI( Float,dy) = (h * _hx_tmp4);
HXLINE( 891)		 ::openfl::display::Graphics _hx_tmp5 = ::haxegon::Gfx_obj::tempshape->get_graphics();
HXDLIN( 891)		_hx_tmp5->curveTo((x1 + dx),(y1 + dy),x2,y2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Gfx_obj,isosceles_curve,(void))

void Gfx_obj::draw_round_tri(Float x,Float y,Float radius,Float internal_angle,Float angle,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","draw_round_tri",0xce8be082,"haxegon.Gfx.draw_round_tri","haxegon/Gfx.hx",894,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(internal_angle,"internal_angle")
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 895)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 895)			Bool _hx_tmp;
HXDLIN( 895)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 895)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 895)				_hx_tmp = false;
            			}
HXDLIN( 895)			if (_hx_tmp) {
HXLINE( 895)				return;
            			}
            		}
HXLINE( 896)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 897)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineStyle(::haxegon::Gfx_obj::line_thickness,col,alpha,null(),null(),null(),null(),null());
HXLINE( 898)		HX_VARI(  ::Dynamic,p1) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),((Float)0.0))
            			->setFixed(1,HX_("y",79,00,00,00),radius));
HXLINE( 899)		::haxegon::MathExtensions_obj::rotate_vector(hx::ClassOf< ::Math >(),p1,(int)0,(int)0,angle);
HXLINE( 900)		HX_VARI(  ::Dynamic,p2) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00), ::Dynamic(p1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)))
            			->setFixed(1,HX_("y",79,00,00,00), ::Dynamic(p1->__Field(HX_("y",79,00,00,00),hx::paccDynamic))));
HXLINE( 901)		HX_VARI(  ::Dynamic,p3) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00), ::Dynamic(p1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)))
            			->setFixed(1,HX_("y",79,00,00,00), ::Dynamic(p1->__Field(HX_("y",79,00,00,00),hx::paccDynamic))));
HXLINE( 902)		Float _hx_tmp1 = ((Float)((int)2 * ::Math_obj::PI) / (Float)(int)3);
HXDLIN( 902)		::haxegon::MathExtensions_obj::rotate_vector(hx::ClassOf< ::Math >(),p2,(int)0,(int)0,_hx_tmp1);
HXLINE( 903)		Float _hx_tmp2 = ((Float)((int)4 * ::Math_obj::PI) / (Float)(int)3);
HXDLIN( 903)		::haxegon::MathExtensions_obj::rotate_vector(hx::ClassOf< ::Math >(),p3,(int)0,(int)0,_hx_tmp2);
HXLINE( 904)		Float _hx_tmp3 = ( (Float)(p1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 904)		Float _hx_tmp4 = ( (Float)(p1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 904)		Float _hx_tmp5 = ( (Float)(p2->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 904)		Float _hx_tmp6 = ( (Float)(p2->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 904)		::haxegon::Gfx_obj::isosceles_curve(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,((Float)internal_angle / (Float)(int)2));
HXLINE( 905)		Float _hx_tmp7 = ( (Float)(p2->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 905)		Float _hx_tmp8 = ( (Float)(p2->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 905)		Float _hx_tmp9 = ( (Float)(p3->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 905)		Float _hx_tmp10 = ( (Float)(p3->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 905)		::haxegon::Gfx_obj::isosceles_curve(_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,((Float)internal_angle / (Float)(int)2));
HXLINE( 906)		Float _hx_tmp11 = ( (Float)(p3->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 906)		Float _hx_tmp12 = ( (Float)(p3->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 906)		Float _hx_tmp13 = ( (Float)(p1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 906)		Float _hx_tmp14 = ( (Float)(p1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 906)		::haxegon::Gfx_obj::isosceles_curve(_hx_tmp11,_hx_tmp12,_hx_tmp13,_hx_tmp14,((Float)internal_angle / (Float)(int)2));
HXLINE( 907)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo((int)0,(int)0);
HXLINE( 908)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 911)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 912)		::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 913)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Gfx_obj,draw_round_tri,(void))

void Gfx_obj::fill_round_tri(Float x,Float y,Float radius,Float internal_angle,Float angle,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","fill_round_tri",0x29cd37c1,"haxegon.Gfx.fill_round_tri","haxegon/Gfx.hx",916,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(internal_angle,"internal_angle")
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 917)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 917)			Bool _hx_tmp;
HXDLIN( 917)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 917)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 917)				_hx_tmp = false;
            			}
HXDLIN( 917)			if (_hx_tmp) {
HXLINE( 917)				return;
            			}
            		}
HXLINE( 918)		::haxegon::Gfx_obj::tempshape->get_graphics()->clear();
HXLINE( 919)		::haxegon::Gfx_obj::tempshape->get_graphics()->beginFill(col,alpha);
HXLINE( 920)		HX_VARI(  ::Dynamic,p1) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),radius)
            			->setFixed(1,HX_("y",79,00,00,00),((Float)0.0)));
HXLINE( 921)		::haxegon::MathExtensions_obj::rotate_vector(hx::ClassOf< ::Math >(),p1,(int)0,(int)0,angle);
HXLINE( 922)		HX_VARI(  ::Dynamic,p2) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00), ::Dynamic(p1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)))
            			->setFixed(1,HX_("y",79,00,00,00), ::Dynamic(p1->__Field(HX_("y",79,00,00,00),hx::paccDynamic))));
HXLINE( 923)		HX_VARI(  ::Dynamic,p3) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00), ::Dynamic(p1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)))
            			->setFixed(1,HX_("y",79,00,00,00), ::Dynamic(p1->__Field(HX_("y",79,00,00,00),hx::paccDynamic))));
HXLINE( 924)		Float _hx_tmp1 = ((Float)((int)2 * ::Math_obj::PI) / (Float)(int)3);
HXDLIN( 924)		::haxegon::MathExtensions_obj::rotate_vector(hx::ClassOf< ::Math >(),p2,(int)0,(int)0,_hx_tmp1);
HXLINE( 925)		Float _hx_tmp2 = ((Float)((int)4 * ::Math_obj::PI) / (Float)(int)3);
HXDLIN( 925)		::haxegon::MathExtensions_obj::rotate_vector(hx::ClassOf< ::Math >(),p3,(int)0,(int)0,_hx_tmp2);
HXLINE( 926)		Float _hx_tmp3 = ( (Float)(p1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 926)		Float _hx_tmp4 = ( (Float)(p1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 926)		Float _hx_tmp5 = ( (Float)(p2->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 926)		Float _hx_tmp6 = ( (Float)(p2->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 926)		::haxegon::Gfx_obj::isosceles_curve(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,((Float)internal_angle / (Float)(int)2));
HXLINE( 927)		Float _hx_tmp7 = ( (Float)(p2->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 927)		Float _hx_tmp8 = ( (Float)(p2->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 927)		Float _hx_tmp9 = ( (Float)(p3->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 927)		Float _hx_tmp10 = ( (Float)(p3->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 927)		::haxegon::Gfx_obj::isosceles_curve(_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,((Float)internal_angle / (Float)(int)2));
HXLINE( 928)		Float _hx_tmp11 = ( (Float)(p3->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 928)		Float _hx_tmp12 = ( (Float)(p3->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 928)		Float _hx_tmp13 = ( (Float)(p1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 928)		Float _hx_tmp14 = ( (Float)(p1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 928)		::haxegon::Gfx_obj::isosceles_curve(_hx_tmp11,_hx_tmp12,_hx_tmp13,_hx_tmp14,((Float)internal_angle / (Float)(int)2));
HXLINE( 929)		::haxegon::Gfx_obj::tempshape->get_graphics()->lineTo( ::Dynamic(p2->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(p2->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
HXLINE( 930)		::haxegon::Gfx_obj::tempshape->get_graphics()->endFill();
HXLINE( 932)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 933)		::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 934)		::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::tempshape,::haxegon::Gfx_obj::shapematrix,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Gfx_obj,fill_round_tri,(void))

void Gfx_obj::clear_screen(hx::Null< Int >  __o_col){
Int col = __o_col.Default(0);
            	HX_STACK_FRAME("haxegon.Gfx","clear_screen",0x23aa56a1,"haxegon.Gfx.clear_screen","haxegon/Gfx.hx",937,0xa6405f94)
            	HX_STACK_ARG(col,"col")
HXLINE( 938)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 938)			Bool _hx_tmp;
HXDLIN( 938)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 938)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 938)				_hx_tmp = false;
            			}
HXDLIN( 938)			if (_hx_tmp) {
HXLINE( 938)				return;
            			}
            		}
HXLINE( 939)		::haxegon::Gfx_obj::drawto->fillRect(::haxegon::Gfx_obj::drawto->rect,((int)-16777216 + col));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,clear_screen,(void))

Int Gfx_obj::get_pixel(Float x,Float y){
            	HX_STACK_FRAME("haxegon.Gfx","get_pixel",0x2d2b237a,"haxegon.Gfx.get_pixel","haxegon/Gfx.hx",942,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 943)		Int _hx_tmp = ::Std_obj::_hx_int(x);
HXDLIN( 943)		Int _hx_tmp1 = ::Std_obj::_hx_int(y);
HXDLIN( 943)		Int _hx_tmp2 = ::haxegon::Gfx_obj::drawto->getPixel32(_hx_tmp,_hx_tmp1);
HXDLIN( 943)		HX_VARI( Int,pixelalpha) = ((int)((int)_hx_tmp2 >> (int)(int)24) & (int)(int)255);
HXLINE( 944)		Int _hx_tmp3 = ::Std_obj::_hx_int(x);
HXDLIN( 944)		Int _hx_tmp4 = ::Std_obj::_hx_int(y);
HXDLIN( 944)		HX_VARI( Int,pixel) = ::haxegon::Gfx_obj::drawto->getPixel(_hx_tmp3,_hx_tmp4);
HXLINE( 946)		if ((pixelalpha == (int)0)) {
HXLINE( 946)			return ::haxegon::Col_obj::TRANSPARENT;
            		}
HXLINE( 947)		return pixel;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,get_pixel,return )

void Gfx_obj::set_pixel(Float x,Float y,Int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Gfx","set_pixel",0x107c0f86,"haxegon.Gfx.set_pixel","haxegon/Gfx.hx",950,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 951)		if (!(::haxegon::Gfx_obj::clearscreeneachframe)) {
HXLINE( 951)			Bool _hx_tmp;
HXDLIN( 951)			if (::haxegon::Gfx_obj::skiprender) {
HXLINE( 951)				_hx_tmp = ::haxegon::Gfx_obj::drawingtoscreen;
            			}
            			else {
HXLINE( 951)				_hx_tmp = false;
            			}
HXDLIN( 951)			if (_hx_tmp) {
HXLINE( 951)				return;
            			}
            		}
HXLINE( 952)		Int _hx_tmp1 = ::Std_obj::_hx_int(x);
HXDLIN( 952)		Int _hx_tmp2 = ::Std_obj::_hx_int(y);
HXDLIN( 952)		Int _hx_tmp3 = ::Std_obj::_hx_int((alpha * (int)255));
HXDLIN( 952)		::haxegon::Gfx_obj::drawto->setPixel32(_hx_tmp1,_hx_tmp2,(((int)_hx_tmp3 << (int)(int)24) + col));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,set_pixel,(void))

Int Gfx_obj::getred(Int c){
            	HX_STACK_FRAME("haxegon.Gfx","getred",0x83d685be,"haxegon.Gfx.getred","haxegon/Gfx.hx",956,0xa6405f94)
            	HX_STACK_ARG(c,"c")
HXLINE( 956)		return ((int)((int)c >> (int)(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,getred,return )

Int Gfx_obj::getgreen(Int c){
            	HX_STACK_FRAME("haxegon.Gfx","getgreen",0xbe027070,"haxegon.Gfx.getgreen","haxegon/Gfx.hx",960,0xa6405f94)
            	HX_STACK_ARG(c,"c")
HXLINE( 960)		return ((int)((int)c >> (int)(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,getgreen,return )

Int Gfx_obj::getblue(Int c){
            	HX_STACK_FRAME("haxegon.Gfx","getblue",0xcd50758d,"haxegon.Gfx.getblue","haxegon/Gfx.hx",964,0xa6405f94)
            	HX_STACK_ARG(c,"c")
HXLINE( 964)		return ((int)c & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,getblue,return )

Int Gfx_obj::gethue(Int c){
            	HX_STACK_FRAME("haxegon.Gfx","gethue",0x83cefd25,"haxegon.Gfx.gethue","haxegon/Gfx.hx",969,0xa6405f94)
            	HX_STACK_ARG(c,"c")
HXLINE( 970)		HX_VARI( Float,r) = ((Float)::haxegon::Gfx_obj::getred(c) / (Float)(int)255);
HXLINE( 971)		HX_VARI( Float,g) = ((Float)::haxegon::Gfx_obj::getgreen(c) / (Float)(int)255);
HXLINE( 972)		HX_VARI( Float,b) = ((Float)::haxegon::Gfx_obj::getblue(c) / (Float)(int)255);
HXLINE( 973)		Float _hx_tmp = ::Math_obj::max(r,g);
HXDLIN( 973)		HX_VARI( Float,max) = ::Math_obj::max(_hx_tmp,b);
HXLINE( 974)		Float _hx_tmp1 = ::Math_obj::min(r,g);
HXDLIN( 974)		HX_VARI( Float,min) = ::Math_obj::min(_hx_tmp1,b);
HXLINE( 976)		HX_VARI( Float,h) = ((Float)(max + min) / (Float)(int)2);
HXLINE( 978)		if ((max != min)) {
HXLINE( 979)			HX_VARI( Float,d) = (max - min);
HXLINE( 980)			if ((max == r)) {
HXLINE( 981)				Float _hx_tmp2 = ((Float)(g - b) / (Float)d);
HXDLIN( 981)				Int _hx_tmp3;
HXDLIN( 981)				if ((g < b)) {
HXLINE( 981)					_hx_tmp3 = (int)6;
            				}
            				else {
HXLINE( 981)					_hx_tmp3 = (int)0;
            				}
HXDLIN( 981)				h = (_hx_tmp2 + _hx_tmp3);
            			}
            			else {
HXLINE( 982)				if ((max == g)) {
HXLINE( 983)					h = (((Float)(b - r) / (Float)d) + (int)2);
            				}
            				else {
HXLINE( 984)					if ((max == b)) {
HXLINE( 985)						h = (((Float)(r - g) / (Float)d) + (int)4);
            					}
            				}
            			}
HXLINE( 987)			hx::DivEq(h,(int)6);
            		}
HXLINE( 990)		return ::Std_obj::_hx_int((h * (int)360));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,gethue,return )

Float Gfx_obj::getsaturation(Int c){
            	HX_STACK_FRAME("haxegon.Gfx","getsaturation",0xb02a3f05,"haxegon.Gfx.getsaturation","haxegon/Gfx.hx",995,0xa6405f94)
            	HX_STACK_ARG(c,"c")
HXLINE( 996)		HX_VARI( Float,r) = ((Float)::haxegon::Gfx_obj::getred(c) / (Float)(int)255);
HXLINE( 997)		HX_VARI( Float,g) = ((Float)::haxegon::Gfx_obj::getgreen(c) / (Float)(int)255);
HXLINE( 998)		HX_VARI( Float,b) = ((Float)::haxegon::Gfx_obj::getblue(c) / (Float)(int)255);
HXLINE( 999)		Float _hx_tmp = ::Math_obj::max(r,g);
HXDLIN( 999)		HX_VARI( Float,max) = ::Math_obj::max(_hx_tmp,b);
HXLINE(1000)		Float _hx_tmp1 = ::Math_obj::min(r,g);
HXDLIN(1000)		HX_VARI( Float,min) = ::Math_obj::min(_hx_tmp1,b);
HXLINE(1002)		HX_VARI( Float,s) = ((Float)(max + min) / (Float)(int)2);
HXLINE(1003)		HX_VARI( Float,l) = s;
HXLINE(1005)		if ((max == min)) {
HXLINE(1006)			s = (int)0;
            		}
            		else {
HXLINE(1008)			HX_VARI( Float,d) = (max - min);
HXLINE(1009)			if ((l > ((Float)0.5))) {
HXLINE(1009)				s = ((Float)d / (Float)(((int)2 - max) - min));
            			}
            			else {
HXLINE(1009)				s = ((Float)d / (Float)(max + min));
            			}
            		}
HXLINE(1012)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,getsaturation,return )

Float Gfx_obj::getlightness(Int c){
            	HX_STACK_FRAME("haxegon.Gfx","getlightness",0xa473709a,"haxegon.Gfx.getlightness","haxegon/Gfx.hx",1017,0xa6405f94)
            	HX_STACK_ARG(c,"c")
HXLINE(1018)		HX_VARI( Float,r) = ((Float)::haxegon::Gfx_obj::getred(c) / (Float)(int)255);
HXLINE(1019)		HX_VARI( Float,g) = ((Float)::haxegon::Gfx_obj::getgreen(c) / (Float)(int)255);
HXLINE(1020)		HX_VARI( Float,b) = ((Float)::haxegon::Gfx_obj::getblue(c) / (Float)(int)255);
HXLINE(1021)		Float _hx_tmp = ::Math_obj::max(r,g);
HXDLIN(1021)		HX_VARI( Float,max) = ::Math_obj::max(_hx_tmp,b);
HXLINE(1022)		Float _hx_tmp1 = ::Math_obj::min(r,g);
HXDLIN(1022)		HX_VARI( Float,min) = ::Math_obj::min(_hx_tmp1,b);
HXLINE(1024)		return ((Float)(max + min) / (Float)(int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,getlightness,return )

void Gfx_obj::setzoom(Int t){
            	HX_STACK_FRAME("haxegon.Gfx","setzoom",0xd0316712,"haxegon.Gfx.setzoom","haxegon/Gfx.hx",1027,0xa6405f94)
            	HX_STACK_ARG(t,"t")
HXLINE(1028)		Int _hx_tmp = (::haxegon::Gfx_obj::screen_width * t);
HXDLIN(1028)		::haxegon::Gfx_obj::screen->set_width(_hx_tmp);
HXLINE(1029)		Int _hx_tmp1 = (::haxegon::Gfx_obj::screen_height * t);
HXDLIN(1029)		::haxegon::Gfx_obj::screen->set_height(_hx_tmp1);
HXLINE(1030)		Int _hx_tmp2 = (::haxegon::Gfx_obj::screen_width - (::haxegon::Gfx_obj::screen_width * t));
HXDLIN(1030)		::haxegon::Gfx_obj::screen->set_x(((Float)_hx_tmp2 / (Float)(int)2));
HXLINE(1031)		Int _hx_tmp3 = (::haxegon::Gfx_obj::screen_height - (::haxegon::Gfx_obj::screen_height * t));
HXDLIN(1031)		::haxegon::Gfx_obj::screen->set_y(((Float)_hx_tmp3 / (Float)(int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,setzoom,(void))

void Gfx_obj::updategraphicsmode(){
            	HX_STACK_FRAME("haxegon.Gfx","updategraphicsmode",0x078500fa,"haxegon.Gfx.updategraphicsmode","haxegon/Gfx.hx",1035,0xa6405f94)
HXLINE(1035)		Bool _hx_tmp = ::haxegon::Gfx_obj::fullscreen;
HXDLIN(1035)		if (_hx_tmp) {
HXLINE(1036)			::openfl::Lib_obj::current->stage->set_displayState((int)1);
HXLINE(1037)			::haxegon::Gfx_obj::gfxstage->scaleMode = (int)2;
HXLINE(1039)			HX_VARI( Float,xScaleFresh) = ((Float)hx::TCast< Float >::cast(::haxegon::Gfx_obj::devicexres) / (Float)hx::TCast< Float >::cast(::haxegon::Gfx_obj::screen_width));
HXLINE(1040)			HX_VARI( Float,yScaleFresh) = ((Float)hx::TCast< Float >::cast(::haxegon::Gfx_obj::deviceyres) / (Float)hx::TCast< Float >::cast(::haxegon::Gfx_obj::screen_height));
HXLINE(1041)			if ((xScaleFresh < yScaleFresh)) {
HXLINE(1042)				Float _hx_tmp1 = (::haxegon::Gfx_obj::screen_width * xScaleFresh);
HXDLIN(1042)				::haxegon::Gfx_obj::screen->set_width(_hx_tmp1);
HXLINE(1043)				Float _hx_tmp2 = (::haxegon::Gfx_obj::screen_height * xScaleFresh);
HXDLIN(1043)				::haxegon::Gfx_obj::screen->set_height(_hx_tmp2);
            			}
            			else {
HXLINE(1044)				if ((yScaleFresh < xScaleFresh)) {
HXLINE(1045)					Float _hx_tmp3 = (::haxegon::Gfx_obj::screen_width * yScaleFresh);
HXDLIN(1045)					::haxegon::Gfx_obj::screen->set_width(_hx_tmp3);
HXLINE(1046)					Float _hx_tmp4 = (::haxegon::Gfx_obj::screen_height * yScaleFresh);
HXDLIN(1046)					::haxegon::Gfx_obj::screen->set_height(_hx_tmp4);
            				}
            				else {
HXLINE(1048)					Float _hx_tmp5 = (::haxegon::Gfx_obj::screen_width * xScaleFresh);
HXDLIN(1048)					::haxegon::Gfx_obj::screen->set_width(_hx_tmp5);
HXLINE(1049)					Float _hx_tmp6 = (::haxegon::Gfx_obj::screen_height * yScaleFresh);
HXDLIN(1049)					::haxegon::Gfx_obj::screen->set_height(_hx_tmp6);
            				}
            			}
HXLINE(1051)			Float _hx_tmp7 = ((Float)hx::TCast< Float >::cast(::haxegon::Gfx_obj::devicexres) / (Float)((Float)2.0));
HXDLIN(1051)			Float _hx_tmp8 = ::haxegon::Gfx_obj::screen->get_width();
HXDLIN(1051)			::haxegon::Gfx_obj::screen->set_x((_hx_tmp7 - ((Float)_hx_tmp8 / (Float)((Float)2.0))));
HXLINE(1052)			Float _hx_tmp9 = ((Float)hx::TCast< Float >::cast(::haxegon::Gfx_obj::deviceyres) / (Float)((Float)2.0));
HXDLIN(1052)			Float _hx_tmp10 = ::haxegon::Gfx_obj::screen->get_height();
HXDLIN(1052)			::haxegon::Gfx_obj::screen->set_y((_hx_tmp9 - ((Float)_hx_tmp10 / (Float)((Float)2.0))));
            		}
            		else {
HXLINE(1055)			::openfl::Lib_obj::current->stage->set_displayState((int)2);
HXLINE(1056)			::haxegon::Gfx_obj::gfxstage->scaleMode = (int)3;
HXLINE(1057)			Int _hx_tmp11 = (::haxegon::Gfx_obj::screen_width * ::haxegon::Gfx_obj::screenscale);
HXDLIN(1057)			::haxegon::Gfx_obj::screen->set_width(_hx_tmp11);
HXLINE(1058)			Int _hx_tmp12 = (::haxegon::Gfx_obj::screen_height * ::haxegon::Gfx_obj::screenscale);
HXDLIN(1058)			::haxegon::Gfx_obj::screen->set_height(_hx_tmp12);
HXLINE(1059)			::haxegon::Gfx_obj::screen->set_x(((Float)0.0));
HXLINE(1060)			::haxegon::Gfx_obj::screen->set_y(((Float)0.0));
HXLINE(1064)			::haxegon::Gfx_obj::gfxstage->quality = (int)1;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,updategraphicsmode,(void))

void Gfx_obj::init( ::openfl::display::Stage stage){
            	HX_STACK_FRAME("haxegon.Gfx","init",0x2c76ff93,"haxegon.Gfx.init","haxegon/Gfx.hx",1071,0xa6405f94)
            	HX_STACK_ARG(stage,"stage")
HXLINE(1072)		Bool _hx_tmp = ::haxegon::Gfx_obj::initrun;
HXDLIN(1072)		if (_hx_tmp) {
HXLINE(1073)			::haxegon::Gfx_obj::gfxstage = stage;
            		}
HXLINE(1080)		::haxegon::Gfx_obj::clearscreeneachframe = true;
HXLINE(1081)		::haxegon::Gfx_obj::reset();
HXLINE(1082)		::haxegon::Gfx_obj::line_thickness = (int)1;
HXLINE(1083)		::haxegon::Gfx_obj::transparentpixel =  ::openfl::display::BitmapData_obj::__new((int)1,(int)1,true,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,init,(void))

void Gfx_obj::initgfx(Int width,Int height,Int scale){
            	HX_STACK_FRAME("haxegon.Gfx","initgfx",0x702b3fc6,"haxegon.Gfx.initgfx","haxegon/Gfx.hx",1111,0xa6405f94)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(scale,"scale")
HXLINE(1113)		::haxegon::Gfx_obj::screen_width = width;
HXDLIN(1113)		::haxegon::Gfx_obj::screen_height = height;
HXLINE(1114)		Float _hx_tmp = ((Float)::haxegon::Gfx_obj::screen_width / (Float)(int)2);
HXDLIN(1114)		::haxegon::Gfx_obj::screen_widthMid = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN(1114)		Float _hx_tmp1 = ((Float)::haxegon::Gfx_obj::screen_height / (Float)(int)2);
HXDLIN(1114)		::haxegon::Gfx_obj::screen_heightMid = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE(1116)		Float _hx_tmp2 = ::openfl::_hx_system::Capabilities_obj::get_screenResolutionX();
HXDLIN(1116)		::haxegon::Gfx_obj::devicexres = ::Std_obj::_hx_int(_hx_tmp2);
HXLINE(1117)		Float _hx_tmp3 = ::openfl::_hx_system::Capabilities_obj::get_screenResolutionY();
HXDLIN(1117)		::haxegon::Gfx_obj::deviceyres = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE(1118)		::haxegon::Gfx_obj::screenscale = scale;
HXLINE(1120)		::haxegon::Gfx_obj::trect =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXDLIN(1120)		::haxegon::Gfx_obj::tpoint =  ::openfl::geom::Point_obj::__new(null(),null());
HXLINE(1121)		::haxegon::Gfx_obj::tbuffer =  ::openfl::display::BitmapData_obj::__new((int)1,(int)1,true,null());
HXLINE(1122)		::haxegon::Gfx_obj::ct =  ::openfl::geom::ColorTransform_obj::__new((int)0,(int)0,(int)0,(int)1,(int)255,(int)255,(int)255,(int)1);
HXLINE(1123)		::haxegon::Gfx_obj::alphact =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(1125)		Bool _hx_tmp4 = hx::IsNotNull( ::haxegon::Gfx_obj::backbuffer );
HXDLIN(1125)		if (_hx_tmp4) {
HXLINE(1125)			::haxegon::Gfx_obj::backbuffer->dispose();
            		}
HXLINE(1129)		::haxegon::Gfx_obj::backbuffer =  ::openfl::display::BitmapData_obj::__new(::haxegon::Gfx_obj::screen_width,::haxegon::Gfx_obj::screen_height,false,(int)0);
HXLINE(1131)		::haxegon::Gfx_obj::drawto = ::haxegon::Gfx_obj::backbuffer;
HXLINE(1132)		::haxegon::Gfx_obj::drawingtoscreen = true;
HXLINE(1134)		::haxegon::Gfx_obj::screen =  ::openfl::display::Bitmap_obj::__new(::haxegon::Gfx_obj::backbuffer,null(),null());
HXLINE(1135)		::haxegon::Gfx_obj::screen->smoothing = false;
HXLINE(1136)		Int _hx_tmp5 = (::haxegon::Gfx_obj::screen_width * scale);
HXDLIN(1136)		::haxegon::Gfx_obj::screen->set_width(_hx_tmp5);
HXLINE(1137)		Int _hx_tmp6 = (::haxegon::Gfx_obj::screen_height * scale);
HXDLIN(1137)		::haxegon::Gfx_obj::screen->set_height(_hx_tmp6);
HXLINE(1139)		::haxegon::Gfx_obj::fullscreen = false;
HXLINE(1140)		::haxegon::Debug_obj::showTest = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,initgfx,(void))

void Gfx_obj::settrect(Float x,Float y,Float w,Float h){
            	HX_STACK_FRAME("haxegon.Gfx","settrect",0xe89552b9,"haxegon.Gfx.settrect","haxegon/Gfx.hx",1145,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(w,"w")
            	HX_STACK_ARG(h,"h")
HXLINE(1146)		::haxegon::Gfx_obj::trect->x = x;
HXLINE(1147)		::haxegon::Gfx_obj::trect->y = y;
HXLINE(1148)		::haxegon::Gfx_obj::trect->width = w;
HXLINE(1149)		::haxegon::Gfx_obj::trect->height = h;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,settrect,(void))

void Gfx_obj::settpoint(Float x,Float y){
            	HX_STACK_FRAME("haxegon.Gfx","settpoint",0x79e6911b,"haxegon.Gfx.settpoint","haxegon/Gfx.hx",1154,0xa6405f94)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1155)		::haxegon::Gfx_obj::tpoint->x = x;
HXLINE(1156)		::haxegon::Gfx_obj::tpoint->y = y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,settpoint,(void))

::Array< ::Dynamic> Gfx_obj::tiles;

 ::haxe::ds::StringMap Gfx_obj::tilesetindex;

Int Gfx_obj::currenttileset;

::Array< ::Dynamic> Gfx_obj::animations;

Int Gfx_obj::animationnum;

 ::haxe::ds::StringMap Gfx_obj::animationindex;

::Array< ::Dynamic> Gfx_obj::images;

Int Gfx_obj::imagenum;

 ::openfl::geom::ColorTransform Gfx_obj::ct;

 ::openfl::geom::ColorTransform Gfx_obj::alphact;

 ::openfl::geom::Rectangle Gfx_obj::images_rect;

 ::openfl::geom::Point Gfx_obj::tl;

 ::openfl::geom::Rectangle Gfx_obj::trect;

 ::openfl::geom::Point Gfx_obj::tpoint;

 ::openfl::display::BitmapData Gfx_obj::tbuffer;

 ::haxe::ds::StringMap Gfx_obj::imageindex;

Bool Gfx_obj::transform;

Bool Gfx_obj::coltransform;

Float Gfx_obj::imagerotate;

Float Gfx_obj::imagerotatexpivot;

Float Gfx_obj::imagerotateypivot;

Float Gfx_obj::imagexscale;

Float Gfx_obj::imageyscale;

Float Gfx_obj::imagescalexpivot;

Float Gfx_obj::imagescaleypivot;

Float Gfx_obj::imagealphamult;

Float Gfx_obj::imageredmult;

Float Gfx_obj::imagegreenmult;

Float Gfx_obj::imagebluemult;

Float Gfx_obj::imageredadd;

Float Gfx_obj::imagegreenadd;

Float Gfx_obj::imageblueadd;

Int Gfx_obj::tempframe;

Float Gfx_obj::tempxalign;

Float Gfx_obj::tempyalign;

Float Gfx_obj::temprotate;

Bool Gfx_obj::changecolours;

::String Gfx_obj::oldtileset;

Float Gfx_obj::tx;

Float Gfx_obj::ty;

Float Gfx_obj::tx2;

Float Gfx_obj::ty2;

 ::openfl::display::BitmapData Gfx_obj::transparentpixel;

Float Gfx_obj::line_thickness;

 ::openfl::display::BitmapData Gfx_obj::buffer;

 ::openfl::display::BitmapData Gfx_obj::temptile;

 ::openfl::display::Bitmap Gfx_obj::screen;

 ::openfl::display::Shape Gfx_obj::tempshape;

 ::openfl::geom::Matrix Gfx_obj::shapematrix;

Int Gfx_obj::alphamult;

 ::openfl::display::Stage Gfx_obj::gfxstage;

Bool Gfx_obj::initrun;

Bool Gfx_obj::skiprender;

Bool Gfx_obj::drawingtoscreen;


Gfx_obj::Gfx_obj()
{
}

bool Gfx_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t1") ) { outValue = t1; return true; }
		if (HX_FIELD_EQ(inName,"t2") ) { outValue = t2; return true; }
		if (HX_FIELD_EQ(inName,"t3") ) { outValue = t3; return true; }
		if (HX_FIELD_EQ(inName,"ct") ) { outValue = ct; return true; }
		if (HX_FIELD_EQ(inName,"tl") ) { outValue = tl; return true; }
		if (HX_FIELD_EQ(inName,"tx") ) { outValue = tx; return true; }
		if (HX_FIELD_EQ(inName,"ty") ) { outValue = ty; return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"TOP") ) { outValue = TOP; return true; }
		if (HX_FIELD_EQ(inName,"tx2") ) { outValue = tx2; return true; }
		if (HX_FIELD_EQ(inName,"ty2") ) { outValue = ty2; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"LEFT") ) { outValue = LEFT; return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"RIGHT") ) { outValue = RIGHT; return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tiles") ) { outValue = tiles; return true; }
		if (HX_FIELD_EQ(inName,"trect") ) { outValue = trect; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"BOTTOM") ) { outValue = BOTTOM; return true; }
		if (HX_FIELD_EQ(inName,"CENTER") ) { outValue = CENTER; return true; }
		if (HX_FIELD_EQ(inName,"drawto") ) { outValue = drawto; return true; }
		if (HX_FIELD_EQ(inName,"getred") ) { outValue = getred_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gethue") ) { outValue = gethue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"images") ) { outValue = images; return true; }
		if (HX_FIELD_EQ(inName,"tpoint") ) { outValue = tpoint; return true; }
		if (HX_FIELD_EQ(inName,"buffer") ) { outValue = buffer; return true; }
		if (HX_FIELD_EQ(inName,"screen") ) { outValue = screen; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"showfps") ) { outValue = showfps; return true; }
		if (HX_FIELD_EQ(inName,"getblue") ) { outValue = getblue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setzoom") ) { outValue = setzoom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initgfx") ) { outValue = initgfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"alphact") ) { outValue = alphact; return true; }
		if (HX_FIELD_EQ(inName,"tbuffer") ) { outValue = tbuffer; return true; }
		if (HX_FIELD_EQ(inName,"initrun") ) { outValue = initrun; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { outValue = rotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copytile") ) { outValue = copytile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_tri") ) { outValue = draw_tri_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fill_tri") ) { outValue = fill_tri_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_box") ) { outValue = draw_box_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fill_box") ) { outValue = fill_box_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getgreen") ) { outValue = getgreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"settrect") ) { outValue = settrect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagenum") ) { outValue = imagenum; return true; }
		if (HX_FIELD_EQ(inName,"temptile") ) { outValue = temptile; return true; }
		if (HX_FIELD_EQ(inName,"gfxstage") ) { outValue = gfxstage; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"renderfps") ) { outValue = renderfps; return true; }
		if (HX_FIELD_EQ(inName,"updatefps") ) { outValue = updatefps; return true; }
		if (HX_FIELD_EQ(inName,"tilewidth") ) { outValue = tilewidth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_tile") ) { outValue = draw_tile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_line") ) { outValue = draw_line_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_poly") ) { outValue = draw_poly_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fill_poly") ) { outValue = fill_poly_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_pixel") ) { outValue = get_pixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_pixel") ) { outValue = set_pixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"settpoint") ) { outValue = settpoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = transform; return true; }
		if (HX_FIELD_EQ(inName,"tempframe") ) { outValue = tempframe; return true; }
		if (HX_FIELD_EQ(inName,"tempshape") ) { outValue = tempshape; return true; }
		if (HX_FIELD_EQ(inName,"alphamult") ) { outValue = alphamult; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"devicexres") ) { outValue = devicexres; return true; }
		if (HX_FIELD_EQ(inName,"deviceyres") ) { outValue = deviceyres; return true; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { outValue = fullscreen; return true; }
		if (HX_FIELD_EQ(inName,"backbuffer") ) { outValue = backbuffer; return true; }
		if (HX_FIELD_EQ(inName,"render_fps") ) { outValue = render_fps_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update_fps") ) { outValue = update_fps_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagecolor") ) { outValue = imagecolor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"load_tiles") ) { outValue = load_tiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tileheight") ) { outValue = tileheight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"load_image") ) { outValue = load_image_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawtotile") ) { outValue = drawtotile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_image") ) { outValue = draw_image_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilealignx") ) { outValue = tilealignx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilealigny") ) { outValue = tilealigny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"animations") ) { outValue = animations; return true; }
		if (HX_FIELD_EQ(inName,"imageindex") ) { outValue = imageindex; return true; }
		if (HX_FIELD_EQ(inName,"tempxalign") ) { outValue = tempxalign; return true; }
		if (HX_FIELD_EQ(inName,"tempyalign") ) { outValue = tempyalign; return true; }
		if (HX_FIELD_EQ(inName,"temprotate") ) { outValue = temprotate; return true; }
		if (HX_FIELD_EQ(inName,"oldtileset") ) { outValue = oldtileset; return true; }
		if (HX_FIELD_EQ(inName,"skiprender") ) { outValue = skiprender; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenscale") ) { outValue = screenscale; return true; }
		if (HX_FIELD_EQ(inName,"image_alpha") ) { outValue = image_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createtiles") ) { outValue = createtiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"image_width") ) { outValue = image_width_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagealignx") ) { outValue = imagealignx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagealigny") ) { outValue = imagealigny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawHexagon") ) { outValue = drawHexagon_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillHexagon") ) { outValue = fillHexagon_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_circle") ) { outValue = draw_circle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fill_circle") ) { outValue = fill_circle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"images_rect") ) { outValue = images_rect; return true; }
		if (HX_FIELD_EQ(inName,"imagerotate") ) { outValue = imagerotate; return true; }
		if (HX_FIELD_EQ(inName,"imagexscale") ) { outValue = imagexscale; return true; }
		if (HX_FIELD_EQ(inName,"imageyscale") ) { outValue = imageyscale; return true; }
		if (HX_FIELD_EQ(inName,"imageredadd") ) { outValue = imageredadd; return true; }
		if (HX_FIELD_EQ(inName,"shapematrix") ) { outValue = shapematrix; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screen_width") ) { outValue = screen_width; return true; }
		if (HX_FIELD_EQ(inName,"create_image") ) { outValue = create_image_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize_image") ) { outValue = resize_image_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"image_height") ) { outValue = image_height_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"currentframe") ) { outValue = currentframe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clear_screen") ) { outValue = clear_screen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getlightness") ) { outValue = getlightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilesetindex") ) { outValue = tilesetindex; return true; }
		if (HX_FIELD_EQ(inName,"animationnum") ) { outValue = animationnum; return true; }
		if (HX_FIELD_EQ(inName,"coltransform") ) { outValue = coltransform; return true; }
		if (HX_FIELD_EQ(inName,"imageredmult") ) { outValue = imageredmult; return true; }
		if (HX_FIELD_EQ(inName,"imageblueadd") ) { outValue = imageblueadd; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"screen_height") ) { outValue = screen_height; return true; }
		if (HX_FIELD_EQ(inName,"resize_screen") ) { outValue = resize_screen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"renderfps_max") ) { outValue = renderfps_max; return true; }
		if (HX_FIELD_EQ(inName,"updatefps_max") ) { outValue = updatefps_max; return true; }
		if (HX_FIELD_EQ(inName,"reset_ifclear") ) { outValue = reset_ifclear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"changetileset") ) { outValue = changetileset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numberoftiles") ) { outValue = numberoftiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_to_image") ) { outValue = draw_to_image_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stopAnimation") ) { outValue = stopAnimation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawAnimation") ) { outValue = drawAnimation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getsaturation") ) { outValue = getsaturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagebluemult") ) { outValue = imagebluemult; return true; }
		if (HX_FIELD_EQ(inName,"imagegreenadd") ) { outValue = imagegreenadd; return true; }
		if (HX_FIELD_EQ(inName,"changecolours") ) { outValue = changecolours; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"draw_to_screen") ) { outValue = draw_to_screen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fill_tri_array") ) { outValue = fill_tri_array_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"draw_round_tri") ) { outValue = draw_round_tri_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fill_round_tri") ) { outValue = fill_round_tri_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"currenttileset") ) { outValue = currenttileset; return true; }
		if (HX_FIELD_EQ(inName,"animationindex") ) { outValue = animationindex; return true; }
		if (HX_FIELD_EQ(inName,"imagealphamult") ) { outValue = imagealphamult; return true; }
		if (HX_FIELD_EQ(inName,"imagegreenmult") ) { outValue = imagegreenmult; return true; }
		if (HX_FIELD_EQ(inName,"line_thickness") ) { outValue = line_thickness; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"screen_widthMid") ) { outValue = screen_widthMid; return true; }
		if (HX_FIELD_EQ(inName,"defineAnimation") ) { outValue = defineAnimation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isosceles_curve") ) { outValue = isosceles_curve_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawingtoscreen") ) { outValue = drawingtoscreen; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"screen_heightMid") ) { outValue = screen_heightMid; return true; }
		if (HX_FIELD_EQ(inName,"tilealignontilex") ) { outValue = tilealignontilex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilealignontiley") ) { outValue = tilealignontiley_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagescalexpivot") ) { outValue = imagescalexpivot; return true; }
		if (HX_FIELD_EQ(inName,"imagescaleypivot") ) { outValue = imagescaleypivot; return true; }
		if (HX_FIELD_EQ(inName,"transparentpixel") ) { outValue = transparentpixel; return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grabtilefromimage") ) { outValue = grabtilefromimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagerotatexpivot") ) { outValue = imagerotatexpivot; return true; }
		if (HX_FIELD_EQ(inName,"imagerotateypivot") ) { outValue = imagerotateypivot; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currenttilesetname") ) { outValue = currenttilesetname; return true; }
		if (HX_FIELD_EQ(inName,"imagealignonimagex") ) { outValue = imagealignonimagex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagealignonimagey") ) { outValue = imagealignonimagey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"grabtilefromscreen") ) { outValue = grabtilefromscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"grabimagefromimage") ) { outValue = grabimagefromimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updategraphicsmode") ) { outValue = updategraphicsmode_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"grabimagefromscreen") ) { outValue = grabimagefromscreen_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"clearscreeneachframe") ) { outValue = clearscreeneachframe; return true; }
	}
	return false;
}

bool Gfx_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t1") ) { t1=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"t2") ) { t2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"t3") ) { t3=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"ct") ) { ct=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
		if (HX_FIELD_EQ(inName,"tl") ) { tl=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		if (HX_FIELD_EQ(inName,"tx") ) { tx=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"ty") ) { ty=ioValue.Cast< Float >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"TOP") ) { TOP=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"tx2") ) { tx2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"ty2") ) { ty2=ioValue.Cast< Float >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"LEFT") ) { LEFT=ioValue.Cast< Int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"RIGHT") ) { RIGHT=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"tiles") ) { tiles=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"trect") ) { trect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"BOTTOM") ) { BOTTOM=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"CENTER") ) { CENTER=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"drawto") ) { drawto=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"images") ) { images=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"tpoint") ) { tpoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"screen") ) { screen=ioValue.Cast<  ::openfl::display::Bitmap >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"showfps") ) { showfps=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"alphact") ) { alphact=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
		if (HX_FIELD_EQ(inName,"tbuffer") ) { tbuffer=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"initrun") ) { initrun=ioValue.Cast< Bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"imagenum") ) { imagenum=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"temptile") ) { temptile=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"gfxstage") ) { gfxstage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"renderfps") ) { renderfps=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"updatefps") ) { updatefps=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"transform") ) { transform=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"tempframe") ) { tempframe=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"tempshape") ) { tempshape=ioValue.Cast<  ::openfl::display::Shape >(); return true; }
		if (HX_FIELD_EQ(inName,"alphamult") ) { alphamult=ioValue.Cast< Int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"devicexres") ) { devicexres=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"deviceyres") ) { deviceyres=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { fullscreen=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"backbuffer") ) { backbuffer=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"animations") ) { animations=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"imageindex") ) { imageindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"tempxalign") ) { tempxalign=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"tempyalign") ) { tempyalign=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"temprotate") ) { temprotate=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"oldtileset") ) { oldtileset=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"skiprender") ) { skiprender=ioValue.Cast< Bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenscale") ) { screenscale=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"images_rect") ) { images_rect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"imagerotate") ) { imagerotate=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagexscale") ) { imagexscale=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imageyscale") ) { imageyscale=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imageredadd") ) { imageredadd=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"shapematrix") ) { shapematrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screen_width") ) { screen_width=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"tilesetindex") ) { tilesetindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"animationnum") ) { animationnum=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"coltransform") ) { coltransform=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"imageredmult") ) { imageredmult=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imageblueadd") ) { imageblueadd=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"screen_height") ) { screen_height=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"renderfps_max") ) { renderfps_max=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"updatefps_max") ) { updatefps_max=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"imagebluemult") ) { imagebluemult=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagegreenadd") ) { imagegreenadd=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"changecolours") ) { changecolours=ioValue.Cast< Bool >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currenttileset") ) { currenttileset=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"animationindex") ) { animationindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"imagealphamult") ) { imagealphamult=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagegreenmult") ) { imagegreenmult=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"line_thickness") ) { line_thickness=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"screen_widthMid") ) { screen_widthMid=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"drawingtoscreen") ) { drawingtoscreen=ioValue.Cast< Bool >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"screen_heightMid") ) { screen_heightMid=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"imagescalexpivot") ) { imagescalexpivot=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagescaleypivot") ) { imagescaleypivot=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"transparentpixel") ) { transparentpixel=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"imagerotatexpivot") ) { imagerotatexpivot=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagerotateypivot") ) { imagerotateypivot=ioValue.Cast< Float >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currenttilesetname") ) { currenttilesetname=ioValue.Cast< ::String >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"clearscreeneachframe") ) { clearscreeneachframe=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Gfx_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Gfx_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Gfx_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsInt,(void *) &Gfx_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsInt,(void *) &Gfx_obj::TOP,HX_HCSTRING("TOP","\x75","\x02","\x40","\x00")},
	{hx::fsInt,(void *) &Gfx_obj::BOTTOM,HX_HCSTRING("BOTTOM","\xeb","\x92","\xfb","\x17")},
	{hx::fsInt,(void *) &Gfx_obj::CENTER,HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8")},
	{hx::fsInt,(void *) &Gfx_obj::screen_width,HX_HCSTRING("screen_width","\xb3","\x91","\xd3","\x6e")},
	{hx::fsInt,(void *) &Gfx_obj::screen_height,HX_HCSTRING("screen_height","\x9a","\x63","\x9b","\x40")},
	{hx::fsInt,(void *) &Gfx_obj::screen_widthMid,HX_HCSTRING("screen_widthMid","\x95","\x09","\x89","\xa5")},
	{hx::fsInt,(void *) &Gfx_obj::screen_heightMid,HX_HCSTRING("screen_heightMid","\x0e","\x22","\x6a","\xa8")},
	{hx::fsBool,(void *) &Gfx_obj::clearscreeneachframe,HX_HCSTRING("clearscreeneachframe","\xb3","\xe2","\x89","\x91")},
	{hx::fsInt,(void *) &Gfx_obj::screenscale,HX_HCSTRING("screenscale","\x9e","\xab","\x26","\x9d")},
	{hx::fsInt,(void *) &Gfx_obj::devicexres,HX_HCSTRING("devicexres","\x7e","\x53","\x59","\xce")},
	{hx::fsInt,(void *) &Gfx_obj::deviceyres,HX_HCSTRING("deviceyres","\x1d","\x8a","\x02","\xcf")},
	{hx::fsBool,(void *) &Gfx_obj::fullscreen,HX_HCSTRING("fullscreen","\x3b","\x3a","\xb4","\xf9")},
	{hx::fsString,(void *) &Gfx_obj::currenttilesetname,HX_HCSTRING("currenttilesetname","\xe6","\xe9","\x26","\x89")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Gfx_obj::backbuffer,HX_HCSTRING("backbuffer","\x67","\x2e","\x8a","\xda")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Gfx_obj::drawto,HX_HCSTRING("drawto","\x7f","\x9a","\xd6","\xdf")},
	{hx::fsBool,(void *) &Gfx_obj::showfps,HX_HCSTRING("showfps","\x0c","\x6f","\xb2","\x7b")},
	{hx::fsInt,(void *) &Gfx_obj::renderfps,HX_HCSTRING("renderfps","\x53","\x96","\x71","\xcd")},
	{hx::fsInt,(void *) &Gfx_obj::renderfps_max,HX_HCSTRING("renderfps_max","\x78","\x0b","\x55","\xfe")},
	{hx::fsInt,(void *) &Gfx_obj::updatefps,HX_HCSTRING("updatefps","\x80","\xed","\xf2","\x82")},
	{hx::fsInt,(void *) &Gfx_obj::updatefps_max,HX_HCSTRING("updatefps_max","\x25","\xfd","\xd5","\xcd")},
	{hx::fsFloat,(void *) &Gfx_obj::t1,HX_HCSTRING("t1","\x3d","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::t2,HX_HCSTRING("t2","\x3e","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::t3,HX_HCSTRING("t3","\x3f","\x65","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Gfx_obj::tiles,HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Gfx_obj::tilesetindex,HX_HCSTRING("tilesetindex","\x5e","\x3d","\xbc","\x37")},
	{hx::fsInt,(void *) &Gfx_obj::currenttileset,HX_HCSTRING("currenttileset","\x1b","\xce","\xd6","\x85")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Gfx_obj::animations,HX_HCSTRING("animations","\xef","\x34","\x1c","\x83")},
	{hx::fsInt,(void *) &Gfx_obj::animationnum,HX_HCSTRING("animationnum","\xc2","\x29","\x43","\xaa")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Gfx_obj::animationindex,HX_HCSTRING("animationindex","\x8e","\xbd","\x0a","\x3b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Gfx_obj::images,HX_HCSTRING("images","\xb8","\x50","\x92","\xfe")},
	{hx::fsInt,(void *) &Gfx_obj::imagenum,HX_HCSTRING("imagenum","\xcb","\x89","\x4e","\x84")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(void *) &Gfx_obj::ct,HX_HCSTRING("ct","\xb1","\x56","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(void *) &Gfx_obj::alphact,HX_HCSTRING("alphact","\x8f","\x11","\x16","\xb2")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Gfx_obj::images_rect,HX_HCSTRING("images_rect","\x4b","\x7d","\x6e","\x0d")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &Gfx_obj::tl,HX_HCSTRING("tl","\x78","\x65","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Gfx_obj::trect,HX_HCSTRING("trect","\x98","\x97","\x22","\x16")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &Gfx_obj::tpoint,HX_HCSTRING("tpoint","\x5c","\x8f","\xf5","\x27")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Gfx_obj::tbuffer,HX_HCSTRING("tbuffer","\x74","\x8c","\x4e","\xa8")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Gfx_obj::imageindex,HX_HCSTRING("imageindex","\xd7","\xf1","\xb4","\x36")},
	{hx::fsBool,(void *) &Gfx_obj::transform,HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45")},
	{hx::fsBool,(void *) &Gfx_obj::coltransform,HX_HCSTRING("coltransform","\x2c","\xa5","\x75","\xb2")},
	{hx::fsFloat,(void *) &Gfx_obj::imagerotate,HX_HCSTRING("imagerotate","\xf6","\xdb","\xcb","\xde")},
	{hx::fsFloat,(void *) &Gfx_obj::imagerotatexpivot,HX_HCSTRING("imagerotatexpivot","\xc0","\xcf","\xb7","\x18")},
	{hx::fsFloat,(void *) &Gfx_obj::imagerotateypivot,HX_HCSTRING("imagerotateypivot","\x1f","\x2c","\x13","\x7f")},
	{hx::fsFloat,(void *) &Gfx_obj::imagexscale,HX_HCSTRING("imagexscale","\xad","\xb0","\x4d","\x87")},
	{hx::fsFloat,(void *) &Gfx_obj::imageyscale,HX_HCSTRING("imageyscale","\x0c","\x0d","\xa9","\xed")},
	{hx::fsFloat,(void *) &Gfx_obj::imagescalexpivot,HX_HCSTRING("imagescalexpivot","\xd9","\x21","\x6e","\x5b")},
	{hx::fsFloat,(void *) &Gfx_obj::imagescaleypivot,HX_HCSTRING("imagescaleypivot","\x38","\x7e","\xc9","\xc1")},
	{hx::fsFloat,(void *) &Gfx_obj::imagealphamult,HX_HCSTRING("imagealphamult","\x93","\xb3","\xf9","\x23")},
	{hx::fsFloat,(void *) &Gfx_obj::imageredmult,HX_HCSTRING("imageredmult","\xc6","\x0f","\x89","\xe5")},
	{hx::fsFloat,(void *) &Gfx_obj::imagegreenmult,HX_HCSTRING("imagegreenmult","\x78","\x31","\x88","\xec")},
	{hx::fsFloat,(void *) &Gfx_obj::imagebluemult,HX_HCSTRING("imagebluemult","\xe5","\x71","\xed","\xad")},
	{hx::fsFloat,(void *) &Gfx_obj::imageredadd,HX_HCSTRING("imageredadd","\x0b","\x97","\x36","\x12")},
	{hx::fsFloat,(void *) &Gfx_obj::imagegreenadd,HX_HCSTRING("imagegreenadd","\x99","\xb1","\x4e","\x60")},
	{hx::fsFloat,(void *) &Gfx_obj::imageblueadd,HX_HCSTRING("imageblueadd","\xcc","\x1d","\x28","\xdd")},
	{hx::fsInt,(void *) &Gfx_obj::tempframe,HX_HCSTRING("tempframe","\x99","\x0c","\x6a","\xa9")},
	{hx::fsFloat,(void *) &Gfx_obj::tempxalign,HX_HCSTRING("tempxalign","\x61","\xed","\x3f","\x03")},
	{hx::fsFloat,(void *) &Gfx_obj::tempyalign,HX_HCSTRING("tempyalign","\xc0","\x49","\x9b","\x69")},
	{hx::fsFloat,(void *) &Gfx_obj::temprotate,HX_HCSTRING("temprotate","\x6f","\x90","\xfb","\xb1")},
	{hx::fsBool,(void *) &Gfx_obj::changecolours,HX_HCSTRING("changecolours","\x37","\xf7","\xeb","\x82")},
	{hx::fsString,(void *) &Gfx_obj::oldtileset,HX_HCSTRING("oldtileset","\x6d","\x5b","\x6a","\xfb")},
	{hx::fsFloat,(void *) &Gfx_obj::tx,HX_HCSTRING("tx","\x84","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::ty,HX_HCSTRING("ty","\x85","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::tx2,HX_HCSTRING("tx2","\x2e","\x6e","\x58","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::ty2,HX_HCSTRING("ty2","\x0d","\x6f","\x58","\x00")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Gfx_obj::transparentpixel,HX_HCSTRING("transparentpixel","\xf4","\x51","\x71","\x9f")},
	{hx::fsFloat,(void *) &Gfx_obj::line_thickness,HX_HCSTRING("line_thickness","\x29","\x7e","\x1d","\x8b")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Gfx_obj::buffer,HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Gfx_obj::temptile,HX_HCSTRING("temptile","\x42","\xa8","\x97","\xb1")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(void *) &Gfx_obj::screen,HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(void *) &Gfx_obj::tempshape,HX_HCSTRING("tempshape","\x8d","\x77","\x03","\x1f")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Gfx_obj::shapematrix,HX_HCSTRING("shapematrix","\x22","\xa8","\x75","\x19")},
	{hx::fsInt,(void *) &Gfx_obj::alphamult,HX_HCSTRING("alphamult","\x4e","\x16","\x86","\xf7")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &Gfx_obj::gfxstage,HX_HCSTRING("gfxstage","\xa5","\xf2","\xb7","\x13")},
	{hx::fsBool,(void *) &Gfx_obj::initrun,HX_HCSTRING("initrun","\x3b","\xf6","\xa5","\xcb")},
	{hx::fsBool,(void *) &Gfx_obj::skiprender,HX_HCSTRING("skiprender","\x15","\xeb","\x98","\x38")},
	{hx::fsBool,(void *) &Gfx_obj::drawingtoscreen,HX_HCSTRING("drawingtoscreen","\x85","\x38","\xc7","\x75")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Gfx_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Gfx_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Gfx_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Gfx_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Gfx_obj::TOP,"TOP");
	HX_MARK_MEMBER_NAME(Gfx_obj::BOTTOM,"BOTTOM");
	HX_MARK_MEMBER_NAME(Gfx_obj::CENTER,"CENTER");
	HX_MARK_MEMBER_NAME(Gfx_obj::screen_width,"screen_width");
	HX_MARK_MEMBER_NAME(Gfx_obj::screen_height,"screen_height");
	HX_MARK_MEMBER_NAME(Gfx_obj::screen_widthMid,"screen_widthMid");
	HX_MARK_MEMBER_NAME(Gfx_obj::screen_heightMid,"screen_heightMid");
	HX_MARK_MEMBER_NAME(Gfx_obj::clearscreeneachframe,"clearscreeneachframe");
	HX_MARK_MEMBER_NAME(Gfx_obj::screenscale,"screenscale");
	HX_MARK_MEMBER_NAME(Gfx_obj::devicexres,"devicexres");
	HX_MARK_MEMBER_NAME(Gfx_obj::deviceyres,"deviceyres");
	HX_MARK_MEMBER_NAME(Gfx_obj::fullscreen,"fullscreen");
	HX_MARK_MEMBER_NAME(Gfx_obj::currenttilesetname,"currenttilesetname");
	HX_MARK_MEMBER_NAME(Gfx_obj::backbuffer,"backbuffer");
	HX_MARK_MEMBER_NAME(Gfx_obj::drawto,"drawto");
	HX_MARK_MEMBER_NAME(Gfx_obj::showfps,"showfps");
	HX_MARK_MEMBER_NAME(Gfx_obj::renderfps,"renderfps");
	HX_MARK_MEMBER_NAME(Gfx_obj::renderfps_max,"renderfps_max");
	HX_MARK_MEMBER_NAME(Gfx_obj::updatefps,"updatefps");
	HX_MARK_MEMBER_NAME(Gfx_obj::updatefps_max,"updatefps_max");
	HX_MARK_MEMBER_NAME(Gfx_obj::t1,"t1");
	HX_MARK_MEMBER_NAME(Gfx_obj::t2,"t2");
	HX_MARK_MEMBER_NAME(Gfx_obj::t3,"t3");
	HX_MARK_MEMBER_NAME(Gfx_obj::tiles,"tiles");
	HX_MARK_MEMBER_NAME(Gfx_obj::tilesetindex,"tilesetindex");
	HX_MARK_MEMBER_NAME(Gfx_obj::currenttileset,"currenttileset");
	HX_MARK_MEMBER_NAME(Gfx_obj::animations,"animations");
	HX_MARK_MEMBER_NAME(Gfx_obj::animationnum,"animationnum");
	HX_MARK_MEMBER_NAME(Gfx_obj::animationindex,"animationindex");
	HX_MARK_MEMBER_NAME(Gfx_obj::images,"images");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagenum,"imagenum");
	HX_MARK_MEMBER_NAME(Gfx_obj::ct,"ct");
	HX_MARK_MEMBER_NAME(Gfx_obj::alphact,"alphact");
	HX_MARK_MEMBER_NAME(Gfx_obj::images_rect,"images_rect");
	HX_MARK_MEMBER_NAME(Gfx_obj::tl,"tl");
	HX_MARK_MEMBER_NAME(Gfx_obj::trect,"trect");
	HX_MARK_MEMBER_NAME(Gfx_obj::tpoint,"tpoint");
	HX_MARK_MEMBER_NAME(Gfx_obj::tbuffer,"tbuffer");
	HX_MARK_MEMBER_NAME(Gfx_obj::imageindex,"imageindex");
	HX_MARK_MEMBER_NAME(Gfx_obj::transform,"transform");
	HX_MARK_MEMBER_NAME(Gfx_obj::coltransform,"coltransform");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagerotate,"imagerotate");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagerotatexpivot,"imagerotatexpivot");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagerotateypivot,"imagerotateypivot");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagexscale,"imagexscale");
	HX_MARK_MEMBER_NAME(Gfx_obj::imageyscale,"imageyscale");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagescalexpivot,"imagescalexpivot");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagescaleypivot,"imagescaleypivot");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagealphamult,"imagealphamult");
	HX_MARK_MEMBER_NAME(Gfx_obj::imageredmult,"imageredmult");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagegreenmult,"imagegreenmult");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagebluemult,"imagebluemult");
	HX_MARK_MEMBER_NAME(Gfx_obj::imageredadd,"imageredadd");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagegreenadd,"imagegreenadd");
	HX_MARK_MEMBER_NAME(Gfx_obj::imageblueadd,"imageblueadd");
	HX_MARK_MEMBER_NAME(Gfx_obj::tempframe,"tempframe");
	HX_MARK_MEMBER_NAME(Gfx_obj::tempxalign,"tempxalign");
	HX_MARK_MEMBER_NAME(Gfx_obj::tempyalign,"tempyalign");
	HX_MARK_MEMBER_NAME(Gfx_obj::temprotate,"temprotate");
	HX_MARK_MEMBER_NAME(Gfx_obj::changecolours,"changecolours");
	HX_MARK_MEMBER_NAME(Gfx_obj::oldtileset,"oldtileset");
	HX_MARK_MEMBER_NAME(Gfx_obj::tx,"tx");
	HX_MARK_MEMBER_NAME(Gfx_obj::ty,"ty");
	HX_MARK_MEMBER_NAME(Gfx_obj::tx2,"tx2");
	HX_MARK_MEMBER_NAME(Gfx_obj::ty2,"ty2");
	HX_MARK_MEMBER_NAME(Gfx_obj::transparentpixel,"transparentpixel");
	HX_MARK_MEMBER_NAME(Gfx_obj::line_thickness,"line_thickness");
	HX_MARK_MEMBER_NAME(Gfx_obj::buffer,"buffer");
	HX_MARK_MEMBER_NAME(Gfx_obj::temptile,"temptile");
	HX_MARK_MEMBER_NAME(Gfx_obj::screen,"screen");
	HX_MARK_MEMBER_NAME(Gfx_obj::tempshape,"tempshape");
	HX_MARK_MEMBER_NAME(Gfx_obj::shapematrix,"shapematrix");
	HX_MARK_MEMBER_NAME(Gfx_obj::alphamult,"alphamult");
	HX_MARK_MEMBER_NAME(Gfx_obj::gfxstage,"gfxstage");
	HX_MARK_MEMBER_NAME(Gfx_obj::initrun,"initrun");
	HX_MARK_MEMBER_NAME(Gfx_obj::skiprender,"skiprender");
	HX_MARK_MEMBER_NAME(Gfx_obj::drawingtoscreen,"drawingtoscreen");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Gfx_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Gfx_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Gfx_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Gfx_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Gfx_obj::TOP,"TOP");
	HX_VISIT_MEMBER_NAME(Gfx_obj::BOTTOM,"BOTTOM");
	HX_VISIT_MEMBER_NAME(Gfx_obj::CENTER,"CENTER");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screen_width,"screen_width");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screen_height,"screen_height");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screen_widthMid,"screen_widthMid");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screen_heightMid,"screen_heightMid");
	HX_VISIT_MEMBER_NAME(Gfx_obj::clearscreeneachframe,"clearscreeneachframe");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screenscale,"screenscale");
	HX_VISIT_MEMBER_NAME(Gfx_obj::devicexres,"devicexres");
	HX_VISIT_MEMBER_NAME(Gfx_obj::deviceyres,"deviceyres");
	HX_VISIT_MEMBER_NAME(Gfx_obj::fullscreen,"fullscreen");
	HX_VISIT_MEMBER_NAME(Gfx_obj::currenttilesetname,"currenttilesetname");
	HX_VISIT_MEMBER_NAME(Gfx_obj::backbuffer,"backbuffer");
	HX_VISIT_MEMBER_NAME(Gfx_obj::drawto,"drawto");
	HX_VISIT_MEMBER_NAME(Gfx_obj::showfps,"showfps");
	HX_VISIT_MEMBER_NAME(Gfx_obj::renderfps,"renderfps");
	HX_VISIT_MEMBER_NAME(Gfx_obj::renderfps_max,"renderfps_max");
	HX_VISIT_MEMBER_NAME(Gfx_obj::updatefps,"updatefps");
	HX_VISIT_MEMBER_NAME(Gfx_obj::updatefps_max,"updatefps_max");
	HX_VISIT_MEMBER_NAME(Gfx_obj::t1,"t1");
	HX_VISIT_MEMBER_NAME(Gfx_obj::t2,"t2");
	HX_VISIT_MEMBER_NAME(Gfx_obj::t3,"t3");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tiles,"tiles");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tilesetindex,"tilesetindex");
	HX_VISIT_MEMBER_NAME(Gfx_obj::currenttileset,"currenttileset");
	HX_VISIT_MEMBER_NAME(Gfx_obj::animations,"animations");
	HX_VISIT_MEMBER_NAME(Gfx_obj::animationnum,"animationnum");
	HX_VISIT_MEMBER_NAME(Gfx_obj::animationindex,"animationindex");
	HX_VISIT_MEMBER_NAME(Gfx_obj::images,"images");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagenum,"imagenum");
	HX_VISIT_MEMBER_NAME(Gfx_obj::ct,"ct");
	HX_VISIT_MEMBER_NAME(Gfx_obj::alphact,"alphact");
	HX_VISIT_MEMBER_NAME(Gfx_obj::images_rect,"images_rect");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tl,"tl");
	HX_VISIT_MEMBER_NAME(Gfx_obj::trect,"trect");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tpoint,"tpoint");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tbuffer,"tbuffer");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imageindex,"imageindex");
	HX_VISIT_MEMBER_NAME(Gfx_obj::transform,"transform");
	HX_VISIT_MEMBER_NAME(Gfx_obj::coltransform,"coltransform");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagerotate,"imagerotate");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagerotatexpivot,"imagerotatexpivot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagerotateypivot,"imagerotateypivot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagexscale,"imagexscale");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imageyscale,"imageyscale");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagescalexpivot,"imagescalexpivot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagescaleypivot,"imagescaleypivot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagealphamult,"imagealphamult");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imageredmult,"imageredmult");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagegreenmult,"imagegreenmult");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagebluemult,"imagebluemult");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imageredadd,"imageredadd");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagegreenadd,"imagegreenadd");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imageblueadd,"imageblueadd");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tempframe,"tempframe");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tempxalign,"tempxalign");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tempyalign,"tempyalign");
	HX_VISIT_MEMBER_NAME(Gfx_obj::temprotate,"temprotate");
	HX_VISIT_MEMBER_NAME(Gfx_obj::changecolours,"changecolours");
	HX_VISIT_MEMBER_NAME(Gfx_obj::oldtileset,"oldtileset");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tx,"tx");
	HX_VISIT_MEMBER_NAME(Gfx_obj::ty,"ty");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tx2,"tx2");
	HX_VISIT_MEMBER_NAME(Gfx_obj::ty2,"ty2");
	HX_VISIT_MEMBER_NAME(Gfx_obj::transparentpixel,"transparentpixel");
	HX_VISIT_MEMBER_NAME(Gfx_obj::line_thickness,"line_thickness");
	HX_VISIT_MEMBER_NAME(Gfx_obj::buffer,"buffer");
	HX_VISIT_MEMBER_NAME(Gfx_obj::temptile,"temptile");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screen,"screen");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tempshape,"tempshape");
	HX_VISIT_MEMBER_NAME(Gfx_obj::shapematrix,"shapematrix");
	HX_VISIT_MEMBER_NAME(Gfx_obj::alphamult,"alphamult");
	HX_VISIT_MEMBER_NAME(Gfx_obj::gfxstage,"gfxstage");
	HX_VISIT_MEMBER_NAME(Gfx_obj::initrun,"initrun");
	HX_VISIT_MEMBER_NAME(Gfx_obj::skiprender,"skiprender");
	HX_VISIT_MEMBER_NAME(Gfx_obj::drawingtoscreen,"drawingtoscreen");
};

#endif

hx::Class Gfx_obj::__mClass;

static ::String Gfx_obj_sStaticFields[] = {
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("TOP","\x75","\x02","\x40","\x00"),
	HX_HCSTRING("BOTTOM","\xeb","\x92","\xfb","\x17"),
	HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8"),
	HX_HCSTRING("screen_width","\xb3","\x91","\xd3","\x6e"),
	HX_HCSTRING("screen_height","\x9a","\x63","\x9b","\x40"),
	HX_HCSTRING("screen_widthMid","\x95","\x09","\x89","\xa5"),
	HX_HCSTRING("screen_heightMid","\x0e","\x22","\x6a","\xa8"),
	HX_HCSTRING("clearscreeneachframe","\xb3","\xe2","\x89","\x91"),
	HX_HCSTRING("screenscale","\x9e","\xab","\x26","\x9d"),
	HX_HCSTRING("devicexres","\x7e","\x53","\x59","\xce"),
	HX_HCSTRING("deviceyres","\x1d","\x8a","\x02","\xcf"),
	HX_HCSTRING("fullscreen","\x3b","\x3a","\xb4","\xf9"),
	HX_HCSTRING("currenttilesetname","\xe6","\xe9","\x26","\x89"),
	HX_HCSTRING("backbuffer","\x67","\x2e","\x8a","\xda"),
	HX_HCSTRING("drawto","\x7f","\x9a","\xd6","\xdf"),
	HX_HCSTRING("resize_screen","\x97","\xd9","\x7a","\x90"),
	HX_HCSTRING("showfps","\x0c","\x6f","\xb2","\x7b"),
	HX_HCSTRING("renderfps","\x53","\x96","\x71","\xcd"),
	HX_HCSTRING("renderfps_max","\x78","\x0b","\x55","\xfe"),
	HX_HCSTRING("updatefps","\x80","\xed","\xf2","\x82"),
	HX_HCSTRING("updatefps_max","\x25","\xfd","\xd5","\xcd"),
	HX_HCSTRING("render_fps","\x40","\xdb","\x49","\xf1"),
	HX_HCSTRING("update_fps","\x73","\xcb","\xf4","\x0c"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("reset_ifclear","\xe0","\x7e","\xb5","\xaf"),
	HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("image_alpha","\x3a","\x84","\x29","\x31"),
	HX_HCSTRING("imagecolor","\x28","\xc8","\xfc","\xc2"),
	HX_HCSTRING("changetileset","\xc4","\xfd","\x16","\xd9"),
	HX_HCSTRING("numberoftiles","\x65","\x1d","\x88","\x12"),
	HX_HCSTRING("load_tiles","\x6c","\xff","\xb2","\x8c"),
	HX_HCSTRING("createtiles","\x09","\xc5","\x82","\xa6"),
	HX_HCSTRING("tilewidth","\x18","\xa4","\x90","\xc2"),
	HX_HCSTRING("tileheight","\x95","\x69","\x4e","\x32"),
	HX_HCSTRING("load_image","\x42","\x21","\xe7","\x39"),
	HX_HCSTRING("create_image","\x98","\x32","\x11","\xa7"),
	HX_HCSTRING("resize_image","\x90","\xaf","\xc9","\x68"),
	HX_HCSTRING("image_width","\xe2","\x92","\xf5","\xd9"),
	HX_HCSTRING("image_height","\x8b","\x6b","\x3a","\x93"),
	HX_HCSTRING("draw_to_screen","\xb5","\xb1","\x12","\x60"),
	HX_HCSTRING("draw_to_image","\x32","\xc5","\xe4","\xb0"),
	HX_HCSTRING("drawtotile","\x2d","\x11","\x0c","\xa5"),
	HX_HCSTRING("t1","\x3d","\x65","\x00","\x00"),
	HX_HCSTRING("t2","\x3e","\x65","\x00","\x00"),
	HX_HCSTRING("t3","\x3f","\x65","\x00","\x00"),
	HX_HCSTRING("imagealignx","\xae","\x2b","\x46","\x51"),
	HX_HCSTRING("imagealigny","\xaf","\x2b","\x46","\x51"),
	HX_HCSTRING("imagealignonimagex","\xa6","\x1a","\xf4","\x36"),
	HX_HCSTRING("imagealignonimagey","\xa7","\x1a","\xf4","\x36"),
	HX_HCSTRING("draw_image","\xa0","\x6d","\x7f","\xc6"),
	HX_HCSTRING("grabtilefromscreen","\xd0","\xf9","\x67","\xf5"),
	HX_HCSTRING("grabtilefromimage","\x77","\x39","\xf5","\x09"),
	HX_HCSTRING("grabimagefromscreen","\x25","\xa1","\x58","\x26"),
	HX_HCSTRING("grabimagefromimage","\xc2","\x93","\x93","\x43"),
	HX_HCSTRING("copytile","\x63","\x05","\xc2","\xe6"),
	HX_HCSTRING("draw_tile","\x89","\xac","\xeb","\x34"),
	HX_HCSTRING("currentframe","\x54","\xed","\x61","\xba"),
	HX_HCSTRING("stopAnimation","\xa2","\xce","\x42","\x0e"),
	HX_HCSTRING("defineAnimation","\x49","\x73","\xdd","\xec"),
	HX_HCSTRING("drawAnimation","\x60","\x02","\x5c","\xaa"),
	HX_HCSTRING("tilealignx","\xc1","\xf7","\x9c","\x6d"),
	HX_HCSTRING("tilealigny","\xc2","\xf7","\x9c","\x6d"),
	HX_HCSTRING("tilealignontilex","\x14","\x40","\x14","\xaf"),
	HX_HCSTRING("tilealignontiley","\x15","\x40","\x14","\xaf"),
	HX_HCSTRING("draw_line","\x4f","\xf9","\xa1","\x2f"),
	HX_HCSTRING("drawHexagon","\x3c","\xcc","\x8d","\xe8"),
	HX_HCSTRING("fillHexagon","\x9d","\x07","\xe1","\xc2"),
	HX_HCSTRING("draw_circle","\x2b","\xa0","\x7b","\x40"),
	HX_HCSTRING("fill_circle","\x8c","\xdb","\xce","\x1a"),
	HX_HCSTRING("draw_tri","\x30","\x2c","\xb4","\x68"),
	HX_HCSTRING("fill_tri_array","\x49","\x7c","\xdb","\xe0"),
	HX_HCSTRING("fill_tri","\x2f","\x7a","\x5c","\x75"),
	HX_HCSTRING("draw_box","\x10","\x81","\xa6","\x68"),
	HX_HCSTRING("fill_box","\x0f","\xcf","\x4e","\x75"),
	HX_HCSTRING("draw_poly","\xa7","\x5f","\x4b","\x32"),
	HX_HCSTRING("fill_poly","\xc8","\x50","\xe7","\x38"),
	HX_HCSTRING("isosceles_curve","\x9a","\xa7","\x0d","\x91"),
	HX_HCSTRING("draw_round_tri","\x3f","\x3a","\x22","\xd4"),
	HX_HCSTRING("fill_round_tri","\x7e","\x91","\x63","\x2f"),
	HX_HCSTRING("clear_screen","\x1e","\xd7","\x01","\xc4"),
	HX_HCSTRING("get_pixel","\xdd","\x22","\x4d","\x06"),
	HX_HCSTRING("set_pixel","\xe9","\x0e","\x9e","\xe9"),
	HX_HCSTRING("getred","\x7b","\x5a","\x3e","\xa3"),
	HX_HCSTRING("getgreen","\x6d","\xae","\x96","\x66"),
	HX_HCSTRING("getblue","\x30","\xc6","\xc2","\x28"),
	HX_HCSTRING("gethue","\xe2","\xd1","\x36","\xa3"),
	HX_HCSTRING("getsaturation","\xe8","\x2b","\x63","\x5c"),
	HX_HCSTRING("getlightness","\x17","\xf1","\xca","\x44"),
	HX_HCSTRING("setzoom","\xb5","\xb7","\xa3","\x2b"),
	HX_HCSTRING("updategraphicsmode","\x37","\x7d","\x77","\x0c"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("initgfx","\x69","\x90","\x9d","\xcb"),
	HX_HCSTRING("settrect","\xb6","\x90","\x29","\x91"),
	HX_HCSTRING("settpoint","\x7e","\x90","\x08","\x53"),
	HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10"),
	HX_HCSTRING("tilesetindex","\x5e","\x3d","\xbc","\x37"),
	HX_HCSTRING("currenttileset","\x1b","\xce","\xd6","\x85"),
	HX_HCSTRING("animations","\xef","\x34","\x1c","\x83"),
	HX_HCSTRING("animationnum","\xc2","\x29","\x43","\xaa"),
	HX_HCSTRING("animationindex","\x8e","\xbd","\x0a","\x3b"),
	HX_HCSTRING("images","\xb8","\x50","\x92","\xfe"),
	HX_HCSTRING("imagenum","\xcb","\x89","\x4e","\x84"),
	HX_HCSTRING("ct","\xb1","\x56","\x00","\x00"),
	HX_HCSTRING("alphact","\x8f","\x11","\x16","\xb2"),
	HX_HCSTRING("images_rect","\x4b","\x7d","\x6e","\x0d"),
	HX_HCSTRING("tl","\x78","\x65","\x00","\x00"),
	HX_HCSTRING("trect","\x98","\x97","\x22","\x16"),
	HX_HCSTRING("tpoint","\x5c","\x8f","\xf5","\x27"),
	HX_HCSTRING("tbuffer","\x74","\x8c","\x4e","\xa8"),
	HX_HCSTRING("imageindex","\xd7","\xf1","\xb4","\x36"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("coltransform","\x2c","\xa5","\x75","\xb2"),
	HX_HCSTRING("imagerotate","\xf6","\xdb","\xcb","\xde"),
	HX_HCSTRING("imagerotatexpivot","\xc0","\xcf","\xb7","\x18"),
	HX_HCSTRING("imagerotateypivot","\x1f","\x2c","\x13","\x7f"),
	HX_HCSTRING("imagexscale","\xad","\xb0","\x4d","\x87"),
	HX_HCSTRING("imageyscale","\x0c","\x0d","\xa9","\xed"),
	HX_HCSTRING("imagescalexpivot","\xd9","\x21","\x6e","\x5b"),
	HX_HCSTRING("imagescaleypivot","\x38","\x7e","\xc9","\xc1"),
	HX_HCSTRING("imagealphamult","\x93","\xb3","\xf9","\x23"),
	HX_HCSTRING("imageredmult","\xc6","\x0f","\x89","\xe5"),
	HX_HCSTRING("imagegreenmult","\x78","\x31","\x88","\xec"),
	HX_HCSTRING("imagebluemult","\xe5","\x71","\xed","\xad"),
	HX_HCSTRING("imageredadd","\x0b","\x97","\x36","\x12"),
	HX_HCSTRING("imagegreenadd","\x99","\xb1","\x4e","\x60"),
	HX_HCSTRING("imageblueadd","\xcc","\x1d","\x28","\xdd"),
	HX_HCSTRING("tempframe","\x99","\x0c","\x6a","\xa9"),
	HX_HCSTRING("tempxalign","\x61","\xed","\x3f","\x03"),
	HX_HCSTRING("tempyalign","\xc0","\x49","\x9b","\x69"),
	HX_HCSTRING("temprotate","\x6f","\x90","\xfb","\xb1"),
	HX_HCSTRING("changecolours","\x37","\xf7","\xeb","\x82"),
	HX_HCSTRING("oldtileset","\x6d","\x5b","\x6a","\xfb"),
	HX_HCSTRING("tx","\x84","\x65","\x00","\x00"),
	HX_HCSTRING("ty","\x85","\x65","\x00","\x00"),
	HX_HCSTRING("tx2","\x2e","\x6e","\x58","\x00"),
	HX_HCSTRING("ty2","\x0d","\x6f","\x58","\x00"),
	HX_HCSTRING("transparentpixel","\xf4","\x51","\x71","\x9f"),
	HX_HCSTRING("line_thickness","\x29","\x7e","\x1d","\x8b"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("temptile","\x42","\xa8","\x97","\xb1"),
	HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"),
	HX_HCSTRING("tempshape","\x8d","\x77","\x03","\x1f"),
	HX_HCSTRING("shapematrix","\x22","\xa8","\x75","\x19"),
	HX_HCSTRING("alphamult","\x4e","\x16","\x86","\xf7"),
	HX_HCSTRING("gfxstage","\xa5","\xf2","\xb7","\x13"),
	HX_HCSTRING("initrun","\x3b","\xf6","\xa5","\xcb"),
	HX_HCSTRING("skiprender","\x15","\xeb","\x98","\x38"),
	HX_HCSTRING("drawingtoscreen","\x85","\x38","\xc7","\x75"),
	::String(null())
};

void Gfx_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Gfx","\xcb","\xea","\x14","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Gfx_obj::__GetStatic;
	__mClass->mSetStaticField = &Gfx_obj::__SetStatic;
	__mClass->mMarkFunc = Gfx_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Gfx_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Gfx_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Gfx_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Gfx_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Gfx_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Gfx_obj::__boot()
{
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",23,0xa6405f94)
HXLINE(  23)		LEFT = (int)-10000;
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",24,0xa6405f94)
HXLINE(  24)		RIGHT = (int)-20000;
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",25,0xa6405f94)
HXLINE(  25)		TOP = (int)-10000;
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",26,0xa6405f94)
HXLINE(  26)		BOTTOM = (int)-20000;
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",27,0xa6405f94)
HXLINE(  27)		CENTER = (int)-15000;
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",60,0xa6405f94)
HXLINE(  60)		renderfps_max = (int)-1;
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",62,0xa6405f94)
HXLINE(  62)		updatefps_max = (int)-1;
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1159,0xa6405f94)
HXLINE(1159)		tiles = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1160,0xa6405f94)
HXLINE(1160)		tilesetindex =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1161,0xa6405f94)
HXLINE(1161)		currenttileset = (int)-1;
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1163,0xa6405f94)
HXLINE(1163)		animations = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1165,0xa6405f94)
HXLINE(1165)		animationindex =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1167,0xa6405f94)
HXLINE(1167)		images = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1172,0xa6405f94)
HXLINE(1172)		tl =  ::openfl::geom::Point_obj::__new((int)0,(int)0);
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1176,0xa6405f94)
HXLINE(1176)		imageindex =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1213,0xa6405f94)
HXLINE(1213)		tempshape =  ::openfl::display::Shape_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1214,0xa6405f94)
HXLINE(1214)		shapematrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            	}
}

} // end namespace haxegon
