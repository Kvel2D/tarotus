// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Input
#include <haxegon/Input.h>
#endif
#ifndef INCLUDED_haxegon_Key
#include <haxegon/Key.h>
#endif
#ifndef INCLUDED_haxegon_Music
#include <haxegon/Music.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

namespace haxegon{

void Music_obj::__construct() { }

Dynamic Music_obj::__CreateEmpty() { return new Music_obj; }

hx::ObjectPtr< Music_obj > Music_obj::__new()
{
	hx::ObjectPtr< Music_obj > _hx_result = new Music_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Music_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Music_obj > _hx_result = new Music_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Music_obj::playSound(::String t,hx::Null< Int >  __o_offset){
Int offset = __o_offset.Default(0);
            	HX_STACK_FRAME("haxegon.Music","playSound",0xd0545184,"haxegon.Music.playSound","haxegon/Music.hx",10,0xbb0c9da8)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(offset,"offset")
HXLINE(  11)		Int _hx_tmp = ::Std_obj::_hx_int(::haxegon::Music_obj::effectindex->get(t));
HXDLIN(  11)		Float _hx_tmp1 = (::haxegon::Music_obj::volumelevels->__get(_hx_tmp) * ::haxegon::Music_obj::globalsound);
HXDLIN(  11)		::haxegon::Music_obj::temptransform =  ::openfl::media::SoundTransform_obj::__new(_hx_tmp1,null());
HXLINE(  12)		Int _hx_tmp2 = ::haxegon::Music_obj::currentefchan;
HXDLIN(  12)		Int _hx_tmp3 = ::Std_obj::_hx_int(::haxegon::Music_obj::effectindex->get(t));
HXDLIN(  12)		 ::openfl::media::SoundChannel _hx_tmp4 = ::haxegon::Music_obj::efchan->__get(_hx_tmp3).StaticCast<  ::openfl::media::Sound >()->play(offset,null(),null());
HXDLIN(  12)		::haxegon::Music_obj::efchannel[_hx_tmp2] = _hx_tmp4;
HXLINE(  13)		::haxegon::Music_obj::efchannel->__get(::haxegon::Music_obj::currentefchan).StaticCast<  ::openfl::media::SoundChannel >()->set_soundTransform(::haxegon::Music_obj::temptransform);
HXLINE(  14)		::haxegon::Music_obj::currentefchan++;
HXLINE(  15)		Bool _hx_tmp5 = (::haxegon::Music_obj::currentefchan > (int)15);
HXDLIN(  15)		if (_hx_tmp5) {
HXLINE(  15)			hx::SubEq(::haxegon::Music_obj::currentefchan,(int)16);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Music_obj,playSound,(void))

void Music_obj::stopSound(){
            	HX_STACK_FRAME("haxegon.Music","stopSound",0xbfb25cb6,"haxegon.Music.stopSound","haxegon/Music.hx",18,0xbb0c9da8)
HXLINE(  19)		::haxegon::Music_obj::temptransform =  ::openfl::media::SoundTransform_obj::__new((int)0,null());
HXLINE(  21)		{
HXLINE(  21)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  21)			while((_g < (int)16)){
HXLINE(  21)				HX_VARI( Int,i) = _g++;
HXLINE(  22)				Bool _hx_tmp = hx::IsNotNull( ::haxegon::Music_obj::efchannel->__get(i).StaticCast<  ::openfl::media::SoundChannel >() );
HXDLIN(  22)				if (_hx_tmp) {
HXLINE(  22)					::haxegon::Music_obj::efchannel->__get(i).StaticCast<  ::openfl::media::SoundChannel >()->set_soundTransform(::haxegon::Music_obj::temptransform);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,stopSound,(void))

void Music_obj::loadSound(::String t,hx::Null< Float >  __o_vol){
Float vol = __o_vol.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Music","loadSound",0xcaa77012,"haxegon.Music.loadSound","haxegon/Music.hx",26,0xbb0c9da8)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(vol,"vol")
HXLINE(  27)		{
HXLINE(  27)			Int value = ::haxegon::Music_obj::numeffects;
HXDLIN(  27)			::haxegon::Music_obj::effectindex->set(t,value);
            		}
HXLINE(  28)		::haxegon::Music_obj::volumelevels->push(vol);
HXLINE(  32)		 ::openfl::media::Sound _hx_tmp = ::openfl::Assets_obj::getSound(((HX_("data/sounds/",c6,86,2c,c9) + t) + HX_(".ogg",e1,64,bc,1e)),null());
HXDLIN(  32)		::haxegon::Music_obj::efchan->push(_hx_tmp);
HXLINE(  34)		::haxegon::Music_obj::numeffects++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Music_obj,loadSound,(void))

void Music_obj::loadSong(::String t,hx::Null< Float >  __o_vol){
Float vol = __o_vol.Default(((Float)1.0));
            	HX_STACK_FRAME("haxegon.Music","loadSong",0xed6499f2,"haxegon.Music.loadSong","haxegon/Music.hx",37,0xbb0c9da8)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(vol,"vol")
HXLINE(  38)		{
HXLINE(  38)			Int value = ::haxegon::Music_obj::numsongs;
HXDLIN(  38)			::haxegon::Music_obj::songindex->set(t,value);
            		}
HXLINE(  39)		::haxegon::Music_obj::songvolumelevels->push(vol);
HXLINE(  43)		 ::openfl::media::Sound _hx_tmp = ::openfl::Assets_obj::getMusic(((HX_("data/music/",6f,b0,26,56) + t) + HX_(".ogg",e1,64,bc,1e)),null());
HXDLIN(  43)		::haxegon::Music_obj::musicchan->push(_hx_tmp);
HXLINE(  45)		::haxegon::Music_obj::numsongs++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Music_obj,loadSong,(void))

void Music_obj::playSong(::String t,hx::Null< Int >  __o_time){
Int time = __o_time.Default(0);
            	HX_STACK_FRAME("haxegon.Music","playSong",0x6cd82cc0,"haxegon.Music.playSong","haxegon/Music.hx",49,0xbb0c9da8)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(time,"time")
HXLINE(  49)		if ((::haxegon::Music_obj::currentsong != t)) {
HXLINE(  50)			if ((::haxegon::Music_obj::currentsong != HX_("nothing",0d,9c,5f,4f))) {
HXLINE(  52)				::haxegon::Music_obj::musicchannel->stop();
HXLINE(  53)				::haxegon::Music_obj::musicchannel->removeEventListener(HX_("soundComplete",a8,30,e6,1c),::haxegon::Music_obj::loopMusic_dyn(),null());
            			}
HXLINE(  55)			if ((t != HX_("nothing",0d,9c,5f,4f))) {
HXLINE(  56)				::haxegon::Music_obj::currentsong = t;
HXLINE(  58)				Int _hx_tmp = ::Std_obj::_hx_int(::haxegon::Music_obj::songindex->get(t));
HXDLIN(  58)				 ::openfl::media::Sound _hx_tmp1 = ::haxegon::Music_obj::musicchan->__get(_hx_tmp).StaticCast<  ::openfl::media::Sound >();
HXDLIN(  58)				Int _hx_tmp2 = (time * (int)1000);
HXDLIN(  58)				Int _hx_tmp3 = ::Std_obj::_hx_int(::haxegon::Music_obj::songindex->get(t));
HXDLIN(  58)				Float _hx_tmp4 = ::haxegon::Music_obj::musicchan->__get(_hx_tmp3).StaticCast<  ::openfl::media::Sound >()->get_length();
HXDLIN(  58)				::haxegon::Music_obj::musicchannel = _hx_tmp1->play(hx::Mod(_hx_tmp2,_hx_tmp4),null(),null());
HXLINE(  59)				Int _hx_tmp5 = ::Std_obj::_hx_int(::haxegon::Music_obj::songindex->get(t));
HXDLIN(  59)				Float _hx_tmp6 = (::haxegon::Music_obj::songvolumelevels->__get(_hx_tmp5) * ::haxegon::Music_obj::globalsound);
HXDLIN(  59)				::haxegon::Music_obj::musicchannel->set_soundTransform( ::openfl::media::SoundTransform_obj::__new(_hx_tmp6,null()));
HXLINE(  61)				::haxegon::Music_obj::musicchannel->addEventListener(HX_("soundComplete",a8,30,e6,1c),::haxegon::Music_obj::loopMusic_dyn(),null(),null(),null());
            			}
            			else {
HXLINE(  63)				::haxegon::Music_obj::currentsong = HX_("nothing",0d,9c,5f,4f);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Music_obj,playSong,(void))

void Music_obj::stop(){
            	HX_STACK_FRAME("haxegon.Music","stop",0x94119d59,"haxegon.Music.stop","haxegon/Music.hx",68,0xbb0c9da8)
HXLINE(  69)		::haxegon::Music_obj::musicchannel->removeEventListener(HX_("soundComplete",a8,30,e6,1c),::haxegon::Music_obj::stopMusic_dyn(),null());
HXLINE(  70)		::haxegon::Music_obj::musicchannel->stop();
HXLINE(  71)		::haxegon::Music_obj::currentsong = HX_("nothing",0d,9c,5f,4f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,stop,(void))

void Music_obj::fadeout(){
            	HX_STACK_FRAME("haxegon.Music","fadeout",0x7c2a839b,"haxegon.Music.fadeout","haxegon/Music.hx",75,0xbb0c9da8)
HXLINE(  75)		Bool _hx_tmp = (::haxegon::Music_obj::musicfade == (int)0);
HXDLIN(  75)		if (_hx_tmp) {
HXLINE(  76)			::haxegon::Music_obj::musicfade = (int)31;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,fadeout,(void))

void Music_obj::init(){
            	HX_STACK_FRAME("haxegon.Music","init",0x8d70e867,"haxegon.Music.init","haxegon/Music.hx",80,0xbb0c9da8)
HXLINE(  81)		::haxegon::Music_obj::currentsong = HX_("nothing",0d,9c,5f,4f);
HXDLIN(  81)		::haxegon::Music_obj::musicfade = (int)0;
HXLINE(  82)		::haxegon::Music_obj::currentefchan = (int)0;
HXLINE(  83)		::haxegon::Music_obj::usingtickertext = false;
HXLINE(  85)		::haxegon::Music_obj::globalsound = (int)1;
HXDLIN(  85)		::haxegon::Music_obj::muted = false;
HXLINE(  87)		::haxegon::Music_obj::numplays = (int)0;
HXLINE(  88)		::haxegon::Music_obj::numeffects = (int)0;
HXLINE(  89)		::haxegon::Music_obj::numsongs = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,init,(void))

void Music_obj::loopMusic( ::openfl::events::Event e){
            	HX_STACK_FRAME("haxegon.Music","loopMusic",0x6caa86ea,"haxegon.Music.loopMusic","haxegon/Music.hx",92,0xbb0c9da8)
            	HX_STACK_ARG(e,"e")
HXLINE(  93)		::haxegon::Music_obj::musicchannel->removeEventListener(HX_("soundComplete",a8,30,e6,1c),::haxegon::Music_obj::loopMusic_dyn(),null());
HXLINE(  94)		if ((::haxegon::Music_obj::currentsong != HX_("nothing",0d,9c,5f,4f))) {
HXLINE(  95)			Int _hx_tmp = ::Std_obj::_hx_int(::haxegon::Music_obj::songindex->get(::haxegon::Music_obj::currentsong));
HXDLIN(  95)			::haxegon::Music_obj::musicchannel = ::haxegon::Music_obj::musicchan->__get(_hx_tmp).StaticCast<  ::openfl::media::Sound >()->play(null(),null(),null());
HXLINE(  96)			Int _hx_tmp1 = ::Std_obj::_hx_int(::haxegon::Music_obj::songindex->get(::haxegon::Music_obj::currentsong));
HXDLIN(  96)			Float _hx_tmp2 = (::haxegon::Music_obj::songvolumelevels->__get(_hx_tmp1) * ::haxegon::Music_obj::globalsound);
HXDLIN(  96)			::haxegon::Music_obj::musicchannel->set_soundTransform( ::openfl::media::SoundTransform_obj::__new(_hx_tmp2,null()));
HXLINE(  98)			::haxegon::Music_obj::musicchannel->addEventListener(HX_("soundComplete",a8,30,e6,1c),::haxegon::Music_obj::loopMusic_dyn(),null(),null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Music_obj,loopMusic,(void))

void Music_obj::stopMusic( ::openfl::events::Event e){
            	HX_STACK_FRAME("haxegon.Music","stopMusic",0x4f40a08c,"haxegon.Music.stopMusic","haxegon/Music.hx",102,0xbb0c9da8)
            	HX_STACK_ARG(e,"e")
HXLINE( 103)		::haxegon::Music_obj::musicchannel->removeEventListener(HX_("soundComplete",a8,30,e6,1c),::haxegon::Music_obj::stopMusic_dyn(),null());
HXLINE( 104)		::haxegon::Music_obj::musicchannel->stop();
HXLINE( 105)		::haxegon::Music_obj::currentsong = HX_("nothing",0d,9c,5f,4f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Music_obj,stopMusic,(void))

void Music_obj::processmusicfade(){
            	HX_STACK_FRAME("haxegon.Music","processmusicfade",0x44e12829,"haxegon.Music.processmusicfade","haxegon/Music.hx",108,0xbb0c9da8)
HXLINE( 109)		::haxegon::Music_obj::musicfade--;
HXLINE( 110)		Bool _hx_tmp = (::haxegon::Music_obj::musicfade > (int)0);
HXDLIN( 110)		if (_hx_tmp) {
HXLINE( 111)			Float _hx_tmp1 = (((Float)::haxegon::Music_obj::musicfade / (Float)(int)30) * ::haxegon::Music_obj::globalsound);
HXDLIN( 111)			::haxegon::Music_obj::musicchannel->set_soundTransform( ::openfl::media::SoundTransform_obj::__new(_hx_tmp1,null()));
            		}
            		else {
HXLINE( 113)			::haxegon::Music_obj::musicchannel->stop();
HXLINE( 114)			::haxegon::Music_obj::currentsong = HX_("nothing",0d,9c,5f,4f);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,processmusicfade,(void))

void Music_obj::processmusicfadein(){
            	HX_STACK_FRAME("haxegon.Music","processmusicfadein",0x1d9aa04e,"haxegon.Music.processmusicfadein","haxegon/Music.hx",118,0xbb0c9da8)
HXLINE( 119)		::haxegon::Music_obj::musicfadein--;
HXLINE( 120)		Bool _hx_tmp = (::haxegon::Music_obj::musicfadein > (int)0);
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 121)			Float _hx_tmp1 = (((Float)((int)60 - ::haxegon::Music_obj::musicfadein) / (Float)(int)60) * ::haxegon::Music_obj::globalsound);
HXDLIN( 121)			::haxegon::Music_obj::musicchannel->set_soundTransform( ::openfl::media::SoundTransform_obj::__new(_hx_tmp1,null()));
            		}
            		else {
HXLINE( 123)			::haxegon::Music_obj::musicchannel->set_soundTransform( ::openfl::media::SoundTransform_obj::__new(::haxegon::Music_obj::globalsound,null()));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,processmusicfadein,(void))

void Music_obj::processmusic(){
            	HX_STACK_FRAME("haxegon.Music","processmusic",0xbd97582d,"haxegon.Music.processmusic","haxegon/Music.hx",127,0xbb0c9da8)
HXLINE( 128)		Bool _hx_tmp = (::haxegon::Music_obj::musicfade > (int)0);
HXDLIN( 128)		if (_hx_tmp) {
HXLINE( 128)			::haxegon::Music_obj::processmusicfade();
            		}
HXLINE( 129)		Bool _hx_tmp1 = (::haxegon::Music_obj::musicfadein > (int)0);
HXDLIN( 129)		if (_hx_tmp1) {
HXLINE( 129)			::haxegon::Music_obj::processmusicfadein();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,processmusic,(void))

void Music_obj::updateallvolumes(){
            	HX_STACK_FRAME("haxegon.Music","updateallvolumes",0xa473f178,"haxegon.Music.updateallvolumes","haxegon/Music.hx",135,0xbb0c9da8)
HXLINE( 135)		if ((::haxegon::Music_obj::currentsong != HX_("nothing",0d,9c,5f,4f))) {
HXLINE( 136)			Int _hx_tmp = ::Std_obj::_hx_int(::haxegon::Music_obj::songindex->get(::haxegon::Music_obj::currentsong));
HXDLIN( 136)			Float _hx_tmp1 = (::haxegon::Music_obj::songvolumelevels->__get(_hx_tmp) * ::haxegon::Music_obj::globalsound);
HXDLIN( 136)			::haxegon::Music_obj::musicchannel->set_soundTransform( ::openfl::media::SoundTransform_obj::__new(_hx_tmp1,null()));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,updateallvolumes,(void))

void Music_obj::processmute(){
            	HX_STACK_FRAME("haxegon.Music","processmute",0x4a523051,"haxegon.Music.processmute","haxegon/Music.hx",142,0xbb0c9da8)
HXLINE( 143)		Bool _hx_tmp = (::haxegon::Text_obj::input_show == (int)0);
HXDLIN( 143)		if (_hx_tmp) {
HXLINE( 144)			Bool _hx_tmp1;
HXDLIN( 144)			Bool _hx_tmp2 = ::haxegon::Input_obj::just_pressed(::haxegon::Key_obj::M_dyn());
HXDLIN( 144)			if (_hx_tmp2) {
HXLINE( 144)				_hx_tmp1 = (::haxegon::Music_obj::mutebutton <= (int)0);
            			}
            			else {
HXLINE( 144)				_hx_tmp1 = false;
            			}
HXDLIN( 144)			if (_hx_tmp1) {
HXLINE( 145)				::haxegon::Music_obj::mutebutton = (int)2;
HXDLIN( 145)				Bool _hx_tmp3 = ::haxegon::Music_obj::muted;
HXDLIN( 145)				if (_hx_tmp3) {
HXLINE( 145)					::haxegon::Music_obj::muted = false;
            				}
            				else {
HXLINE( 145)					::haxegon::Music_obj::muted = true;
            				}
            			}
HXLINE( 147)			Bool _hx_tmp4;
HXDLIN( 147)			Bool _hx_tmp5 = (::haxegon::Music_obj::mutebutton > (int)0);
HXDLIN( 147)			if (_hx_tmp5) {
HXLINE( 147)				_hx_tmp4 = !(::haxegon::Input_obj::pressed(::haxegon::Key_obj::M_dyn()));
            			}
            			else {
HXLINE( 147)				_hx_tmp4 = false;
            			}
HXDLIN( 147)			if (_hx_tmp4) {
HXLINE( 147)				::haxegon::Music_obj::mutebutton--;
            			}
            		}
HXLINE( 150)		Bool _hx_tmp6 = ::haxegon::Music_obj::muted;
HXDLIN( 150)		if (_hx_tmp6) {
HXLINE( 151)			Bool _hx_tmp7 = (::haxegon::Music_obj::globalsound == (int)1);
HXDLIN( 151)			if (_hx_tmp7) {
HXLINE( 152)				::haxegon::Music_obj::globalsound = (int)0;
HXLINE( 153)				::haxegon::Music_obj::updateallvolumes();
            			}
            		}
HXLINE( 157)		Bool _hx_tmp8;
HXDLIN( 157)		if (!(::haxegon::Music_obj::muted)) {
HXLINE( 157)			_hx_tmp8 = (::haxegon::Music_obj::globalsound < (int)1);
            		}
            		else {
HXLINE( 157)			_hx_tmp8 = false;
            		}
HXDLIN( 157)		if (_hx_tmp8) {
HXLINE( 158)			hx::AddEq(::haxegon::Music_obj::globalsound,((Float)0.05));
HXLINE( 159)			Bool _hx_tmp9 = (::haxegon::Music_obj::globalsound > ((Float)1.0));
HXDLIN( 159)			if (_hx_tmp9) {
HXLINE( 159)				::haxegon::Music_obj::globalsound = ((Float)1.0);
            			}
HXLINE( 160)			::haxegon::Music_obj::updateallvolumes();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,processmute,(void))

::Array< ::Dynamic> Music_obj::musicchan;

 ::openfl::media::SoundChannel Music_obj::musicchannel;

::String Music_obj::currentsong;

Int Music_obj::musicfade;

Int Music_obj::musicfadein;

 ::haxe::ds::StringMap Music_obj::effectindex;

::Array< Float > Music_obj::volumelevels;

Int Music_obj::numeffects;

 ::haxe::ds::StringMap Music_obj::songindex;

::Array< Float > Music_obj::songvolumelevels;

Int Music_obj::numsongs;

Int Music_obj::currentefchan;

::Array< ::Dynamic> Music_obj::efchannel;

::Array< ::Dynamic> Music_obj::efchan;

Int Music_obj::numplays;

Bool Music_obj::usingtickertext;

 ::openfl::media::SoundTransform Music_obj::temptransform;

Float Music_obj::globalsound;

Bool Music_obj::muted;

Int Music_obj::mutebutton;


Music_obj::Music_obj()
{
}

bool Music_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"muted") ) { outValue = muted; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"efchan") ) { outValue = efchan; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fadeout") ) { outValue = fadeout_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadSong") ) { outValue = loadSong_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"playSong") ) { outValue = playSong_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numsongs") ) { outValue = numsongs; return true; }
		if (HX_FIELD_EQ(inName,"numplays") ) { outValue = numplays; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playSound") ) { outValue = playSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stopSound") ) { outValue = stopSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadSound") ) { outValue = loadSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loopMusic") ) { outValue = loopMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stopMusic") ) { outValue = stopMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"musicchan") ) { outValue = musicchan; return true; }
		if (HX_FIELD_EQ(inName,"musicfade") ) { outValue = musicfade; return true; }
		if (HX_FIELD_EQ(inName,"songindex") ) { outValue = songindex; return true; }
		if (HX_FIELD_EQ(inName,"efchannel") ) { outValue = efchannel; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numeffects") ) { outValue = numeffects; return true; }
		if (HX_FIELD_EQ(inName,"mutebutton") ) { outValue = mutebutton; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"processmute") ) { outValue = processmute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"currentsong") ) { outValue = currentsong; return true; }
		if (HX_FIELD_EQ(inName,"musicfadein") ) { outValue = musicfadein; return true; }
		if (HX_FIELD_EQ(inName,"effectindex") ) { outValue = effectindex; return true; }
		if (HX_FIELD_EQ(inName,"globalsound") ) { outValue = globalsound; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"processmusic") ) { outValue = processmusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"musicchannel") ) { outValue = musicchannel; return true; }
		if (HX_FIELD_EQ(inName,"volumelevels") ) { outValue = volumelevels; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentefchan") ) { outValue = currentefchan; return true; }
		if (HX_FIELD_EQ(inName,"temptransform") ) { outValue = temptransform; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"usingtickertext") ) { outValue = usingtickertext; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"processmusicfade") ) { outValue = processmusicfade_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateallvolumes") ) { outValue = updateallvolumes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"songvolumelevels") ) { outValue = songvolumelevels; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"processmusicfadein") ) { outValue = processmusicfadein_dyn(); return true; }
	}
	return false;
}

bool Music_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"muted") ) { muted=ioValue.Cast< Bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"efchan") ) { efchan=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"numsongs") ) { numsongs=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"numplays") ) { numplays=ioValue.Cast< Int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"musicchan") ) { musicchan=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"musicfade") ) { musicfade=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"songindex") ) { songindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"efchannel") ) { efchannel=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numeffects") ) { numeffects=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"mutebutton") ) { mutebutton=ioValue.Cast< Int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentsong") ) { currentsong=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"musicfadein") ) { musicfadein=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"effectindex") ) { effectindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"globalsound") ) { globalsound=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"musicchannel") ) { musicchannel=ioValue.Cast<  ::openfl::media::SoundChannel >(); return true; }
		if (HX_FIELD_EQ(inName,"volumelevels") ) { volumelevels=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentefchan") ) { currentefchan=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"temptransform") ) { temptransform=ioValue.Cast<  ::openfl::media::SoundTransform >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"usingtickertext") ) { usingtickertext=ioValue.Cast< Bool >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"songvolumelevels") ) { songvolumelevels=ioValue.Cast< ::Array< Float > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Music_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Music_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Music_obj::musicchan,HX_HCSTRING("musicchan","\xf7","\xe5","\xdf","\xe0")},
	{hx::fsObject /*::openfl::media::SoundChannel*/ ,(void *) &Music_obj::musicchannel,HX_HCSTRING("musicchannel","\xbe","\xbe","\xf4","\xb5")},
	{hx::fsString,(void *) &Music_obj::currentsong,HX_HCSTRING("currentsong","\x8e","\xd0","\x10","\x9a")},
	{hx::fsInt,(void *) &Music_obj::musicfade,HX_HCSTRING("musicfade","\xa1","\x3c","\xd6","\xe2")},
	{hx::fsInt,(void *) &Music_obj::musicfadein,HX_HCSTRING("musicfadein","\xc6","\xc2","\x57","\xf2")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Music_obj::effectindex,HX_HCSTRING("effectindex","\xe1","\x52","\xca","\x46")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &Music_obj::volumelevels,HX_HCSTRING("volumelevels","\xc9","\xc7","\x2e","\x1d")},
	{hx::fsInt,(void *) &Music_obj::numeffects,HX_HCSTRING("numeffects","\x3c","\xfb","\x1a","\x91")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Music_obj::songindex,HX_HCSTRING("songindex","\x1d","\x73","\x61","\x5a")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &Music_obj::songvolumelevels,HX_HCSTRING("songvolumelevels","\x1e","\xd7","\xd7","\xe7")},
	{hx::fsInt,(void *) &Music_obj::numsongs,HX_HCSTRING("numsongs","\xf8","\xda","\xa9","\xaa")},
	{hx::fsInt,(void *) &Music_obj::currentefchan,HX_HCSTRING("currentefchan","\xac","\x08","\x72","\x0d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Music_obj::efchannel,HX_HCSTRING("efchannel","\x82","\xe6","\x29","\xd0")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Music_obj::efchan,HX_HCSTRING("efchan","\xb3","\xfb","\xa9","\x5e")},
	{hx::fsInt,(void *) &Music_obj::numplays,HX_HCSTRING("numplays","\xf9","\xab","\x70","\xee")},
	{hx::fsBool,(void *) &Music_obj::usingtickertext,HX_HCSTRING("usingtickertext","\xfb","\xb8","\xfe","\xb9")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(void *) &Music_obj::temptransform,HX_HCSTRING("temptransform","\xd8","\x67","\x9a","\xd0")},
	{hx::fsFloat,(void *) &Music_obj::globalsound,HX_HCSTRING("globalsound","\x8c","\x74","\xdd","\xc5")},
	{hx::fsBool,(void *) &Music_obj::muted,HX_HCSTRING("muted","\x6b","\x8f","\x5b","\x10")},
	{hx::fsInt,(void *) &Music_obj::mutebutton,HX_HCSTRING("mutebutton","\x8b","\xf9","\xbd","\x74")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Music_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Music_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Music_obj::musicchan,"musicchan");
	HX_MARK_MEMBER_NAME(Music_obj::musicchannel,"musicchannel");
	HX_MARK_MEMBER_NAME(Music_obj::currentsong,"currentsong");
	HX_MARK_MEMBER_NAME(Music_obj::musicfade,"musicfade");
	HX_MARK_MEMBER_NAME(Music_obj::musicfadein,"musicfadein");
	HX_MARK_MEMBER_NAME(Music_obj::effectindex,"effectindex");
	HX_MARK_MEMBER_NAME(Music_obj::volumelevels,"volumelevels");
	HX_MARK_MEMBER_NAME(Music_obj::numeffects,"numeffects");
	HX_MARK_MEMBER_NAME(Music_obj::songindex,"songindex");
	HX_MARK_MEMBER_NAME(Music_obj::songvolumelevels,"songvolumelevels");
	HX_MARK_MEMBER_NAME(Music_obj::numsongs,"numsongs");
	HX_MARK_MEMBER_NAME(Music_obj::currentefchan,"currentefchan");
	HX_MARK_MEMBER_NAME(Music_obj::efchannel,"efchannel");
	HX_MARK_MEMBER_NAME(Music_obj::efchan,"efchan");
	HX_MARK_MEMBER_NAME(Music_obj::numplays,"numplays");
	HX_MARK_MEMBER_NAME(Music_obj::usingtickertext,"usingtickertext");
	HX_MARK_MEMBER_NAME(Music_obj::temptransform,"temptransform");
	HX_MARK_MEMBER_NAME(Music_obj::globalsound,"globalsound");
	HX_MARK_MEMBER_NAME(Music_obj::muted,"muted");
	HX_MARK_MEMBER_NAME(Music_obj::mutebutton,"mutebutton");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Music_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Music_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Music_obj::musicchan,"musicchan");
	HX_VISIT_MEMBER_NAME(Music_obj::musicchannel,"musicchannel");
	HX_VISIT_MEMBER_NAME(Music_obj::currentsong,"currentsong");
	HX_VISIT_MEMBER_NAME(Music_obj::musicfade,"musicfade");
	HX_VISIT_MEMBER_NAME(Music_obj::musicfadein,"musicfadein");
	HX_VISIT_MEMBER_NAME(Music_obj::effectindex,"effectindex");
	HX_VISIT_MEMBER_NAME(Music_obj::volumelevels,"volumelevels");
	HX_VISIT_MEMBER_NAME(Music_obj::numeffects,"numeffects");
	HX_VISIT_MEMBER_NAME(Music_obj::songindex,"songindex");
	HX_VISIT_MEMBER_NAME(Music_obj::songvolumelevels,"songvolumelevels");
	HX_VISIT_MEMBER_NAME(Music_obj::numsongs,"numsongs");
	HX_VISIT_MEMBER_NAME(Music_obj::currentefchan,"currentefchan");
	HX_VISIT_MEMBER_NAME(Music_obj::efchannel,"efchannel");
	HX_VISIT_MEMBER_NAME(Music_obj::efchan,"efchan");
	HX_VISIT_MEMBER_NAME(Music_obj::numplays,"numplays");
	HX_VISIT_MEMBER_NAME(Music_obj::usingtickertext,"usingtickertext");
	HX_VISIT_MEMBER_NAME(Music_obj::temptransform,"temptransform");
	HX_VISIT_MEMBER_NAME(Music_obj::globalsound,"globalsound");
	HX_VISIT_MEMBER_NAME(Music_obj::muted,"muted");
	HX_VISIT_MEMBER_NAME(Music_obj::mutebutton,"mutebutton");
};

#endif

hx::Class Music_obj::__mClass;

static ::String Music_obj_sStaticFields[] = {
	HX_HCSTRING("playSound","\x3b","\xba","\xb0","\xa1"),
	HX_HCSTRING("stopSound","\x6d","\xc5","\x0e","\x91"),
	HX_HCSTRING("loadSound","\xc9","\xd8","\x03","\x9c"),
	HX_HCSTRING("loadSong","\x1b","\xf5","\xf7","\xbc"),
	HX_HCSTRING("playSong","\xe9","\x87","\x6b","\x3c"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("fadeout","\x92","\x80","\x54","\x31"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("loopMusic","\xa1","\xef","\x06","\x3e"),
	HX_HCSTRING("stopMusic","\x43","\x09","\x9d","\x20"),
	HX_HCSTRING("processmusicfade","\x52","\x54","\x71","\xf8"),
	HX_HCSTRING("processmusicfadein","\xb7","\xe8","\xac","\xf6"),
	HX_HCSTRING("processmusic","\xd6","\xfb","\xe1","\x64"),
	HX_HCSTRING("updateallvolumes","\xa1","\x1d","\x04","\x58"),
	HX_HCSTRING("processmute","\xc8","\x74","\x23","\x7a"),
	HX_HCSTRING("musicchan","\xf7","\xe5","\xdf","\xe0"),
	HX_HCSTRING("musicchannel","\xbe","\xbe","\xf4","\xb5"),
	HX_HCSTRING("currentsong","\x8e","\xd0","\x10","\x9a"),
	HX_HCSTRING("musicfade","\xa1","\x3c","\xd6","\xe2"),
	HX_HCSTRING("musicfadein","\xc6","\xc2","\x57","\xf2"),
	HX_HCSTRING("effectindex","\xe1","\x52","\xca","\x46"),
	HX_HCSTRING("volumelevels","\xc9","\xc7","\x2e","\x1d"),
	HX_HCSTRING("numeffects","\x3c","\xfb","\x1a","\x91"),
	HX_HCSTRING("songindex","\x1d","\x73","\x61","\x5a"),
	HX_HCSTRING("songvolumelevels","\x1e","\xd7","\xd7","\xe7"),
	HX_HCSTRING("numsongs","\xf8","\xda","\xa9","\xaa"),
	HX_HCSTRING("currentefchan","\xac","\x08","\x72","\x0d"),
	HX_HCSTRING("efchannel","\x82","\xe6","\x29","\xd0"),
	HX_HCSTRING("efchan","\xb3","\xfb","\xa9","\x5e"),
	HX_HCSTRING("numplays","\xf9","\xab","\x70","\xee"),
	HX_HCSTRING("usingtickertext","\xfb","\xb8","\xfe","\xb9"),
	HX_HCSTRING("temptransform","\xd8","\x67","\x9a","\xd0"),
	HX_HCSTRING("globalsound","\x8c","\x74","\xdd","\xc5"),
	HX_HCSTRING("muted","\x6b","\x8f","\x5b","\x10"),
	HX_HCSTRING("mutebutton","\x8b","\xf9","\xbd","\x74"),
	::String(null())
};

void Music_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Music","\x77","\xb2","\x8b","\x17");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Music_obj::__GetStatic;
	__mClass->mSetStaticField = &Music_obj::__SetStatic;
	__mClass->mMarkFunc = Music_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Music_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Music_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Music_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Music_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Music_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Music_obj::__boot()
{
{
            	HX_STACK_FRAME("haxegon.Music","boot",0x88d13189,"haxegon.Music.boot","haxegon/Music.hx",164,0xbb0c9da8)
HXLINE( 164)		musicchan = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Music","boot",0x88d13189,"haxegon.Music.boot","haxegon/Music.hx",170,0xbb0c9da8)
HXLINE( 170)		effectindex =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Music","boot",0x88d13189,"haxegon.Music.boot","haxegon/Music.hx",171,0xbb0c9da8)
HXLINE( 171)		volumelevels = ::Array_obj< Float >::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Music","boot",0x88d13189,"haxegon.Music.boot","haxegon/Music.hx",174,0xbb0c9da8)
HXLINE( 174)		songindex =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Music","boot",0x88d13189,"haxegon.Music.boot","haxegon/Music.hx",175,0xbb0c9da8)
HXLINE( 175)		songvolumelevels = ::Array_obj< Float >::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Music","boot",0x88d13189,"haxegon.Music.boot","haxegon/Music.hx",179,0xbb0c9da8)
HXLINE( 179)		efchannel = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Music","boot",0x88d13189,"haxegon.Music.boot","haxegon/Music.hx",180,0xbb0c9da8)
HXLINE( 180)		efchan = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace haxegon
