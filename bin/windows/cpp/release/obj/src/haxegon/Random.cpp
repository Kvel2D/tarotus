// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_haxegon_Random
#include <haxegon/Random.h>
#endif

namespace haxegon{

void Random_obj::__construct() { }

Dynamic Random_obj::__CreateEmpty() { return new Random_obj; }

hx::ObjectPtr< Random_obj > Random_obj::__new()
{
	hx::ObjectPtr< Random_obj > _hx_result = new Random_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Random_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Random_obj > _hx_result = new Random_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Random_obj::temp;

Int Random_obj::seed;

Float Random_obj::randn_x1;

Float Random_obj::randn_x2;

Bool Random_obj::randn_call;

Float Random_obj::randn(Float mean,Float variance){
            	HX_STACK_FRAME("haxegon.Random","randn",0x6c5e1eec,"haxegon.Random.randn","haxegon/Random.hx",13,0xd956af4c)
            	HX_STACK_ARG(mean,"mean")
            	HX_STACK_ARG(variance,"variance")
HXLINE(  13)		Bool _hx_tmp = ::haxegon::Random_obj::randn_call;
HXDLIN(  13)		if (_hx_tmp) {
HXLINE(  14)			::haxegon::Random_obj::randn_call = !(::haxegon::Random_obj::randn_call);
HXLINE(  15)			return (mean + (variance * ::haxegon::Random_obj::randn_x2));
            		}
            		else {
HXLINE(  17)			::haxegon::Random_obj::randn_call = !(::haxegon::Random_obj::randn_call);
HXLINE(  18)			HX_VAR( Float,u1);
HXLINE(  19)			HX_VAR( Float,u2);
HXLINE(  20)			HX_VAR( Float,w);
HXLINE(  21)			while(true){
HXLINE(  22)				Float _hx_tmp1 = ::Math_obj::random();
HXDLIN(  22)				u1 = ((int)-1 + (_hx_tmp1 * (int)2));
HXLINE(  23)				Float _hx_tmp2 = ::Math_obj::random();
HXDLIN(  23)				u2 = ((int)-1 + (_hx_tmp2 * (int)2));
HXLINE(  24)				w = ((u1 * u1) + (u2 * u2));
HXLINE(  25)				Bool _hx_tmp3;
HXDLIN(  25)				if (!((w >= (int)1))) {
HXLINE(  25)					_hx_tmp3 = (w == (int)0);
            				}
            				else {
HXLINE(  25)					_hx_tmp3 = true;
            				}
HXLINE(  21)				if (!(_hx_tmp3)) {
HXLINE(  21)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
HXLINE(  27)			Float _hx_tmp4 = ::Math_obj::log(w);
HXDLIN(  27)			HX_VARI( Float,mult) = ::Math_obj::sqrt(((Float)((int)-2 * _hx_tmp4) / (Float)w));
HXLINE(  28)			::haxegon::Random_obj::randn_x1 = (u1 * mult);
HXLINE(  29)			::haxegon::Random_obj::randn_x2 = (u2 * mult);
HXLINE(  31)			return (mean + (variance * ::haxegon::Random_obj::randn_x1));
            		}
HXLINE(  13)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_obj,randn,return )

::cpp::VirtualArray Random_obj::shuffle(::cpp::VirtualArray array){
            	HX_STACK_FRAME("haxegon.Random","shuffle",0xd684787c,"haxegon.Random.shuffle","haxegon/Random.hx",35,0xd956af4c)
            	HX_STACK_ARG(array,"array")
HXLINE(  36)		Bool _hx_tmp = hx::IsNotNull( array );
HXDLIN(  36)		if (_hx_tmp) {
HXLINE(  37)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  37)			HX_VARI( Int,_g) = array->get_length();
HXDLIN(  37)			while((_g1 < _g)){
HXLINE(  37)				HX_VARI( Int,i) = _g1++;
HXLINE(  38)				Int _hx_tmp1 = ((array->get_length() - (int)1) + (int)1);
HXDLIN(  38)				Float _hx_tmp2 = ::Math_obj::random();
HXDLIN(  38)				HX_VARI( Int,j) = ::Math_obj::floor((_hx_tmp1 * _hx_tmp2));
HXLINE(  39)				HX_VARI(  ::Dynamic,a) = array->__get(i);
HXLINE(  40)				HX_VARI(  ::Dynamic,b) = array->__get(j);
HXLINE(  41)				array->set(i,b);
HXLINE(  42)				array->set(j,a);
            			}
            		}
HXLINE(  45)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_obj,shuffle,return )

Bool Random_obj::_hx_bool(){
            	HX_STACK_FRAME("haxegon.Random","bool",0x9a1cf1c7,"haxegon.Random.bool","haxegon/Random.hx",50,0xd956af4c)
HXLINE(  50)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  50)		return (_hx_tmp < ((Float)0.5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Random_obj,_hx_bool,return )

Bool Random_obj::occasional(){
            	HX_STACK_FRAME("haxegon.Random","occasional",0x41949aef,"haxegon.Random.occasional","haxegon/Random.hx",55,0xd956af4c)
HXLINE(  55)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  55)		return (_hx_tmp < ((Float)0.2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Random_obj,occasional,return )

Bool Random_obj::rare(){
            	HX_STACK_FRAME("haxegon.Random","rare",0xa4a5bebf,"haxegon.Random.rare","haxegon/Random.hx",60,0xd956af4c)
HXLINE(  60)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  60)		return (_hx_tmp < ((Float)0.05));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Random_obj,rare,return )

Bool Random_obj::chance(Int n){
            	HX_STACK_FRAME("haxegon.Random","chance",0x65e05cd1,"haxegon.Random.chance","haxegon/Random.hx",65,0xd956af4c)
            	HX_STACK_ARG(n,"n")
HXLINE(  65)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  65)		Int _hx_tmp1 = ::Math_obj::floor(((int)101 * _hx_tmp));
HXDLIN(  65)		return (_hx_tmp1 <= n);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_obj,chance,return )

Int Random_obj::_hx_int(Int from,Int to){
            	HX_STACK_FRAME("haxegon.Random","int",0xd1a501f2,"haxegon.Random.int","haxegon/Random.hx",70,0xd956af4c)
            	HX_STACK_ARG(from,"from")
            	HX_STACK_ARG(to,"to")
HXLINE(  70)		Int _hx_tmp = ((to - from) + (int)1);
HXDLIN(  70)		Float _hx_tmp1 = ::Math_obj::random();
HXDLIN(  70)		Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXDLIN(  70)		return (from + _hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_obj,_hx_int,return )

Float Random_obj::_hx_float(Float from,Float to){
            	HX_STACK_FRAME("haxegon.Random","float",0x8ad5415f,"haxegon.Random.float","haxegon/Random.hx",75,0xd956af4c)
            	HX_STACK_ARG(from,"from")
            	HX_STACK_ARG(to,"to")
HXLINE(  75)		Float _hx_tmp = (to - from);
HXDLIN(  75)		Float _hx_tmp1 = ::Math_obj::random();
HXDLIN(  75)		return (from + (_hx_tmp * _hx_tmp1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_obj,_hx_float,return )

::String Random_obj::string(Int length,::String __o_charactersToUse){
::String charactersToUse = __o_charactersToUse.Default(HX_HCSTRING("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789","\x9f","\x35","\xea","\x01"));
            	HX_STACK_FRAME("haxegon.Random","string",0xbf9df7ae,"haxegon.Random.string","haxegon/Random.hx",80,0xd956af4c)
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(charactersToUse,"charactersToUse")
HXLINE(  81)		HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXLINE(  82)		{
HXLINE(  82)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  82)			while((_g1 < length)){
HXLINE(  82)				++_g1;
HXLINE(  83)				Int _hx_tmp = ((charactersToUse.length - (int)1) + (int)1);
HXDLIN(  83)				Float _hx_tmp1 = ::Math_obj::random();
HXDLIN(  83)				Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXDLIN(  83)				::String _hx_tmp3 = charactersToUse.charAt(_hx_tmp2);
HXDLIN(  83)				hx::AddEq(str,_hx_tmp3);
            			}
            		}
HXLINE(  85)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_obj,string,return )

::String Random_obj::pickstring(::String s1,::String s2,::String __o_s3,::String __o_s4,::String __o_s5,::String __o_s6,::String __o_s7,::String __o_s8,::String __o_s9,::String __o_s10,::String __o_s11,::String __o_s12){
::String s3 = __o_s3.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s4 = __o_s4.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s5 = __o_s5.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s6 = __o_s6.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s7 = __o_s7.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s8 = __o_s8.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s9 = __o_s9.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s10 = __o_s10.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s11 = __o_s11.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String s12 = __o_s12.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACK_FRAME("haxegon.Random","pickstring",0xeabe71cf,"haxegon.Random.pickstring","haxegon/Random.hx",93,0xd956af4c)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(s3,"s3")
            	HX_STACK_ARG(s4,"s4")
            	HX_STACK_ARG(s5,"s5")
            	HX_STACK_ARG(s6,"s6")
            	HX_STACK_ARG(s7,"s7")
            	HX_STACK_ARG(s8,"s8")
            	HX_STACK_ARG(s9,"s9")
            	HX_STACK_ARG(s10,"s10")
            	HX_STACK_ARG(s11,"s11")
            	HX_STACK_ARG(s12,"s12")
HXLINE(  95)		::haxegon::Random_obj::temp = (int)2;
HXLINE(  96)		if ((s3 != HX_("",00,00,00,00))) {
HXLINE(  96)			::haxegon::Random_obj::temp = (int)3;
            		}
HXLINE(  97)		if ((s4 != HX_("",00,00,00,00))) {
HXLINE(  97)			::haxegon::Random_obj::temp = (int)4;
            		}
HXLINE(  98)		if ((s5 != HX_("",00,00,00,00))) {
HXLINE(  98)			::haxegon::Random_obj::temp = (int)5;
            		}
HXLINE(  99)		if ((s6 != HX_("",00,00,00,00))) {
HXLINE(  99)			::haxegon::Random_obj::temp = (int)6;
            		}
HXLINE( 100)		if ((s7 != HX_("",00,00,00,00))) {
HXLINE( 100)			::haxegon::Random_obj::temp = (int)7;
            		}
HXLINE( 101)		if ((s8 != HX_("",00,00,00,00))) {
HXLINE( 101)			::haxegon::Random_obj::temp = (int)8;
            		}
HXLINE( 102)		if ((s9 != HX_("",00,00,00,00))) {
HXLINE( 102)			::haxegon::Random_obj::temp = (int)9;
            		}
HXLINE( 103)		if ((s10 != HX_("",00,00,00,00))) {
HXLINE( 103)			::haxegon::Random_obj::temp = (int)10;
            		}
HXLINE( 104)		if ((s11 != HX_("",00,00,00,00))) {
HXLINE( 104)			::haxegon::Random_obj::temp = (int)11;
            		}
HXLINE( 105)		if ((s12 != HX_("",00,00,00,00))) {
HXLINE( 105)			::haxegon::Random_obj::temp = (int)12;
            		}
HXLINE( 107)		{
HXLINE( 107)			Int _hx_tmp = ((::haxegon::Random_obj::temp - (int)1) + (int)1);
HXDLIN( 107)			Float _hx_tmp1 = ::Math_obj::random();
HXDLIN( 107)			Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXDLIN( 107)			switch((int)(((int)1 + _hx_tmp2))){
            				case (int)1: {
HXLINE( 108)					return s1;
            				}
            				break;
            				case (int)2: {
HXLINE( 109)					return s2;
            				}
            				break;
            				case (int)3: {
HXLINE( 110)					return s3;
            				}
            				break;
            				case (int)4: {
HXLINE( 111)					return s4;
            				}
            				break;
            				case (int)5: {
HXLINE( 112)					return s5;
            				}
            				break;
            				case (int)6: {
HXLINE( 113)					return s6;
            				}
            				break;
            				case (int)7: {
HXLINE( 114)					return s7;
            				}
            				break;
            				case (int)8: {
HXLINE( 115)					return s8;
            				}
            				break;
            				case (int)9: {
HXLINE( 116)					return s9;
            				}
            				break;
            				case (int)10: {
HXLINE( 117)					return s10;
            				}
            				break;
            				case (int)11: {
HXLINE( 118)					return s11;
            				}
            				break;
            				case (int)12: {
HXLINE( 119)					return s12;
            				}
            				break;
            			}
            		}
HXLINE( 122)		return s1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(Random_obj,pickstring,return )

Int Random_obj::pick_int(Int s1,Int s2,hx::Null< Int >  __o_s3,hx::Null< Int >  __o_s4,hx::Null< Int >  __o_s5,hx::Null< Int >  __o_s6,hx::Null< Int >  __o_s7,hx::Null< Int >  __o_s8,hx::Null< Int >  __o_s9,hx::Null< Int >  __o_s10,hx::Null< Int >  __o_s11,hx::Null< Int >  __o_s12){
Int s3 = __o_s3.Default(-10000);
Int s4 = __o_s4.Default(-10000);
Int s5 = __o_s5.Default(-10000);
Int s6 = __o_s6.Default(-10000);
Int s7 = __o_s7.Default(-10000);
Int s8 = __o_s8.Default(-10000);
Int s9 = __o_s9.Default(-10000);
Int s10 = __o_s10.Default(-10000);
Int s11 = __o_s11.Default(-10000);
Int s12 = __o_s12.Default(-10000);
            	HX_STACK_FRAME("haxegon.Random","pick_int",0x0554bf6e,"haxegon.Random.pick_int","haxegon/Random.hx",128,0xd956af4c)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(s3,"s3")
            	HX_STACK_ARG(s4,"s4")
            	HX_STACK_ARG(s5,"s5")
            	HX_STACK_ARG(s6,"s6")
            	HX_STACK_ARG(s7,"s7")
            	HX_STACK_ARG(s8,"s8")
            	HX_STACK_ARG(s9,"s9")
            	HX_STACK_ARG(s10,"s10")
            	HX_STACK_ARG(s11,"s11")
            	HX_STACK_ARG(s12,"s12")
HXLINE( 129)		::haxegon::Random_obj::temp = (int)2;
HXLINE( 130)		if ((s3 != (int)-10000)) {
HXLINE( 130)			::haxegon::Random_obj::temp = (int)3;
            		}
HXLINE( 131)		if ((s4 != (int)-10000)) {
HXLINE( 131)			::haxegon::Random_obj::temp = (int)4;
            		}
HXLINE( 132)		if ((s5 != (int)-10000)) {
HXLINE( 132)			::haxegon::Random_obj::temp = (int)5;
            		}
HXLINE( 133)		if ((s6 != (int)-10000)) {
HXLINE( 133)			::haxegon::Random_obj::temp = (int)6;
            		}
HXLINE( 134)		if ((s7 != (int)-10000)) {
HXLINE( 134)			::haxegon::Random_obj::temp = (int)7;
            		}
HXLINE( 135)		if ((s8 != (int)-10000)) {
HXLINE( 135)			::haxegon::Random_obj::temp = (int)8;
            		}
HXLINE( 136)		if ((s9 != (int)-10000)) {
HXLINE( 136)			::haxegon::Random_obj::temp = (int)9;
            		}
HXLINE( 137)		if ((s10 != (int)-10000)) {
HXLINE( 137)			::haxegon::Random_obj::temp = (int)10;
            		}
HXLINE( 138)		if ((s11 != (int)-10000)) {
HXLINE( 138)			::haxegon::Random_obj::temp = (int)11;
            		}
HXLINE( 139)		if ((s12 != (int)-10000)) {
HXLINE( 139)			::haxegon::Random_obj::temp = (int)12;
            		}
HXLINE( 141)		{
HXLINE( 141)			Int _hx_tmp = ((::haxegon::Random_obj::temp - (int)1) + (int)1);
HXDLIN( 141)			Float _hx_tmp1 = ::Math_obj::random();
HXDLIN( 141)			Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXDLIN( 141)			switch((int)(((int)1 + _hx_tmp2))){
            				case (int)1: {
HXLINE( 142)					return s1;
            				}
            				break;
            				case (int)2: {
HXLINE( 143)					return s2;
            				}
            				break;
            				case (int)3: {
HXLINE( 144)					return s3;
            				}
            				break;
            				case (int)4: {
HXLINE( 145)					return s4;
            				}
            				break;
            				case (int)5: {
HXLINE( 146)					return s5;
            				}
            				break;
            				case (int)6: {
HXLINE( 147)					return s6;
            				}
            				break;
            				case (int)7: {
HXLINE( 148)					return s7;
            				}
            				break;
            				case (int)8: {
HXLINE( 149)					return s8;
            				}
            				break;
            				case (int)9: {
HXLINE( 150)					return s9;
            				}
            				break;
            				case (int)10: {
HXLINE( 151)					return s10;
            				}
            				break;
            				case (int)11: {
HXLINE( 152)					return s11;
            				}
            				break;
            				case (int)12: {
HXLINE( 153)					return s12;
            				}
            				break;
            			}
            		}
HXLINE( 156)		return s1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(Random_obj,pick_int,return )

Float Random_obj::pickfloat(Float s1,Float s2,hx::Null< Float >  __o_s3,hx::Null< Float >  __o_s4,hx::Null< Float >  __o_s5,hx::Null< Float >  __o_s6,hx::Null< Float >  __o_s7,hx::Null< Float >  __o_s8,hx::Null< Float >  __o_s9,hx::Null< Float >  __o_s10,hx::Null< Float >  __o_s11,hx::Null< Float >  __o_s12){
Float s3 = __o_s3.Default(-10000);
Float s4 = __o_s4.Default(-10000);
Float s5 = __o_s5.Default(-10000);
Float s6 = __o_s6.Default(-10000);
Float s7 = __o_s7.Default(-10000);
Float s8 = __o_s8.Default(-10000);
Float s9 = __o_s9.Default(-10000);
Float s10 = __o_s10.Default(-10000);
Float s11 = __o_s11.Default(-10000);
Float s12 = __o_s12.Default(-10000);
            	HX_STACK_FRAME("haxegon.Random","pickfloat",0xae9d265e,"haxegon.Random.pickfloat","haxegon/Random.hx",162,0xd956af4c)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(s3,"s3")
            	HX_STACK_ARG(s4,"s4")
            	HX_STACK_ARG(s5,"s5")
            	HX_STACK_ARG(s6,"s6")
            	HX_STACK_ARG(s7,"s7")
            	HX_STACK_ARG(s8,"s8")
            	HX_STACK_ARG(s9,"s9")
            	HX_STACK_ARG(s10,"s10")
            	HX_STACK_ARG(s11,"s11")
            	HX_STACK_ARG(s12,"s12")
HXLINE( 163)		::haxegon::Random_obj::temp = (int)2;
HXLINE( 164)		if ((s3 != (int)-10000)) {
HXLINE( 164)			::haxegon::Random_obj::temp = (int)3;
            		}
HXLINE( 165)		if ((s4 != (int)-10000)) {
HXLINE( 165)			::haxegon::Random_obj::temp = (int)4;
            		}
HXLINE( 166)		if ((s5 != (int)-10000)) {
HXLINE( 166)			::haxegon::Random_obj::temp = (int)5;
            		}
HXLINE( 167)		if ((s6 != (int)-10000)) {
HXLINE( 167)			::haxegon::Random_obj::temp = (int)6;
            		}
HXLINE( 168)		if ((s7 != (int)-10000)) {
HXLINE( 168)			::haxegon::Random_obj::temp = (int)7;
            		}
HXLINE( 169)		if ((s8 != (int)-10000)) {
HXLINE( 169)			::haxegon::Random_obj::temp = (int)8;
            		}
HXLINE( 170)		if ((s9 != (int)-10000)) {
HXLINE( 170)			::haxegon::Random_obj::temp = (int)9;
            		}
HXLINE( 171)		if ((s10 != (int)-10000)) {
HXLINE( 171)			::haxegon::Random_obj::temp = (int)10;
            		}
HXLINE( 172)		if ((s11 != (int)-10000)) {
HXLINE( 172)			::haxegon::Random_obj::temp = (int)11;
            		}
HXLINE( 173)		if ((s12 != (int)-10000)) {
HXLINE( 173)			::haxegon::Random_obj::temp = (int)12;
            		}
HXLINE( 175)		{
HXLINE( 175)			Int _hx_tmp = ((::haxegon::Random_obj::temp - (int)1) + (int)1);
HXDLIN( 175)			Float _hx_tmp1 = ::Math_obj::random();
HXDLIN( 175)			Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXDLIN( 175)			switch((int)(((int)1 + _hx_tmp2))){
            				case (int)1: {
HXLINE( 176)					return s1;
            				}
            				break;
            				case (int)2: {
HXLINE( 177)					return s2;
            				}
            				break;
            				case (int)3: {
HXLINE( 178)					return s3;
            				}
            				break;
            				case (int)4: {
HXLINE( 179)					return s4;
            				}
            				break;
            				case (int)5: {
HXLINE( 180)					return s5;
            				}
            				break;
            				case (int)6: {
HXLINE( 181)					return s6;
            				}
            				break;
            				case (int)7: {
HXLINE( 182)					return s7;
            				}
            				break;
            				case (int)8: {
HXLINE( 183)					return s8;
            				}
            				break;
            				case (int)9: {
HXLINE( 184)					return s9;
            				}
            				break;
            				case (int)10: {
HXLINE( 185)					return s10;
            				}
            				break;
            				case (int)11: {
HXLINE( 186)					return s11;
            				}
            				break;
            				case (int)12: {
HXLINE( 187)					return s12;
            				}
            				break;
            			}
            		}
HXLINE( 190)		return s1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(Random_obj,pickfloat,return )

 ::Dynamic Random_obj::pick(::cpp::VirtualArray arr){
            	HX_STACK_FRAME("haxegon.Random","pick",0xa359567e,"haxegon.Random.pick","haxegon/Random.hx",194,0xd956af4c)
            	HX_STACK_ARG(arr,"arr")
HXLINE( 194)		Int _hx_tmp = ((arr->get_length() - (int)1) + (int)1);
HXDLIN( 194)		Float _hx_tmp1 = ::Math_obj::random();
HXDLIN( 194)		Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXDLIN( 194)		return arr->__get(_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_obj,pick,return )


Random_obj::Random_obj()
{
}

bool Random_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { outValue = _hx_int_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { outValue = temp; return true; }
		if (HX_FIELD_EQ(inName,"seed") ) { outValue = seed; return true; }
		if (HX_FIELD_EQ(inName,"bool") ) { outValue = _hx_bool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rare") ) { outValue = rare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pick") ) { outValue = pick_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"randn") ) { outValue = randn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"float") ) { outValue = _hx_float_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"chance") ) { outValue = chance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"string") ) { outValue = string_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shuffle") ) { outValue = shuffle_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"randn_x1") ) { outValue = randn_x1; return true; }
		if (HX_FIELD_EQ(inName,"randn_x2") ) { outValue = randn_x2; return true; }
		if (HX_FIELD_EQ(inName,"pick_int") ) { outValue = pick_int_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pickfloat") ) { outValue = pickfloat_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"randn_call") ) { outValue = randn_call; return true; }
		if (HX_FIELD_EQ(inName,"occasional") ) { outValue = occasional_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pickstring") ) { outValue = pickstring_dyn(); return true; }
	}
	return false;
}

bool Random_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { temp=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"seed") ) { seed=ioValue.Cast< Int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"randn_x1") ) { randn_x1=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"randn_x2") ) { randn_x2=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"randn_call") ) { randn_call=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Random_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Random_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Random_obj::temp,HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c")},
	{hx::fsInt,(void *) &Random_obj::seed,HX_HCSTRING("seed","\x71","\x85","\x50","\x4c")},
	{hx::fsFloat,(void *) &Random_obj::randn_x1,HX_HCSTRING("randn_x1","\x4f","\x7b","\x6a","\x12")},
	{hx::fsFloat,(void *) &Random_obj::randn_x2,HX_HCSTRING("randn_x2","\x50","\x7b","\x6a","\x12")},
	{hx::fsBool,(void *) &Random_obj::randn_call,HX_HCSTRING("randn_call","\xb4","\x7c","\xbe","\x50")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Random_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Random_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Random_obj::temp,"temp");
	HX_MARK_MEMBER_NAME(Random_obj::seed,"seed");
	HX_MARK_MEMBER_NAME(Random_obj::randn_x1,"randn_x1");
	HX_MARK_MEMBER_NAME(Random_obj::randn_x2,"randn_x2");
	HX_MARK_MEMBER_NAME(Random_obj::randn_call,"randn_call");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Random_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Random_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Random_obj::temp,"temp");
	HX_VISIT_MEMBER_NAME(Random_obj::seed,"seed");
	HX_VISIT_MEMBER_NAME(Random_obj::randn_x1,"randn_x1");
	HX_VISIT_MEMBER_NAME(Random_obj::randn_x2,"randn_x2");
	HX_VISIT_MEMBER_NAME(Random_obj::randn_call,"randn_call");
};

#endif

hx::Class Random_obj::__mClass;

static ::String Random_obj_sStaticFields[] = {
	HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c"),
	HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"),
	HX_HCSTRING("randn_x1","\x4f","\x7b","\x6a","\x12"),
	HX_HCSTRING("randn_x2","\x50","\x7b","\x6a","\x12"),
	HX_HCSTRING("randn_call","\xb4","\x7c","\xbe","\x50"),
	HX_HCSTRING("randn","\x29","\xa3","\x1f","\xe4"),
	HX_HCSTRING("shuffle","\xf9","\x45","\xdd","\xe4"),
	HX_HCSTRING("bool","\x2a","\x84","\x1b","\x41"),
	HX_HCSTRING("occasional","\x92","\x99","\x99","\x8d"),
	HX_HCSTRING("rare","\x22","\x51","\xa4","\x4b"),
	HX_HCSTRING("chance","\xf4","\x8d","\x72","\xb7"),
	HX_HCSTRING("int","\xef","\x0c","\x50","\x00"),
	HX_HCSTRING("float","\x9c","\xc5","\x96","\x02"),
	HX_HCSTRING("string","\xd1","\x28","\x30","\x11"),
	HX_HCSTRING("pickstring","\x72","\x70","\xc3","\x36"),
	HX_HCSTRING("pick_int","\x51","\xbf","\xaf","\x84"),
	HX_HCSTRING("pickfloat","\x1b","\x0d","\xe2","\x9e"),
	HX_HCSTRING("pick","\xe1","\xe8","\x57","\x4a"),
	::String(null())
};

void Random_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Random","\xf1","\xd7","\x23","\xfb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Random_obj::__GetStatic;
	__mClass->mSetStaticField = &Random_obj::__SetStatic;
	__mClass->mMarkFunc = Random_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Random_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Random_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Random_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Random_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Random_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Random_obj::__boot()
{
{
            	HX_STACK_FRAME("haxegon.Random","boot",0x9a1cf1cf,"haxegon.Random.boot","haxegon/Random.hx",5,0xd956af4c)
HXLINE(   5)		seed = (int)0;
            	}
{
            	HX_STACK_FRAME("haxegon.Random","boot",0x9a1cf1cf,"haxegon.Random.boot","haxegon/Random.hx",9,0xd956af4c)
HXLINE(   9)		randn_x1 = ((Float)0.0);
            	}
{
            	HX_STACK_FRAME("haxegon.Random","boot",0x9a1cf1cf,"haxegon.Random.boot","haxegon/Random.hx",10,0xd956af4c)
HXLINE(  10)		randn_x2 = ((Float)0.0);
            	}
{
            	HX_STACK_FRAME("haxegon.Random","boot",0x9a1cf1cf,"haxegon.Random.boot","haxegon/Random.hx",11,0xd956af4c)
HXLINE(  11)		randn_call = false;
            	}
}

} // end namespace haxegon
