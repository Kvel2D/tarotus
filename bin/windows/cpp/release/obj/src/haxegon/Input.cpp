// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Input
#include <haxegon/Input.h>
#endif
#ifndef INCLUDED_haxegon_Key
#include <haxegon/Key.h>
#endif
#ifndef INCLUDED_haxegon_Keystate
#include <haxegon/Keystate.h>
#endif
#ifndef INCLUDED_haxegon_S
#include <haxegon/S.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_desktop_Clipboard
#include <openfl/desktop/Clipboard.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif

static const ::String _hx_array_data_0[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_7[] = {
	HX_("",00,00,00,00),
};
namespace haxegon{

void Input_obj::__construct() { }

Dynamic Input_obj::__CreateEmpty() { return new Input_obj; }

hx::ObjectPtr< Input_obj > Input_obj::__new()
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Input_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Input_obj::pressed(::hx::EnumBase k){
            	HX_STACK_FRAME("haxegon.Input","pressed",0x24693610,"haxegon.Input.pressed","haxegon/Input.hx",35,0x74261763)
            	HX_STACK_ARG(k,"k")
HXLINE(  35)		Int _hx_tmp = ::haxegon::Input_obj::keyheld->__get(( (Int)(::haxegon::Input_obj::keymap->get(k)) ));
HXDLIN(  35)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,pressed,return )

Bool Input_obj::just_pressed(::hx::EnumBase k){
            	HX_STACK_FRAME("haxegon.Input","just_pressed",0x97997021,"haxegon.Input.just_pressed","haxegon/Input.hx",39,0x74261763)
            	HX_STACK_ARG(k,"k")
HXLINE(  39)		::hx::EnumBase _hx_tmp = ::haxegon::Input_obj::current->__get(( (Int)(::haxegon::Input_obj::keymap->get(k)) )).StaticCast< ::hx::EnumBase >();
HXDLIN(  39)		if (hx::IsEq( _hx_tmp,::haxegon::Keystate_obj::just_pressed_dyn() )) {
HXLINE(  41)			return true;
            		}
            		else {
HXLINE(  43)			return false;
            		}
HXLINE(  39)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,just_pressed,return )

Bool Input_obj::just_released(::hx::EnumBase k){
            	HX_STACK_FRAME("haxegon.Input","just_released",0x157eba5e,"haxegon.Input.just_released","haxegon/Input.hx",48,0x74261763)
            	HX_STACK_ARG(k,"k")
HXLINE(  48)		::hx::EnumBase _hx_tmp = ::haxegon::Input_obj::current->__get(( (Int)(::haxegon::Input_obj::keymap->get(k)) )).StaticCast< ::hx::EnumBase >();
HXDLIN(  48)		if (hx::IsEq( _hx_tmp,::haxegon::Keystate_obj::just_released_dyn() )) {
HXLINE(  49)			::haxegon::Input_obj::current[( (Int)(::haxegon::Input_obj::keymap->get(k)) )] = ::haxegon::Keystate_obj::notpressed_dyn();
HXLINE(  50)			return true;
            		}
            		else {
HXLINE(  52)			return false;
            		}
HXLINE(  48)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,just_released,return )

void Input_obj::force_release(::hx::EnumBase k){
            	HX_STACK_FRAME("haxegon.Input","force_release",0x3b969e21,"haxegon.Input.force_release","haxegon/Input.hx",56,0x74261763)
            	HX_STACK_ARG(k,"k")
HXLINE(  57)		::haxegon::Input_obj::keycode = ::haxegon::Input_obj::keymap->get(k);
HXLINE(  58)		Bool _hx_tmp = (::haxegon::Input_obj::keyheld->__get(::haxegon::Input_obj::keycode) >= (int)0);
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  59)			::haxegon::Input_obj::current[::haxegon::Input_obj::keycode] = ::haxegon::Keystate_obj::force_release_dyn();
HXLINE(  60)			::haxegon::Input_obj::last[::haxegon::Input_obj::keycode] = ::haxegon::Keystate_obj::force_release_dyn();
HXLINE(  61)			::haxegon::Input_obj::keyheld[::haxegon::Input_obj::keycode] = (int)-1;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,force_release,(void))

Int Input_obj::pressheldtime(::hx::EnumBase k){
            	HX_STACK_FRAME("haxegon.Input","pressheldtime",0xde53b5b3,"haxegon.Input.pressheldtime","haxegon/Input.hx",65,0x74261763)
            	HX_STACK_ARG(k,"k")
HXLINE(  66)		::haxegon::Input_obj::keycode = ::haxegon::Input_obj::keymap->get(k);
HXLINE(  67)		return ::haxegon::Input_obj::keyheld->__get(::haxegon::Input_obj::keycode);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,pressheldtime,return )

Bool Input_obj::delay_pressed(::hx::EnumBase k,Int repeatframes, ::Dynamic __o_instantreps){
 ::Dynamic instantreps = __o_instantreps.Default(-1);
            	HX_STACK_FRAME("haxegon.Input","delay_pressed",0xf4a56894,"haxegon.Input.delay_pressed","haxegon/Input.hx",75,0x74261763)
            	HX_STACK_ARG(k,"k")
            	HX_STACK_ARG(repeatframes,"repeatframes")
            	HX_STACK_ARG(instantreps,"instantreps")
HXLINE(  76)		::haxegon::Input_obj::keycode = ::haxegon::Input_obj::keymap->get(k);
HXLINE(  77)		Bool _hx_tmp = (::haxegon::Input_obj::keyheld->__get(::haxegon::Input_obj::keycode) >= (int)1);
HXDLIN(  77)		if (_hx_tmp) {
HXLINE(  78)			Bool _hx_tmp1 = (::haxegon::Input_obj::keyheld->__get(::haxegon::Input_obj::keycode) == (int)1);
HXDLIN(  78)			if (_hx_tmp1) {
HXLINE(  79)				return true;
            			}
            			else {
HXLINE(  81)				Int _hx_tmp2 = ::haxegon::Input_obj::keyheld->__get(::haxegon::Input_obj::keycode);
HXDLIN(  81)				Int _hx_tmp3 = ::Std_obj::_hx_int((((Float)2.35) * repeatframes));
HXDLIN(  81)				HX_VARI( Int,repeatheld) = ((_hx_tmp2 - _hx_tmp3) - (int)1);
HXLINE(  82)				Bool _hx_tmp4;
HXDLIN(  82)				if ((repeatheld >= (int)0)) {
HXLINE(  82)					_hx_tmp4 = (hx::Mod(repeatheld,repeatframes) == (int)0);
            				}
            				else {
HXLINE(  82)					_hx_tmp4 = false;
            				}
HXDLIN(  82)				if (_hx_tmp4) {
HXLINE(  83)					return true;
            				}
            				else {
HXLINE(  84)					Bool _hx_tmp5;
HXDLIN(  84)					if (hx::IsGreaterEq( instantreps,(int)1 )) {
HXLINE(  84)						_hx_tmp5 = (repeatheld >= (instantreps * repeatframes));
            					}
            					else {
HXLINE(  84)						_hx_tmp5 = false;
            					}
HXDLIN(  84)					if (_hx_tmp5) {
HXLINE(  85)						return true;
            					}
            				}
            			}
            		}
HXLINE(  89)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Input_obj,delay_pressed,return )

void Input_obj::init( ::openfl::display::Stage stage){
            	HX_STACK_FRAME("haxegon.Input","init",0xdb2886e2,"haxegon.Input.init","haxegon/Input.hx",92,0x74261763)
            	HX_STACK_ARG(stage,"stage")
HXLINE(  93)		::haxegon::Input_obj::gamestage = stage;
HXLINE(  95)		stage->addEventListener(HX_("keyDown",a1,69,47,9c),::haxegon::Input_obj::handlekeydown_dyn(),null(),null(),null());
HXLINE(  96)		stage->addEventListener(HX_("keyUp",da,b9,fe,de),::haxegon::Input_obj::handlekeyup_dyn(),null(),null(),null());
HXLINE(  97)		stage->addEventListener(HX_("textInput",1d,54,0b,57),::haxegon::Input_obj::handletextinput_dyn(),null(),null(),null());
HXLINE(  98)		stage->addEventListener(HX_("deactivate",34,5c,01,3c),::haxegon::Input_obj::handledeactivate_dyn(),null(),null(),null());
HXLINE( 100)		::haxegon::Input_obj::clipboardbuffer = ::Array_obj< ::String >::fromData( _hx_array_data_0,1);
HXLINE( 101)		::haxegon::Input_obj::cut = false;
HXLINE( 102)		::haxegon::Input_obj::paste = false;
HXLINE( 103)		::haxegon::Input_obj::selectall = false;
HXLINE( 104)		::haxegon::Input_obj::undo = false;
HXLINE( 105)		::haxegon::Input_obj::redo = false;
HXLINE( 108)		stage->addEventListener(HX_("cut",82,85,4b,00),::haxegon::Input_obj::handlecut_dyn(),null(),null(),null());
HXLINE( 109)		stage->addEventListener(HX_("copy",b5,bb,c4,41),::haxegon::Input_obj::handlecopy_dyn(),null(),null(),null());
HXLINE( 110)		stage->addEventListener(HX_("paste",53,53,56,bd),::haxegon::Input_obj::handlepaste_dyn(),null(),null(),null());
HXLINE( 111)		stage->addEventListener(HX_("selectAll",85,9b,fc,8d),::haxegon::Input_obj::handleselectall_dyn(),null(),null(),null());
HXLINE( 114)		::haxegon::Input_obj::resetKeys();
HXLINE( 117)		::haxegon::Input_obj::_nativeCorrection =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 119)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_64",2d,83,02,20),(int)45);
HXLINE( 120)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_65",2e,83,02,20),(int)35);
HXLINE( 121)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_67",30,83,02,20),(int)34);
HXLINE( 122)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_69",32,83,02,20),(int)-1);
HXLINE( 123)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_73",0b,84,02,20),(int)33);
HXLINE( 124)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_266",23,3d,2d,e2),(int)46);
HXLINE( 125)		::haxegon::Input_obj::_nativeCorrection->set(HX_("123_222",a5,bc,d4,8f),(int)219);
HXLINE( 126)		::haxegon::Input_obj::_nativeCorrection->set(HX_("125_187",a5,28,a1,b6),(int)221);
HXLINE( 127)		::haxegon::Input_obj::_nativeCorrection->set(HX_("126_233",08,7b,08,4a),(int)192);
HXLINE( 129)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_80",e7,84,02,20),(int)112);
HXLINE( 130)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_81",e8,84,02,20),(int)113);
HXLINE( 131)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_82",e9,84,02,20),(int)114);
HXLINE( 132)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_83",ea,84,02,20),(int)115);
HXLINE( 133)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_84",eb,84,02,20),(int)116);
HXLINE( 134)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_85",ec,84,02,20),(int)117);
HXLINE( 135)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_86",ed,84,02,20),(int)118);
HXLINE( 136)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_87",ee,84,02,20),(int)119);
HXLINE( 137)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_88",ef,84,02,20),(int)120);
HXLINE( 138)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_89",f0,84,02,20),(int)121);
HXLINE( 139)		::haxegon::Input_obj::_nativeCorrection->set(HX_("0_90",c6,85,02,20),(int)122);
HXLINE( 141)		::haxegon::Input_obj::_nativeCorrection->set(HX_("48_224",f9,a0,f0,47),(int)48);
HXLINE( 142)		::haxegon::Input_obj::_nativeCorrection->set(HX_("49_38",5f,96,cb,16),(int)49);
HXLINE( 143)		::haxegon::Input_obj::_nativeCorrection->set(HX_("50_233",2e,5a,17,13),(int)50);
HXLINE( 144)		::haxegon::Input_obj::_nativeCorrection->set(HX_("51_34",e4,75,e8,a4),(int)51);
HXLINE( 145)		::haxegon::Input_obj::_nativeCorrection->set(HX_("52_222",50,82,e4,39),(int)52);
HXLINE( 146)		::haxegon::Input_obj::_nativeCorrection->set(HX_("53_40",fd,e3,3a,a6),(int)53);
HXLINE( 147)		::haxegon::Input_obj::_nativeCorrection->set(HX_("54_189",52,ee,b0,60),(int)54);
HXLINE( 148)		::haxegon::Input_obj::_nativeCorrection->set(HX_("55_232",b2,40,18,f4),(int)55);
HXLINE( 149)		::haxegon::Input_obj::_nativeCorrection->set(HX_("56_95",3a,8c,36,a8),(int)56);
HXLINE( 150)		::haxegon::Input_obj::_nativeCorrection->set(HX_("57_231",b3,69,e5,1a),(int)57);
HXLINE( 152)		::haxegon::Input_obj::_nativeCorrection->set(HX_("48_64",59,62,22,16),(int)96);
HXLINE( 153)		::haxegon::Input_obj::_nativeCorrection->set(HX_("49_65",f9,98,cb,16),(int)97);
HXLINE( 154)		::haxegon::Input_obj::_nativeCorrection->set(HX_("50_66",e4,41,3f,a4),(int)98);
HXLINE( 155)		::haxegon::Input_obj::_nativeCorrection->set(HX_("51_67",84,78,e8,a4),(int)99);
HXLINE( 156)		::haxegon::Input_obj::_nativeCorrection->set(HX_("52_68",24,af,91,a5),(int)100);
HXLINE( 157)		::haxegon::Input_obj::_nativeCorrection->set(HX_("53_69",c4,e5,3a,a6),(int)101);
HXLINE( 158)		::haxegon::Input_obj::_nativeCorrection->set(HX_("54_70",39,1d,e4,a6),(int)102);
HXLINE( 159)		::haxegon::Input_obj::_nativeCorrection->set(HX_("55_71",d9,53,8d,a7),(int)103);
HXLINE( 160)		::haxegon::Input_obj::_nativeCorrection->set(HX_("56_72",79,8a,36,a8),(int)104);
HXLINE( 161)		::haxegon::Input_obj::_nativeCorrection->set(HX_("57_73",19,c1,df,a8),(int)105);
HXLINE( 163)		::haxegon::Input_obj::_nativeCorrection->set(HX_("43_75",1e,52,d4,12),(int)107);
HXLINE( 164)		::haxegon::Input_obj::_nativeCorrection->set(HX_("45_77",5e,bf,26,14),(int)109);
HXLINE( 165)		::haxegon::Input_obj::_nativeCorrection->set(HX_("47_79",9e,2c,79,15),(int)111);
HXLINE( 166)		::haxegon::Input_obj::_nativeCorrection->set(HX_("46_78",fe,f5,cf,14),(int)110);
HXLINE( 167)		::haxegon::Input_obj::_nativeCorrection->set(HX_("42_74",7e,1b,2b,12),(int)106);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,init,(void))

void Input_obj::unload( ::openfl::display::DisplayObject stage){
            	HX_STACK_FRAME("haxegon.Input","unload",0x29c20551,"haxegon.Input.unload","haxegon/Input.hx",171,0x74261763)
            	HX_STACK_ARG(stage,"stage")
HXLINE( 172)		stage->removeEventListener(HX_("keyDown",a1,69,47,9c),::haxegon::Input_obj::handlekeydown_dyn(),null());
HXLINE( 173)		stage->removeEventListener(HX_("keyUp",da,b9,fe,de),::haxegon::Input_obj::handlekeyup_dyn(),null());
HXLINE( 174)		stage->removeEventListener(HX_("textInput",1d,54,0b,57),::haxegon::Input_obj::handletextinput_dyn(),null());
HXLINE( 175)		stage->removeEventListener(HX_("deactivate",34,5c,01,3c),::haxegon::Input_obj::handledeactivate_dyn(),null());
HXLINE( 178)		stage->removeEventListener(HX_("cut",82,85,4b,00),::haxegon::Input_obj::handlecut_dyn(),null());
HXLINE( 179)		stage->removeEventListener(HX_("copy",b5,bb,c4,41),::haxegon::Input_obj::handlecopy_dyn(),null());
HXLINE( 180)		stage->removeEventListener(HX_("paste",53,53,56,bd),::haxegon::Input_obj::handlepaste_dyn(),null());
HXLINE( 181)		stage->removeEventListener(HX_("selectAll",85,9b,fc,8d),::haxegon::Input_obj::handleselectall_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,unload,(void))

void Input_obj::update(){
            	HX_STACK_FRAME("haxegon.Input","update",0x4b3aea5b,"haxegon.Input.update","haxegon/Input.hx",185,0x74261763)
HXLINE( 186)		Bool _hx_tmp = (::haxegon::Input_obj::lastcharcode == (int)-1);
HXDLIN( 186)		if (_hx_tmp) {
HXLINE( 187)			::haxegon::Input_obj::lastcharcode = ::haxegon::Input_obj::charcode;
            		}
            		else {
HXLINE( 189)			Bool _hx_tmp1 = (::haxegon::Input_obj::charcode == ::haxegon::Input_obj::lastcharcode);
HXDLIN( 189)			if (_hx_tmp1) {
HXLINE( 190)				::haxegon::Input_obj::lastcharcode = (int)-1;
HXLINE( 191)				::haxegon::Input_obj::charcode = (int)-1;
            			}
            			else {
HXLINE( 193)				::haxegon::Input_obj::lastcharcode = ::haxegon::Input_obj::charcode;
            			}
            		}
HXLINE( 199)		Bool _hx_tmp2 = ::haxegon::Input_obj::paste;
HXDLIN( 199)		if (_hx_tmp2) {
HXLINE( 200)			::haxegon::Input_obj::paste = false;
HXLINE( 201)			::haxegon::Input_obj::handlepaste(null());
            		}
HXLINE( 205)		{
HXLINE( 205)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 205)			HX_VARI( Int,_g) = ::haxegon::Input_obj::numletters;
HXDLIN( 205)			while((_g1 < _g)){
HXLINE( 205)				HX_VARI( Int,i) = _g1++;
HXLINE( 206)				Bool _hx_tmp3 = ::haxegon::Input_obj::lookup->exists(i);
HXDLIN( 206)				if (_hx_tmp3) {
HXLINE( 207)					Bool _hx_tmp4;
HXDLIN( 207)					if (hx::IsEq( ::haxegon::Input_obj::last->__get(i).StaticCast< ::hx::EnumBase >(),::haxegon::Keystate_obj::just_released_dyn() )) {
HXLINE( 207)						_hx_tmp4 = hx::IsEq( ::haxegon::Input_obj::current->__get(i).StaticCast< ::hx::EnumBase >(),::haxegon::Keystate_obj::just_released_dyn() );
            					}
            					else {
HXLINE( 207)						_hx_tmp4 = false;
            					}
HXDLIN( 207)					if (_hx_tmp4) {
HXLINE( 207)						::haxegon::Input_obj::current[i] = ::haxegon::Keystate_obj::notpressed_dyn();
            					}
            					else {
HXLINE( 208)						Bool _hx_tmp5;
HXDLIN( 208)						if (hx::IsEq( ::haxegon::Input_obj::last->__get(i).StaticCast< ::hx::EnumBase >(),::haxegon::Keystate_obj::just_pressed_dyn() )) {
HXLINE( 208)							_hx_tmp5 = hx::IsEq( ::haxegon::Input_obj::current->__get(i).StaticCast< ::hx::EnumBase >(),::haxegon::Keystate_obj::just_pressed_dyn() );
            						}
            						else {
HXLINE( 208)							_hx_tmp5 = false;
            						}
HXDLIN( 208)						if (_hx_tmp5) {
HXLINE( 208)							::haxegon::Input_obj::current[i] = ::haxegon::Keystate_obj::pressed_dyn();
            						}
            					}
HXLINE( 209)					::hx::EnumBase _hx_tmp6 = ::haxegon::Input_obj::current->__get(i).StaticCast< ::hx::EnumBase >();
HXDLIN( 209)					::haxegon::Input_obj::last[i] = _hx_tmp6;
HXLINE( 211)					Bool _hx_tmp7;
HXDLIN( 211)					if (hx::IsNotEq( ::haxegon::Input_obj::current->__get(i).StaticCast< ::hx::EnumBase >(),::haxegon::Keystate_obj::just_pressed_dyn() )) {
HXLINE( 211)						_hx_tmp7 = hx::IsEq( ::haxegon::Input_obj::current->__get(i).StaticCast< ::hx::EnumBase >(),::haxegon::Keystate_obj::pressed_dyn() );
            					}
            					else {
HXLINE( 211)						_hx_tmp7 = true;
            					}
HXDLIN( 211)					if (_hx_tmp7) {
HXLINE( 212)						++::haxegon::Input_obj::keyheld[i];
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,update,(void))

void Input_obj::reset(){
            	HX_STACK_FRAME("haxegon.Input","reset",0x10fd55bd,"haxegon.Input.reset","haxegon/Input.hx",219,0x74261763)
HXLINE( 219)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 219)		HX_VARI( Int,_g) = ::haxegon::Input_obj::numletters;
HXDLIN( 219)		while((_g1 < _g)){
HXLINE( 219)			HX_VARI( Int,i) = _g1++;
HXLINE( 220)			Bool _hx_tmp = ::haxegon::Input_obj::lookup->exists(i);
HXDLIN( 220)			if (_hx_tmp) {
HXLINE( 221)				::haxegon::Input_obj::current[i] = ::haxegon::Keystate_obj::notpressed_dyn();
HXLINE( 222)				::haxegon::Input_obj::last[i] = ::haxegon::Keystate_obj::notpressed_dyn();
HXLINE( 223)				::haxegon::Input_obj::keyheld[i] = (int)-1;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,reset,(void))

Bool Input_obj::iskeycodeheld(::hx::EnumBase k){
            	HX_STACK_FRAME("haxegon.Input","iskeycodeheld",0x8510a145,"haxegon.Input.iskeycodeheld","haxegon/Input.hx",228,0x74261763)
            	HX_STACK_ARG(k,"k")
HXLINE( 229)		Bool _hx_tmp;
HXDLIN( 229)		if (hx::IsNotEq( k,::haxegon::Keystate_obj::just_pressed_dyn() )) {
HXLINE( 229)			_hx_tmp = hx::IsEq( k,::haxegon::Keystate_obj::pressed_dyn() );
            		}
            		else {
HXLINE( 229)			_hx_tmp = true;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 230)			return true;
            		}
HXLINE( 232)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,iskeycodeheld,return )

::Array< ::String > Input_obj::clipboardbuffer;

Bool Input_obj::selectall;

Bool Input_obj::cut;

Bool Input_obj::paste;

Bool Input_obj::undo;

Bool Input_obj::redo;

void Input_obj::handlecut( ::openfl::events::Event event){
            	HX_STACK_FRAME("haxegon.Input","handlecut",0x04e255c8,"haxegon.Input.handlecut","haxegon/Input.hx",243,0x74261763)
            	HX_STACK_ARG(event,"event")
HXLINE( 244)		::haxegon::Input_obj::handlecopy(event);
HXLINE( 245)		::haxegon::Input_obj::cut = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,handlecut,(void))

void Input_obj::handlecopy( ::openfl::events::Event event){
            	HX_STACK_FRAME("haxegon.Input","handlecopy",0x412428af,"haxegon.Input.handlecopy","haxegon/Input.hx",248,0x74261763)
            	HX_STACK_ARG(event,"event")
HXLINE( 249)		::haxegon::Input_obj::current[( (Int)(::haxegon::Input_obj::keymap->get(::haxegon::Key_obj::CONTROL_dyn())) )] = ::haxegon::Keystate_obj::notpressed_dyn();
HXLINE( 250)		::haxegon::Input_obj::keyheld[( (Int)(::haxegon::Input_obj::keymap->get(::haxegon::Key_obj::CONTROL_dyn())) )] = (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,handlecopy,(void))

void Input_obj::handlepaste( ::openfl::events::Event event){
            	HX_STACK_FRAME("haxegon.Input","handlepaste",0x31764119,"haxegon.Input.handlepaste","haxegon/Input.hx",258,0x74261763)
            	HX_STACK_ARG(event,"event")
HXLINE( 259)		::haxegon::Input_obj::current[( (Int)(::haxegon::Input_obj::keymap->get(::haxegon::Key_obj::CONTROL_dyn())) )] = ::haxegon::Keystate_obj::notpressed_dyn();
HXLINE( 260)		::haxegon::Input_obj::keyheld[( (Int)(::haxegon::Input_obj::keymap->get(::haxegon::Key_obj::CONTROL_dyn())) )] = (int)-1;
HXLINE( 263)		Bool _hx_tmp = ::openfl::desktop::Clipboard_obj::get_generalClipboard()->hasFormat((int)2);
HXDLIN( 263)		if (_hx_tmp) {
HXLINE( 264)			 ::Dynamic this1 = ::openfl::desktop::Clipboard_obj::get_generalClipboard()->getData((int)2,null());
HXDLIN( 264)			HX_VARI( ::String,t) = ::Std_obj::string(this1);
HXLINE( 265)			::haxegon::Input_obj::clipboardbuffer = t.split(HX_("\n",0a,00,00,00));
HXLINE( 266)			{
HXLINE( 266)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 266)				HX_VARI( Int,_g) = ::haxegon::Input_obj::clipboardbuffer->length;
HXDLIN( 266)				while((_g1 < _g)){
HXLINE( 266)					HX_VARI( Int,i) = _g1++;
HXLINE( 267)					::String _hx_tmp1 = ::haxegon::Input_obj::clipboardbuffer->__get(i);
HXDLIN( 267)					::String _hx_tmp2 = ::haxegon::S_obj::replacechar(_hx_tmp1,HX_("\t",09,00,00,00),HX_("  ",00,1c,00,00));
HXDLIN( 267)					::haxegon::Input_obj::clipboardbuffer[i] = _hx_tmp2;
HXLINE( 268)					::String _hx_tmp3 = ::haxegon::Input_obj::clipboardbuffer->__get(i);
HXDLIN( 268)					::String _hx_tmp4 = ::haxegon::S_obj::replacechar(_hx_tmp3,HX_("\r",0d,00,00,00),HX_("",00,00,00,00));
HXDLIN( 268)					::haxegon::Input_obj::clipboardbuffer[i] = _hx_tmp4;
            				}
            			}
HXLINE( 270)			{
HXLINE( 270)				HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 270)				HX_VARI_NAME( ::Array< ::String >,_g11,"_g1") = ::haxegon::Input_obj::clipboardbuffer;
HXDLIN( 270)				while((_g2 < _g11->length)){
HXLINE( 270)					HX_VARI( ::String,line) = _g11->__get(_g2);
HXDLIN( 270)					++_g2;
HXLINE( 271)					hx::AddEq(::haxegon::Input_obj::keybuffer,line);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,handlepaste,(void))

void Input_obj::handleselectall( ::openfl::events::Event event){
            	HX_STACK_FRAME("haxegon.Input","handleselectall",0xf6862c6b,"haxegon.Input.handleselectall","haxegon/Input.hx",278,0x74261763)
            	HX_STACK_ARG(event,"event")
HXLINE( 278)		::haxegon::Input_obj::selectall = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,handleselectall,(void))

void Input_obj::handlekeydown( ::openfl::events::KeyboardEvent event){
            	HX_STACK_FRAME("haxegon.Input","handlekeydown",0x5fb9a8c7,"haxegon.Input.handlekeydown","haxegon/Input.hx",281,0x74261763)
            	HX_STACK_ARG(event,"event")
HXLINE( 311)		::haxegon::Input_obj::gamestage->set_focus(::haxegon::Input_obj::gamestage);
HXLINE( 312)		::haxegon::Input_obj::charcode = event->charCode;
HXLINE( 313)		::haxegon::Input_obj::keycode = event->keyCode;
HXLINE( 317)		::String key = ((event->charCode + HX_("_",5f,00,00,00)) + event->keyCode);
HXDLIN( 317)		HX_VARI(  ::Dynamic,corrected) = ::haxegon::Input_obj::_nativeCorrection->get(key);
HXLINE( 318)		Bool _hx_tmp = hx::IsNotNull( corrected );
HXDLIN( 318)		if (_hx_tmp) {
HXLINE( 319)			::haxegon::Input_obj::keycode = corrected;
            		}
HXLINE( 324)		::hx::EnumBase _hx_tmp1 = ::haxegon::Input_obj::current->__get(( (Int)(::haxegon::Input_obj::keymap->get(::haxegon::Key_obj::CONTROL_dyn())) )).StaticCast< ::hx::EnumBase >();
HXDLIN( 324)		if (::haxegon::Input_obj::iskeycodeheld(_hx_tmp1)) {
HXLINE( 325)			Bool _hx_tmp2 = (::haxegon::Input_obj::keycode == (int)90);
HXDLIN( 325)			if (_hx_tmp2) {
HXLINE( 326)				::haxegon::Input_obj::undo = true;
HXLINE( 327)				return;
            			}
            			else {
HXLINE( 328)				Bool _hx_tmp3 = (::haxegon::Input_obj::keycode == (int)89);
HXDLIN( 328)				if (_hx_tmp3) {
HXLINE( 329)					::haxegon::Input_obj::redo = true;
HXLINE( 330)					return;
            				}
            				else {
HXLINE( 334)					Bool _hx_tmp4 = (::haxegon::Input_obj::keycode == (int)86);
HXDLIN( 334)					if (_hx_tmp4) {
HXLINE( 335)						::haxegon::Input_obj::paste = true;
HXLINE( 336)						return;
            					}
            				}
            			}
            		}
HXLINE( 341)		Bool _hx_tmp5;
HXDLIN( 341)		Int key1 = ::haxegon::Input_obj::keycode;
HXDLIN( 341)		Bool _hx_tmp6 = ::haxegon::Input_obj::lookup->exists(key1);
HXDLIN( 341)		if (_hx_tmp6) {
HXLINE( 341)			_hx_tmp5 = hx::IsNotEq( ::haxegon::Input_obj::current->__get(::haxegon::Input_obj::keycode).StaticCast< ::hx::EnumBase >(),::haxegon::Keystate_obj::force_release_dyn() );
            		}
            		else {
HXLINE( 341)			_hx_tmp5 = false;
            		}
HXDLIN( 341)		if (_hx_tmp5) {
HXLINE( 342)			Bool _hx_tmp7 = ::haxegon::Input_obj::iskeycodeheld(::haxegon::Input_obj::current->__get(::haxegon::Input_obj::keycode).StaticCast< ::hx::EnumBase >());
HXDLIN( 342)			if (_hx_tmp7) {
HXLINE( 343)				::haxegon::Input_obj::current[::haxegon::Input_obj::keycode] = ::haxegon::Keystate_obj::pressed_dyn();
            			}
            			else {
HXLINE( 345)				::haxegon::Input_obj::current[::haxegon::Input_obj::keycode] = ::haxegon::Keystate_obj::just_pressed_dyn();
HXLINE( 346)				::haxegon::Input_obj::keyheld[::haxegon::Input_obj::keycode] = (int)0;
            			}
            		}
HXLINE( 350)		Bool _hx_tmp8 = (::haxegon::Input_obj::keycode == (int)8);
HXDLIN( 350)		if (_hx_tmp8) {
HXLINE( 352)			Bool _hx_tmp9 = (::haxegon::Input_obj::keybuffer.length > (int)0);
HXDLIN( 352)			if (_hx_tmp9) {
HXLINE( 353)				Int _hx_tmp10 = (::haxegon::Input_obj::keybuffer.length - (int)1);
HXDLIN( 353)				::haxegon::Input_obj::keybuffer = ::haxegon::Input_obj::keybuffer.substr((int)0,_hx_tmp10);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,handlekeydown,(void))

void Input_obj::handletextinput( ::openfl::events::TextEvent event){
            	HX_STACK_FRAME("haxegon.Input","handletextinput",0x2c4f2d03,"haxegon.Input.handletextinput","haxegon/Input.hx",363,0x74261763)
            	HX_STACK_ARG(event,"event")
HXLINE( 363)		Bool _hx_tmp;
HXDLIN( 363)		Bool _hx_tmp1;
HXDLIN( 363)		Bool _hx_tmp2 = (event->text.length == (int)1);
HXDLIN( 363)		if (_hx_tmp2) {
HXLINE( 363)			 ::Dynamic _hx_tmp3 = event->text.charCodeAt((int)0);
HXDLIN( 363)			_hx_tmp1 = hx::IsGreaterEq( _hx_tmp3,(int)32 );
            		}
            		else {
HXLINE( 363)			_hx_tmp1 = false;
            		}
HXDLIN( 363)		if (_hx_tmp1) {
HXLINE( 363)			 ::Dynamic _hx_tmp4 = event->text.charCodeAt((int)0);
HXDLIN( 363)			_hx_tmp = hx::IsLessEq( _hx_tmp4,(int)126 );
            		}
            		else {
HXLINE( 363)			_hx_tmp = false;
            		}
HXDLIN( 363)		if (_hx_tmp) {
HXLINE( 364)			Bool _hx_tmp5 = (::haxegon::Input_obj::keybuffer.length < ::haxegon::Text_obj::inputmaxlength);
HXDLIN( 364)			if (_hx_tmp5) {
HXLINE( 365)				hx::AddEq(::haxegon::Input_obj::keybuffer,event->text);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,handletextinput,(void))

void Input_obj::handledeactivate( ::openfl::events::Event e){
            	HX_STACK_FRAME("haxegon.Input","handledeactivate",0x36afc0ae,"haxegon.Input.handledeactivate","haxegon/Input.hx",374,0x74261763)
            	HX_STACK_ARG(e,"e")
HXLINE( 374)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 374)		HX_VARI( Int,_g) = ::haxegon::Input_obj::numletters;
HXDLIN( 374)		while((_g1 < _g)){
HXLINE( 374)			HX_VARI( Int,keycode) = _g1++;
HXLINE( 375)			::haxegon::Input_obj::current[keycode] = ::haxegon::Keystate_obj::notpressed_dyn();
HXLINE( 376)			::haxegon::Input_obj::keyheld[keycode] = (int)-1;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,handledeactivate,(void))

::String Input_obj::getchar(){
            	HX_STACK_FRAME("haxegon.Input","getchar",0x13eb45da,"haxegon.Input.getchar","haxegon/Input.hx",380,0x74261763)
HXLINE( 381)		if ((::haxegon::Input_obj::lastcharcode == (int)-1)) {
HXLINE( 381)			return HX_("",00,00,00,00);
            		}
HXLINE( 382)		return ::String::fromCharCode(::haxegon::Input_obj::lastcharcode);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,getchar,return )

void Input_obj::handlekeyup( ::openfl::events::KeyboardEvent event){
            	HX_STACK_FRAME("haxegon.Input","handlekeyup",0x531ec380,"haxegon.Input.handlekeyup","haxegon/Input.hx",385,0x74261763)
            	HX_STACK_ARG(event,"event")
HXLINE( 386)		::haxegon::Input_obj::keycode = event->keyCode;
HXLINE( 390)		::String key = ((event->charCode + HX_("_",5f,00,00,00)) + event->keyCode);
HXDLIN( 390)		HX_VARI(  ::Dynamic,corrected) = ::haxegon::Input_obj::_nativeCorrection->get(key);
HXLINE( 391)		Bool _hx_tmp = hx::IsNotNull( corrected );
HXDLIN( 391)		if (_hx_tmp) {
HXLINE( 392)			::haxegon::Input_obj::keycode = corrected;
            		}
HXLINE( 396)		Int key1 = ::haxegon::Input_obj::keycode;
HXDLIN( 396)		Bool _hx_tmp1 = ::haxegon::Input_obj::lookup->exists(key1);
HXDLIN( 396)		if (_hx_tmp1) {
HXLINE( 397)			Bool _hx_tmp2 = ::haxegon::Input_obj::iskeycodeheld(::haxegon::Input_obj::current->__get(::haxegon::Input_obj::keycode).StaticCast< ::hx::EnumBase >());
HXDLIN( 397)			if (_hx_tmp2) {
HXLINE( 398)				::haxegon::Input_obj::current[::haxegon::Input_obj::keycode] = ::haxegon::Keystate_obj::just_released_dyn();
            			}
            			else {
HXLINE( 400)				::haxegon::Input_obj::current[::haxegon::Input_obj::keycode] = ::haxegon::Keystate_obj::notpressed_dyn();
            			}
HXLINE( 402)			::haxegon::Input_obj::keyheld[::haxegon::Input_obj::keycode] = (int)-1;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,handlekeyup,(void))

void Input_obj::addkey(::hx::EnumBase KeyName,Int KeyCode){
            	HX_STACK_FRAME("haxegon.Input","addkey",0x63504670,"haxegon.Input.addkey","haxegon/Input.hx",406,0x74261763)
            	HX_STACK_ARG(KeyName,"KeyName")
            	HX_STACK_ARG(KeyCode,"KeyCode")
HXLINE( 407)		::haxegon::Input_obj::keymap->set(KeyName,KeyCode);
HXLINE( 408)		::haxegon::Input_obj::lookup->set(KeyCode,KeyName);
HXLINE( 409)		::haxegon::Input_obj::current[KeyCode] = ::haxegon::Keystate_obj::notpressed_dyn();
HXLINE( 410)		::haxegon::Input_obj::last[KeyCode] = ::haxegon::Keystate_obj::notpressed_dyn();
HXLINE( 411)		::haxegon::Input_obj::keyheld[KeyCode] = (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Input_obj,addkey,(void))

void Input_obj::resetKeys(){
            	HX_STACK_FRAME("haxegon.Input","resetKeys",0xe7678651,"haxegon.Input.resetKeys","haxegon/Input.hx",414,0x74261763)
HXLINE( 415)		::haxegon::Input_obj::keymap =  ::haxe::ds::EnumValueMap_obj::__new();
HXLINE( 416)		::haxegon::Input_obj::lookup =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 417)		::haxegon::Input_obj::current = ::Array_obj< ::Dynamic>::__new();
HXLINE( 418)		::haxegon::Input_obj::last = ::Array_obj< ::Dynamic>::__new();
HXLINE( 419)		::haxegon::Input_obj::keyheld = ::Array_obj< Int >::__new();
HXLINE( 421)		::haxegon::Input_obj::lastcharcode = (int)-1;
HXLINE( 425)		{
HXLINE( 425)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 425)			HX_VARI( Int,_g) = ::haxegon::Input_obj::numletters;
HXDLIN( 425)			while((_g1 < _g)){
HXLINE( 425)				++_g1;
HXLINE( 426)				::haxegon::Input_obj::current->push(::haxegon::Keystate_obj::notpressed_dyn());
HXLINE( 427)				::haxegon::Input_obj::last->push(::haxegon::Keystate_obj::notpressed_dyn());
HXLINE( 428)				::haxegon::Input_obj::keyheld->push((int)-1);
            			}
            		}
HXLINE( 432)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::A_dyn(),(int)65);
HXLINE( 433)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::B_dyn(),(int)66);
HXLINE( 434)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::C_dyn(),(int)67);
HXLINE( 435)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::D_dyn(),(int)68);
HXLINE( 436)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::E_dyn(),(int)69);
HXLINE( 437)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F_dyn(),(int)70);
HXLINE( 438)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::G_dyn(),(int)71);
HXLINE( 439)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::H_dyn(),(int)72);
HXLINE( 440)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::I_dyn(),(int)73);
HXLINE( 441)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::J_dyn(),(int)74);
HXLINE( 442)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::K_dyn(),(int)75);
HXLINE( 443)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::L_dyn(),(int)76);
HXLINE( 444)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::M_dyn(),(int)77);
HXLINE( 445)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::N_dyn(),(int)78);
HXLINE( 446)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::O_dyn(),(int)79);
HXLINE( 447)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::P_dyn(),(int)80);
HXLINE( 448)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::Q_dyn(),(int)81);
HXLINE( 449)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::R_dyn(),(int)82);
HXLINE( 450)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::S_dyn(),(int)83);
HXLINE( 451)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::T_dyn(),(int)84);
HXLINE( 452)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::U_dyn(),(int)85);
HXLINE( 453)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::V_dyn(),(int)86);
HXLINE( 454)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::W_dyn(),(int)87);
HXLINE( 455)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::X_dyn(),(int)88);
HXLINE( 456)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::Y_dyn(),(int)89);
HXLINE( 457)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::Z_dyn(),(int)90);
HXLINE( 460)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::ZERO_dyn(),(int)48);
HXLINE( 461)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::ONE_dyn(),(int)49);
HXLINE( 462)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::TWO_dyn(),(int)50);
HXLINE( 463)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::THREE_dyn(),(int)51);
HXLINE( 464)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::FOUR_dyn(),(int)52);
HXLINE( 465)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::FIVE_dyn(),(int)53);
HXLINE( 466)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::SIX_dyn(),(int)54);
HXLINE( 467)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::SEVEN_dyn(),(int)55);
HXLINE( 468)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::EIGHT_dyn(),(int)56);
HXLINE( 469)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::NINE_dyn(),(int)57);
HXLINE( 472)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F1_dyn(),(int)112);
HXLINE( 473)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F2_dyn(),(int)113);
HXLINE( 474)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F3_dyn(),(int)114);
HXLINE( 475)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F4_dyn(),(int)115);
HXLINE( 476)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F5_dyn(),(int)116);
HXLINE( 477)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F6_dyn(),(int)117);
HXLINE( 478)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F7_dyn(),(int)118);
HXLINE( 479)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F8_dyn(),(int)119);
HXLINE( 480)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F9_dyn(),(int)120);
HXLINE( 481)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F10_dyn(),(int)121);
HXLINE( 482)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F11_dyn(),(int)122);
HXLINE( 483)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::F12_dyn(),(int)123);
HXLINE( 486)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::ESCAPE_dyn(),(int)27);
HXLINE( 487)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::MINUS_dyn(),(int)189);
HXLINE( 488)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::PLUS_dyn(),(int)187);
HXLINE( 489)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::DELETE_dyn(),(int)46);
HXLINE( 490)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::BACKSPACE_dyn(),(int)8);
HXLINE( 491)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::LBRACKET_dyn(),(int)219);
HXLINE( 492)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::RBRACKET_dyn(),(int)221);
HXLINE( 493)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::BACKSLASH_dyn(),(int)220);
HXLINE( 494)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::CAPSLOCK_dyn(),(int)20);
HXLINE( 495)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::SEMICOLON_dyn(),(int)186);
HXLINE( 496)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::QUOTE_dyn(),(int)222);
HXLINE( 497)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::ENTER_dyn(),(int)13);
HXLINE( 498)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::SHIFT_dyn(),(int)16);
HXLINE( 499)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::COMMA_dyn(),(int)188);
HXLINE( 500)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::PERIOD_dyn(),(int)190);
HXLINE( 501)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::SLASH_dyn(),(int)191);
HXLINE( 502)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::CONTROL_dyn(),(int)17);
HXLINE( 503)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::ALT_dyn(),(int)18);
HXLINE( 504)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::SPACE_dyn(),(int)32);
HXLINE( 505)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::UP_dyn(),(int)38);
HXLINE( 506)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::DOWN_dyn(),(int)40);
HXLINE( 507)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::LEFT_dyn(),(int)37);
HXLINE( 508)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::RIGHT_dyn(),(int)39);
HXLINE( 509)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::TAB_dyn(),(int)9);
HXLINE( 510)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::HOME_dyn(),(int)36);
HXLINE( 511)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::END_dyn(),(int)35);
HXLINE( 512)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::PAGEUP_dyn(),(int)33);
HXLINE( 513)		::haxegon::Input_obj::addkey(::haxegon::Key_obj::PAGEDOWN_dyn(),(int)34);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,resetKeys,(void))

::String Input_obj::keyname(::hx::EnumBase k){
            	HX_STACK_FRAME("haxegon.Input","keyname",0xa2821ad8,"haxegon.Input.keyname","haxegon/Input.hx",516,0x74261763)
            	HX_STACK_ARG(k,"k")
HXLINE( 517)		Int _hx_tmp = ( ( ::hx::EnumBase)(k) )->_hx_getIndex();
HXDLIN( 517)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 518)				return HX_("A",41,00,00,00);
            			}
            			break;
            			case (int)1: {
HXLINE( 519)				return HX_("B",42,00,00,00);
            			}
            			break;
            			case (int)2: {
HXLINE( 520)				return HX_("C",43,00,00,00);
            			}
            			break;
            			case (int)3: {
HXLINE( 521)				return HX_("D",44,00,00,00);
            			}
            			break;
            			case (int)4: {
HXLINE( 522)				return HX_("E",45,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE( 523)				return HX_("F",46,00,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE( 524)				return HX_("G",47,00,00,00);
            			}
            			break;
            			case (int)7: {
HXLINE( 525)				return HX_("H",48,00,00,00);
            			}
            			break;
            			case (int)8: {
HXLINE( 526)				return HX_("I",49,00,00,00);
            			}
            			break;
            			case (int)9: {
HXLINE( 527)				return HX_("J",4a,00,00,00);
            			}
            			break;
            			case (int)10: {
HXLINE( 528)				return HX_("K",4b,00,00,00);
            			}
            			break;
            			case (int)11: {
HXLINE( 529)				return HX_("L",4c,00,00,00);
            			}
            			break;
            			case (int)12: {
HXLINE( 530)				return HX_("M",4d,00,00,00);
            			}
            			break;
            			case (int)13: {
HXLINE( 531)				return HX_("N",4e,00,00,00);
            			}
            			break;
            			case (int)14: {
HXLINE( 532)				return HX_("O",4f,00,00,00);
            			}
            			break;
            			case (int)15: {
HXLINE( 533)				return HX_("P",50,00,00,00);
            			}
            			break;
            			case (int)16: {
HXLINE( 534)				return HX_("Q",51,00,00,00);
            			}
            			break;
            			case (int)17: {
HXLINE( 535)				return HX_("R",52,00,00,00);
            			}
            			break;
            			case (int)18: {
HXLINE( 536)				return HX_("S",53,00,00,00);
            			}
            			break;
            			case (int)19: {
HXLINE( 537)				return HX_("T",54,00,00,00);
            			}
            			break;
            			case (int)20: {
HXLINE( 538)				return HX_("U",55,00,00,00);
            			}
            			break;
            			case (int)21: {
HXLINE( 539)				return HX_("V",56,00,00,00);
            			}
            			break;
            			case (int)22: {
HXLINE( 540)				return HX_("W",57,00,00,00);
            			}
            			break;
            			case (int)23: {
HXLINE( 541)				return HX_("X",58,00,00,00);
            			}
            			break;
            			case (int)24: {
HXLINE( 542)				return HX_("Y",59,00,00,00);
            			}
            			break;
            			case (int)25: {
HXLINE( 543)				return HX_("Z",5a,00,00,00);
            			}
            			break;
            			case (int)26: {
HXLINE( 544)				return HX_("0",30,00,00,00);
            			}
            			break;
            			case (int)27: {
HXLINE( 545)				return HX_("1",31,00,00,00);
            			}
            			break;
            			case (int)28: {
HXLINE( 546)				return HX_("2",32,00,00,00);
            			}
            			break;
            			case (int)29: {
HXLINE( 547)				return HX_("3",33,00,00,00);
            			}
            			break;
            			case (int)30: {
HXLINE( 548)				return HX_("4",34,00,00,00);
            			}
            			break;
            			case (int)31: {
HXLINE( 549)				return HX_("5",35,00,00,00);
            			}
            			break;
            			case (int)32: {
HXLINE( 550)				return HX_("6",36,00,00,00);
            			}
            			break;
            			case (int)33: {
HXLINE( 551)				return HX_("7",37,00,00,00);
            			}
            			break;
            			case (int)34: {
HXLINE( 552)				return HX_("8",38,00,00,00);
            			}
            			break;
            			case (int)35: {
HXLINE( 553)				return HX_("9",39,00,00,00);
            			}
            			break;
            			case (int)36: {
HXLINE( 554)				return HX_("F1",2b,3d,00,00);
            			}
            			break;
            			case (int)37: {
HXLINE( 555)				return HX_("F2",2c,3d,00,00);
            			}
            			break;
            			case (int)38: {
HXLINE( 556)				return HX_("F3",2d,3d,00,00);
            			}
            			break;
            			case (int)39: {
HXLINE( 557)				return HX_("F4",2e,3d,00,00);
            			}
            			break;
            			case (int)40: {
HXLINE( 558)				return HX_("F5",2f,3d,00,00);
            			}
            			break;
            			case (int)41: {
HXLINE( 559)				return HX_("F6",30,3d,00,00);
            			}
            			break;
            			case (int)42: {
HXLINE( 560)				return HX_("F7",31,3d,00,00);
            			}
            			break;
            			case (int)43: {
HXLINE( 561)				return HX_("F8",32,3d,00,00);
            			}
            			break;
            			case (int)44: {
HXLINE( 562)				return HX_("F9",33,3d,00,00);
            			}
            			break;
            			case (int)45: {
HXLINE( 563)				return HX_("F10",a5,48,35,00);
            			}
            			break;
            			case (int)46: {
HXLINE( 564)				return HX_("F11",a6,48,35,00);
            			}
            			break;
            			case (int)47: {
HXLINE( 565)				return HX_("F12",a7,48,35,00);
            			}
            			break;
            			case (int)48: {
HXLINE( 566)				return HX_("Esc",15,c0,34,00);
            			}
            			break;
            			case (int)49: {
HXLINE( 567)				return HX_("-",2d,00,00,00);
            			}
            			break;
            			case (int)50: {
HXLINE( 568)				return HX_("+",2b,00,00,00);
            			}
            			break;
            			case (int)51: {
HXLINE( 569)				return HX_("Del",ab,f1,33,00);
            			}
            			break;
            			case (int)52: {
HXLINE( 570)				return HX_("Backspace",1f,65,bd,6c);
            			}
            			break;
            			case (int)53: {
HXLINE( 571)				return HX_("[",5b,00,00,00);
            			}
            			break;
            			case (int)54: {
HXLINE( 572)				return HX_("]",5d,00,00,00);
            			}
            			break;
            			case (int)55: {
HXLINE( 573)				return HX_("\\",5c,00,00,00);
            			}
            			break;
            			case (int)56: {
HXLINE( 574)				return HX_("Caps Lock",4a,84,1d,ad);
            			}
            			break;
            			case (int)57: {
HXLINE( 575)				return HX_(";",3b,00,00,00);
            			}
            			break;
            			case (int)58: {
HXLINE( 576)				return HX_("'",27,00,00,00);
            			}
            			break;
            			case (int)59: {
HXLINE( 577)				return HX_("Enter",f8,dc,b3,03);
            			}
            			break;
            			case (int)60: {
HXLINE( 578)				return HX_("Shift",62,5c,50,0f);
            			}
            			break;
            			case (int)61: {
HXLINE( 579)				return HX_(",",2c,00,00,00);
            			}
            			break;
            			case (int)62: {
HXLINE( 580)				return HX_(".",2e,00,00,00);
            			}
            			break;
            			case (int)63: {
HXLINE( 581)				return HX_("/",2f,00,00,00);
            			}
            			break;
            			case (int)64: {
HXLINE( 582)				return HX_("Ctrl",cb,b4,a1,2c);
            			}
            			break;
            			case (int)65: {
HXLINE( 583)				return HX_("Alt",09,b1,31,00);
            			}
            			break;
            			case (int)66: {
HXLINE( 584)				return HX_("Space",a6,fc,93,14);
            			}
            			break;
            			case (int)67: {
HXLINE( 585)				return HX_("Up",7b,4a,00,00);
            			}
            			break;
            			case (int)68: {
HXLINE( 586)				return HX_("Down",82,24,47,2d);
            			}
            			break;
            			case (int)69: {
HXLINE( 587)				return HX_("Left",27,34,89,32);
            			}
            			break;
            			case (int)70: {
HXLINE( 588)				return HX_("Right",bc,7b,91,7c);
            			}
            			break;
            			case (int)71: {
HXLINE( 589)				return HX_("Tab",35,12,40,00);
            			}
            			break;
            			case (int)72: {
HXLINE( 590)				return HX_("Home",3f,f6,eb,2f);
            			}
            			break;
            			case (int)73: {
HXLINE( 591)				return HX_("End",bb,bb,34,00);
            			}
            			break;
            			case (int)74: {
HXLINE( 592)				return HX_("Page Up",8c,fb,73,58);
            			}
            			break;
            			case (int)75: {
HXLINE( 593)				return HX_("Page Down",d3,fb,d5,4e);
            			}
            			break;
            		}
HXLINE( 517)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keyname,return )

 ::haxe::ds::EnumValueMap Input_obj::keymap;

 ::haxe::ds::IntMap Input_obj::lookup;

::Array< ::Dynamic> Input_obj::current;

::Array< ::Dynamic> Input_obj::last;

::Array< Int > Input_obj::keyheld;

 ::haxe::ds::StringMap Input_obj::_nativeCorrection;

Int Input_obj::numletters;

Int Input_obj::keycode;

Int Input_obj::charcode;

Int Input_obj::lastcharcode;

::String Input_obj::keybuffer;

 ::openfl::display::Stage Input_obj::gamestage;


Input_obj::Input_obj()
{
}

bool Input_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"cut") ) { outValue = cut; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"undo") ) { outValue = undo; return true; }
		if (HX_FIELD_EQ(inName,"redo") ) { outValue = redo; return true; }
		if (HX_FIELD_EQ(inName,"last") ) { outValue = last; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"paste") ) { outValue = paste; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"unload") ) { outValue = unload_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addkey") ) { outValue = addkey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keymap") ) { outValue = keymap; return true; }
		if (HX_FIELD_EQ(inName,"lookup") ) { outValue = lookup; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { outValue = pressed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getchar") ) { outValue = getchar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyname") ) { outValue = keyname_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"current") ) { outValue = current; return true; }
		if (HX_FIELD_EQ(inName,"keyheld") ) { outValue = keyheld; return true; }
		if (HX_FIELD_EQ(inName,"keycode") ) { outValue = keycode; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charcode") ) { outValue = charcode; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"selectall") ) { outValue = selectall; return true; }
		if (HX_FIELD_EQ(inName,"handlecut") ) { outValue = handlecut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetKeys") ) { outValue = resetKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keybuffer") ) { outValue = keybuffer; return true; }
		if (HX_FIELD_EQ(inName,"gamestage") ) { outValue = gamestage; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"handlecopy") ) { outValue = handlecopy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numletters") ) { outValue = numletters; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"handlepaste") ) { outValue = handlepaste_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"handlekeyup") ) { outValue = handlekeyup_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"just_pressed") ) { outValue = just_pressed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lastcharcode") ) { outValue = lastcharcode; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"just_released") ) { outValue = just_released_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"force_release") ) { outValue = force_release_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pressheldtime") ) { outValue = pressheldtime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"delay_pressed") ) { outValue = delay_pressed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iskeycodeheld") ) { outValue = iskeycodeheld_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"handlekeydown") ) { outValue = handlekeydown_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"clipboardbuffer") ) { outValue = clipboardbuffer; return true; }
		if (HX_FIELD_EQ(inName,"handleselectall") ) { outValue = handleselectall_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"handletextinput") ) { outValue = handletextinput_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"handledeactivate") ) { outValue = handledeactivate_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_nativeCorrection") ) { outValue = _nativeCorrection; return true; }
	}
	return false;
}

bool Input_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"cut") ) { cut=ioValue.Cast< Bool >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"undo") ) { undo=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"redo") ) { redo=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"last") ) { last=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"paste") ) { paste=ioValue.Cast< Bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"keymap") ) { keymap=ioValue.Cast<  ::haxe::ds::EnumValueMap >(); return true; }
		if (HX_FIELD_EQ(inName,"lookup") ) { lookup=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"keyheld") ) { keyheld=ioValue.Cast< ::Array< Int > >(); return true; }
		if (HX_FIELD_EQ(inName,"keycode") ) { keycode=ioValue.Cast< Int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charcode") ) { charcode=ioValue.Cast< Int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"selectall") ) { selectall=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"keybuffer") ) { keybuffer=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"gamestage") ) { gamestage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numletters") ) { numletters=ioValue.Cast< Int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastcharcode") ) { lastcharcode=ioValue.Cast< Int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"clipboardbuffer") ) { clipboardbuffer=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_nativeCorrection") ) { _nativeCorrection=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Input_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Input_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Input_obj::clipboardbuffer,HX_HCSTRING("clipboardbuffer","\x56","\x27","\x77","\x48")},
	{hx::fsBool,(void *) &Input_obj::selectall,HX_HCSTRING("selectall","\xa5","\xe3","\x14","\x8e")},
	{hx::fsBool,(void *) &Input_obj::cut,HX_HCSTRING("cut","\x82","\x85","\x4b","\x00")},
	{hx::fsBool,(void *) &Input_obj::paste,HX_HCSTRING("paste","\x53","\x53","\x56","\xbd")},
	{hx::fsBool,(void *) &Input_obj::undo,HX_HCSTRING("undo","\x24","\xc6","\xa9","\x4d")},
	{hx::fsBool,(void *) &Input_obj::redo,HX_HCSTRING("redo","\xfe","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::haxe::ds::EnumValueMap*/ ,(void *) &Input_obj::keymap,HX_HCSTRING("keymap","\x5d","\x0e","\xf6","\x3f")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Input_obj::lookup,HX_HCSTRING("lookup","\x7a","\xa2","\xb5","\x61")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Input_obj::current,HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Input_obj::last,HX_HCSTRING("last","\x56","\x0a","\xad","\x47")},
	{hx::fsObject /*Array< int >*/ ,(void *) &Input_obj::keyheld,HX_HCSTRING("keyheld","\xd4","\x77","\x0b","\xb4")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Input_obj::_nativeCorrection,HX_HCSTRING("_nativeCorrection","\x74","\x82","\xe1","\x11")},
	{hx::fsInt,(void *) &Input_obj::numletters,HX_HCSTRING("numletters","\x47","\xb3","\x5d","\x67")},
	{hx::fsInt,(void *) &Input_obj::keycode,HX_HCSTRING("keycode","\x4c","\xf6","\xc4","\xb0")},
	{hx::fsInt,(void *) &Input_obj::charcode,HX_HCSTRING("charcode","\x03","\x33","\x4b","\xb1")},
	{hx::fsInt,(void *) &Input_obj::lastcharcode,HX_HCSTRING("lastcharcode","\x59","\x83","\x2b","\x39")},
	{hx::fsString,(void *) &Input_obj::keybuffer,HX_HCSTRING("keybuffer","\xdf","\xc7","\x07","\x34")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &Input_obj::gamestage,HX_HCSTRING("gamestage","\x8c","\xe9","\xf8","\x25")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Input_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Input_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Input_obj::clipboardbuffer,"clipboardbuffer");
	HX_MARK_MEMBER_NAME(Input_obj::selectall,"selectall");
	HX_MARK_MEMBER_NAME(Input_obj::cut,"cut");
	HX_MARK_MEMBER_NAME(Input_obj::paste,"paste");
	HX_MARK_MEMBER_NAME(Input_obj::undo,"undo");
	HX_MARK_MEMBER_NAME(Input_obj::redo,"redo");
	HX_MARK_MEMBER_NAME(Input_obj::keymap,"keymap");
	HX_MARK_MEMBER_NAME(Input_obj::lookup,"lookup");
	HX_MARK_MEMBER_NAME(Input_obj::current,"current");
	HX_MARK_MEMBER_NAME(Input_obj::last,"last");
	HX_MARK_MEMBER_NAME(Input_obj::keyheld,"keyheld");
	HX_MARK_MEMBER_NAME(Input_obj::_nativeCorrection,"_nativeCorrection");
	HX_MARK_MEMBER_NAME(Input_obj::numletters,"numletters");
	HX_MARK_MEMBER_NAME(Input_obj::keycode,"keycode");
	HX_MARK_MEMBER_NAME(Input_obj::charcode,"charcode");
	HX_MARK_MEMBER_NAME(Input_obj::lastcharcode,"lastcharcode");
	HX_MARK_MEMBER_NAME(Input_obj::keybuffer,"keybuffer");
	HX_MARK_MEMBER_NAME(Input_obj::gamestage,"gamestage");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Input_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Input_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Input_obj::clipboardbuffer,"clipboardbuffer");
	HX_VISIT_MEMBER_NAME(Input_obj::selectall,"selectall");
	HX_VISIT_MEMBER_NAME(Input_obj::cut,"cut");
	HX_VISIT_MEMBER_NAME(Input_obj::paste,"paste");
	HX_VISIT_MEMBER_NAME(Input_obj::undo,"undo");
	HX_VISIT_MEMBER_NAME(Input_obj::redo,"redo");
	HX_VISIT_MEMBER_NAME(Input_obj::keymap,"keymap");
	HX_VISIT_MEMBER_NAME(Input_obj::lookup,"lookup");
	HX_VISIT_MEMBER_NAME(Input_obj::current,"current");
	HX_VISIT_MEMBER_NAME(Input_obj::last,"last");
	HX_VISIT_MEMBER_NAME(Input_obj::keyheld,"keyheld");
	HX_VISIT_MEMBER_NAME(Input_obj::_nativeCorrection,"_nativeCorrection");
	HX_VISIT_MEMBER_NAME(Input_obj::numletters,"numletters");
	HX_VISIT_MEMBER_NAME(Input_obj::keycode,"keycode");
	HX_VISIT_MEMBER_NAME(Input_obj::charcode,"charcode");
	HX_VISIT_MEMBER_NAME(Input_obj::lastcharcode,"lastcharcode");
	HX_VISIT_MEMBER_NAME(Input_obj::keybuffer,"keybuffer");
	HX_VISIT_MEMBER_NAME(Input_obj::gamestage,"gamestage");
};

#endif

hx::Class Input_obj::__mClass;

static ::String Input_obj_sStaticFields[] = {
	HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"),
	HX_HCSTRING("just_pressed","\x4f","\x02","\x61","\x89"),
	HX_HCSTRING("just_released","\x70","\x10","\x57","\xb2"),
	HX_HCSTRING("force_release","\x33","\xf4","\x6e","\xd8"),
	HX_HCSTRING("pressheldtime","\xc5","\x0b","\x2c","\x7b"),
	HX_HCSTRING("delay_pressed","\xa6","\xbe","\x7d","\x91"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("iskeycodeheld","\x57","\xf7","\xe8","\x21"),
	HX_HCSTRING("clipboardbuffer","\x56","\x27","\x77","\x48"),
	HX_HCSTRING("selectall","\xa5","\xe3","\x14","\x8e"),
	HX_HCSTRING("cut","\x82","\x85","\x4b","\x00"),
	HX_HCSTRING("paste","\x53","\x53","\x56","\xbd"),
	HX_HCSTRING("undo","\x24","\xc6","\xa9","\x4d"),
	HX_HCSTRING("redo","\xfe","\x4d","\xa7","\x4b"),
	HX_HCSTRING("handlecut","\xda","\xba","\x6d","\xaa"),
	HX_HCSTRING("handlecopy","\x5d","\x33","\x91","\x75"),
	HX_HCSTRING("handlepaste","\xab","\x8e","\x72","\xdc"),
	HX_HCSTRING("handleselectall","\xfd","\xaa","\xad","\xba"),
	HX_HCSTRING("handlekeydown","\xd9","\xfe","\x91","\xfc"),
	HX_HCSTRING("handletextinput","\x95","\xab","\x76","\xf0"),
	HX_HCSTRING("handledeactivate","\xdc","\x01","\x17","\x15"),
	HX_HCSTRING("getchar","\x6c","\xe2","\x68","\x29"),
	HX_HCSTRING("handlekeyup","\x12","\x11","\x1b","\xfe"),
	HX_HCSTRING("addkey","\x1e","\xe2","\x1a","\x9f"),
	HX_HCSTRING("resetKeys","\x63","\xeb","\xf2","\x8c"),
	HX_HCSTRING("keyname","\x6a","\xb7","\xff","\xb7"),
	HX_HCSTRING("keymap","\x5d","\x0e","\xf6","\x3f"),
	HX_HCSTRING("lookup","\x7a","\xa2","\xb5","\x61"),
	HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"),
	HX_HCSTRING("last","\x56","\x0a","\xad","\x47"),
	HX_HCSTRING("keyheld","\xd4","\x77","\x0b","\xb4"),
	HX_HCSTRING("_nativeCorrection","\x74","\x82","\xe1","\x11"),
	HX_HCSTRING("numletters","\x47","\xb3","\x5d","\x67"),
	HX_HCSTRING("keycode","\x4c","\xf6","\xc4","\xb0"),
	HX_HCSTRING("charcode","\x03","\x33","\x4b","\xb1"),
	HX_HCSTRING("lastcharcode","\x59","\x83","\x2b","\x39"),
	HX_HCSTRING("keybuffer","\xdf","\xc7","\x07","\x34"),
	HX_HCSTRING("gamestage","\x8c","\xe9","\xf8","\x25"),
	::String(null())
};

void Input_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Input","\xdc","\xa5","\x4e","\xc5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Input_obj::__GetStatic;
	__mClass->mSetStaticField = &Input_obj::__SetStatic;
	__mClass->mMarkFunc = Input_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Input_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Input_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Input_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Input_obj::__boot()
{
{
            	HX_STACK_FRAME("haxegon.Input","boot",0xd688d004,"haxegon.Input.boot","haxegon/Input.hx",236,0x74261763)
HXLINE( 236)		clipboardbuffer = ::Array_obj< ::String >::fromData( _hx_array_data_7,1);
            	}
{
            	HX_STACK_FRAME("haxegon.Input","boot",0xd688d004,"haxegon.Input.boot","haxegon/Input.hx",598,0x74261763)
HXLINE( 598)		keymap =  ::haxe::ds::EnumValueMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Input","boot",0xd688d004,"haxegon.Input.boot","haxegon/Input.hx",599,0x74261763)
HXLINE( 599)		lookup =  ::haxe::ds::IntMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Input","boot",0xd688d004,"haxegon.Input.boot","haxegon/Input.hx",600,0x74261763)
HXLINE( 600)		current = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Input","boot",0xd688d004,"haxegon.Input.boot","haxegon/Input.hx",601,0x74261763)
HXLINE( 601)		last = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Input","boot",0xd688d004,"haxegon.Input.boot","haxegon/Input.hx",602,0x74261763)
HXLINE( 602)		keyheld = ::Array_obj< Int >::__new();
            	}
{
            	HX_STACK_FRAME("haxegon.Input","boot",0xd688d004,"haxegon.Input.boot","haxegon/Input.hx",613,0x74261763)
HXLINE( 613)		numletters = (int)256;
            	}
{
            	HX_STACK_FRAME("haxegon.Input","boot",0xd688d004,"haxegon.Input.boot","haxegon/Input.hx",618,0x74261763)
HXLINE( 618)		keybuffer = HX_("",00,00,00,00);
            	}
}

} // end namespace haxegon
