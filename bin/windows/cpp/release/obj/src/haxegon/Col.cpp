// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxegon_Col
#include <haxegon/Col.h>
#endif

static const Float _hx_array_data_1[] = {
	0.0,0.0,0.0,
};
namespace haxegon{

void Col_obj::__construct() { }

Dynamic Col_obj::__CreateEmpty() { return new Col_obj; }

hx::ObjectPtr< Col_obj > Col_obj::__new()
{
	hx::ObjectPtr< Col_obj > _hx_result = new Col_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Col_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Col_obj > _hx_result = new Col_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Col_obj::BLACK;

Int Col_obj::GREY;

Int Col_obj::GRAY;

Int Col_obj::WHITE;

Int Col_obj::RED;

Int Col_obj::PINK;

Int Col_obj::DARKBROWN;

Int Col_obj::BROWN;

Int Col_obj::ORANGE;

Int Col_obj::YELLOW;

Int Col_obj::DARKGREEN;

Int Col_obj::GREEN;

Int Col_obj::LIGHTGREEN;

Int Col_obj::NIGHTBLUE;

Int Col_obj::DARKBLUE;

Int Col_obj::BLUE;

Int Col_obj::LIGHTBLUE;

Int Col_obj::MAGENTA;

::Array< Int > Col_obj::ALL;

Int Col_obj::TRANSPARENT;

Int Col_obj::rgb(Int r,Int g,Int b){
            	HX_STACK_FRAME("haxegon.Col","rgb",0xa2f9c631,"haxegon.Col.rgb","haxegon/Col.hx",31,0x337f972d)
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(b,"b")
HXLINE(  31)		return ((int)((int)((int)r << (int)(int)16) | (int)((int)g << (int)(int)8)) | (int)b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Col_obj,rgb,return )

::Array< Float > Col_obj::hslval;

Int Col_obj::hsl(Float hue,Float saturation,Float lightness){
            	HX_STACK_FRAME("haxegon.Col","hsl",0xa2f23a25,"haxegon.Col.hsl","haxegon/Col.hx",35,0x337f972d)
            	HX_STACK_ARG(hue,"hue")
            	HX_STACK_ARG(saturation,"saturation")
            	HX_STACK_ARG(lightness,"lightness")
HXLINE(  36)		HX_VAR( Float,q);
HXDLIN(  36)		if ((lightness < ((Float)0.5))) {
HXLINE(  36)			q = (lightness * ((int)1 + saturation));
            		}
            		else {
HXLINE(  36)			q = ((lightness + saturation) - (lightness * saturation));
            		}
HXLINE(  42)		HX_VARI( Float,p) = (((int)2 * lightness) - q);
HXLINE(  44)		HX_VARI( Float,hk) = ((Float)hx::Mod(hue,(int)360) / (Float)(int)360);
HXLINE(  46)		::haxegon::Col_obj::hslval[(int)0] = (hk + ((Float)0.33333333333333331));
HXLINE(  47)		::haxegon::Col_obj::hslval[(int)1] = hk;
HXLINE(  48)		::haxegon::Col_obj::hslval[(int)2] = (hk - ((Float)0.33333333333333331));
HXLINE(  49)		{
HXLINE(  49)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  49)			while((_g < (int)3)){
HXLINE(  49)				HX_VARI( Int,n) = _g++;
HXLINE(  50)				Bool _hx_tmp = (::haxegon::Col_obj::hslval->__get(n) < (int)0);
HXDLIN(  50)				if (_hx_tmp) {
HXLINE(  50)					hx::AddEq(::haxegon::Col_obj::hslval[n],(int)1);
            				}
HXLINE(  51)				Bool _hx_tmp1 = (::haxegon::Col_obj::hslval->__get(n) > (int)1);
HXDLIN(  51)				if (_hx_tmp1) {
HXLINE(  51)					hx::SubEq(::haxegon::Col_obj::hslval[n],(int)1);
            				}
HXLINE(  52)				Float _hx_tmp2;
HXDLIN(  52)				if ((::haxegon::Col_obj::hslval->__get(n) < ((Float)0.16666666666666666))) {
HXLINE(  52)					_hx_tmp2 = (p + (((q - p) * (int)6) * ::haxegon::Col_obj::hslval->__get(n)));
            				}
            				else {
HXLINE(  54)					if ((::haxegon::Col_obj::hslval->__get(n) < ((Float)0.5))) {
HXLINE(  52)						_hx_tmp2 = q;
            					}
            					else {
HXLINE(  56)						if ((::haxegon::Col_obj::hslval->__get(n) < ((Float)0.66666666666666663))) {
HXLINE(  52)							_hx_tmp2 = (p + (((q - p) * (int)6) * (((Float)0.66666666666666663) - ::haxegon::Col_obj::hslval->__get(n))));
            						}
            						else {
HXLINE(  52)							_hx_tmp2 = p;
            						}
            					}
            				}
HXDLIN(  52)				::haxegon::Col_obj::hslval[n] = _hx_tmp2;
            			}
            		}
HXLINE(  63)		Float _hx_tmp3 = (::haxegon::Col_obj::hslval->__get((int)0) * (int)255);
HXDLIN(  63)		Int _hx_tmp4 = ::Std_obj::_hx_int(_hx_tmp3);
HXDLIN(  63)		Float _hx_tmp5 = (::haxegon::Col_obj::hslval->__get((int)1) * (int)255);
HXDLIN(  63)		Int _hx_tmp6 = ::Std_obj::_hx_int(_hx_tmp5);
HXDLIN(  63)		Float _hx_tmp7 = (::haxegon::Col_obj::hslval->__get((int)2) * (int)255);
HXDLIN(  63)		Int _hx_tmp8 = ::Std_obj::_hx_int(_hx_tmp7);
HXDLIN(  63)		return ::haxegon::Col_obj::rgb(_hx_tmp4,_hx_tmp6,_hx_tmp8);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Col_obj,hsl,return )


Col_obj::Col_obj()
{
}

bool Col_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"RED") ) { outValue = RED; return true; }
		if (HX_FIELD_EQ(inName,"ALL") ) { outValue = ALL; return true; }
		if (HX_FIELD_EQ(inName,"rgb") ) { outValue = rgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hsl") ) { outValue = hsl_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"GREY") ) { outValue = GREY; return true; }
		if (HX_FIELD_EQ(inName,"GRAY") ) { outValue = GRAY; return true; }
		if (HX_FIELD_EQ(inName,"PINK") ) { outValue = PINK; return true; }
		if (HX_FIELD_EQ(inName,"BLUE") ) { outValue = BLUE; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"BLACK") ) { outValue = BLACK; return true; }
		if (HX_FIELD_EQ(inName,"WHITE") ) { outValue = WHITE; return true; }
		if (HX_FIELD_EQ(inName,"BROWN") ) { outValue = BROWN; return true; }
		if (HX_FIELD_EQ(inName,"GREEN") ) { outValue = GREEN; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ORANGE") ) { outValue = ORANGE; return true; }
		if (HX_FIELD_EQ(inName,"YELLOW") ) { outValue = YELLOW; return true; }
		if (HX_FIELD_EQ(inName,"hslval") ) { outValue = hslval; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"MAGENTA") ) { outValue = MAGENTA; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"DARKBLUE") ) { outValue = DARKBLUE; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"DARKBROWN") ) { outValue = DARKBROWN; return true; }
		if (HX_FIELD_EQ(inName,"DARKGREEN") ) { outValue = DARKGREEN; return true; }
		if (HX_FIELD_EQ(inName,"NIGHTBLUE") ) { outValue = NIGHTBLUE; return true; }
		if (HX_FIELD_EQ(inName,"LIGHTBLUE") ) { outValue = LIGHTBLUE; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"LIGHTGREEN") ) { outValue = LIGHTGREEN; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TRANSPARENT") ) { outValue = TRANSPARENT; return true; }
	}
	return false;
}

bool Col_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"RED") ) { RED=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"ALL") ) { ALL=ioValue.Cast< ::Array< Int > >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"GREY") ) { GREY=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"GRAY") ) { GRAY=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"PINK") ) { PINK=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"BLUE") ) { BLUE=ioValue.Cast< Int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"BLACK") ) { BLACK=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"WHITE") ) { WHITE=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"BROWN") ) { BROWN=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"GREEN") ) { GREEN=ioValue.Cast< Int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ORANGE") ) { ORANGE=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"YELLOW") ) { YELLOW=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"hslval") ) { hslval=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"MAGENTA") ) { MAGENTA=ioValue.Cast< Int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"DARKBLUE") ) { DARKBLUE=ioValue.Cast< Int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"DARKBROWN") ) { DARKBROWN=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"DARKGREEN") ) { DARKGREEN=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"NIGHTBLUE") ) { NIGHTBLUE=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"LIGHTBLUE") ) { LIGHTBLUE=ioValue.Cast< Int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"LIGHTGREEN") ) { LIGHTGREEN=ioValue.Cast< Int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TRANSPARENT") ) { TRANSPARENT=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Col_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Col_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Col_obj::BLACK,HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32")},
	{hx::fsInt,(void *) &Col_obj::GREY,HX_HCSTRING("GREY","\x5f","\x9b","\x2c","\x2f")},
	{hx::fsInt,(void *) &Col_obj::GRAY,HX_HCSTRING("GRAY","\xe3","\x97","\x2c","\x2f")},
	{hx::fsInt,(void *) &Col_obj::WHITE,HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47")},
	{hx::fsInt,(void *) &Col_obj::RED,HX_HCSTRING("RED","\x31","\x75","\x3e","\x00")},
	{hx::fsInt,(void *) &Col_obj::PINK,HX_HCSTRING("PINK","\x76","\xba","\x18","\x35")},
	{hx::fsInt,(void *) &Col_obj::DARKBROWN,HX_HCSTRING("DARKBROWN","\x20","\xfe","\x74","\x13")},
	{hx::fsInt,(void *) &Col_obj::BROWN,HX_HCSTRING("BROWN","\x56","\x06","\xe2","\x36")},
	{hx::fsInt,(void *) &Col_obj::ORANGE,HX_HCSTRING("ORANGE","\xee","\x5e","\x3f","\xf8")},
	{hx::fsInt,(void *) &Col_obj::YELLOW,HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82")},
	{hx::fsInt,(void *) &Col_obj::DARKGREEN,HX_HCSTRING("DARKGREEN","\x6d","\x3e","\x6e","\xf4")},
	{hx::fsInt,(void *) &Col_obj::GREEN,HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17")},
	{hx::fsInt,(void *) &Col_obj::LIGHTGREEN,HX_HCSTRING("LIGHTGREEN","\x2d","\x2a","\xcf","\x79")},
	{hx::fsInt,(void *) &Col_obj::NIGHTBLUE,HX_HCSTRING("NIGHTBLUE","\x52","\x38","\x99","\x70")},
	{hx::fsInt,(void *) &Col_obj::DARKBLUE,HX_HCSTRING("DARKBLUE","\x10","\x9a","\x84","\xe4")},
	{hx::fsInt,(void *) &Col_obj::BLUE,HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b")},
	{hx::fsInt,(void *) &Col_obj::LIGHTBLUE,HX_HCSTRING("LIGHTBLUE","\x50","\x66","\xb6","\xca")},
	{hx::fsInt,(void *) &Col_obj::MAGENTA,HX_HCSTRING("MAGENTA","\x09","\x8e","\x71","\x8e")},
	{hx::fsObject /*Array< int >*/ ,(void *) &Col_obj::ALL,HX_HCSTRING("ALL","\x01","\x95","\x31","\x00")},
	{hx::fsInt,(void *) &Col_obj::TRANSPARENT,HX_HCSTRING("TRANSPARENT","\x32","\x37","\xf6","\xf8")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &Col_obj::hslval,HX_HCSTRING("hslval","\x80","\x26","\xef","\x13")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Col_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Col_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Col_obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(Col_obj::GREY,"GREY");
	HX_MARK_MEMBER_NAME(Col_obj::GRAY,"GRAY");
	HX_MARK_MEMBER_NAME(Col_obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(Col_obj::RED,"RED");
	HX_MARK_MEMBER_NAME(Col_obj::PINK,"PINK");
	HX_MARK_MEMBER_NAME(Col_obj::DARKBROWN,"DARKBROWN");
	HX_MARK_MEMBER_NAME(Col_obj::BROWN,"BROWN");
	HX_MARK_MEMBER_NAME(Col_obj::ORANGE,"ORANGE");
	HX_MARK_MEMBER_NAME(Col_obj::YELLOW,"YELLOW");
	HX_MARK_MEMBER_NAME(Col_obj::DARKGREEN,"DARKGREEN");
	HX_MARK_MEMBER_NAME(Col_obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(Col_obj::LIGHTGREEN,"LIGHTGREEN");
	HX_MARK_MEMBER_NAME(Col_obj::NIGHTBLUE,"NIGHTBLUE");
	HX_MARK_MEMBER_NAME(Col_obj::DARKBLUE,"DARKBLUE");
	HX_MARK_MEMBER_NAME(Col_obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(Col_obj::LIGHTBLUE,"LIGHTBLUE");
	HX_MARK_MEMBER_NAME(Col_obj::MAGENTA,"MAGENTA");
	HX_MARK_MEMBER_NAME(Col_obj::ALL,"ALL");
	HX_MARK_MEMBER_NAME(Col_obj::TRANSPARENT,"TRANSPARENT");
	HX_MARK_MEMBER_NAME(Col_obj::hslval,"hslval");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Col_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Col_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Col_obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(Col_obj::GREY,"GREY");
	HX_VISIT_MEMBER_NAME(Col_obj::GRAY,"GRAY");
	HX_VISIT_MEMBER_NAME(Col_obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(Col_obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(Col_obj::PINK,"PINK");
	HX_VISIT_MEMBER_NAME(Col_obj::DARKBROWN,"DARKBROWN");
	HX_VISIT_MEMBER_NAME(Col_obj::BROWN,"BROWN");
	HX_VISIT_MEMBER_NAME(Col_obj::ORANGE,"ORANGE");
	HX_VISIT_MEMBER_NAME(Col_obj::YELLOW,"YELLOW");
	HX_VISIT_MEMBER_NAME(Col_obj::DARKGREEN,"DARKGREEN");
	HX_VISIT_MEMBER_NAME(Col_obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(Col_obj::LIGHTGREEN,"LIGHTGREEN");
	HX_VISIT_MEMBER_NAME(Col_obj::NIGHTBLUE,"NIGHTBLUE");
	HX_VISIT_MEMBER_NAME(Col_obj::DARKBLUE,"DARKBLUE");
	HX_VISIT_MEMBER_NAME(Col_obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(Col_obj::LIGHTBLUE,"LIGHTBLUE");
	HX_VISIT_MEMBER_NAME(Col_obj::MAGENTA,"MAGENTA");
	HX_VISIT_MEMBER_NAME(Col_obj::ALL,"ALL");
	HX_VISIT_MEMBER_NAME(Col_obj::TRANSPARENT,"TRANSPARENT");
	HX_VISIT_MEMBER_NAME(Col_obj::hslval,"hslval");
};

#endif

hx::Class Col_obj::__mClass;

static ::String Col_obj_sStaticFields[] = {
	HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32"),
	HX_HCSTRING("GREY","\x5f","\x9b","\x2c","\x2f"),
	HX_HCSTRING("GRAY","\xe3","\x97","\x2c","\x2f"),
	HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47"),
	HX_HCSTRING("RED","\x31","\x75","\x3e","\x00"),
	HX_HCSTRING("PINK","\x76","\xba","\x18","\x35"),
	HX_HCSTRING("DARKBROWN","\x20","\xfe","\x74","\x13"),
	HX_HCSTRING("BROWN","\x56","\x06","\xe2","\x36"),
	HX_HCSTRING("ORANGE","\xee","\x5e","\x3f","\xf8"),
	HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82"),
	HX_HCSTRING("DARKGREEN","\x6d","\x3e","\x6e","\xf4"),
	HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17"),
	HX_HCSTRING("LIGHTGREEN","\x2d","\x2a","\xcf","\x79"),
	HX_HCSTRING("NIGHTBLUE","\x52","\x38","\x99","\x70"),
	HX_HCSTRING("DARKBLUE","\x10","\x9a","\x84","\xe4"),
	HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b"),
	HX_HCSTRING("LIGHTBLUE","\x50","\x66","\xb6","\xca"),
	HX_HCSTRING("MAGENTA","\x09","\x8e","\x71","\x8e"),
	HX_HCSTRING("ALL","\x01","\x95","\x31","\x00"),
	HX_HCSTRING("TRANSPARENT","\x32","\x37","\xf6","\xf8"),
	HX_HCSTRING("rgb","\x0d","\xdb","\x56","\x00"),
	HX_HCSTRING("hslval","\x80","\x26","\xef","\x13"),
	HX_HCSTRING("hsl","\x01","\x4f","\x4f","\x00"),
	::String(null())
};

void Col_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Col","\x92","\xe9","\x11","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Col_obj::__GetStatic;
	__mClass->mSetStaticField = &Col_obj::__SetStatic;
	__mClass->mMarkFunc = Col_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Col_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Col_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Col_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Col_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Col_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Col_obj::__boot()
{
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",6,0x337f972d)
HXLINE(   6)		BLACK = (int)0;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",7,0x337f972d)
HXLINE(   7)		GREY = (int)10329501;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",8,0x337f972d)
HXLINE(   8)		GRAY = (int)10329501;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",9,0x337f972d)
HXLINE(   9)		WHITE = (int)16777215;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",10,0x337f972d)
HXLINE(  10)		RED = (int)12461619;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",11,0x337f972d)
HXLINE(  11)		PINK = (int)14708619;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",12,0x337f972d)
HXLINE(  12)		DARKBROWN = (int)4799531;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",13,0x337f972d)
HXLINE(  13)		BROWN = (int)10773538;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",14,0x337f972d)
HXLINE(  14)		ORANGE = (int)15436081;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",15,0x337f972d)
HXLINE(  15)		YELLOW = (int)16245355;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",16,0x337f972d)
HXLINE(  16)		DARKGREEN = (int)3098702;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",17,0x337f972d)
HXLINE(  17)		GREEN = (int)4491546;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",18,0x337f972d)
HXLINE(  18)		LIGHTGREEN = (int)10735143;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",19,0x337f972d)
HXLINE(  19)		NIGHTBLUE = (int)1779250;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",20,0x337f972d)
HXLINE(  20)		DARKBLUE = (int)22404;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",21,0x337f972d)
HXLINE(  21)		BLUE = (int)3252978;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",22,0x337f972d)
HXLINE(  22)		LIGHTBLUE = (int)11721967;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",23,0x337f972d)
HXLINE(  23)		MAGENTA = (int)16711935;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",25,0x337f972d)
HXLINE(  25)		ALL = ::Array_obj< Int >::__new(17)->init(0,::haxegon::Col_obj::BLACK)->init(1,::haxegon::Col_obj::GRAY)->init(2,::haxegon::Col_obj::WHITE)->init(3,::haxegon::Col_obj::RED)->init(4,::haxegon::Col_obj::PINK)->init(5,::haxegon::Col_obj::DARKBROWN)->init(6,::haxegon::Col_obj::BROWN)->init(7,::haxegon::Col_obj::ORANGE)->init(8,::haxegon::Col_obj::YELLOW)->init(9,::haxegon::Col_obj::DARKGREEN)->init(10,::haxegon::Col_obj::GREEN)->init(11,::haxegon::Col_obj::LIGHTGREEN)->init(12,::haxegon::Col_obj::NIGHTBLUE)->init(13,::haxegon::Col_obj::DARKBLUE)->init(14,::haxegon::Col_obj::BLUE)->init(15,::haxegon::Col_obj::LIGHTBLUE)->init(16,::haxegon::Col_obj::MAGENTA);
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",28,0x337f972d)
HXLINE(  28)		TRANSPARENT = (int)1;
            	}
{
            	HX_STACK_FRAME("haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",34,0x337f972d)
HXLINE(  34)		hslval = ::Array_obj< Float >::fromData( _hx_array_data_1,3);
            	}
}

} // end namespace haxegon
