// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_util_AnimationContainer
#include <haxegon/util/AnimationContainer.h>
#endif

namespace haxegon{
namespace util{

void AnimationContainer_obj::__construct(::String _animationname,::String _tileset,Int _startframe,Int _endframe,Int _delayperframe){
            	HX_STACK_FRAME("haxegon.util.AnimationContainer","new",0x202fbf8d,"haxegon.util.AnimationContainer.new","haxegon/util/AnimationContainer.hx",5,0xa4fa3823)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_animationname,"_animationname")
            	HX_STACK_ARG(_tileset,"_tileset")
            	HX_STACK_ARG(_startframe,"_startframe")
            	HX_STACK_ARG(_endframe,"_endframe")
            	HX_STACK_ARG(_delayperframe,"_delayperframe")
HXLINE(   6)		this->name = _animationname;
HXLINE(   7)		this->tileset = _tileset;
HXLINE(   8)		this->tilesetnum = ::haxegon::Gfx_obj::tilesetindex->get(this->tileset);
HXLINE(   9)		this->startframe = _startframe;
HXLINE(  10)		this->endframe = _endframe;
HXLINE(  11)		this->delayperframe = _delayperframe;
HXLINE(  13)		this->reset();
            	}

Dynamic AnimationContainer_obj::__CreateEmpty() { return new AnimationContainer_obj; }

hx::ObjectPtr< AnimationContainer_obj > AnimationContainer_obj::__new(::String _animationname,::String _tileset,Int _startframe,Int _endframe,Int _delayperframe)
{
	hx::ObjectPtr< AnimationContainer_obj > _hx_result = new AnimationContainer_obj();
	_hx_result->__construct(_animationname,_tileset,_startframe,_endframe,_delayperframe);
	return _hx_result;
}

Dynamic AnimationContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AnimationContainer_obj > _hx_result = new AnimationContainer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

void AnimationContainer_obj::update(){
            	HX_STACK_FRAME("haxegon.util.AnimationContainer","update",0x99c790fc,"haxegon.util.AnimationContainer.update","haxegon/util/AnimationContainer.hx",16,0xa4fa3823)
            	HX_STACK_THIS(this)
HXLINE(  17)		this->timethisframe++;
HXLINE(  18)		Bool _hx_tmp = (this->timethisframe > this->delayperframe);
HXDLIN(  18)		if (_hx_tmp) {
HXLINE(  19)			this->timethisframe = (int)0;
HXLINE(  20)			this->currentframe++;
HXLINE(  21)			Bool _hx_tmp1 = (this->currentframe > this->endframe);
HXDLIN(  21)			if (_hx_tmp1) {
HXLINE(  22)				this->currentframe = this->startframe;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationContainer_obj,update,(void))

void AnimationContainer_obj::reset(){
            	HX_STACK_FRAME("haxegon.util.AnimationContainer","reset",0xa8e01e3c,"haxegon.util.AnimationContainer.reset","haxegon/util/AnimationContainer.hx",27,0xa4fa3823)
            	HX_STACK_THIS(this)
HXLINE(  28)		this->timethisframe = (int)0;
HXLINE(  29)		this->currentframe = this->startframe;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationContainer_obj,reset,(void))


AnimationContainer_obj::AnimationContainer_obj()
{
}

void AnimationContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnimationContainer);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(tileset,"tileset");
	HX_MARK_MEMBER_NAME(tilesetnum,"tilesetnum");
	HX_MARK_MEMBER_NAME(startframe,"startframe");
	HX_MARK_MEMBER_NAME(endframe,"endframe");
	HX_MARK_MEMBER_NAME(delayperframe,"delayperframe");
	HX_MARK_MEMBER_NAME(timethisframe,"timethisframe");
	HX_MARK_MEMBER_NAME(currentframe,"currentframe");
	HX_MARK_END_CLASS();
}

void AnimationContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(tileset,"tileset");
	HX_VISIT_MEMBER_NAME(tilesetnum,"tilesetnum");
	HX_VISIT_MEMBER_NAME(startframe,"startframe");
	HX_VISIT_MEMBER_NAME(endframe,"endframe");
	HX_VISIT_MEMBER_NAME(delayperframe,"delayperframe");
	HX_VISIT_MEMBER_NAME(timethisframe,"timethisframe");
	HX_VISIT_MEMBER_NAME(currentframe,"currentframe");
}

hx::Val AnimationContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tileset") ) { return hx::Val( tileset); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"endframe") ) { return hx::Val( endframe); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tilesetnum") ) { return hx::Val( tilesetnum); }
		if (HX_FIELD_EQ(inName,"startframe") ) { return hx::Val( startframe); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentframe") ) { return hx::Val( currentframe); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"delayperframe") ) { return hx::Val( delayperframe); }
		if (HX_FIELD_EQ(inName,"timethisframe") ) { return hx::Val( timethisframe); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AnimationContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tileset") ) { tileset=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"endframe") ) { endframe=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tilesetnum") ) { tilesetnum=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startframe") ) { startframe=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentframe") ) { currentframe=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"delayperframe") ) { delayperframe=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timethisframe") ) { timethisframe=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnimationContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("tileset","\x34","\x81","\x93","\x45"));
	outFields->push(HX_HCSTRING("tilesetnum","\x92","\x15","\x86","\x9f"));
	outFields->push(HX_HCSTRING("startframe","\x8b","\xe0","\x6c","\x8f"));
	outFields->push(HX_HCSTRING("endframe","\x72","\x9a","\x53","\x71"));
	outFields->push(HX_HCSTRING("delayperframe","\xb3","\xf4","\x1a","\x27"));
	outFields->push(HX_HCSTRING("timethisframe","\x62","\x67","\x8f","\x30"));
	outFields->push(HX_HCSTRING("currentframe","\x54","\xed","\x61","\xba"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AnimationContainer_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(AnimationContainer_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(AnimationContainer_obj,tileset),HX_HCSTRING("tileset","\x34","\x81","\x93","\x45")},
	{hx::fsInt,(int)offsetof(AnimationContainer_obj,tilesetnum),HX_HCSTRING("tilesetnum","\x92","\x15","\x86","\x9f")},
	{hx::fsInt,(int)offsetof(AnimationContainer_obj,startframe),HX_HCSTRING("startframe","\x8b","\xe0","\x6c","\x8f")},
	{hx::fsInt,(int)offsetof(AnimationContainer_obj,endframe),HX_HCSTRING("endframe","\x72","\x9a","\x53","\x71")},
	{hx::fsInt,(int)offsetof(AnimationContainer_obj,delayperframe),HX_HCSTRING("delayperframe","\xb3","\xf4","\x1a","\x27")},
	{hx::fsInt,(int)offsetof(AnimationContainer_obj,timethisframe),HX_HCSTRING("timethisframe","\x62","\x67","\x8f","\x30")},
	{hx::fsInt,(int)offsetof(AnimationContainer_obj,currentframe),HX_HCSTRING("currentframe","\x54","\xed","\x61","\xba")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AnimationContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String AnimationContainer_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("tileset","\x34","\x81","\x93","\x45"),
	HX_HCSTRING("tilesetnum","\x92","\x15","\x86","\x9f"),
	HX_HCSTRING("startframe","\x8b","\xe0","\x6c","\x8f"),
	HX_HCSTRING("endframe","\x72","\x9a","\x53","\x71"),
	HX_HCSTRING("delayperframe","\xb3","\xf4","\x1a","\x27"),
	HX_HCSTRING("timethisframe","\x62","\x67","\x8f","\x30"),
	HX_HCSTRING("currentframe","\x54","\xed","\x61","\xba"),
	::String(null()) };

static void AnimationContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AnimationContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AnimationContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AnimationContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class AnimationContainer_obj::__mClass;

void AnimationContainer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.util.AnimationContainer","\x1b","\xf5","\x03","\x8c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AnimationContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AnimationContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AnimationContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AnimationContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimationContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimationContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
} // end namespace util
