// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapFont
#include <haxegon/bitmapFont/BitmapFont.h>
#endif
#ifndef INCLUDED_haxegon_util_Fontfile
#include <haxegon/util/Fontfile.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif

namespace haxegon{
namespace util{

void Fontfile_obj::__construct(::String _file){
            	HX_STACK_FRAME("haxegon.util.Fontfile","new",0x115d5f3b,"haxegon.util.Fontfile.new","haxegon/util/Fontfile.hx",10,0x8c86e035)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_file,"_file")
HXLINE(  10)		Bool _hx_tmp = ::openfl::Assets_obj::exists(((((HX_("data/fonts/",70,04,fa,11) + _file) + HX_("/",2f,00,00,00)) + _file) + HX_(".fnt",be,96,b5,1e)),null());
HXDLIN(  10)		if (_hx_tmp) {
HXLINE(  11)			this->type = HX_("bitmap",ef,0f,0c,f1);
HXLINE(  12)			::String _hx_tmp1 = ::openfl::Assets_obj::getText(((((HX_("data/fonts/",70,04,fa,11) + _file) + HX_("/",2f,00,00,00)) + _file) + HX_(".fnt",be,96,b5,1e)));
HXDLIN(  12)			this->fontxml = ::Xml_obj::parse(_hx_tmp1);
HXLINE(  13)			HX_VARI(  ::openfl::display::BitmapData,tempfontimage) = ::openfl::Assets_obj::getBitmapData(((((HX_("data/fonts/",70,04,fa,11) + _file) + HX_("/",2f,00,00,00)) + _file) + HX_("_0.png",ac,4c,e0,bd)),null());
HXLINE(  14)			this->fontimage =  ::openfl::display::BitmapData_obj::__new(tempfontimage->width,tempfontimage->height,true,(int)0);
HXLINE(  15)			{
HXLINE(  15)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(  15)				HX_VARI( Int,_g) = tempfontimage->height;
HXDLIN(  15)				while((_g1 < _g)){
HXLINE(  15)					HX_VARI( Int,j) = _g1++;
HXLINE(  16)					{
HXLINE(  16)						HX_VARI( Int,_g3) = (int)0;
HXDLIN(  16)						HX_VARI( Int,_g2) = tempfontimage->width;
HXDLIN(  16)						while((_g3 < _g2)){
HXLINE(  16)							HX_VARI( Int,i) = _g3++;
HXLINE(  17)							HX_VARI( Int,cpixel) = tempfontimage->getPixel(i,j);
HXLINE(  18)							Bool _hx_tmp2;
HXDLIN(  18)							if ((cpixel != (int)0)) {
HXLINE(  18)								_hx_tmp2 = (cpixel != (int)0);
            							}
            							else {
HXLINE(  18)								_hx_tmp2 = false;
            							}
HXDLIN(  18)							if (_hx_tmp2) {
HXLINE(  19)								this->fontimage->setPixel32(i,j,(int)-1);
            							}
            						}
            					}
            				}
            			}
HXLINE(  24)			this->bitmapfont = ::haxegon::bitmapFont::BitmapFont_obj::fromAngelCode(this->fontimage,this->fontxml);
HXLINE(  25)			this->_hx_typename = _file;
            		}
            		else {
HXLINE(  27)			this->type = HX_("ttf",e6,6a,58,00);
HXLINE(  28)			this->filename = ((((HX_("data/fonts/",70,04,fa,11) + _file) + HX_("/",2f,00,00,00)) + _file) + HX_(".ttf",78,3b,c0,1e));
HXLINE(  29)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  30)				this->font = ::openfl::Assets_obj::getFont(this->filename,null());
HXLINE(  31)				this->_hx_typename = this->font->name;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE(  33)					HX_STACK_DO_THROW(((HX_("ERROR: Cannot set font to \"",c1,01,19,8a) + _file) + HX_("\", no TTF or Bitmap Font found.",a6,55,f4,68)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}

Dynamic Fontfile_obj::__CreateEmpty() { return new Fontfile_obj; }

hx::ObjectPtr< Fontfile_obj > Fontfile_obj::__new(::String _file)
{
	hx::ObjectPtr< Fontfile_obj > _hx_result = new Fontfile_obj();
	_hx_result->__construct(_file);
	return _hx_result;
}

Dynamic Fontfile_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Fontfile_obj > _hx_result = new Fontfile_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}


Fontfile_obj::Fontfile_obj()
{
}

void Fontfile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Fontfile);
	HX_MARK_MEMBER_NAME(_hx_typename,"typename");
	HX_MARK_MEMBER_NAME(bitmapfont,"bitmapfont");
	HX_MARK_MEMBER_NAME(fontxml,"fontxml");
	HX_MARK_MEMBER_NAME(fontimage,"fontimage");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(filename,"filename");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void Fontfile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx_typename,"typename");
	HX_VISIT_MEMBER_NAME(bitmapfont,"bitmapfont");
	HX_VISIT_MEMBER_NAME(fontxml,"fontxml");
	HX_VISIT_MEMBER_NAME(fontimage,"fontimage");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(filename,"filename");
	HX_VISIT_MEMBER_NAME(type,"type");
}

hx::Val Fontfile_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fontxml") ) { return hx::Val( fontxml); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"typename") ) { return hx::Val( _hx_typename); }
		if (HX_FIELD_EQ(inName,"filename") ) { return hx::Val( filename); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontimage") ) { return hx::Val( fontimage); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapfont") ) { return hx::Val( bitmapfont); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Fontfile_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fontxml") ) { fontxml=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"typename") ) { _hx_typename=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filename") ) { filename=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontimage") ) { fontimage=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapfont") ) { bitmapfont=inValue.Cast<  ::haxegon::bitmapFont::BitmapFont >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Fontfile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("typename","\x05","\x4a","\xf1","\xca"));
	outFields->push(HX_HCSTRING("bitmapfont","\x3e","\x91","\x44","\x4a"));
	outFields->push(HX_HCSTRING("fontxml","\x68","\x5b","\x46","\x96"));
	outFields->push(HX_HCSTRING("fontimage","\x2c","\x53","\x17","\xd6"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("filename","\xc7","\x2e","\x6a","\x77"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Fontfile_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Fontfile_obj,_hx_typename),HX_HCSTRING("typename","\x05","\x4a","\xf1","\xca")},
	{hx::fsObject /*::haxegon::bitmapFont::BitmapFont*/ ,(int)offsetof(Fontfile_obj,bitmapfont),HX_HCSTRING("bitmapfont","\x3e","\x91","\x44","\x4a")},
	{hx::fsObject /*::Xml*/ ,(int)offsetof(Fontfile_obj,fontxml),HX_HCSTRING("fontxml","\x68","\x5b","\x46","\x96")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Fontfile_obj,fontimage),HX_HCSTRING("fontimage","\x2c","\x53","\x17","\xd6")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(Fontfile_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsString,(int)offsetof(Fontfile_obj,filename),HX_HCSTRING("filename","\xc7","\x2e","\x6a","\x77")},
	{hx::fsString,(int)offsetof(Fontfile_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Fontfile_obj_sStaticStorageInfo = 0;
#endif

static ::String Fontfile_obj_sMemberFields[] = {
	HX_HCSTRING("typename","\x05","\x4a","\xf1","\xca"),
	HX_HCSTRING("bitmapfont","\x3e","\x91","\x44","\x4a"),
	HX_HCSTRING("fontxml","\x68","\x5b","\x46","\x96"),
	HX_HCSTRING("fontimage","\x2c","\x53","\x17","\xd6"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("filename","\xc7","\x2e","\x6a","\x77"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	::String(null()) };

static void Fontfile_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Fontfile_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Fontfile_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Fontfile_obj::__mClass,"__mClass");
};

#endif

hx::Class Fontfile_obj::__mClass;

void Fontfile_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.util.Fontfile","\xc9","\xa5","\x60","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Fontfile_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Fontfile_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Fontfile_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Fontfile_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Fontfile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Fontfile_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
} // end namespace util
