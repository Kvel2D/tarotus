// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapFont
#include <haxegon/bitmapFont/BitmapFont.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapTextField
#include <haxegon/bitmapFont/BitmapTextField.h>
#endif
#ifndef INCLUDED_haxegon_util_Fontclass
#include <haxegon/util/Fontclass.h>
#endif
#ifndef INCLUDED_haxegon_util_Fontfile
#include <haxegon/util/Fontfile.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

namespace haxegon{
namespace util{

void Fontclass_obj::__construct(::String _name,Float _size){
            	HX_STACK_FRAME("haxegon.util.Fontclass","new",0xb30b26bd,"haxegon.util.Fontclass.new","haxegon/util/Fontclass.hx",11,0x11c52bb3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_name,"_name")
            	HX_STACK_ARG(_size,"_size")
HXLINE(  12)		this->type = ::haxegon::Text_obj::fontfile->__get(( (Int)(::haxegon::Text_obj::fontfileindex->get(_name)) )).StaticCast<  ::haxegon::util::Fontfile >()->type;
HXLINE(  13)		if ((this->type == HX_("bitmap",ef,0f,0c,f1))) {
HXLINE(  14)			this->loadbitmapfont(_name,_size);
            		}
            		else {
HXLINE(  15)			if ((this->type == HX_("ttf",e6,6a,58,00))) {
HXLINE(  16)				this->loadttffont(_name,_size);
            			}
            		}
            	}

Dynamic Fontclass_obj::__CreateEmpty() { return new Fontclass_obj; }

hx::ObjectPtr< Fontclass_obj > Fontclass_obj::__new(::String _name,Float _size)
{
	hx::ObjectPtr< Fontclass_obj > _hx_result = new Fontclass_obj();
	_hx_result->__construct(_name,_size);
	return _hx_result;
}

Dynamic Fontclass_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Fontclass_obj > _hx_result = new Fontclass_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void Fontclass_obj::loadbitmapfont(::String _name,Float _size){
            	HX_STACK_FRAME("haxegon.util.Fontclass","loadbitmapfont",0x064bd3a7,"haxegon.util.Fontclass.loadbitmapfont","haxegon/util/Fontclass.hx",20,0x11c52bb3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_name,"_name")
            	HX_STACK_ARG(_size,"_size")
HXLINE(  21)		this->name = _name;
HXLINE(  22)		this->size = _size;
HXLINE(  24)		this->tf_bitmap =  ::haxegon::bitmapFont::BitmapTextField_obj::__new(::haxegon::Text_obj::fontfile->__get(( (Int)(::haxegon::Text_obj::fontfileindex->get(_name)) )).StaticCast<  ::haxegon::util::Fontfile >()->bitmapfont,null(),null(),null());
HXLINE(  25)		this->tf_bitmap->set_text(HX_("???",1f,05,30,00));
HXLINE(  26)		this->height = this->tf_bitmap->get_textHeight();
HXLINE(  28)		this->tf_bitmap->set_background(false);
HXLINE(  30)		this->tfbitmap =  ::openfl::display::BitmapData_obj::__new(::haxegon::Gfx_obj::screen_width,::haxegon::Gfx_obj::screen_height,true,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Fontclass_obj,loadbitmapfont,(void))

void Fontclass_obj::loadttffont(::String _name,Float _size){
            	HX_STACK_FRAME("haxegon.util.Fontclass","loadttffont",0xb7bc45ac,"haxegon.util.Fontclass.loadttffont","haxegon/util/Fontclass.hx",33,0x11c52bb3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_name,"_name")
            	HX_STACK_ARG(_size,"_size")
HXLINE(  34)		this->name = _name;
HXLINE(  35)		this->size = _size;
HXLINE(  37)		this->tf_ttf =  ::openfl::text::TextField_obj::__new();
HXLINE(  38)		this->tf_ttf->set_embedFonts(true);
HXLINE(  39)		::String _hx_tmp = ::haxegon::Text_obj::getfonttypename(_name);
HXDLIN(  39)		Int _hx_tmp1 = ::Math_obj::round(this->size);
HXDLIN(  39)		this->tf_ttf->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__new(_hx_tmp,_hx_tmp1,(int)0,false,null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  40)		this->tf_ttf->set_selectable(false);
HXLINE(  41)		this->tf_ttf->set_width(::haxegon::Gfx_obj::screen_width);
HXLINE(  42)		this->tf_ttf->set_height(::haxegon::Gfx_obj::screen_height);
HXLINE(  47)		this->tf_ttf->set_antiAliasType((int)1);
HXLINE(  50)		this->tf_ttf->set_text(HX_("???",1f,05,30,00));
HXLINE(  51)		this->tfbitmap =  ::openfl::display::BitmapData_obj::__new(::haxegon::Gfx_obj::screen_width,::haxegon::Gfx_obj::screen_height,true,(int)0);
HXLINE(  52)		this->tf_ttf->set_height(::haxegon::Gfx_obj::screen_height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Fontclass_obj,loadttffont,(void))

void Fontclass_obj::clearbitmap(){
            	HX_STACK_FRAME("haxegon.util.Fontclass","clearbitmap",0xcd152499,"haxegon.util.Fontclass.clearbitmap","haxegon/util/Fontclass.hx",56,0x11c52bb3)
            	HX_STACK_THIS(this)
HXLINE(  56)		this->tfbitmap->fillRect(this->tfbitmap->rect,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Fontclass_obj,clearbitmap,(void))


Fontclass_obj::Fontclass_obj()
{
}

void Fontclass_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Fontclass);
	HX_MARK_MEMBER_NAME(tf_bitmap,"tf_bitmap");
	HX_MARK_MEMBER_NAME(tf_ttf,"tf_ttf");
	HX_MARK_MEMBER_NAME(tfbitmap,"tfbitmap");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_END_CLASS();
}

void Fontclass_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tf_bitmap,"tf_bitmap");
	HX_VISIT_MEMBER_NAME(tf_ttf,"tf_ttf");
	HX_VISIT_MEMBER_NAME(tfbitmap,"tfbitmap");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(height,"height");
}

hx::Val Fontclass_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tf_ttf") ) { return hx::Val( tf_ttf); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tfbitmap") ) { return hx::Val( tfbitmap); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tf_bitmap") ) { return hx::Val( tf_bitmap); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadttffont") ) { return hx::Val( loadttffont_dyn()); }
		if (HX_FIELD_EQ(inName,"clearbitmap") ) { return hx::Val( clearbitmap_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadbitmapfont") ) { return hx::Val( loadbitmapfont_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Fontclass_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tf_ttf") ) { tf_ttf=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tfbitmap") ) { tfbitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tf_bitmap") ) { tf_bitmap=inValue.Cast<  ::haxegon::bitmapFont::BitmapTextField >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Fontclass_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tf_bitmap","\x5c","\x2e","\x00","\xbf"));
	outFields->push(HX_HCSTRING("tf_ttf","\x59","\xb6","\x68","\x5b"));
	outFields->push(HX_HCSTRING("tfbitmap","\xe1","\x16","\x75","\x6d"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Fontclass_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxegon::bitmapFont::BitmapTextField*/ ,(int)offsetof(Fontclass_obj,tf_bitmap),HX_HCSTRING("tf_bitmap","\x5c","\x2e","\x00","\xbf")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Fontclass_obj,tf_ttf),HX_HCSTRING("tf_ttf","\x59","\xb6","\x68","\x5b")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Fontclass_obj,tfbitmap),HX_HCSTRING("tfbitmap","\xe1","\x16","\x75","\x6d")},
	{hx::fsString,(int)offsetof(Fontclass_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(Fontclass_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(Fontclass_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsFloat,(int)offsetof(Fontclass_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Fontclass_obj_sStaticStorageInfo = 0;
#endif

static ::String Fontclass_obj_sMemberFields[] = {
	HX_HCSTRING("loadbitmapfont","\xe4","\x96","\x44","\xea"),
	HX_HCSTRING("loadttffont","\x4f","\xca","\x0b","\x3b"),
	HX_HCSTRING("clearbitmap","\x3c","\xa9","\x64","\x50"),
	HX_HCSTRING("tf_bitmap","\x5c","\x2e","\x00","\xbf"),
	HX_HCSTRING("tf_ttf","\x59","\xb6","\x68","\x5b"),
	HX_HCSTRING("tfbitmap","\xe1","\x16","\x75","\x6d"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	::String(null()) };

static void Fontclass_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Fontclass_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Fontclass_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Fontclass_obj::__mClass,"__mClass");
};

#endif

hx::Class Fontclass_obj::__mClass;

void Fontclass_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.util.Fontclass","\x4b","\x04","\xf0","\x92");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Fontclass_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Fontclass_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Fontclass_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Fontclass_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Fontclass_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Fontclass_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
} // end namespace util
