// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_CardType
#include <CardType.h>
#endif


void Card_obj::__construct(){
            	HX_STACK_FRAME("Card","new",0x0152a2e2,"Card.new","Game.hx",26,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(  31)		this->y = (int)0;
HXLINE(  30)		this->x = (int)0;
HXLINE(  29)		this->age = (int)0;
HXLINE(  28)		this->covered = false;
HXLINE(  27)		this->type = ::CardType_obj::CardType_None_dyn();
            	}

Dynamic Card_obj::__CreateEmpty() { return new Card_obj; }

hx::ObjectPtr< Card_obj > Card_obj::__new()
{
	hx::ObjectPtr< Card_obj > _hx_result = new Card_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Card_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Card_obj > _hx_result = new Card_obj();
	_hx_result->__construct();
	return _hx_result;
}


Card_obj::Card_obj()
{
}

void Card_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Card);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(covered,"covered");
	HX_MARK_MEMBER_NAME(age,"age");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_END_CLASS();
}

void Card_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(covered,"covered");
	HX_VISIT_MEMBER_NAME(age,"age");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
}

hx::Val Card_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"age") ) { return hx::Val( age); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"covered") ) { return hx::Val( covered); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Card_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"age") ) { age=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"covered") ) { covered=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Card_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("covered","\x56","\xd3","\xcb","\xaa"));
	outFields->push(HX_HCSTRING("age","\xbf","\xf4","\x49","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Card_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::CardType*/ ,(int)offsetof(Card_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsBool,(int)offsetof(Card_obj,covered),HX_HCSTRING("covered","\x56","\xd3","\xcb","\xaa")},
	{hx::fsInt,(int)offsetof(Card_obj,age),HX_HCSTRING("age","\xbf","\xf4","\x49","\x00")},
	{hx::fsInt,(int)offsetof(Card_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Card_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Card_obj_sStaticStorageInfo = 0;
#endif

static ::String Card_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("covered","\x56","\xd3","\xcb","\xaa"),
	HX_HCSTRING("age","\xbf","\xf4","\x49","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	::String(null()) };

static void Card_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Card_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Card_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Card_obj::__mClass,"__mClass");
};

#endif

hx::Class Card_obj::__mClass;

void Card_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Card","\xf0","\x49","\x93","\x2c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Card_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Card_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Card_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Card_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Card_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Card_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

