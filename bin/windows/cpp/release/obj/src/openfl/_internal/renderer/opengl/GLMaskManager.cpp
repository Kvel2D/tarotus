// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskManager
#include <openfl/_internal/renderer/opengl/GLMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLMaskManager_obj::__construct( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLMaskManager","new",0xce241a4a,"openfl._internal.renderer.opengl.GLMaskManager.new","openfl/_internal/renderer/opengl/GLMaskManager.hx",28,0x0550a1c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(  30)		super::__construct(renderSession);
HXLINE(  32)		this->gl = renderSession->gl;
HXLINE(  34)		this->clipRects = ::Array_obj< ::Dynamic>::__new();
HXLINE(  35)		this->numClipRects = (int)0;
            	}

Dynamic GLMaskManager_obj::__CreateEmpty() { return new GLMaskManager_obj; }

hx::ObjectPtr< GLMaskManager_obj > GLMaskManager_obj::__new( ::openfl::_internal::renderer::RenderSession renderSession)
{
	hx::ObjectPtr< GLMaskManager_obj > _hx_result = new GLMaskManager_obj();
	_hx_result->__construct(renderSession);
	return _hx_result;
}

Dynamic GLMaskManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLMaskManager_obj > _hx_result = new GLMaskManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void GLMaskManager_obj::pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLMaskManager","pushMask",0xd450f9bc,"openfl._internal.renderer.opengl.GLMaskManager.pushMask","openfl/_internal/renderer/opengl/GLMaskManager.hx",44,0x0550a1c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
HXLINE(  44)		 ::openfl::geom::Rectangle _hx_tmp = mask->getBounds(mask);
HXDLIN(  44)		 ::openfl::geom::Matrix _hx_tmp1 = mask->_hx___getRenderTransform();
HXDLIN(  44)		this->pushRect(_hx_tmp,_hx_tmp1);
            	}


void GLMaskManager_obj::pushObject( ::openfl::display::DisplayObject object,hx::Null< Bool >  __o_handleScrollRect){
Bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLMaskManager","pushObject",0x9ff60b8f,"openfl._internal.renderer.opengl.GLMaskManager.pushObject","openfl/_internal/renderer/opengl/GLMaskManager.hx",49,0x0550a1c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(handleScrollRect,"handleScrollRect")
HXLINE(  51)		Bool _hx_tmp;
HXDLIN(  51)		if (handleScrollRect) {
HXLINE(  51)			 ::openfl::geom::Rectangle _hx_tmp1 = object->get_scrollRect();
HXDLIN(  51)			_hx_tmp = hx::IsNotNull( _hx_tmp1 );
            		}
            		else {
HXLINE(  51)			_hx_tmp = false;
            		}
HXDLIN(  51)		if (_hx_tmp) {
HXLINE(  53)			 ::openfl::geom::Rectangle _hx_tmp2 = object->get_scrollRect();
HXDLIN(  53)			this->pushRect(_hx_tmp2,object->_hx___renderTransform);
            		}
HXLINE(  57)		Bool _hx_tmp3 = hx::IsNotNull( object->_hx___mask );
HXDLIN(  57)		if (_hx_tmp3) {
HXLINE(  59)			this->pushMask(object->_hx___mask);
            		}
            	}


void GLMaskManager_obj::pushRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLMaskManager","pushRect",0xd7a205f4,"openfl._internal.renderer.opengl.GLMaskManager.pushRect","openfl/_internal/renderer/opengl/GLMaskManager.hx",66,0x0550a1c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(transform,"transform")
HXLINE(  72)		Bool _hx_tmp = (this->numClipRects == this->clipRects->length);
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  74)			Int _hx_tmp1 = this->numClipRects;
HXDLIN(  74)			this->clipRects[_hx_tmp1] =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            		}
HXLINE(  78)		HX_VARI(  ::openfl::geom::Rectangle,clipRect) = this->clipRects->__get(this->numClipRects).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  79)		rect->_hx___transform(clipRect,transform);
HXLINE(  81)		Bool _hx_tmp2 = (this->numClipRects > (int)0);
HXDLIN(  81)		if (_hx_tmp2) {
HXLINE(  83)			HX_VARI(  ::openfl::geom::Rectangle,parentClipRect) = this->clipRects->__get((this->numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  84)			clipRect->_hx___contract(parentClipRect->x,parentClipRect->y,parentClipRect->width,parentClipRect->height);
            		}
HXLINE(  88)		Bool _hx_tmp3 = (clipRect->height < (int)0);
HXDLIN(  88)		if (_hx_tmp3) {
HXLINE(  90)			clipRect->height = (int)0;
            		}
HXLINE(  94)		Bool _hx_tmp4 = (clipRect->width < (int)0);
HXDLIN(  94)		if (_hx_tmp4) {
HXLINE(  96)			clipRect->width = (int)0;
            		}
HXLINE( 100)		HX_VARI(  ::openfl::_internal::renderer::opengl::GLRenderer,renderer) = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(this->renderSession->renderer) );
HXLINE( 102)		{
HXLINE( 102)			Int cap = this->gl->SCISSOR_TEST;
HXDLIN( 102)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable(cap);
            		}
HXLINE( 103)		{
HXLINE( 103)			Int x = ::Math_obj::floor(clipRect->x);
HXDLIN( 103)			Float _hx_tmp5 = ((renderer->windowHeight - clipRect->y) - clipRect->height);
HXDLIN( 103)			Int y = ::Math_obj::floor(_hx_tmp5);
HXDLIN( 103)			Int width = ::Math_obj::ceil(clipRect->width);
HXDLIN( 103)			Int height = ::Math_obj::ceil(clipRect->height);
HXDLIN( 103)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_scissor(x,y,width,height);
            		}
HXLINE( 105)		this->numClipRects++;
            	}


void GLMaskManager_obj::popMask(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLMaskManager","popMask",0x34fdee07,"openfl._internal.renderer.opengl.GLMaskManager.popMask","openfl/_internal/renderer/opengl/GLMaskManager.hx",112,0x0550a1c8)
            	HX_STACK_THIS(this)
HXLINE( 112)		this->popRect();
            	}


void GLMaskManager_obj::popObject( ::openfl::display::DisplayObject object,hx::Null< Bool >  __o_handleScrollRect){
Bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLMaskManager","popObject",0x3d00e89a,"openfl._internal.renderer.opengl.GLMaskManager.popObject","openfl/_internal/renderer/opengl/GLMaskManager.hx",117,0x0550a1c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(handleScrollRect,"handleScrollRect")
HXLINE( 119)		Bool _hx_tmp = hx::IsNotNull( object->_hx___mask );
HXDLIN( 119)		if (_hx_tmp) {
HXLINE( 121)			this->popMask();
            		}
HXLINE( 125)		Bool _hx_tmp1;
HXDLIN( 125)		if (handleScrollRect) {
HXLINE( 125)			 ::openfl::geom::Rectangle _hx_tmp2 = object->get_scrollRect();
HXDLIN( 125)			_hx_tmp1 = hx::IsNotNull( _hx_tmp2 );
            		}
            		else {
HXLINE( 125)			_hx_tmp1 = false;
            		}
HXDLIN( 125)		if (_hx_tmp1) {
HXLINE( 127)			this->popRect();
            		}
            	}


void GLMaskManager_obj::popRect(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLMaskManager","popRect",0x384efa3f,"openfl._internal.renderer.opengl.GLMaskManager.popRect","openfl/_internal/renderer/opengl/GLMaskManager.hx",134,0x0550a1c8)
            	HX_STACK_THIS(this)
HXLINE( 136)		Bool _hx_tmp = (this->numClipRects > (int)0);
HXDLIN( 136)		if (_hx_tmp) {
HXLINE( 138)			HX_VARI(  ::openfl::geom::Rectangle,clipRect) = this->clipRects->__get((this->numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 139)			HX_VARI(  ::openfl::_internal::renderer::opengl::GLRenderer,renderer) = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(this->renderSession->renderer) );
HXLINE( 141)			{
HXLINE( 141)				Int cap = this->gl->SCISSOR_TEST;
HXDLIN( 141)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable(cap);
            			}
HXLINE( 142)			{
HXLINE( 142)				Int x = ::Math_obj::floor(clipRect->x);
HXDLIN( 142)				Float _hx_tmp1 = ((renderer->windowHeight - clipRect->y) - clipRect->height);
HXDLIN( 142)				Int y = ::Math_obj::floor(_hx_tmp1);
HXDLIN( 142)				Int width = ::Math_obj::ceil(clipRect->width);
HXDLIN( 142)				Int height = ::Math_obj::ceil(clipRect->height);
HXDLIN( 142)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_scissor(x,y,width,height);
            			}
HXLINE( 144)			this->numClipRects--;
            		}
HXLINE( 148)		Bool _hx_tmp2 = (this->numClipRects == (int)0);
HXDLIN( 148)		if (_hx_tmp2) {
HXLINE( 150)			Int cap1 = this->gl->SCISSOR_TEST;
HXDLIN( 150)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable(cap1);
            		}
            	}



GLMaskManager_obj::GLMaskManager_obj()
{
}

void GLMaskManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLMaskManager);
	HX_MARK_MEMBER_NAME(clipRects,"clipRects");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(numClipRects,"numClipRects");
	 ::openfl::_internal::renderer::AbstractMaskManager_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GLMaskManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(clipRects,"clipRects");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(numClipRects,"numClipRects");
	 ::openfl::_internal::renderer::AbstractMaskManager_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GLMaskManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"popMask") ) { return hx::Val( popMask_dyn()); }
		if (HX_FIELD_EQ(inName,"popRect") ) { return hx::Val( popRect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pushMask") ) { return hx::Val( pushMask_dyn()); }
		if (HX_FIELD_EQ(inName,"pushRect") ) { return hx::Val( pushRect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clipRects") ) { return hx::Val( clipRects); }
		if (HX_FIELD_EQ(inName,"popObject") ) { return hx::Val( popObject_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pushObject") ) { return hx::Val( pushObject_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"numClipRects") ) { return hx::Val( numClipRects); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLMaskManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clipRects") ) { clipRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"numClipRects") ) { numClipRects=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLMaskManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("clipRects","\xdf","\x81","\xd3","\x04"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("numClipRects","\xb9","\x8a","\x43","\xac"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLMaskManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(GLMaskManager_obj,clipRects),HX_HCSTRING("clipRects","\xdf","\x81","\xd3","\x04")},
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(GLMaskManager_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsInt,(int)offsetof(GLMaskManager_obj,numClipRects),HX_HCSTRING("numClipRects","\xb9","\x8a","\x43","\xac")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLMaskManager_obj_sStaticStorageInfo = 0;
#endif

static ::String GLMaskManager_obj_sMemberFields[] = {
	HX_HCSTRING("clipRects","\xdf","\x81","\xd3","\x04"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("numClipRects","\xb9","\x8a","\x43","\xac"),
	HX_HCSTRING("pushMask","\xe6","\x73","\x47","\x17"),
	HX_HCSTRING("pushObject","\x39","\xe4","\x1e","\x69"),
	HX_HCSTRING("pushRect","\x1e","\x80","\x98","\x1a"),
	HX_HCSTRING("popMask","\x1d","\x67","\x11","\x43"),
	HX_HCSTRING("popObject","\x30","\x53","\xb5","\x91"),
	HX_HCSTRING("popRect","\x55","\x73","\x62","\x46"),
	::String(null()) };

static void GLMaskManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLMaskManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLMaskManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLMaskManager_obj::__mClass,"__mClass");
};

#endif

hx::Class GLMaskManager_obj::__mClass;

void GLMaskManager_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLMaskManager","\x58","\xed","\xaa","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLMaskManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLMaskManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLMaskManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLMaskManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLMaskManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLMaskManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
