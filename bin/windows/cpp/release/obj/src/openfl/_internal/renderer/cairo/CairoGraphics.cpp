// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoGraphics_obj::__construct() { }

Dynamic CairoGraphics_obj::__CreateEmpty() { return new CairoGraphics_obj; }

hx::ObjectPtr< CairoGraphics_obj > CairoGraphics_obj::__new()
{
	hx::ObjectPtr< CairoGraphics_obj > _hx_result = new CairoGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CairoGraphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoGraphics_obj > _hx_result = new CairoGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float CairoGraphics_obj::SIN45;

Float CairoGraphics_obj::TAN22;

 ::openfl::display::BitmapData CairoGraphics_obj::bitmapFill;

Bool CairoGraphics_obj::bitmapRepeat;

 ::openfl::geom::Rectangle CairoGraphics_obj::bounds;

 ::lime::graphics::cairo::Cairo CairoGraphics_obj::cairo;

 ::openfl::_internal::renderer::DrawCommandBuffer CairoGraphics_obj::fillCommands;

 ::Dynamic CairoGraphics_obj::fillPattern;

 ::openfl::geom::Matrix CairoGraphics_obj::fillPatternMatrix;

 ::openfl::display::Graphics CairoGraphics_obj::graphics;

Bool CairoGraphics_obj::hasFill;

Bool CairoGraphics_obj::hasStroke;

Bool CairoGraphics_obj::hitTesting;

 ::openfl::geom::Matrix CairoGraphics_obj::inversePendingMatrix;

 ::openfl::geom::Matrix CairoGraphics_obj::pendingMatrix;

 ::openfl::_internal::renderer::DrawCommandBuffer CairoGraphics_obj::strokeCommands;

 ::Dynamic CairoGraphics_obj::strokePattern;

void CairoGraphics_obj::closePath(hx::Null< Bool >  __o_strokeBefore){
Bool strokeBefore = __o_strokeBefore.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","closePath",0x6dffa481,"openfl._internal.renderer.cairo.CairoGraphics.closePath","openfl/_internal/renderer/cairo/CairoGraphics.hx",57,0x744ae94c)
            	HX_STACK_ARG(strokeBefore,"strokeBefore")
HXLINE(  59)		Bool _hx_tmp = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern );
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  61)			return;
            		}
HXLINE(  65)		if (!(strokeBefore)) {
HXLINE(  67)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            		}
HXLINE(  71)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern);
HXLINE(  72)		Bool _hx_tmp1 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN(  72)		if (_hx_tmp1) {
HXLINE(  72)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->strokePreserve();
            		}
HXLINE(  74)		if (strokeBefore) {
HXLINE(  76)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            		}
HXLINE(  80)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CairoGraphics_obj,closePath,(void))

 ::Dynamic CairoGraphics_obj::createGradientPattern( ::Dynamic type,::cpp::VirtualArray colors,::cpp::VirtualArray alphas,::cpp::VirtualArray ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","createGradientPattern",0x9888a3a8,"openfl._internal.renderer.cairo.CairoGraphics.createGradientPattern","openfl/_internal/renderer/cairo/CairoGraphics.hx",85,0x744ae94c)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE(  87)		HX_VARI(  ::Dynamic,pattern) = null();
HXLINE(  89)		 ::Dynamic _hx_switch_0 = type;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 104)			Bool _hx_tmp = hx::IsNull( matrix );
HXDLIN( 104)			if (_hx_tmp) {
HXLINE( 104)				matrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            			}
HXLINE( 106)			HX_VARI(  ::openfl::geom::Point,point1) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)-819.2),(int)0));
HXLINE( 107)			HX_VARI(  ::openfl::geom::Point,point2) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)819.2),(int)0));
HXLINE( 109)			hx::AddEq(point1->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 110)			hx::AddEq(point2->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 111)			hx::AddEq(point1->y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 112)			hx::AddEq(point2->y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 114)			pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createLinear(point1->x,point1->y,point2->x,point2->y);
HXLINE( 102)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(  93)			Bool _hx_tmp1 = hx::IsNull( matrix );
HXDLIN(  93)			if (_hx_tmp1) {
HXLINE(  93)				matrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            			}
HXLINE(  95)			HX_VARI(  ::openfl::geom::Point,point) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)1638.4),(int)0));
HXLINE(  97)			HX_VARI( Float,x) = (matrix->tx + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE(  98)			HX_VARI( Float,y) = (matrix->ty + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 100)			Float _hx_tmp2 = ((Float)(point->x - matrix->tx) / (Float)(int)2);
HXDLIN( 100)			pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRadial(x,y,(int)0,x,y,_hx_tmp2);
HXLINE(  91)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE( 118)		{
HXLINE( 118)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 118)			HX_VARI( Int,_g) = colors->get_length();
HXDLIN( 118)			while((_g1 < _g)){
HXLINE( 118)				HX_VARI( Int,i) = _g1++;
HXLINE( 120)				HX_VARI( Int,rgb) = ( (Int)(colors->__get(i)) );
HXLINE( 121)				HX_VARI( Float,alpha) = ( (Float)(alphas->__get(i)) );
HXLINE( 122)				HX_VARI( Float,r) = ((Float)hx::UShr(((int)rgb & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 123)				HX_VARI( Float,g) = ((Float)hx::UShr(((int)rgb & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 124)				HX_VARI( Float,b) = ((Float)((int)rgb & (int)(int)255) / (Float)(int)255);
HXLINE( 126)				HX_VARI( Float,ratio) = ((Float)ratios->__get(i) / (Float)(int)255);
HXLINE( 127)				Bool _hx_tmp3 = (ratio < (int)0);
HXDLIN( 127)				if (_hx_tmp3) {
HXLINE( 127)					ratio = (int)0;
            				}
HXLINE( 128)				Bool _hx_tmp4 = (ratio > (int)1);
HXDLIN( 128)				if (_hx_tmp4) {
HXLINE( 128)					ratio = (int)1;
            				}
HXLINE( 130)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::addColorStopRGBA(pattern,ratio,r,g,b,alpha);
            			}
            		}
HXLINE( 134)		HX_VARI(  ::lime::math::Matrix3,mat) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::get_matrix(pattern);
HXLINE( 136)		mat->tx = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 137)		mat->ty = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 139)		::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(pattern,mat);
HXLINE( 141)		return pattern;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(CairoGraphics_obj,createGradientPattern,return )

 ::Dynamic CairoGraphics_obj::createImagePattern( ::openfl::display::BitmapData bitmapFill, ::openfl::geom::Matrix matrix,Bool bitmapRepeat){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","createImagePattern",0x42487dcd,"openfl._internal.renderer.cairo.CairoGraphics.createImagePattern","openfl/_internal/renderer/cairo/CairoGraphics.hx",146,0x744ae94c)
            	HX_STACK_ARG(bitmapFill,"bitmapFill")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(bitmapRepeat,"bitmapRepeat")
HXLINE( 148)		 ::Dynamic _hx_tmp = bitmapFill->getSurface();
HXDLIN( 148)		HX_VARI(  ::Dynamic,pattern) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(_hx_tmp);
HXLINE( 150)		if (bitmapRepeat) {
HXLINE( 152)			::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_extend(pattern,(int)1);
            		}
HXLINE( 156)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = matrix;
HXLINE( 158)		return pattern;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,createImagePattern,return )

void CairoGraphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","drawRoundRect",0xa42fd4f2,"openfl._internal.renderer.cairo.CairoGraphics.drawRoundRect","openfl/_internal/renderer/cairo/CairoGraphics.hx",163,0x744ae94c)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(ellipseWidth,"ellipseWidth")
            	HX_STACK_ARG(ellipseHeight,"ellipseHeight")
HXLINE( 165)		Bool _hx_tmp = hx::IsNull( ellipseHeight );
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 165)			ellipseHeight = ellipseWidth;
            		}
HXLINE( 167)		hx::MultEq(ellipseWidth,((Float)0.5));
HXLINE( 168)		hx::MultEq(ellipseHeight,((Float)0.5));
HXLINE( 170)		Bool _hx_tmp1 = (ellipseWidth > ((Float)width / (Float)(int)2));
HXDLIN( 170)		if (_hx_tmp1) {
HXLINE( 170)			ellipseWidth = ((Float)width / (Float)(int)2);
            		}
HXLINE( 171)		Bool _hx_tmp2 = hx::IsGreater( ellipseHeight,((Float)height / (Float)(int)2) );
HXDLIN( 171)		if (_hx_tmp2) {
HXLINE( 171)			ellipseHeight = ((Float)height / (Float)(int)2);
            		}
HXLINE( 173)		HX_VARI( Float,xe) = (x + width);
HXDLIN( 173)		HX_VARI( Float,ye) = (y + height);
HXDLIN( 173)		HX_VARI( Float,cx1) = (-(ellipseWidth) + (ellipseWidth * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::SIN45));
HXDLIN( 173)		HX_VARI( Float,cx2) = (-(ellipseWidth) + (ellipseWidth * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::TAN22));
HXDLIN( 173)		HX_VARI( Float,cy1) = (-(ellipseHeight) + (ellipseHeight * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::SIN45));
HXDLIN( 173)		HX_VARI( Float,cy2) = (-(ellipseHeight) + (ellipseHeight * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::TAN22));
HXLINE( 180)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(xe,(ye - ellipseHeight));
HXLINE( 181)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(xe,(ye + cy2),(xe + cx1),(ye + cy1));
HXLINE( 182)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((xe + cx2),ye,(xe - ellipseWidth),ye);
HXLINE( 183)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((x + ellipseWidth),ye);
HXLINE( 184)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((x - cx2),ye,(x - cx1),(ye + cy1));
HXLINE( 185)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(x,(ye + cy2),x,(ye - ellipseHeight));
HXLINE( 186)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x,(y + ellipseHeight));
HXLINE( 187)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(x,(y - cy2),(x - cx1),(y - cy1));
HXLINE( 188)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((x - cx2),y,(x + ellipseWidth),y);
HXLINE( 189)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((xe - ellipseWidth),y);
HXLINE( 190)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((xe + cx2),y,(xe + cx1),(y - cy1));
HXLINE( 191)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(xe,(y - cy2),xe,(y + ellipseHeight));
HXLINE( 192)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(xe,(ye - ellipseHeight));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CairoGraphics_obj,drawRoundRect,(void))

void CairoGraphics_obj::endFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","endFill",0x21233e02,"openfl._internal.renderer.cairo.CairoGraphics.endFill","openfl/_internal/renderer/cairo/CairoGraphics.hx",197,0x744ae94c)
HXLINE( 199)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 200)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::playCommands(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands,false);
HXLINE( 201)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,endFill,(void))

void CairoGraphics_obj::endStroke(){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","endStroke",0xaaf640f7,"openfl._internal.renderer.cairo.CairoGraphics.endStroke","openfl/_internal/renderer/cairo/CairoGraphics.hx",206,0x744ae94c)
HXLINE( 208)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 209)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::playCommands(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands,true);
HXLINE( 210)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 211)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,endStroke,(void))

Bool CairoGraphics_obj::hitTest( ::openfl::display::Graphics graphics,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","hitTest",0xddc21649,"openfl._internal.renderer.cairo.CairoGraphics.hitTest","openfl/_internal/renderer/cairo/CairoGraphics.hx",216,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 219)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics = graphics;
HXLINE( 220)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = graphics->_hx___bounds;
HXLINE( 222)		Bool _hx_tmp;
HXDLIN( 222)		Bool _hx_tmp1;
HXDLIN( 222)		Bool _hx_tmp2;
HXDLIN( 222)		Bool _hx_tmp3;
HXDLIN( 222)		Int _hx_tmp4 = graphics->_hx___commands->get_length();
HXDLIN( 222)		if ((_hx_tmp4 != (int)0)) {
HXLINE( 222)			_hx_tmp3 = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds );
            		}
            		else {
HXLINE( 222)			_hx_tmp3 = true;
            		}
HXDLIN( 222)		if (!(_hx_tmp3)) {
HXLINE( 222)			_hx_tmp2 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width == (int)0);
            		}
            		else {
HXLINE( 222)			_hx_tmp2 = true;
            		}
HXDLIN( 222)		if (!(_hx_tmp2)) {
HXLINE( 222)			_hx_tmp1 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height == (int)0);
            		}
            		else {
HXLINE( 222)			_hx_tmp1 = true;
            		}
HXDLIN( 222)		if (!(_hx_tmp1)) {
HXLINE( 222)			_hx_tmp = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->contains(x,y));
            		}
            		else {
HXLINE( 222)			_hx_tmp = true;
            		}
HXDLIN( 222)		if (_hx_tmp) {
HXLINE( 224)			return false;
            		}
            		else {
HXLINE( 228)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting = true;
HXLINE( 230)			hx::SubEq(x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x);
HXLINE( 231)			hx::SubEq(y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y);
HXLINE( 233)			Bool _hx_tmp5 = hx::IsNull( graphics->_hx___cairo );
HXDLIN( 233)			if (_hx_tmp5) {
HXLINE( 235)				Int _hx_tmp6 = ::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width);
HXDLIN( 235)				Int _hx_tmp7 = ::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height);
HXDLIN( 235)				HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp6,_hx_tmp7,true,(int)0);
HXLINE( 236)				HX_VARI(  ::Dynamic,surface) = bitmap->getSurface();
HXLINE( 237)				graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__new(surface);
            			}
HXLINE( 242)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo = graphics->_hx___cairo;
HXLINE( 244)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
HXLINE( 245)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
HXLINE( 247)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE( 248)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
HXLINE( 250)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = null();
HXLINE( 251)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = null();
HXLINE( 253)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 255)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE( 257)			{
HXLINE( 257)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 257)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN( 257)				while((_g < _g1->length)){
HXLINE( 257)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 257)					++_g;
HXLINE( 259)					Int _hx_tmp8 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 259)					switch((int)(_hx_tmp8)){
            						case (int)0: case (int)1: case (int)2: {
HXLINE( 325)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE( 326)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE( 328)							Bool _hx_tmp9;
HXDLIN( 328)							Bool _hx_tmp10 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 328)							if (_hx_tmp10) {
HXLINE( 328)								_hx_tmp9 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            							}
            							else {
HXLINE( 328)								_hx_tmp9 = false;
            							}
HXDLIN( 328)							if (_hx_tmp9) {
HXLINE( 330)								data->destroy();
HXLINE( 331)								return true;
            							}
HXLINE( 335)							Bool _hx_tmp11;
HXDLIN( 335)							Bool _hx_tmp12 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 335)							if (_hx_tmp12) {
HXLINE( 335)								_hx_tmp11 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            							}
            							else {
HXLINE( 335)								_hx_tmp11 = false;
            							}
HXDLIN( 335)							if (_hx_tmp11) {
HXLINE( 337)								data->destroy();
HXLINE( 338)								return true;
            							}
HXLINE( 342)							if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn() )) {
HXLINE( 344)								{
HXLINE( 344)									Int _hx_tmp13 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 344)									switch((int)(_hx_tmp13)){
            										case (int)0: {
HXLINE( 344)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 344)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 344)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 344)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 344)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 344)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 344)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 344)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 344)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE( 344)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE( 344)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE( 344)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE( 344)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 344)											hx::AddEq(data->fPos,(int)5);
HXDLIN( 344)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE( 344)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE( 344)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 344)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)13: {
HXLINE( 344)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 344)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 344)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 344)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)14: {
HXLINE( 344)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 344)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 344)											hx::AddEq(data->fPos,(int)2);
HXDLIN( 344)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE( 344)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)16: {
HXLINE( 344)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE( 344)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 344)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 344)								HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 345)								 ::openfl::display::BitmapData _hx_tmp14 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 345)								 ::openfl::geom::Matrix _hx_tmp15 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 345)								Bool _hx_tmp16 = c->buffer->b->__get(c->bPos);
HXDLIN( 345)								Bool _hx_tmp17 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 345)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginBitmapFill(_hx_tmp14,_hx_tmp15,_hx_tmp16,_hx_tmp17);
HXLINE( 346)								 ::openfl::display::BitmapData _hx_tmp18 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 346)								 ::openfl::geom::Matrix _hx_tmp19 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 346)								Bool _hx_tmp20 = c->buffer->b->__get(c->bPos);
HXDLIN( 346)								Bool _hx_tmp21 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 346)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginBitmapFill(_hx_tmp18,_hx_tmp19,_hx_tmp20,_hx_tmp21);
            							}
            							else {
HXLINE( 348)								if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn() )) {
HXLINE( 350)									{
HXLINE( 350)										Int _hx_tmp22 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 350)										switch((int)(_hx_tmp22)){
            											case (int)0: {
HXLINE( 350)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 350)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 350)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 350)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 350)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 350)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 350)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 350)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 350)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE( 350)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE( 350)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE( 350)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE( 350)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)8: {
HXLINE( 350)												hx::AddEq(data->fPos,(int)5);
HXDLIN( 350)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE( 350)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)11: {
            											}
            											break;
            											case (int)12: {
HXLINE( 350)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 350)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)13: {
HXLINE( 350)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 350)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 350)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 350)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)14: {
HXLINE( 350)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 350)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 350)												hx::AddEq(data->fPos,(int)2);
HXDLIN( 350)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE( 350)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)16: {
HXLINE( 350)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE( 350)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 350)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 350)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 351)									Int _hx_tmp23 = (c1->iiPos + (int)1);
HXDLIN( 351)									Int _hx_tmp24 = (c1->oPos + (int)1);
HXDLIN( 351)									Int _hx_tmp25 = (c1->oPos + (int)2);
HXDLIN( 351)									Int _hx_tmp26 = (c1->oPos + (int)3);
HXDLIN( 351)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp23).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp24)) ),c1->buffer->o->__get(_hx_tmp25),c1->buffer->o->__get(_hx_tmp26),c1->buffer->f->__get(c1->fPos));
HXLINE( 352)									Int _hx_tmp27 = (c1->iiPos + (int)1);
HXDLIN( 352)									Int _hx_tmp28 = (c1->oPos + (int)1);
HXDLIN( 352)									Int _hx_tmp29 = (c1->oPos + (int)2);
HXDLIN( 352)									Int _hx_tmp30 = (c1->oPos + (int)3);
HXDLIN( 352)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp27).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp28)) ),c1->buffer->o->__get(_hx_tmp29),c1->buffer->o->__get(_hx_tmp30),c1->buffer->f->__get(c1->fPos));
            								}
            								else {
HXLINE( 356)									{
HXLINE( 356)										Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 356)										switch((int)(_hx_tmp31)){
            											case (int)0: {
HXLINE( 356)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 356)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 356)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 356)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 356)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 356)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 356)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 356)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 356)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE( 356)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE( 356)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE( 356)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE( 356)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)8: {
HXLINE( 356)												hx::AddEq(data->fPos,(int)5);
HXDLIN( 356)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE( 356)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)11: {
            											}
            											break;
            											case (int)12: {
HXLINE( 356)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 356)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)13: {
HXLINE( 356)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 356)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 356)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 356)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)14: {
HXLINE( 356)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 356)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 356)												hx::AddEq(data->fPos,(int)2);
HXDLIN( 356)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE( 356)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)16: {
HXLINE( 356)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE( 356)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 356)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 356)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 357)									Int _hx_tmp32 = c2->buffer->i->__get(c2->iPos);
HXDLIN( 357)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginFill(_hx_tmp32,(int)1);
HXLINE( 358)									Int _hx_tmp33 = c2->buffer->i->__get(c2->iPos);
HXDLIN( 358)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginFill(_hx_tmp33,(int)1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 263)							{
HXLINE( 263)								Int _hx_tmp34 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 263)								switch((int)(_hx_tmp34)){
            									case (int)0: {
HXLINE( 263)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 263)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 263)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 263)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 263)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 263)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 263)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 263)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 263)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 263)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 263)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 263)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 263)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 263)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 263)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 263)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 263)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 263)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 263)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 263)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 263)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 263)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 263)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 263)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 263)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 263)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 263)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 263)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 263)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 263)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 263)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 264)							Float _hx_tmp35 = c3->buffer->f->__get(c3->fPos);
HXDLIN( 264)							Float _hx_tmp36 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN( 264)							Float _hx_tmp37 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN( 264)							Float _hx_tmp38 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN( 264)							Float _hx_tmp39 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN( 264)							Float _hx_tmp40 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 264)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->cubicCurveTo(_hx_tmp35,_hx_tmp36,_hx_tmp37,_hx_tmp38,_hx_tmp39,_hx_tmp40);
HXLINE( 265)							Float _hx_tmp41 = c3->buffer->f->__get(c3->fPos);
HXDLIN( 265)							Float _hx_tmp42 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN( 265)							Float _hx_tmp43 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN( 265)							Float _hx_tmp44 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN( 265)							Float _hx_tmp45 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN( 265)							Float _hx_tmp46 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 265)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->cubicCurveTo(_hx_tmp41,_hx_tmp42,_hx_tmp43,_hx_tmp44,_hx_tmp45,_hx_tmp46);
            						}
            						break;
            						case (int)4: {
HXLINE( 269)							{
HXLINE( 269)								Int _hx_tmp47 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 269)								switch((int)(_hx_tmp47)){
            									case (int)0: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 269)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 269)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 269)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 269)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 269)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 269)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 269)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 270)							Float _hx_tmp48 = c4->buffer->f->__get(c4->fPos);
HXDLIN( 270)							Float _hx_tmp49 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN( 270)							Float _hx_tmp50 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN( 270)							Float _hx_tmp51 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 270)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->curveTo(_hx_tmp48,_hx_tmp49,_hx_tmp50,_hx_tmp51);
HXLINE( 271)							Float _hx_tmp52 = c4->buffer->f->__get(c4->fPos);
HXDLIN( 271)							Float _hx_tmp53 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN( 271)							Float _hx_tmp54 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN( 271)							Float _hx_tmp55 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 271)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->curveTo(_hx_tmp52,_hx_tmp53,_hx_tmp54,_hx_tmp55);
            						}
            						break;
            						case (int)5: {
HXLINE( 364)							{
HXLINE( 364)								Int _hx_tmp56 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 364)								switch((int)(_hx_tmp56)){
            									case (int)0: {
HXLINE( 364)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 364)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 364)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 364)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 364)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 364)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 364)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 364)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 364)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 364)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 364)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 364)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 364)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 364)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 364)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 364)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 364)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 364)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 364)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 364)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 364)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 364)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 364)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 364)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 364)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 364)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 364)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 364)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 364)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 364)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 364)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 365)							Float _hx_tmp57 = c5->buffer->f->__get(c5->fPos);
HXDLIN( 365)							Float _hx_tmp58 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 365)							Float _hx_tmp59 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 365)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawCircle(_hx_tmp57,_hx_tmp58,_hx_tmp59);
HXLINE( 366)							Float _hx_tmp60 = c5->buffer->f->__get(c5->fPos);
HXDLIN( 366)							Float _hx_tmp61 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 366)							Float _hx_tmp62 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 366)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawCircle(_hx_tmp60,_hx_tmp61,_hx_tmp62);
            						}
            						break;
            						case (int)6: {
HXLINE( 370)							{
HXLINE( 370)								Int _hx_tmp63 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 370)								switch((int)(_hx_tmp63)){
            									case (int)0: {
HXLINE( 370)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 370)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 370)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 370)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 370)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 370)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 370)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 370)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 370)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 370)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 370)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 370)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 370)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 370)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 370)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 370)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 370)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 370)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 370)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 370)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 370)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 370)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 370)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 370)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 370)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 370)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 370)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 370)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 370)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 370)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 370)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 371)							Float _hx_tmp64 = c6->buffer->f->__get(c6->fPos);
HXDLIN( 371)							Float _hx_tmp65 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN( 371)							Float _hx_tmp66 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN( 371)							Float _hx_tmp67 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN( 371)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawEllipse(_hx_tmp64,_hx_tmp65,_hx_tmp66,_hx_tmp67);
HXLINE( 372)							Float _hx_tmp68 = c6->buffer->f->__get(c6->fPos);
HXDLIN( 372)							Float _hx_tmp69 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN( 372)							Float _hx_tmp70 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN( 372)							Float _hx_tmp71 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN( 372)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawEllipse(_hx_tmp68,_hx_tmp69,_hx_tmp70,_hx_tmp71);
            						}
            						break;
            						case (int)7: {
HXLINE( 376)							{
HXLINE( 376)								Int _hx_tmp72 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 376)								switch((int)(_hx_tmp72)){
            									case (int)0: {
HXLINE( 376)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 376)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 376)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 376)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 376)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 376)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 376)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 376)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 376)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 376)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 376)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 376)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 376)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 376)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 376)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 376)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 376)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 376)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 376)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 376)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 376)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 376)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 376)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 376)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 376)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 376)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 376)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 376)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 376)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 376)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 376)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 377)							Float _hx_tmp73 = c7->buffer->f->__get(c7->fPos);
HXDLIN( 377)							Float _hx_tmp74 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN( 377)							Float _hx_tmp75 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 377)							Float _hx_tmp76 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 377)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRect(_hx_tmp73,_hx_tmp74,_hx_tmp75,_hx_tmp76);
HXLINE( 378)							Float _hx_tmp77 = c7->buffer->f->__get(c7->fPos);
HXDLIN( 378)							Float _hx_tmp78 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN( 378)							Float _hx_tmp79 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 378)							Float _hx_tmp80 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 378)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRect(_hx_tmp77,_hx_tmp78,_hx_tmp79,_hx_tmp80);
            						}
            						break;
            						case (int)8: {
HXLINE( 382)							{
HXLINE( 382)								Int _hx_tmp81 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 382)								switch((int)(_hx_tmp81)){
            									case (int)0: {
HXLINE( 382)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 382)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 382)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 382)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 382)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 382)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 382)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 382)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 382)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 382)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 382)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 382)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 382)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 382)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 382)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 382)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 382)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 382)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 382)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 382)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 382)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 382)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 382)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 382)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 382)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 382)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 382)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 382)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 382)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 382)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 382)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 383)							Float _hx_tmp82 = c8->buffer->f->__get(c8->fPos);
HXDLIN( 383)							Float _hx_tmp83 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN( 383)							Float _hx_tmp84 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 383)							Float _hx_tmp85 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 383)							Float _hx_tmp86 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 383)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRoundRect(_hx_tmp82,_hx_tmp83,_hx_tmp84,_hx_tmp85,_hx_tmp86,c8->buffer->o->__get(c8->oPos));
HXLINE( 384)							Float _hx_tmp87 = c8->buffer->f->__get(c8->fPos);
HXDLIN( 384)							Float _hx_tmp88 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN( 384)							Float _hx_tmp89 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 384)							Float _hx_tmp90 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 384)							Float _hx_tmp91 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 384)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRoundRect(_hx_tmp87,_hx_tmp88,_hx_tmp89,_hx_tmp90,_hx_tmp91,c8->buffer->o->__get(c8->oPos));
            						}
            						break;
            						case (int)11: {
HXLINE( 302)							{
HXLINE( 302)								{
HXLINE( 302)									Int _hx_tmp92 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 302)									switch((int)(_hx_tmp92)){
            										case (int)0: {
HXLINE( 302)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 302)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 302)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 302)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 302)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 302)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 302)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 302)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 302)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE( 302)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE( 302)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE( 302)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE( 302)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 302)											hx::AddEq(data->fPos,(int)5);
HXDLIN( 302)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE( 302)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE( 302)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 302)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)13: {
HXLINE( 302)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 302)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 302)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 302)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)14: {
HXLINE( 302)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 302)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 302)											hx::AddEq(data->fPos,(int)2);
HXDLIN( 302)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE( 302)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)16: {
HXLINE( 302)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE( 302)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 302)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            							}
HXLINE( 303)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE( 304)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE( 306)							Bool _hx_tmp93;
HXDLIN( 306)							Bool _hx_tmp94 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 306)							if (_hx_tmp94) {
HXLINE( 306)								_hx_tmp93 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            							}
            							else {
HXLINE( 306)								_hx_tmp93 = false;
            							}
HXDLIN( 306)							if (_hx_tmp93) {
HXLINE( 308)								data->destroy();
HXLINE( 309)								return true;
            							}
HXLINE( 313)							Bool _hx_tmp95;
HXDLIN( 313)							Bool _hx_tmp96 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 313)							if (_hx_tmp96) {
HXLINE( 313)								_hx_tmp95 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            							}
            							else {
HXLINE( 313)								_hx_tmp95 = false;
            							}
HXDLIN( 313)							if (_hx_tmp95) {
HXLINE( 315)								data->destroy();
HXLINE( 316)								return true;
            							}
HXLINE( 320)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE( 321)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            						}
            						break;
            						case (int)12: {
HXLINE( 297)							{
HXLINE( 297)								Int _hx_tmp97 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 297)								switch((int)(_hx_tmp97)){
            									case (int)0: {
HXLINE( 297)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 297)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 297)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 297)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 297)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 297)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 297)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 297)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 297)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 297)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 297)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 297)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 297)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 297)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 297)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 297)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 297)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 297)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 297)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 297)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 297)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 297)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 297)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 297)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 297)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 297)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 297)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 297)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 297)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 297)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 297)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 298)							Int _hx_tmp98 = (c9->oPos + (int)1);
HXDLIN( 298)							Int _hx_tmp99 = (c9->bPos + (int)1);
HXDLIN( 298)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::geom::Matrix)(c9->buffer->o->__get(_hx_tmp98)) ),c9->buffer->b->__get(c9->bPos),c9->buffer->b->__get(_hx_tmp99));
            						}
            						break;
            						case (int)13: {
HXLINE( 292)							{
HXLINE( 292)								Int _hx_tmp100 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 292)								switch((int)(_hx_tmp100)){
            									case (int)0: {
HXLINE( 292)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 292)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 292)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 292)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 292)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 292)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 292)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 292)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 292)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 292)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 292)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 292)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 292)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 292)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 292)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 292)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 292)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 292)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 292)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 292)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 292)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 292)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 292)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 292)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 292)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 292)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 292)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 292)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 292)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 292)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 292)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 293)							Int _hx_tmp101 = (c10->iiPos + (int)1);
HXDLIN( 293)							Int _hx_tmp102 = (c10->oPos + (int)1);
HXDLIN( 293)							Int _hx_tmp103 = (c10->oPos + (int)2);
HXDLIN( 293)							Int _hx_tmp104 = (c10->oPos + (int)3);
HXDLIN( 293)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineGradientStyle(c10->buffer->o->__get(c10->oPos),c10->buffer->ii->__get(c10->iiPos).StaticCast< ::Array< Int > >(),c10->buffer->ff->__get(c10->ffPos).StaticCast< ::Array< Float > >(),c10->buffer->ii->__get(_hx_tmp101).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get(_hx_tmp102)) ),c10->buffer->o->__get(_hx_tmp103),c10->buffer->o->__get(_hx_tmp104),c10->buffer->f->__get(c10->fPos));
            						}
            						break;
            						case (int)14: {
HXLINE( 287)							{
HXLINE( 287)								Int _hx_tmp105 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 287)								switch((int)(_hx_tmp105)){
            									case (int)0: {
HXLINE( 287)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 287)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 287)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 287)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 287)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 287)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 287)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 287)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 287)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 287)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 287)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 287)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 287)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 287)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 287)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 287)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 287)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 287)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 287)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 287)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 287)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 287)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 287)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 287)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 287)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 287)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 287)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 287)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 287)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 287)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 287)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 288)							Int _hx_tmp106 = (c11->oPos + (int)1);
HXDLIN( 288)							Int _hx_tmp107 = (c11->oPos + (int)2);
HXDLIN( 288)							Int _hx_tmp108 = (c11->oPos + (int)3);
HXDLIN( 288)							Int _hx_tmp109 = (c11->fPos + (int)1);
HXDLIN( 288)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->i->__get(c11->iPos),(int)1,c11->buffer->b->__get(c11->bPos),c11->buffer->o->__get(_hx_tmp106),c11->buffer->o->__get(_hx_tmp107),c11->buffer->o->__get(_hx_tmp108),c11->buffer->f->__get(_hx_tmp109));
            						}
            						break;
            						case (int)15: {
HXLINE( 275)							{
HXLINE( 275)								Int _hx_tmp110 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 275)								switch((int)(_hx_tmp110)){
            									case (int)0: {
HXLINE( 275)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 275)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 275)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 275)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 275)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 275)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 275)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 275)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 275)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 275)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 275)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 275)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 275)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 275)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 275)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 275)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 275)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 275)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 275)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 275)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 275)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 275)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 275)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 275)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 275)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 275)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 275)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 275)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 275)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 275)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 275)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 276)							Float _hx_tmp111 = c12->buffer->f->__get(c12->fPos);
HXDLIN( 276)							Float _hx_tmp112 = c12->buffer->f->__get((c12->fPos + (int)1));
HXDLIN( 276)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->lineTo(_hx_tmp111,_hx_tmp112);
HXLINE( 277)							Float _hx_tmp113 = c12->buffer->f->__get(c12->fPos);
HXDLIN( 277)							Float _hx_tmp114 = c12->buffer->f->__get((c12->fPos + (int)1));
HXDLIN( 277)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineTo(_hx_tmp113,_hx_tmp114);
            						}
            						break;
            						case (int)16: {
HXLINE( 281)							{
HXLINE( 281)								Int _hx_tmp115 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 281)								switch((int)(_hx_tmp115)){
            									case (int)0: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 281)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 281)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 281)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 281)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 282)							Float _hx_tmp116 = c13->buffer->f->__get(c13->fPos);
HXDLIN( 282)							Float _hx_tmp117 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 282)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->moveTo(_hx_tmp116,_hx_tmp117);
HXLINE( 283)							Float _hx_tmp118 = c13->buffer->f->__get(c13->fPos);
HXDLIN( 283)							Float _hx_tmp119 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 283)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->moveTo(_hx_tmp118,_hx_tmp119);
            						}
            						break;
            						default:{
HXLINE( 388)							{
HXLINE( 388)								Int _hx_tmp120 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 388)								switch((int)(_hx_tmp120)){
            									case (int)0: {
HXLINE( 388)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 388)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 388)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 388)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 388)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 388)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 388)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 388)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 388)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 388)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 388)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 388)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 388)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 388)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 388)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 388)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 388)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 388)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 388)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 388)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 388)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 388)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 388)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 388)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 388)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 388)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 388)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 388)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 388)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 388)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE( 394)			Int _hx_tmp121 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->get_length();
HXDLIN( 394)			if ((_hx_tmp121 > (int)0)) {
HXLINE( 396)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
            			}
HXLINE( 400)			Int _hx_tmp122 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->get_length();
HXDLIN( 400)			if ((_hx_tmp122 > (int)0)) {
HXLINE( 402)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
            			}
HXLINE( 406)			data->destroy();
HXLINE( 408)			Bool _hx_tmp123;
HXDLIN( 408)			Bool _hx_tmp124 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 408)			if (_hx_tmp124) {
HXLINE( 408)				_hx_tmp123 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            			}
            			else {
HXLINE( 408)				_hx_tmp123 = false;
            			}
HXDLIN( 408)			if (_hx_tmp123) {
HXLINE( 410)				return true;
            			}
HXLINE( 414)			Bool _hx_tmp125;
HXDLIN( 414)			Bool _hx_tmp126 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 414)			if (_hx_tmp126) {
HXLINE( 414)				_hx_tmp125 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            			}
            			else {
HXLINE( 414)				_hx_tmp125 = false;
            			}
HXDLIN( 414)			if (_hx_tmp125) {
HXLINE( 416)				return true;
            			}
            		}
HXLINE( 423)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,hitTest,return )

Bool CairoGraphics_obj::isCCW(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","isCCW",0x5353f111,"openfl._internal.renderer.cairo.CairoGraphics.isCCW","openfl/_internal/renderer/cairo/CairoGraphics.hx",430,0x744ae94c)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE( 430)		return ((((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1))) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CairoGraphics_obj,isCCW,return )

 ::Dynamic CairoGraphics_obj::normalizeUVT( ::openfl::_Vector::FloatVector uvt,hx::Null< Bool >  __o_skipT){
Bool skipT = __o_skipT.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","normalizeUVT",0xc9c604e2,"openfl._internal.renderer.cairo.CairoGraphics.normalizeUVT","openfl/_internal/renderer/cairo/CairoGraphics.hx",435,0x744ae94c)
            	HX_STACK_ARG(uvt,"uvt")
            	HX_STACK_ARG(skipT,"skipT")
HXLINE( 437)		HX_VARI( Float,max) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 438)		HX_VARI( Float,tmp) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 439)		HX_VARI( Int,len) = uvt->get_length();
HXLINE( 441)		{
HXLINE( 441)			HX_VARI( Int,_g1) = (int)1;
HXDLIN( 441)			HX_VARI( Int,_g) = (len + (int)1);
HXDLIN( 441)			while((_g1 < _g)){
HXLINE( 441)				HX_VARI( Int,t) = _g1++;
HXLINE( 443)				Bool _hx_tmp;
HXDLIN( 443)				if (skipT) {
HXLINE( 443)					_hx_tmp = (hx::Mod(t,(int)3) == (int)0);
            				}
            				else {
HXLINE( 443)					_hx_tmp = false;
            				}
HXDLIN( 443)				if (_hx_tmp) {
HXLINE( 445)					continue;
            				}
HXLINE( 449)				tmp = uvt->get((t - (int)1));
HXLINE( 451)				Bool _hx_tmp1 = (max < tmp);
HXDLIN( 451)				if (_hx_tmp1) {
HXLINE( 453)					max = tmp;
            				}
            			}
            		}
HXLINE( 459)		Int length = null();
HXDLIN( 459)		Bool fixed = null();
HXDLIN( 459)		HX_VARI(  ::openfl::_Vector::FloatVector,result) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXLINE( 461)		{
HXLINE( 461)			HX_VARI_NAME( Int,_g11,"_g1") = (int)1;
HXDLIN( 461)			HX_VARI_NAME( Int,_g2,"_g") = (len + (int)1);
HXDLIN( 461)			while((_g11 < _g2)){
HXLINE( 461)				HX_VARI_NAME( Int,t1,"t") = _g11++;
HXLINE( 463)				Bool _hx_tmp2;
HXDLIN( 463)				if (skipT) {
HXLINE( 463)					_hx_tmp2 = (hx::Mod(t1,(int)3) == (int)0);
            				}
            				else {
HXLINE( 463)					_hx_tmp2 = false;
            				}
HXDLIN( 463)				if (_hx_tmp2) {
HXLINE( 465)					continue;
            				}
HXLINE( 469)				{
HXLINE( 469)					Float x = ((Float)uvt->get((t1 - (int)1)) / (Float)max);
HXDLIN( 469)					result->push(x);
            				}
            			}
            		}
HXLINE( 473)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("max",a4,0a,53,00),max)
            			->setFixed(1,HX_("uvt",f3,2e,59,00),result));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,normalizeUVT,return )

void CairoGraphics_obj::playCommands( ::openfl::_internal::renderer::DrawCommandBuffer commands,hx::Null< Bool >  __o_stroke){
Bool stroke = __o_stroke.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","playCommands",0xcc85aa58,"openfl._internal.renderer.cairo.CairoGraphics.playCommands","openfl/_internal/renderer/cairo/CairoGraphics.hx",478,0x744ae94c)
            	HX_STACK_ARG(commands,"commands")
            	HX_STACK_ARG(stroke,"stroke")
HXLINE( 480)		Int _hx_tmp = commands->get_length();
HXDLIN( 480)		if ((_hx_tmp == (int)0)) {
HXLINE( 480)			return;
            		}
HXLINE( 482)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds;
HXLINE( 484)		HX_VARI( Float,offsetX) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 485)		HX_VARI( Float,offsetY) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 487)		HX_VARI( Float,positionX) = ((Float)0.0);
HXLINE( 488)		HX_VARI( Float,positionY) = ((Float)0.0);
HXLINE( 490)		HX_VARI( Bool,closeGap) = false;
HXLINE( 491)		HX_VARI( Float,startX) = ((Float)0.0);
HXLINE( 492)		HX_VARI( Float,startY) = ((Float)0.0);
HXLINE( 494)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_fillRule((int)1);
HXLINE( 495)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_antialias((int)3);
HXLINE( 497)		HX_VARI( Bool,hasPath) = false;
HXLINE( 499)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(commands);
HXLINE( 501)		{
HXLINE( 501)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 501)			HX_VARI( ::Array< ::Dynamic>,_g1) = commands->types;
HXDLIN( 501)			while((_g < _g1->length)){
HXLINE( 501)				HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 501)				++_g;
HXLINE( 503)				Int _hx_tmp1 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 503)				switch((int)(_hx_tmp1)){
            					case (int)0: {
HXLINE( 685)						{
HXLINE( 685)							Int _hx_tmp2 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 685)							switch((int)(_hx_tmp2)){
            								case (int)0: {
HXLINE( 685)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 685)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 685)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 685)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 685)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 685)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 685)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 685)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 685)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 685)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 685)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 685)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 685)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 685)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 685)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 685)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 685)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 685)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 685)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 685)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 685)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 685)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 685)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 685)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 685)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 685)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 685)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 685)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 685)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 685)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 685)						HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 686)						 ::openfl::display::BitmapData _hx_tmp3 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 686)						 ::openfl::geom::Matrix _hx_tmp4 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 686)						Bool _hx_tmp5 = c->buffer->b->__get(c->bPos);
HXDLIN( 686)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createImagePattern(_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXLINE( 688)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXLINE( 689)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapRepeat = c->buffer->b->__get(c->bPos);
HXLINE( 691)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
            					}
            					break;
            					case (int)1: {
HXLINE( 695)						{
HXLINE( 695)							Int _hx_tmp6 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 695)							switch((int)(_hx_tmp6)){
            								case (int)0: {
HXLINE( 695)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 695)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 695)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 695)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 695)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 695)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 695)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 695)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 695)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 695)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 695)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 695)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 695)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 695)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 695)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 695)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 695)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 695)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 695)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 695)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 695)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 695)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 695)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 695)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 695)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 695)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 695)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 695)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 695)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 695)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 695)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 696)						Bool _hx_tmp7 = (c1->buffer->f->__get(c1->fPos) < ((Float)0.005));
HXDLIN( 696)						if (_hx_tmp7) {
HXLINE( 698)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
            						}
            						else {
HXLINE( 702)							Bool _hx_tmp8 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern );
HXDLIN( 702)							if (_hx_tmp8) {
HXLINE( 704)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = null();
            							}
HXLINE( 708)							Float _hx_tmp9 = ((Float)hx::UShr(((int)c1->buffer->i->__get(c1->iPos) & (int)(int)16711680),(int)16) / (Float)(int)255);
HXDLIN( 708)							Float _hx_tmp10 = ((Float)hx::UShr(((int)c1->buffer->i->__get(c1->iPos) & (int)(int)65280),(int)8) / (Float)(int)255);
HXDLIN( 708)							Float _hx_tmp11 = ((Float)((int)c1->buffer->i->__get(c1->iPos) & (int)(int)255) / (Float)(int)255);
HXDLIN( 708)							Float _hx_tmp12 = c1->buffer->f->__get(c1->fPos);
HXDLIN( 708)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGBA(_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12);
HXLINE( 709)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
            						}
HXLINE( 713)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            					}
            					break;
            					case (int)2: {
HXLINE( 717)						{
HXLINE( 717)							Int _hx_tmp13 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 717)							switch((int)(_hx_tmp13)){
            								case (int)0: {
HXLINE( 717)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 717)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 717)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 717)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 717)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 717)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 717)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 717)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 717)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 717)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 717)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 717)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 717)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 717)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 717)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 717)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 717)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 717)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 717)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 717)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 717)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 717)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 717)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 717)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 717)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 717)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 717)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 717)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 717)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 717)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 717)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 718)						Bool _hx_tmp14 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern );
HXDLIN( 718)						if (_hx_tmp14) {
HXLINE( 720)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = null();
            						}
HXLINE( 724)						Int _hx_tmp15 = (c2->iiPos + (int)1);
HXDLIN( 724)						Int _hx_tmp16 = (c2->oPos + (int)1);
HXDLIN( 724)						Int _hx_tmp17 = (c2->oPos + (int)2);
HXDLIN( 724)						Int _hx_tmp18 = (c2->oPos + (int)3);
HXDLIN( 724)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createGradientPattern(c2->buffer->o->__get(c2->oPos),c2->buffer->ii->__get(c2->iiPos).StaticCast< ::Array< Int > >(),c2->buffer->ff->__get(c2->ffPos).StaticCast< ::Array< Float > >(),c2->buffer->ii->__get(_hx_tmp15).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c2->buffer->o->__get(_hx_tmp16)) ),c2->buffer->o->__get(_hx_tmp17),c2->buffer->o->__get(_hx_tmp18),c2->buffer->f->__get(c2->fPos));
HXLINE( 726)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
HXLINE( 727)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            					}
            					break;
            					case (int)3: {
HXLINE( 507)						{
HXLINE( 507)							Int _hx_tmp19 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 507)							switch((int)(_hx_tmp19)){
            								case (int)0: {
HXLINE( 507)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 507)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 507)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 507)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 507)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 507)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 507)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 507)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 507)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 507)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 507)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 507)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 507)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 507)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 507)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 507)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 507)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 507)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 507)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 507)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 507)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 507)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 507)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 507)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 507)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 507)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 507)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 507)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 507)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 507)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 507)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 508)						hasPath = true;
HXLINE( 509)						Float _hx_tmp20 = (c3->buffer->f->__get(c3->fPos) - offsetX);
HXDLIN( 509)						Float _hx_tmp21 = (c3->buffer->f->__get((c3->fPos + (int)1)) - offsetY);
HXDLIN( 509)						Float _hx_tmp22 = (c3->buffer->f->__get((c3->fPos + (int)2)) - offsetX);
HXDLIN( 509)						Float _hx_tmp23 = (c3->buffer->f->__get((c3->fPos + (int)3)) - offsetY);
HXDLIN( 509)						Float _hx_tmp24 = (c3->buffer->f->__get((c3->fPos + (int)4)) - offsetX);
HXDLIN( 509)						Float _hx_tmp25 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 509)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(_hx_tmp20,_hx_tmp21,_hx_tmp22,_hx_tmp23,_hx_tmp24,(_hx_tmp25 - offsetY));
            					}
            					break;
            					case (int)4: {
HXLINE( 513)						{
HXLINE( 513)							Int _hx_tmp26 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 513)							switch((int)(_hx_tmp26)){
            								case (int)0: {
HXLINE( 513)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 513)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 513)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 513)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 513)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 513)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 513)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 513)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 513)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 513)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 513)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 513)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 513)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 513)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 513)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 513)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 513)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 513)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 513)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 513)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 513)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 513)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 513)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 513)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 513)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 513)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 513)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 513)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 513)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 513)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 513)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 514)						hasPath = true;
HXLINE( 515)						Float _hx_tmp27 = (c4->buffer->f->__get(c4->fPos) - offsetX);
HXDLIN( 515)						Float _hx_tmp28 = (c4->buffer->f->__get((c4->fPos + (int)1)) - offsetY);
HXDLIN( 515)						Float _hx_tmp29 = (c4->buffer->f->__get((c4->fPos + (int)2)) - offsetX);
HXDLIN( 515)						Float _hx_tmp30 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 515)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(_hx_tmp27,_hx_tmp28,_hx_tmp29,(_hx_tmp30 - offsetY));
            					}
            					break;
            					case (int)5: {
HXLINE( 519)						{
HXLINE( 519)							Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 519)							switch((int)(_hx_tmp31)){
            								case (int)0: {
HXLINE( 519)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 519)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 519)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 519)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 519)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 519)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 519)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 519)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 519)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 519)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 519)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 519)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 519)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 519)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 519)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 519)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 519)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 519)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 519)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 519)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 519)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 519)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 519)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 519)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 519)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 519)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 519)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 519)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 519)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 519)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 519)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 520)						hasPath = true;
HXLINE( 521)						Float _hx_tmp32 = ((c5->buffer->f->__get(c5->fPos) - offsetX) + c5->buffer->f->__get((c5->fPos + (int)2)));
HXDLIN( 521)						Float _hx_tmp33 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 521)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(_hx_tmp32,(_hx_tmp33 - offsetY));
HXLINE( 522)						Float _hx_tmp34 = (c5->buffer->f->__get(c5->fPos) - offsetX);
HXDLIN( 522)						Float _hx_tmp35 = (c5->buffer->f->__get((c5->fPos + (int)1)) - offsetY);
HXDLIN( 522)						Float _hx_tmp36 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 522)						Float _hx_tmp37 = (::Math_obj::PI * (int)2);
HXDLIN( 522)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->arc(_hx_tmp34,_hx_tmp35,_hx_tmp36,(int)0,_hx_tmp37);
            					}
            					break;
            					case (int)6: {
HXLINE( 532)						{
HXLINE( 532)							Int _hx_tmp38 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 532)							switch((int)(_hx_tmp38)){
            								case (int)0: {
HXLINE( 532)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 532)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 532)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 532)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 532)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 532)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 532)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 532)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 532)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 532)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 532)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 532)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 532)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 532)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 532)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 532)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 532)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 532)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 532)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 532)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 532)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 532)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 532)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 532)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 532)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 532)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 532)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 532)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 532)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 532)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 532)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 533)						hasPath = true;
HXLINE( 535)						HX_VARI( Float,x) = c6->buffer->f->__get(c6->fPos);
HXLINE( 536)						HX_VARI( Float,y) = c6->buffer->f->__get((c6->fPos + (int)1));
HXLINE( 537)						HX_VARI( Float,width) = c6->buffer->f->__get((c6->fPos + (int)2));
HXLINE( 538)						HX_VARI( Float,height) = c6->buffer->f->__get((c6->fPos + (int)3));
HXLINE( 540)						hx::SubEq(x,offsetX);
HXLINE( 541)						hx::SubEq(y,offsetY);
HXLINE( 543)						HX_VARI( Float,ox) = (((Float)width / (Float)(int)2) * ((Float).5522848));
HXDLIN( 543)						HX_VARI( Float,oy) = (((Float)height / (Float)(int)2) * ((Float).5522848));
HXDLIN( 543)						HX_VARI( Float,xe) = (x + width);
HXDLIN( 543)						HX_VARI( Float,ye) = (y + height);
HXDLIN( 543)						HX_VARI( Float,xm) = (x + ((Float)width / (Float)(int)2));
HXDLIN( 543)						HX_VARI( Float,ym) = (y + ((Float)height / (Float)(int)2));
HXLINE( 551)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x,ym);
HXLINE( 552)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(x,(ym - oy),(xm - ox),y,xm,y);
HXLINE( 553)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((xm + ox),y,xe,(ym - oy),xe,ym);
HXLINE( 554)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(xe,(ym + oy),(xm + ox),ye,xm,ye);
HXLINE( 555)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((xm - ox),ye,x,(ym + oy),x,ym);
            					}
            					break;
            					case (int)7: {
HXLINE( 526)						{
HXLINE( 526)							Int _hx_tmp39 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 526)							switch((int)(_hx_tmp39)){
            								case (int)0: {
HXLINE( 526)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 526)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 526)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 526)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 526)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 526)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 526)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 526)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 526)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 526)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 526)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 526)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 526)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 526)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 526)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 526)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 526)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 526)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 526)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 526)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 526)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 526)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 526)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 526)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 526)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 526)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 526)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 526)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 526)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 526)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 526)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 527)						hasPath = true;
HXLINE( 528)						Float _hx_tmp40 = (c7->buffer->f->__get(c7->fPos) - offsetX);
HXDLIN( 528)						Float _hx_tmp41 = (c7->buffer->f->__get((c7->fPos + (int)1)) - offsetY);
HXDLIN( 528)						Float _hx_tmp42 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 528)						Float _hx_tmp43 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 528)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->rectangle(_hx_tmp40,_hx_tmp41,_hx_tmp42,_hx_tmp43);
            					}
            					break;
            					case (int)8: {
HXLINE( 559)						{
HXLINE( 559)							Int _hx_tmp44 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 559)							switch((int)(_hx_tmp44)){
            								case (int)0: {
HXLINE( 559)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 559)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 559)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 559)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 559)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 559)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 559)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 559)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 559)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 559)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 559)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 559)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 559)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 559)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 559)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 559)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 559)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 559)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 559)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 559)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 559)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 559)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 559)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 559)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 559)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 559)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 559)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 559)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 559)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 559)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 559)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 560)						hasPath = true;
HXLINE( 561)						Float _hx_tmp45 = (c8->buffer->f->__get(c8->fPos) - offsetX);
HXDLIN( 561)						Float _hx_tmp46 = (c8->buffer->f->__get((c8->fPos + (int)1)) - offsetY);
HXDLIN( 561)						Float _hx_tmp47 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 561)						Float _hx_tmp48 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 561)						Float _hx_tmp49 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 561)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::drawRoundRect(_hx_tmp45,_hx_tmp46,_hx_tmp47,_hx_tmp48,_hx_tmp49,c8->buffer->o->__get(c8->oPos));
            					}
            					break;
            					case (int)10: {
HXLINE( 731)						{
HXLINE( 731)							Int _hx_tmp50 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 731)							switch((int)(_hx_tmp50)){
            								case (int)0: {
HXLINE( 731)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 731)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 731)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 731)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 731)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 731)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 731)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 731)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 731)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 731)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 731)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 731)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 731)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 731)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 731)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 731)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 731)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 731)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 731)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 731)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 731)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 731)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 731)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 731)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 731)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 731)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 731)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 731)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 731)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 731)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 731)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 732)						HX_VARI(  ::openfl::_Vector::FloatVector,v) = ( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(c9->oPos)) );
HXLINE( 733)						HX_VARI(  ::openfl::_Vector::IntVector,ind) = ( ( ::openfl::_Vector::IntVector)(c9->buffer->o->__get((c9->oPos + (int)1))) );
HXLINE( 734)						HX_VARI(  ::openfl::_Vector::FloatVector,uvt) = ( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get((c9->oPos + (int)2))) );
HXLINE( 735)						HX_VARI( Bool,colorFill) = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill );
HXLINE( 737)						Bool _hx_tmp51;
HXDLIN( 737)						if (colorFill) {
HXLINE( 737)							_hx_tmp51 = hx::IsNotNull( uvt );
            						}
            						else {
HXLINE( 737)							_hx_tmp51 = false;
            						}
HXDLIN( 737)						if (_hx_tmp51) {
HXLINE( 739)							goto _hx_goto_5;
            						}
HXLINE( 743)						HX_VARI_NAME( Int,width1,"width") = (int)0;
HXLINE( 744)						HX_VARI_NAME( Int,height1,"height") = (int)0;
HXLINE( 746)						if (!(colorFill)) {
HXLINE( 750)							Bool _hx_tmp52 = hx::IsNull( uvt );
HXDLIN( 750)							if (_hx_tmp52) {
HXLINE( 752)								Int length = null();
HXDLIN( 752)								Bool fixed = null();
HXDLIN( 752)								uvt =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXLINE( 754)								{
HXLINE( 754)									HX_VARI( Int,_g3) = (int)0;
HXDLIN( 754)									Int _hx_tmp53 = v->get_length();
HXDLIN( 754)									HX_VARI( Int,_g2) = ::Std_obj::_hx_int(((Float)_hx_tmp53 / (Float)(int)2));
HXDLIN( 754)									while((_g3 < _g2)){
HXLINE( 754)										HX_VARI( Int,i) = _g3++;
HXLINE( 756)										{
HXLINE( 756)											Float x1 = ((Float)v->get((i * (int)2)) / (Float)::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->width);
HXDLIN( 756)											uvt->push(x1);
            										}
HXLINE( 757)										{
HXLINE( 757)											Float x2 = ((Float)v->get(((i * (int)2) + (int)1)) / (Float)::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->height);
HXDLIN( 757)											uvt->push(x2);
            										}
            									}
            								}
            							}
HXLINE( 763)							::Dynamic this1 = ( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get((c9->oPos + (int)2))) );
HXDLIN( 763)							Int _hx_tmp54 = ::openfl::_Vector::IVector_obj::get_length(this1);
HXDLIN( 763)							Int _hx_tmp55 = v->get_length();
HXLINE( 764)							HX_VARI(  ::Dynamic,normalizedUVT) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::normalizeUVT(uvt,(_hx_tmp54 != _hx_tmp55));
HXLINE( 765)							HX_VARI( Float,maxUVT) = ( (Float)(normalizedUVT->__Field(HX_("max",a4,0a,53,00),hx::paccDynamic)) );
HXLINE( 766)							uvt = ( ( ::openfl::_Vector::FloatVector)(normalizedUVT->__Field(HX_("uvt",f3,2e,59,00),hx::paccDynamic)) );
HXLINE( 768)							if ((maxUVT > (int)1)) {
HXLINE( 769)								width1 = ::Std_obj::_hx_int(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width);
HXLINE( 770)								height1 = ::Std_obj::_hx_int(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height);
            							}
            							else {
HXLINE( 775)								width1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->width;
HXLINE( 776)								height1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->height;
            							}
            						}
HXLINE( 782)						HX_VARI_NAME( Int,i1,"i") = (int)0;
HXLINE( 783)						HX_VARI( Int,l) = ind->get_length();
HXLINE( 785)						HX_VAR( Int,a_);
HXDLIN( 785)						HX_VAR( Int,b_);
HXDLIN( 785)						HX_VAR( Int,c_);
HXLINE( 786)						HX_VAR( Int,iax);
HXDLIN( 786)						HX_VAR( Int,iay);
HXDLIN( 786)						HX_VAR( Int,ibx);
HXDLIN( 786)						HX_VAR( Int,iby);
HXDLIN( 786)						HX_VAR( Int,icx);
HXDLIN( 786)						HX_VAR( Int,icy);
HXLINE( 787)						HX_VAR_NAME( Float,x11,"x1");
HXDLIN( 787)						HX_VAR( Float,y1);
HXDLIN( 787)						HX_VAR_NAME( Float,x21,"x2");
HXDLIN( 787)						HX_VAR( Float,y2);
HXDLIN( 787)						HX_VAR( Float,x3);
HXDLIN( 787)						HX_VAR( Float,y3);
HXLINE( 788)						HX_VAR( Float,uvx1);
HXDLIN( 788)						HX_VAR( Float,uvy1);
HXDLIN( 788)						HX_VAR( Float,uvx2);
HXDLIN( 788)						HX_VAR( Float,uvy2);
HXDLIN( 788)						HX_VAR( Float,uvx3);
HXDLIN( 788)						HX_VAR( Float,uvy3);
HXLINE( 789)						HX_VAR( Float,denom);
HXLINE( 790)						HX_VAR( Float,t1);
HXDLIN( 790)						HX_VAR( Float,t2);
HXDLIN( 790)						HX_VAR( Float,t3);
HXDLIN( 790)						HX_VAR( Float,t4);
HXLINE( 791)						HX_VAR( Float,dx);
HXDLIN( 791)						HX_VAR( Float,dy);
HXLINE( 793)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_antialias((int)1);
HXLINE( 795)						while((i1 < l)){
HXLINE( 797)							a_ = i1;
HXLINE( 798)							b_ = (i1 + (int)1);
HXLINE( 799)							c_ = (i1 + (int)2);
HXLINE( 801)							iax = (ind->get(a_) * (int)2);
HXLINE( 802)							Int _hx_tmp56 = (ind->get(a_) * (int)2);
HXDLIN( 802)							iay = (_hx_tmp56 + (int)1);
HXLINE( 803)							ibx = (ind->get(b_) * (int)2);
HXLINE( 804)							Int _hx_tmp57 = (ind->get(b_) * (int)2);
HXDLIN( 804)							iby = (_hx_tmp57 + (int)1);
HXLINE( 805)							icx = (ind->get(c_) * (int)2);
HXLINE( 806)							Int _hx_tmp58 = (ind->get(c_) * (int)2);
HXDLIN( 806)							icy = (_hx_tmp58 + (int)1);
HXLINE( 808)							x11 = v->get(iax);
HXLINE( 809)							y1 = v->get(iay);
HXLINE( 810)							x21 = v->get(ibx);
HXLINE( 811)							y2 = v->get(iby);
HXLINE( 812)							x3 = v->get(icx);
HXLINE( 813)							y3 = v->get(icy);
HXLINE( 815)							 ::Dynamic _hx_switch_0 = c9->buffer->o->__get((c9->oPos + (int)3));
            							if (  (_hx_switch_0==(int)0) ){
HXLINE( 828)								if (((((x21 - x11) * (y3 - y1)) - ((y2 - y1) * (x3 - x11))) < (int)0)) {
HXLINE( 830)									hx::AddEq(i1,(int)3);
HXLINE( 831)									continue;
            								}
HXLINE( 828)								goto _hx_goto_8;
            							}
            							if (  (_hx_switch_0==(int)2) ){
HXLINE( 819)								if (!(((((x21 - x11) * (y3 - y1)) - ((y2 - y1) * (x3 - x11))) < (int)0))) {
HXLINE( 821)									hx::AddEq(i1,(int)3);
HXLINE( 822)									continue;
            								}
HXLINE( 819)								goto _hx_goto_8;
            							}
            							/* default */{
            							}
            							_hx_goto_8:;
HXLINE( 839)							if (colorFill) {
HXLINE( 841)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 842)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x11,y1);
HXLINE( 843)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x21,y2);
HXLINE( 844)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x3,y3);
HXLINE( 845)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 846)								Bool _hx_tmp59 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 846)								if (_hx_tmp59) {
HXLINE( 846)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            								}
HXLINE( 847)								hx::AddEq(i1,(int)3);
HXLINE( 848)								continue;
            							}
HXLINE( 852)							 ::lime::math::Matrix3 _hx_tmp60 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___renderTransform->_hx___toMatrix3();
HXDLIN( 852)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix(_hx_tmp60);
HXLINE( 856)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 857)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x11,y1);
HXLINE( 858)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x21,y2);
HXLINE( 859)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x3,y3);
HXLINE( 860)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 863)							uvx1 = (uvt->get(iax) * width1);
HXLINE( 864)							uvx2 = (uvt->get(ibx) * width1);
HXLINE( 865)							uvx3 = (uvt->get(icx) * width1);
HXLINE( 866)							uvy1 = (uvt->get(iay) * height1);
HXLINE( 867)							uvy2 = (uvt->get(iby) * height1);
HXLINE( 868)							uvy3 = (uvt->get(icy) * height1);
HXLINE( 870)							denom = ((((uvx1 * (uvy3 - uvy2)) - (uvx2 * uvy3)) + (uvx3 * uvy2)) + ((uvx2 - uvx3) * uvy1));
HXLINE( 872)							if ((denom == (int)0)) {
HXLINE( 874)								hx::AddEq(i1,(int)3);
HXLINE( 875)								continue;
            							}
HXLINE( 879)							t1 = ((Float)-(((((uvy1 * (x3 - x21)) - (uvy2 * x3)) + (uvy3 * x21)) + ((uvy2 - uvy3) * x11))) / (Float)denom);
HXLINE( 880)							t2 = ((Float)((((uvy2 * y3) + (uvy1 * (y2 - y3))) - (uvy3 * y2)) + ((uvy3 - uvy2) * y1)) / (Float)denom);
HXLINE( 881)							t3 = ((Float)((((uvx1 * (x3 - x21)) - (uvx2 * x3)) + (uvx3 * x21)) + ((uvx2 - uvx3) * x11)) / (Float)denom);
HXLINE( 882)							t4 = ((Float)-(((((uvx2 * y3) + (uvx1 * (y2 - y3))) - (uvx3 * y2)) + ((uvx3 - uvx2) * y1))) / (Float)denom);
HXLINE( 883)							dx = ((Float)(((uvx1 * ((uvy3 * x21) - (uvy2 * x3))) + (uvy1 * ((uvx2 * x3) - (uvx3 * x21)))) + (((uvx3 * uvy2) - (uvx2 * uvy3)) * x11)) / (Float)denom);
HXLINE( 884)							dy = ((Float)(((uvx1 * ((uvy3 * y2) - (uvy2 * y3))) + (uvy1 * ((uvx2 * y3) - (uvx3 * y2)))) + (((uvx3 * uvy2) - (uvx2 * uvy3)) * y1)) / (Float)denom);
HXLINE( 887)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix( ::lime::math::Matrix3_obj::__new(t1,t2,t3,t4,dx,dy));
HXLINE( 888)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern);
HXLINE( 889)							Bool _hx_tmp61 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 889)							if (_hx_tmp61) {
HXLINE( 889)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fill();
            							}
HXLINE( 891)							hx::AddEq(i1,(int)3);
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 671)						{
HXLINE( 671)							Int _hx_tmp62 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 671)							switch((int)(_hx_tmp62)){
            								case (int)0: {
HXLINE( 671)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 671)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 671)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 671)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 671)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 671)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 671)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 671)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 671)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 671)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 671)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 671)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 671)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 671)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 671)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 671)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 671)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 671)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 671)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 671)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 671)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 671)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 671)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 671)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 671)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 671)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 671)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 671)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 671)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 671)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 671)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 672)						Bool _hx_tmp63;
HXDLIN( 672)						if (stroke) {
HXLINE( 672)							_hx_tmp63 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 672)							_hx_tmp63 = false;
            						}
HXDLIN( 672)						if (_hx_tmp63) {
HXLINE( 674)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(null());
            						}
HXLINE( 678)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 679)						Int _hx_tmp64 = (c10->oPos + (int)1);
HXDLIN( 679)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createImagePattern(( ( ::openfl::display::BitmapData)(c10->buffer->o->__get(c10->oPos)) ),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get(_hx_tmp64)) ),c10->buffer->b->__get(c10->bPos));
HXLINE( 681)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
            					}
            					break;
            					case (int)13: {
HXLINE( 657)						{
HXLINE( 657)							Int _hx_tmp65 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 657)							switch((int)(_hx_tmp65)){
            								case (int)0: {
HXLINE( 657)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 657)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 657)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 657)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 657)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 657)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 657)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 657)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 657)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 657)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 657)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 657)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 657)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 657)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 657)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 657)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 657)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 657)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 657)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 657)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 657)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 657)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 657)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 657)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 657)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 657)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 657)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 657)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 657)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 657)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 657)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 658)						Bool _hx_tmp66;
HXDLIN( 658)						if (stroke) {
HXLINE( 658)							_hx_tmp66 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 658)							_hx_tmp66 = false;
            						}
HXDLIN( 658)						if (_hx_tmp66) {
HXLINE( 660)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(null());
            						}
HXLINE( 664)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 665)						Int _hx_tmp67 = (c11->iiPos + (int)1);
HXDLIN( 665)						Int _hx_tmp68 = (c11->oPos + (int)1);
HXDLIN( 665)						Int _hx_tmp69 = (c11->oPos + (int)2);
HXDLIN( 665)						Int _hx_tmp70 = (c11->oPos + (int)3);
HXDLIN( 665)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createGradientPattern(c11->buffer->o->__get(c11->oPos),c11->buffer->ii->__get(c11->iiPos).StaticCast< ::Array< Int > >(),c11->buffer->ff->__get(c11->ffPos).StaticCast< ::Array< Float > >(),c11->buffer->ii->__get(_hx_tmp67).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get(_hx_tmp68)) ),c11->buffer->o->__get(_hx_tmp69),c11->buffer->o->__get(_hx_tmp70),c11->buffer->f->__get(c11->fPos));
HXLINE( 667)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
            					}
            					break;
            					case (int)14: {
HXLINE( 586)						{
HXLINE( 586)							Int _hx_tmp71 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 586)							switch((int)(_hx_tmp71)){
            								case (int)0: {
HXLINE( 586)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 586)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 586)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 586)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 586)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 586)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 586)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 586)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 586)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 586)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 586)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 586)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 586)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 586)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 586)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 586)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 586)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 586)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 586)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 586)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 586)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 586)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 586)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 586)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 586)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 586)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 586)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 586)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 586)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 586)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 586)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 587)						if (stroke) {
HXLINE( 589)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke);
            						}
HXLINE( 593)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 595)						Bool _hx_tmp72 = hx::IsNull( c12->buffer->o->__get(c12->oPos) );
HXDLIN( 595)						if (_hx_tmp72) {
HXLINE( 597)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
            						}
            						else {
HXLINE( 601)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
HXLINE( 603)							Float _hx_tmp73;
HXDLIN( 603)							if (hx::IsGreater( c12->buffer->o->__get(c12->oPos),(int)0 )) {
HXLINE( 603)								_hx_tmp73 = c12->buffer->o->__get(c12->oPos);
            							}
            							else {
HXLINE( 603)								_hx_tmp73 = (int)1;
            							}
HXDLIN( 603)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineWidth(_hx_tmp73);
HXLINE( 605)							Bool _hx_tmp74 = hx::IsNull( c12->buffer->o->__get((c12->oPos + (int)3)) );
HXDLIN( 605)							if (_hx_tmp74) {
HXLINE( 607)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineJoin((int)1);
            							}
            							else {
HXLINE( 611)								HX_VARI_NAME(  ::Dynamic,_g21,"_g2") = c12->buffer->o->__get((c12->oPos + (int)3));
HXDLIN( 611)								Int _hx_tmp75;
HXDLIN( 611)								 ::Dynamic _hx_switch_1 = _g21;
            								if (  (_hx_switch_1==(int)0) ){
HXLINE( 611)									_hx_tmp75 = (int)2;
HXDLIN( 611)									goto _hx_goto_9;
            								}
            								if (  (_hx_switch_1==(int)1) ){
HXLINE( 611)									_hx_tmp75 = (int)0;
HXDLIN( 611)									goto _hx_goto_9;
            								}
            								/* default */{
HXLINE( 611)									_hx_tmp75 = (int)1;
            								}
            								_hx_goto_9:;
HXDLIN( 611)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineJoin(_hx_tmp75);
            							}
HXLINE( 621)							Bool _hx_tmp76 = hx::IsNull( c12->buffer->o->__get((c12->oPos + (int)2)) );
HXDLIN( 621)							if (_hx_tmp76) {
HXLINE( 623)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineCap((int)1);
            							}
            							else {
HXLINE( 627)								HX_VARI_NAME(  ::Dynamic,_g22,"_g2") = c12->buffer->o->__get((c12->oPos + (int)2));
HXDLIN( 627)								Int _hx_tmp77;
HXDLIN( 627)								 ::Dynamic _hx_switch_2 = _g22;
            								if (  (_hx_switch_2==(int)0) ){
HXLINE( 627)									_hx_tmp77 = (int)0;
HXDLIN( 627)									goto _hx_goto_10;
            								}
            								if (  (_hx_switch_2==(int)2) ){
HXLINE( 627)									_hx_tmp77 = (int)2;
HXDLIN( 627)									goto _hx_goto_10;
            								}
            								/* default */{
HXLINE( 627)									_hx_tmp77 = (int)1;
            								}
            								_hx_goto_10:;
HXDLIN( 627)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineCap(_hx_tmp77);
            							}
HXLINE( 637)							Int _hx_tmp78 = (c12->fPos + (int)1);
HXDLIN( 637)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_miterLimit(c12->buffer->f->__get(_hx_tmp78));
HXLINE( 639)							HX_VARI( Float,r) = ((Float)hx::UShr(((int)c12->buffer->i->__get(c12->iPos) & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 640)							HX_VARI( Float,g) = ((Float)hx::UShr(((int)c12->buffer->i->__get(c12->iPos) & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 641)							HX_VARI( Float,b) = ((Float)((int)c12->buffer->i->__get(c12->iPos) & (int)(int)255) / (Float)(int)255);
HXLINE( 643)							Bool _hx_tmp79 = (c12->buffer->f->__get(c12->fPos) == (int)1);
HXDLIN( 643)							if (_hx_tmp79) {
HXLINE( 645)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGB(r,g,b);
            							}
            							else {
HXLINE( 649)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGBA(r,g,b,c12->buffer->f->__get(c12->fPos));
            							}
            						}
            					}
            					break;
            					case (int)15: {
HXLINE( 565)						{
HXLINE( 565)							Int _hx_tmp80 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 565)							switch((int)(_hx_tmp80)){
            								case (int)0: {
HXLINE( 565)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 565)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 565)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 565)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 565)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 565)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 565)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 565)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 565)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 565)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 565)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 565)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 565)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 565)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 565)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 565)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 565)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 565)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 565)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 565)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 565)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 565)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 565)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 565)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 565)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 565)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 565)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 565)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 565)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 565)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 565)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 566)						hasPath = true;
HXLINE( 567)						Float _hx_tmp81 = (c13->buffer->f->__get(c13->fPos) - offsetX);
HXDLIN( 567)						Float _hx_tmp82 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 567)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(_hx_tmp81,(_hx_tmp82 - offsetY));
HXLINE( 569)						positionX = c13->buffer->f->__get(c13->fPos);
HXLINE( 570)						positionY = c13->buffer->f->__get((c13->fPos + (int)1));
            					}
            					break;
            					case (int)16: {
HXLINE( 574)						{
HXLINE( 574)							Int _hx_tmp83 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 574)							switch((int)(_hx_tmp83)){
            								case (int)0: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 574)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 574)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 574)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 574)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 574)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 574)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 574)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 574)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 574)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 574)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 574)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE( 575)						Float _hx_tmp84 = (c14->buffer->f->__get(c14->fPos) - offsetX);
HXDLIN( 575)						Float _hx_tmp85 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN( 575)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(_hx_tmp84,(_hx_tmp85 - offsetY));
HXLINE( 577)						positionX = c14->buffer->f->__get(c14->fPos);
HXLINE( 578)						positionY = c14->buffer->f->__get((c14->fPos + (int)1));
HXLINE( 580)						closeGap = true;
HXLINE( 581)						startX = c14->buffer->f->__get(c14->fPos);
HXLINE( 582)						startY = c14->buffer->f->__get((c14->fPos + (int)1));
            					}
            					break;
            					default:{
HXLINE( 897)						{
HXLINE( 897)							Int _hx_tmp86 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 897)							switch((int)(_hx_tmp86)){
            								case (int)0: {
HXLINE( 897)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 897)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 897)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 897)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 897)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 897)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 897)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 897)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 897)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 897)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 897)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 897)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 897)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 897)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 897)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 897)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 897)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 897)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 897)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 897)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 897)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 897)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 897)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 897)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 897)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 897)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 897)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 897)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 897)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 897)						data->prev = type;
            					}
            				}
            			}
            			_hx_goto_5:;
            		}
HXLINE( 903)		data->destroy();
HXLINE( 905)		if (hasPath) {
HXLINE( 907)			Bool _hx_tmp87;
HXDLIN( 907)			if (stroke) {
HXLINE( 907)				_hx_tmp87 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            			}
            			else {
HXLINE( 907)				_hx_tmp87 = false;
            			}
HXDLIN( 907)			if (_hx_tmp87) {
HXLINE( 909)				Bool _hx_tmp88;
HXDLIN( 909)				if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill) {
HXLINE( 909)					_hx_tmp88 = closeGap;
            				}
            				else {
HXLINE( 909)					_hx_tmp88 = false;
            				}
HXDLIN( 909)				if (_hx_tmp88) {
HXLINE( 911)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((startX - offsetX),(startY - offsetY));
            				}
            				else {
HXLINE( 913)					Bool _hx_tmp89;
HXDLIN( 913)					Bool _hx_tmp90;
HXDLIN( 913)					if (closeGap) {
HXLINE( 913)						_hx_tmp90 = (positionX == startX);
            					}
            					else {
HXLINE( 913)						_hx_tmp90 = false;
            					}
HXDLIN( 913)					if (_hx_tmp90) {
HXLINE( 913)						_hx_tmp89 = (positionY == startY);
            					}
            					else {
HXLINE( 913)						_hx_tmp89 = false;
            					}
HXDLIN( 913)					if (_hx_tmp89) {
HXLINE( 915)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(true);
            					}
            				}
HXLINE( 919)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern);
HXLINE( 920)				Bool _hx_tmp91 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 920)				if (_hx_tmp91) {
HXLINE( 920)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->strokePreserve();
            				}
            			}
HXLINE( 924)			Bool _hx_tmp92;
HXDLIN( 924)			if (!(stroke)) {
HXLINE( 924)				_hx_tmp92 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
            			}
            			else {
HXLINE( 924)				_hx_tmp92 = false;
            			}
HXDLIN( 924)			if (_hx_tmp92) {
HXLINE( 926)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(-(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x),-(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y));
HXLINE( 928)				Bool _hx_tmp93 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix );
HXDLIN( 928)				if (_hx_tmp93) {
HXLINE( 930)					HX_VARI(  ::openfl::geom::Matrix,matrix) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix->clone();
HXLINE( 931)					matrix->invert();
HXLINE( 933)					Bool _hx_tmp94 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix );
HXDLIN( 933)					if (_hx_tmp94) {
HXLINE( 935)						matrix->concat(::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix);
            					}
HXLINE( 939)					 ::Dynamic _hx_tmp95 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern;
HXDLIN( 939)					 ::lime::math::Matrix3 _hx_tmp96 = matrix->_hx___toMatrix3();
HXDLIN( 939)					::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(_hx_tmp95,_hx_tmp96);
            				}
HXLINE( 943)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern);
HXLINE( 945)				Bool _hx_tmp97 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix );
HXDLIN( 945)				if (_hx_tmp97) {
HXLINE( 947)					 ::lime::math::Matrix3 _hx_tmp98 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix->_hx___toMatrix3();
HXDLIN( 947)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->transform(_hx_tmp98);
HXLINE( 948)					Bool _hx_tmp99 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 948)					if (_hx_tmp99) {
HXLINE( 948)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            					}
HXLINE( 949)					 ::lime::math::Matrix3 _hx_tmp100 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::inversePendingMatrix->_hx___toMatrix3();
HXDLIN( 949)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->transform(_hx_tmp100);
            				}
            				else {
HXLINE( 953)					Bool _hx_tmp101 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 953)					if (_hx_tmp101) {
HXLINE( 953)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            					}
            				}
HXLINE( 957)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y);
HXLINE( 958)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,playCommands,(void))

void CairoGraphics_obj::quadraticCurveTo(Float cx,Float cy,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","quadraticCurveTo",0x01a3b18e,"openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo","openfl/_internal/renderer/cairo/CairoGraphics.hx",966,0x744ae94c)
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 968)		HX_VARI(  ::lime::math::Vector2,current) = null();
HXLINE( 970)		Bool _hx_tmp = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->get_hasCurrentPoint());
HXDLIN( 970)		if (_hx_tmp) {
HXLINE( 972)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(cx,cy);
HXLINE( 973)			current =  ::lime::math::Vector2_obj::__new(cx,cy);
            		}
            		else {
HXLINE( 977)			current = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->get_currentPoint();
            		}
HXLINE( 981)		HX_VARI( Float,cx1) = (current->x + (((Float)0.66666666666666663) * (cx - current->x)));
HXLINE( 982)		HX_VARI( Float,cy1) = (current->y + (((Float)0.66666666666666663) * (cy - current->y)));
HXLINE( 986)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(cx1,cy1,(x + (((Float)0.66666666666666663) * (cx - x))),(y + (((Float)0.66666666666666663) * (cy - y))),x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CairoGraphics_obj,quadraticCurveTo,(void))

void CairoGraphics_obj::render( ::openfl::display::Graphics graphics, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::geom::Matrix parentTransform){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","render",0x3c3e61d2,"openfl._internal.renderer.cairo.CairoGraphics.render","openfl/_internal/renderer/cairo/CairoGraphics.hx",991,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(parentTransform,"parentTransform")
HXLINE( 995)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics = graphics;
HXLINE( 996)		graphics->_hx___update();
HXLINE( 998)		if (!(graphics->_hx___dirty)) {
HXLINE( 998)			return;
            		}
HXLINE(1000)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = graphics->_hx___bounds;
HXLINE(1002)		HX_VARI( Int,width) = graphics->_hx___width;
HXLINE(1003)		HX_VARI( Int,height) = graphics->_hx___height;
HXLINE(1005)		Bool _hx_tmp;
HXDLIN(1005)		Bool _hx_tmp1;
HXDLIN(1005)		Bool _hx_tmp2;
HXDLIN(1005)		Bool _hx_tmp3;
HXDLIN(1005)		Bool _hx_tmp4 = !(!(graphics->_hx___visible));
HXDLIN(1005)		if (_hx_tmp4) {
HXLINE(1005)			Int _hx_tmp5 = graphics->_hx___commands->get_length();
HXDLIN(1005)			_hx_tmp3 = (_hx_tmp5 == (int)0);
            		}
            		else {
HXLINE(1005)			_hx_tmp3 = true;
            		}
HXDLIN(1005)		if (!(_hx_tmp3)) {
HXLINE(1005)			_hx_tmp2 = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds );
            		}
            		else {
HXLINE(1005)			_hx_tmp2 = true;
            		}
HXDLIN(1005)		if (!(_hx_tmp2)) {
HXLINE(1005)			_hx_tmp1 = (width < (int)1);
            		}
            		else {
HXLINE(1005)			_hx_tmp1 = true;
            		}
HXDLIN(1005)		if (!(_hx_tmp1)) {
HXLINE(1005)			_hx_tmp = (height < (int)1);
            		}
            		else {
HXLINE(1005)			_hx_tmp = true;
            		}
HXDLIN(1005)		if (_hx_tmp) {
HXLINE(1007)			graphics->_hx___cairo = null();
HXLINE(1008)			graphics->_hx___bitmap = null();
            		}
            		else {
HXLINE(1012)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting = false;
HXLINE(1014)			Bool _hx_tmp6 = hx::IsNotNull( graphics->_hx___cairo );
HXDLIN(1014)			if (_hx_tmp6) {
HXLINE(1016)				HX_VARI(  ::Dynamic,surface) = graphics->_hx___cairo->get_target();
HXLINE(1018)				Bool _hx_tmp7;
HXDLIN(1018)				Int _hx_tmp8 = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_width(surface);
HXDLIN(1018)				if ((width == _hx_tmp8)) {
HXLINE(1018)					Int _hx_tmp9 = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_height(surface);
HXDLIN(1018)					_hx_tmp7 = (height != _hx_tmp9);
            				}
            				else {
HXLINE(1018)					_hx_tmp7 = true;
            				}
HXDLIN(1018)				if (_hx_tmp7) {
HXLINE(1020)					graphics->_hx___cairo = null();
            				}
            			}
HXLINE(1026)			Bool _hx_tmp10;
HXDLIN(1026)			Bool _hx_tmp11 = hx::IsNotNull( graphics->_hx___cairo );
HXDLIN(1026)			if (_hx_tmp11) {
HXLINE(1026)				_hx_tmp10 = hx::IsNull( graphics->_hx___bitmap );
            			}
            			else {
HXLINE(1026)				_hx_tmp10 = true;
            			}
HXDLIN(1026)			if (_hx_tmp10) {
HXLINE(1028)				HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__new(width,height,true,(int)0);
HXLINE(1029)				HX_VARI_NAME(  ::Dynamic,surface1,"surface") = bitmap->getSurface();
HXLINE(1030)				graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__new(surface1);
HXLINE(1031)				graphics->_hx___bitmap = bitmap;
            			}
HXLINE(1035)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo = graphics->_hx___cairo;
HXLINE(1036)			 ::lime::math::Matrix3 _hx_tmp12 = graphics->_hx___renderTransform->_hx___toMatrix3();
HXDLIN(1036)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix(_hx_tmp12);
HXLINE(1038)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)0);
HXLINE(1039)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->paint();
HXLINE(1040)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)2);
HXLINE(1042)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
HXLINE(1043)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
HXLINE(1045)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE(1046)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
HXLINE(1048)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = null();
HXLINE(1049)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = null();
HXLINE(1051)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE(1053)			{
HXLINE(1053)				HX_VARI( Int,_g) = (int)0;
HXDLIN(1053)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN(1053)				while((_g < _g1->length)){
HXLINE(1053)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(1053)					++_g;
HXLINE(1055)					Int _hx_tmp13 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(1055)					switch((int)(_hx_tmp13)){
            						case (int)0: case (int)1: case (int)2: {
HXLINE(1106)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE(1107)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE(1109)							if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn() )) {
HXLINE(1111)								{
HXLINE(1111)									Int _hx_tmp14 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1111)									switch((int)(_hx_tmp14)){
            										case (int)0: {
HXLINE(1111)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1111)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE(1111)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1111)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE(1111)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1111)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1111)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1111)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE(1111)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE(1111)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE(1111)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE(1111)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE(1111)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)8: {
HXLINE(1111)											hx::AddEq(data->fPos,(int)5);
HXDLIN(1111)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE(1111)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE(1111)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1111)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)13: {
HXLINE(1111)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1111)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1111)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1111)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)14: {
HXLINE(1111)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1111)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1111)											hx::AddEq(data->fPos,(int)2);
HXDLIN(1111)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE(1111)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)16: {
HXLINE(1111)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE(1111)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE(1111)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(1111)								HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE(1112)								 ::openfl::display::BitmapData _hx_tmp15 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(1112)								 ::openfl::geom::Matrix _hx_tmp16 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN(1112)								Bool _hx_tmp17 = c->buffer->b->__get(c->bPos);
HXDLIN(1112)								Bool _hx_tmp18 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN(1112)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginBitmapFill(_hx_tmp15,_hx_tmp16,_hx_tmp17,_hx_tmp18);
HXLINE(1113)								 ::openfl::display::BitmapData _hx_tmp19 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(1113)								 ::openfl::geom::Matrix _hx_tmp20 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN(1113)								Bool _hx_tmp21 = c->buffer->b->__get(c->bPos);
HXDLIN(1113)								Bool _hx_tmp22 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN(1113)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginBitmapFill(_hx_tmp19,_hx_tmp20,_hx_tmp21,_hx_tmp22);
            							}
            							else {
HXLINE(1115)								if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn() )) {
HXLINE(1117)									{
HXLINE(1117)										Int _hx_tmp23 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1117)										switch((int)(_hx_tmp23)){
            											case (int)0: {
HXLINE(1117)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1117)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE(1117)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1117)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE(1117)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1117)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1117)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1117)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE(1117)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE(1117)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE(1117)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE(1117)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE(1117)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)8: {
HXLINE(1117)												hx::AddEq(data->fPos,(int)5);
HXDLIN(1117)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE(1117)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)11: {
            											}
            											break;
            											case (int)12: {
HXLINE(1117)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1117)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)13: {
HXLINE(1117)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1117)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1117)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1117)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)14: {
HXLINE(1117)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1117)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1117)												hx::AddEq(data->fPos,(int)2);
HXDLIN(1117)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE(1117)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)16: {
HXLINE(1117)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE(1117)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE(1117)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(1117)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE(1118)									Int _hx_tmp24 = (c1->iiPos + (int)1);
HXDLIN(1118)									Int _hx_tmp25 = (c1->oPos + (int)1);
HXDLIN(1118)									Int _hx_tmp26 = (c1->oPos + (int)2);
HXDLIN(1118)									Int _hx_tmp27 = (c1->oPos + (int)3);
HXDLIN(1118)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp24).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp25)) ),c1->buffer->o->__get(_hx_tmp26),c1->buffer->o->__get(_hx_tmp27),c1->buffer->f->__get(c1->fPos));
HXLINE(1119)									Int _hx_tmp28 = (c1->iiPos + (int)1);
HXDLIN(1119)									Int _hx_tmp29 = (c1->oPos + (int)1);
HXDLIN(1119)									Int _hx_tmp30 = (c1->oPos + (int)2);
HXDLIN(1119)									Int _hx_tmp31 = (c1->oPos + (int)3);
HXDLIN(1119)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp28).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp29)) ),c1->buffer->o->__get(_hx_tmp30),c1->buffer->o->__get(_hx_tmp31),c1->buffer->f->__get(c1->fPos));
            								}
            								else {
HXLINE(1123)									{
HXLINE(1123)										Int _hx_tmp32 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1123)										switch((int)(_hx_tmp32)){
            											case (int)0: {
HXLINE(1123)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1123)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE(1123)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1123)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE(1123)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1123)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1123)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1123)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE(1123)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE(1123)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE(1123)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE(1123)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE(1123)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)8: {
HXLINE(1123)												hx::AddEq(data->fPos,(int)5);
HXDLIN(1123)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE(1123)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)11: {
            											}
            											break;
            											case (int)12: {
HXLINE(1123)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1123)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)13: {
HXLINE(1123)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1123)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1123)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1123)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)14: {
HXLINE(1123)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1123)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1123)												hx::AddEq(data->fPos,(int)2);
HXDLIN(1123)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE(1123)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)16: {
HXLINE(1123)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE(1123)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE(1123)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(1123)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE(1124)									Int _hx_tmp33 = c2->buffer->i->__get(c2->iPos);
HXDLIN(1124)									Float _hx_tmp34 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1124)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginFill(_hx_tmp33,_hx_tmp34);
HXLINE(1125)									Int _hx_tmp35 = c2->buffer->i->__get(c2->iPos);
HXDLIN(1125)									Float _hx_tmp36 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1125)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginFill(_hx_tmp35,_hx_tmp36);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1059)							{
HXLINE(1059)								Int _hx_tmp37 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1059)								switch((int)(_hx_tmp37)){
            									case (int)0: {
HXLINE(1059)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1059)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1059)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1059)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1059)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1059)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1059)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1059)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1059)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1059)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1059)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1059)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1059)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1059)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1059)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1059)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1059)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1059)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1059)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1059)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1059)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1059)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1059)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1059)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1059)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1059)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1059)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1059)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1059)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1059)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1059)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE(1060)							Float _hx_tmp38 = c3->buffer->f->__get(c3->fPos);
HXDLIN(1060)							Float _hx_tmp39 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN(1060)							Float _hx_tmp40 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN(1060)							Float _hx_tmp41 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN(1060)							Float _hx_tmp42 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN(1060)							Float _hx_tmp43 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN(1060)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->cubicCurveTo(_hx_tmp38,_hx_tmp39,_hx_tmp40,_hx_tmp41,_hx_tmp42,_hx_tmp43);
HXLINE(1061)							Float _hx_tmp44 = c3->buffer->f->__get(c3->fPos);
HXDLIN(1061)							Float _hx_tmp45 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN(1061)							Float _hx_tmp46 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN(1061)							Float _hx_tmp47 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN(1061)							Float _hx_tmp48 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN(1061)							Float _hx_tmp49 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN(1061)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->cubicCurveTo(_hx_tmp44,_hx_tmp45,_hx_tmp46,_hx_tmp47,_hx_tmp48,_hx_tmp49);
            						}
            						break;
            						case (int)4: {
HXLINE(1065)							{
HXLINE(1065)								Int _hx_tmp50 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1065)								switch((int)(_hx_tmp50)){
            									case (int)0: {
HXLINE(1065)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1065)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1065)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1065)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1065)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1065)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1065)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1065)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1065)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1065)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1065)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1065)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1065)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1065)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1065)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1065)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1065)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1065)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1065)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1065)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1065)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1065)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1065)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1065)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1065)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1065)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1065)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1065)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1065)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1065)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1065)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE(1066)							Float _hx_tmp51 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1066)							Float _hx_tmp52 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1066)							Float _hx_tmp53 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1066)							Float _hx_tmp54 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1066)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->curveTo(_hx_tmp51,_hx_tmp52,_hx_tmp53,_hx_tmp54);
HXLINE(1067)							Float _hx_tmp55 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1067)							Float _hx_tmp56 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1067)							Float _hx_tmp57 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1067)							Float _hx_tmp58 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1067)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->curveTo(_hx_tmp55,_hx_tmp56,_hx_tmp57,_hx_tmp58);
            						}
            						break;
            						case (int)5: {
HXLINE(1131)							{
HXLINE(1131)								Int _hx_tmp59 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1131)								switch((int)(_hx_tmp59)){
            									case (int)0: {
HXLINE(1131)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1131)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1131)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1131)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1131)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1131)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1131)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1131)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1131)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1131)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1131)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1131)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1131)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1131)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1131)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1131)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1131)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1131)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1131)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1131)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1131)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1131)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1131)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1131)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1131)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1131)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1131)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1131)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1131)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1131)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1131)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE(1132)							Float _hx_tmp60 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1132)							Float _hx_tmp61 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1132)							Float _hx_tmp62 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1132)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawCircle(_hx_tmp60,_hx_tmp61,_hx_tmp62);
HXLINE(1133)							Float _hx_tmp63 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1133)							Float _hx_tmp64 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1133)							Float _hx_tmp65 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1133)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawCircle(_hx_tmp63,_hx_tmp64,_hx_tmp65);
            						}
            						break;
            						case (int)6: {
HXLINE(1137)							{
HXLINE(1137)								Int _hx_tmp66 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1137)								switch((int)(_hx_tmp66)){
            									case (int)0: {
HXLINE(1137)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1137)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1137)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1137)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1137)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1137)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1137)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1137)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1137)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1137)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1137)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1137)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1137)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1137)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1137)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1137)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1137)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1137)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1137)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1137)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1137)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1137)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1137)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1137)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1137)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1137)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1137)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1137)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1137)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1137)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1137)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE(1138)							Float _hx_tmp67 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1138)							Float _hx_tmp68 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1138)							Float _hx_tmp69 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN(1138)							Float _hx_tmp70 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN(1138)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawEllipse(_hx_tmp67,_hx_tmp68,_hx_tmp69,_hx_tmp70);
HXLINE(1139)							Float _hx_tmp71 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1139)							Float _hx_tmp72 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1139)							Float _hx_tmp73 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN(1139)							Float _hx_tmp74 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN(1139)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawEllipse(_hx_tmp71,_hx_tmp72,_hx_tmp73,_hx_tmp74);
            						}
            						break;
            						case (int)7: {
HXLINE(1143)							{
HXLINE(1143)								Int _hx_tmp75 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1143)								switch((int)(_hx_tmp75)){
            									case (int)0: {
HXLINE(1143)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1143)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1143)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1143)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1143)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1143)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1143)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1143)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1143)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1143)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1143)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1143)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1143)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1143)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1143)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1143)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1143)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1143)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1143)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1143)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1143)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1143)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1143)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1143)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1143)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1143)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1143)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1143)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1143)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1143)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1143)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE(1144)							Float _hx_tmp76 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1144)							Float _hx_tmp77 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1144)							Float _hx_tmp78 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN(1144)							Float _hx_tmp79 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN(1144)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRect(_hx_tmp76,_hx_tmp77,_hx_tmp78,_hx_tmp79);
HXLINE(1145)							Float _hx_tmp80 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1145)							Float _hx_tmp81 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1145)							Float _hx_tmp82 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN(1145)							Float _hx_tmp83 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN(1145)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRect(_hx_tmp80,_hx_tmp81,_hx_tmp82,_hx_tmp83);
            						}
            						break;
            						case (int)8: {
HXLINE(1149)							{
HXLINE(1149)								Int _hx_tmp84 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1149)								switch((int)(_hx_tmp84)){
            									case (int)0: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1149)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1149)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1149)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1149)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1149)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1149)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1149)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1149)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1149)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1149)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1149)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE(1150)							Float _hx_tmp85 = c8->buffer->f->__get(c8->fPos);
HXDLIN(1150)							Float _hx_tmp86 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN(1150)							Float _hx_tmp87 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN(1150)							Float _hx_tmp88 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN(1150)							Float _hx_tmp89 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN(1150)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRoundRect(_hx_tmp85,_hx_tmp86,_hx_tmp87,_hx_tmp88,_hx_tmp89,c8->buffer->o->__get(c8->oPos));
HXLINE(1151)							Float _hx_tmp90 = c8->buffer->f->__get(c8->fPos);
HXDLIN(1151)							Float _hx_tmp91 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN(1151)							Float _hx_tmp92 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN(1151)							Float _hx_tmp93 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN(1151)							Float _hx_tmp94 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN(1151)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRoundRect(_hx_tmp90,_hx_tmp91,_hx_tmp92,_hx_tmp93,_hx_tmp94,c8->buffer->o->__get(c8->oPos));
            						}
            						break;
            						case (int)10: {
HXLINE(1155)							{
HXLINE(1155)								Int _hx_tmp95 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1155)								switch((int)(_hx_tmp95)){
            									case (int)0: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1155)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1155)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1155)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1155)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1155)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1155)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1155)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1155)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1155)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1155)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN(1155)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE(1156)							Int _hx_tmp96 = (c9->oPos + (int)1);
HXDLIN(1156)							Int _hx_tmp97 = (c9->oPos + (int)2);
HXDLIN(1156)							Int _hx_tmp98 = (c9->oPos + (int)3);
HXDLIN(1156)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawTriangles(( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::_Vector::IntVector)(c9->buffer->o->__get(_hx_tmp96)) ),( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(_hx_tmp97)) ),c9->buffer->o->__get(_hx_tmp98));
            						}
            						break;
            						case (int)11: {
HXLINE(1083)							{
HXLINE(1083)								{
HXLINE(1083)									Int _hx_tmp99 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1083)									switch((int)(_hx_tmp99)){
            										case (int)0: {
HXLINE(1083)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1083)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE(1083)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1083)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE(1083)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1083)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1083)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1083)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE(1083)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE(1083)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE(1083)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE(1083)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE(1083)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)8: {
HXLINE(1083)											hx::AddEq(data->fPos,(int)5);
HXDLIN(1083)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE(1083)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE(1083)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1083)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)13: {
HXLINE(1083)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1083)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1083)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1083)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)14: {
HXLINE(1083)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1083)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1083)											hx::AddEq(data->fPos,(int)2);
HXDLIN(1083)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE(1083)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)16: {
HXLINE(1083)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE(1083)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE(1083)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            							}
HXLINE(1084)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE(1085)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE(1086)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE(1087)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            						}
            						break;
            						case (int)12: {
HXLINE(1096)							{
HXLINE(1096)								Int _hx_tmp100 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1096)								switch((int)(_hx_tmp100)){
            									case (int)0: {
HXLINE(1096)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1096)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1096)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1096)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1096)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1096)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1096)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1096)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1096)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1096)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1096)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1096)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1096)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1096)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1096)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1096)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1096)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1096)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1096)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1096)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1096)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1096)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1096)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1096)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1096)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1096)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1096)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1096)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1096)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1096)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN(1096)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE(1097)							Int _hx_tmp101 = (c10->oPos + (int)1);
HXDLIN(1097)							Int _hx_tmp102 = (c10->bPos + (int)1);
HXDLIN(1097)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c10->buffer->o->__get(c10->oPos)) ),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get(_hx_tmp101)) ),c10->buffer->b->__get(c10->bPos),c10->buffer->b->__get(_hx_tmp102));
            						}
            						break;
            						case (int)13: {
HXLINE(1091)							{
HXLINE(1091)								Int _hx_tmp103 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1091)								switch((int)(_hx_tmp103)){
            									case (int)0: {
HXLINE(1091)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1091)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1091)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1091)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1091)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1091)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1091)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1091)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1091)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1091)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1091)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1091)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1091)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1091)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1091)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1091)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1091)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1091)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1091)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1091)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1091)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1091)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1091)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1091)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1091)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1091)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1091)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1091)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1091)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1091)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN(1091)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE(1092)							Int _hx_tmp104 = (c11->iiPos + (int)1);
HXDLIN(1092)							Int _hx_tmp105 = (c11->oPos + (int)1);
HXDLIN(1092)							Int _hx_tmp106 = (c11->oPos + (int)2);
HXDLIN(1092)							Int _hx_tmp107 = (c11->oPos + (int)3);
HXDLIN(1092)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineGradientStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->ii->__get(c11->iiPos).StaticCast< ::Array< Int > >(),c11->buffer->ff->__get(c11->ffPos).StaticCast< ::Array< Float > >(),c11->buffer->ii->__get(_hx_tmp104).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get(_hx_tmp105)) ),c11->buffer->o->__get(_hx_tmp106),c11->buffer->o->__get(_hx_tmp107),c11->buffer->f->__get(c11->fPos));
            						}
            						break;
            						case (int)14: {
HXLINE(1101)							{
HXLINE(1101)								Int _hx_tmp108 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1101)								switch((int)(_hx_tmp108)){
            									case (int)0: {
HXLINE(1101)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1101)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1101)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1101)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1101)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1101)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1101)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1101)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1101)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1101)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1101)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1101)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1101)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1101)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1101)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1101)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1101)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1101)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1101)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1101)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1101)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1101)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1101)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1101)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1101)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1101)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1101)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1101)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1101)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1101)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN(1101)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE(1102)							Int _hx_tmp109 = (c12->oPos + (int)1);
HXDLIN(1102)							Int _hx_tmp110 = (c12->oPos + (int)2);
HXDLIN(1102)							Int _hx_tmp111 = (c12->oPos + (int)3);
HXDLIN(1102)							Int _hx_tmp112 = (c12->fPos + (int)1);
HXDLIN(1102)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineStyle(c12->buffer->o->__get(c12->oPos),c12->buffer->i->__get(c12->iPos),c12->buffer->f->__get(c12->fPos),c12->buffer->b->__get(c12->bPos),c12->buffer->o->__get(_hx_tmp109),c12->buffer->o->__get(_hx_tmp110),c12->buffer->o->__get(_hx_tmp111),c12->buffer->f->__get(_hx_tmp112));
            						}
            						break;
            						case (int)15: {
HXLINE(1071)							{
HXLINE(1071)								Int _hx_tmp113 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1071)								switch((int)(_hx_tmp113)){
            									case (int)0: {
HXLINE(1071)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1071)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1071)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1071)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1071)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1071)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1071)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1071)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1071)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1071)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1071)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1071)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1071)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1071)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1071)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1071)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1071)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1071)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1071)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1071)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1071)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1071)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1071)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1071)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1071)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1071)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1071)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1071)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1071)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1071)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1071)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE(1072)							Float _hx_tmp114 = c13->buffer->f->__get(c13->fPos);
HXDLIN(1072)							Float _hx_tmp115 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN(1072)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->lineTo(_hx_tmp114,_hx_tmp115);
HXLINE(1073)							Float _hx_tmp116 = c13->buffer->f->__get(c13->fPos);
HXDLIN(1073)							Float _hx_tmp117 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN(1073)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineTo(_hx_tmp116,_hx_tmp117);
            						}
            						break;
            						case (int)16: {
HXLINE(1077)							{
HXLINE(1077)								Int _hx_tmp118 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1077)								switch((int)(_hx_tmp118)){
            									case (int)0: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1077)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1077)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1077)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1077)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1077)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1077)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1077)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1077)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1077)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1077)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1077)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE(1078)							Float _hx_tmp119 = c14->buffer->f->__get(c14->fPos);
HXDLIN(1078)							Float _hx_tmp120 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN(1078)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->moveTo(_hx_tmp119,_hx_tmp120);
HXLINE(1079)							Float _hx_tmp121 = c14->buffer->f->__get(c14->fPos);
HXDLIN(1079)							Float _hx_tmp122 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN(1079)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->moveTo(_hx_tmp121,_hx_tmp122);
            						}
            						break;
            						default:{
HXLINE(1160)							{
HXLINE(1160)								Int _hx_tmp123 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1160)								switch((int)(_hx_tmp123)){
            									case (int)0: {
HXLINE(1160)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1160)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1160)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1160)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1160)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1160)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1160)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1160)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1160)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1160)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1160)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1160)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1160)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1160)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1160)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1160)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1160)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1160)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1160)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1160)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1160)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1160)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1160)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1160)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1160)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1160)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1160)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1160)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1160)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1160)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE(1166)			Int _hx_tmp124 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->get_length();
HXDLIN(1166)			if ((_hx_tmp124 > (int)0)) {
HXLINE(1168)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
            			}
HXLINE(1172)			Int _hx_tmp125 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->get_length();
HXDLIN(1172)			if ((_hx_tmp125 > (int)0)) {
HXLINE(1174)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
            			}
HXLINE(1178)			data->destroy();
HXLINE(1180)			graphics->_hx___bitmap->image->dirty = true;
HXLINE(1181)			graphics->_hx___bitmap->image->version++;
            		}
HXLINE(1185)		graphics->set___dirty(false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,render,(void))

void CairoGraphics_obj::renderMask( ::openfl::display::Graphics graphics, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","renderMask",0x2ed81fde,"openfl._internal.renderer.cairo.CairoGraphics.renderMask","openfl/_internal/renderer/cairo/CairoGraphics.hx",1194,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1194)		Int _hx_tmp = graphics->_hx___commands->get_length();
HXDLIN(1194)		if ((_hx_tmp != (int)0)) {
HXLINE(1196)			HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(1204)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE(1206)			{
HXLINE(1206)				HX_VARI( Int,_g) = (int)0;
HXDLIN(1206)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN(1206)				while((_g < _g1->length)){
HXLINE(1206)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(1206)					++_g;
HXLINE(1208)					Int _hx_tmp1 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(1208)					switch((int)(_hx_tmp1)){
            						case (int)3: {
HXLINE(1212)							{
HXLINE(1212)								Int _hx_tmp2 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1212)								switch((int)(_hx_tmp2)){
            									case (int)0: {
HXLINE(1212)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1212)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1212)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1212)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1212)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1212)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1212)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1212)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1212)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1212)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1212)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1212)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1212)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1212)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1212)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1212)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1212)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1212)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1212)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1212)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1212)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1212)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1212)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1212)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1212)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1212)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1212)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1212)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1212)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1212)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1212)							HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE(1213)							Float _hx_tmp3 = c->buffer->f->__get(c->fPos);
HXDLIN(1213)							Float _hx_tmp4 = c->buffer->f->__get((c->fPos + (int)1));
HXDLIN(1213)							Float _hx_tmp5 = c->buffer->f->__get((c->fPos + (int)2));
HXDLIN(1213)							Float _hx_tmp6 = c->buffer->f->__get((c->fPos + (int)3));
HXDLIN(1213)							Float _hx_tmp7 = c->buffer->f->__get((c->fPos + (int)4));
HXDLIN(1213)							Float _hx_tmp8 = c->buffer->f->__get((c->fPos + (int)5));
HXDLIN(1213)							cairo->curveTo(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8);
            						}
            						break;
            						case (int)4: {
HXLINE(1219)							{
HXLINE(1219)								Int _hx_tmp9 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1219)								switch((int)(_hx_tmp9)){
            									case (int)0: {
HXLINE(1219)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1219)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1219)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1219)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1219)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1219)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1219)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1219)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1219)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1219)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1219)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1219)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1219)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1219)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1219)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1219)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1219)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1219)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1219)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1219)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1219)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1219)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1219)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1219)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1219)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1219)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1219)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1219)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1219)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1219)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1219)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE(1220)							Float _hx_tmp10 = c1->buffer->f->__get(c1->fPos);
HXDLIN(1220)							Float _hx_tmp11 = c1->buffer->f->__get((c1->fPos + (int)1));
HXDLIN(1220)							Float _hx_tmp12 = c1->buffer->f->__get((c1->fPos + (int)2));
HXDLIN(1220)							Float _hx_tmp13 = c1->buffer->f->__get((c1->fPos + (int)3));
HXDLIN(1220)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13);
            						}
            						break;
            						case (int)5: {
HXLINE(1226)							{
HXLINE(1226)								Int _hx_tmp14 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1226)								switch((int)(_hx_tmp14)){
            									case (int)0: {
HXLINE(1226)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1226)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1226)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1226)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1226)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1226)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1226)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1226)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1226)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1226)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1226)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1226)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1226)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1226)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1226)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1226)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1226)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1226)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1226)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1226)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1226)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1226)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1226)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1226)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1226)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1226)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1226)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1226)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1226)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1226)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1226)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE(1227)							Float _hx_tmp15 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1227)							Float _hx_tmp16 = c2->buffer->f->__get((c2->fPos + (int)1));
HXDLIN(1227)							Float _hx_tmp17 = c2->buffer->f->__get((c2->fPos + (int)2));
HXDLIN(1227)							Float _hx_tmp18 = (::Math_obj::PI * (int)2);
HXDLIN(1227)							cairo->arc(_hx_tmp15,_hx_tmp16,_hx_tmp17,(int)0,_hx_tmp18);
            						}
            						break;
            						case (int)6: {
HXLINE(1231)							{
HXLINE(1231)								Int _hx_tmp19 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1231)								switch((int)(_hx_tmp19)){
            									case (int)0: {
HXLINE(1231)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1231)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1231)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1231)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1231)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1231)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1231)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1231)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1231)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1231)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1231)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1231)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1231)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1231)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1231)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1231)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1231)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1231)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1231)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1231)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1231)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1231)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1231)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1231)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1231)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1231)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1231)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1231)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1231)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1231)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1231)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE(1233)							HX_VARI( Float,x) = c3->buffer->f->__get(c3->fPos);
HXLINE(1234)							HX_VARI( Float,y) = c3->buffer->f->__get((c3->fPos + (int)1));
HXLINE(1235)							HX_VARI( Float,width) = c3->buffer->f->__get((c3->fPos + (int)2));
HXLINE(1236)							HX_VARI( Float,height) = c3->buffer->f->__get((c3->fPos + (int)3));
HXLINE(1238)							hx::SubEq(x,(int)0);
HXLINE(1239)							hx::SubEq(y,(int)0);
HXLINE(1241)							HX_VARI( Float,ox) = (((Float)width / (Float)(int)2) * ((Float).5522848));
HXDLIN(1241)							HX_VARI( Float,oy) = (((Float)height / (Float)(int)2) * ((Float).5522848));
HXDLIN(1241)							HX_VARI( Float,xe) = (x + width);
HXDLIN(1241)							HX_VARI( Float,ye) = (y + height);
HXDLIN(1241)							HX_VARI( Float,xm) = (x + ((Float)width / (Float)(int)2));
HXDLIN(1241)							HX_VARI( Float,ym) = (y + ((Float)height / (Float)(int)2));
HXLINE(1251)							cairo->moveTo(x,ym);
HXLINE(1252)							cairo->curveTo(x,(ym - oy),(xm - ox),y,xm,y);
HXLINE(1253)							cairo->curveTo((xm + ox),y,xe,(ym - oy),xe,ym);
HXLINE(1254)							cairo->curveTo(xe,(ym + oy),(xm + ox),ye,xm,ye);
HXLINE(1255)							cairo->curveTo((xm - ox),ye,x,(ym + oy),x,ym);
            						}
            						break;
            						case (int)7: {
HXLINE(1260)							{
HXLINE(1260)								Int _hx_tmp20 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1260)								switch((int)(_hx_tmp20)){
            									case (int)0: {
HXLINE(1260)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1260)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1260)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1260)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1260)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1260)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1260)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1260)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1260)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1260)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1260)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1260)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1260)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1260)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1260)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1260)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1260)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1260)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1260)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1260)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1260)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1260)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1260)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1260)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1260)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1260)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1260)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1260)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1260)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1260)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1260)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE(1261)							Float _hx_tmp21 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1261)							Float _hx_tmp22 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1261)							Float _hx_tmp23 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1261)							Float _hx_tmp24 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1261)							cairo->rectangle(_hx_tmp21,_hx_tmp22,_hx_tmp23,_hx_tmp24);
            						}
            						break;
            						case (int)8: {
HXLINE(1265)							{
HXLINE(1265)								Int _hx_tmp25 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1265)								switch((int)(_hx_tmp25)){
            									case (int)0: {
HXLINE(1265)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1265)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1265)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1265)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1265)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1265)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1265)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1265)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1265)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1265)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1265)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1265)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1265)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1265)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1265)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1265)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1265)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1265)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1265)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1265)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1265)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1265)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1265)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1265)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1265)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1265)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1265)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1265)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1265)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1265)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1265)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE(1266)							Float _hx_tmp26 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1266)							Float _hx_tmp27 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1266)							Float _hx_tmp28 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1266)							Float _hx_tmp29 = c5->buffer->f->__get((c5->fPos + (int)3));
HXDLIN(1266)							Float _hx_tmp30 = c5->buffer->f->__get((c5->fPos + (int)4));
HXDLIN(1266)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::drawRoundRect(_hx_tmp26,_hx_tmp27,_hx_tmp28,_hx_tmp29,_hx_tmp30,c5->buffer->o->__get(c5->oPos));
            						}
            						break;
            						case (int)15: {
HXLINE(1270)							{
HXLINE(1270)								Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1270)								switch((int)(_hx_tmp31)){
            									case (int)0: {
HXLINE(1270)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1270)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1270)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1270)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1270)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1270)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1270)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1270)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1270)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1270)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1270)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1270)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1270)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1270)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1270)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1270)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1270)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1270)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1270)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1270)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1270)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1270)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1270)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1270)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1270)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1270)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1270)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1270)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1270)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1270)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1270)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE(1271)							Float _hx_tmp32 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1271)							Float _hx_tmp33 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1271)							cairo->lineTo(_hx_tmp32,_hx_tmp33);
            						}
            						break;
            						case (int)16: {
HXLINE(1277)							{
HXLINE(1277)								Int _hx_tmp34 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1277)								switch((int)(_hx_tmp34)){
            									case (int)0: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1277)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1277)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1277)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1277)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1277)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1277)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1277)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE(1278)							Float _hx_tmp35 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1278)							Float _hx_tmp36 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1278)							cairo->moveTo(_hx_tmp35,_hx_tmp36);
            						}
            						break;
            						default:{
HXLINE(1284)							{
HXLINE(1284)								Int _hx_tmp37 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1284)								switch((int)(_hx_tmp37)){
            									case (int)0: {
HXLINE(1284)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1284)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1284)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1284)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1284)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1284)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1284)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1284)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1284)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1284)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1284)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1284)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1284)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1284)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1284)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1284)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1284)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1284)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1284)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1284)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1284)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1284)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1284)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1284)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1284)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1284)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1284)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1284)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1284)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1284)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE(1290)			data->destroy();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,renderMask,(void))


CairoGraphics_obj::CairoGraphics_obj()
{
}

bool CairoGraphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { outValue = SIN45; return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { outValue = TAN22; return true; }
		if (HX_FIELD_EQ(inName,"cairo") ) { outValue = cairo; return true; }
		if (HX_FIELD_EQ(inName,"isCCW") ) { outValue = isCCW_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { outValue = bounds; return true; }
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { outValue = hasFill; return true; }
		if (HX_FIELD_EQ(inName,"endFill") ) { outValue = endFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hitTest") ) { outValue = hitTest_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { outValue = graphics; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { outValue = hasStroke; return true; }
		if (HX_FIELD_EQ(inName,"closePath") ) { outValue = closePath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endStroke") ) { outValue = endStroke_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { outValue = bitmapFill; return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { outValue = hitTesting; return true; }
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fillPattern") ) { outValue = fillPattern; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { outValue = bitmapRepeat; return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { outValue = fillCommands; return true; }
		if (HX_FIELD_EQ(inName,"normalizeUVT") ) { outValue = normalizeUVT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"playCommands") ) { outValue = playCommands_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { outValue = pendingMatrix; return true; }
		if (HX_FIELD_EQ(inName,"strokePattern") ) { outValue = strokePattern; return true; }
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { outValue = drawRoundRect_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { outValue = strokeCommands; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"quadraticCurveTo") ) { outValue = quadraticCurveTo_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillPatternMatrix") ) { outValue = fillPatternMatrix; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createImagePattern") ) { outValue = createImagePattern_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { outValue = inversePendingMatrix; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createGradientPattern") ) { outValue = createGradientPattern_dyn(); return true; }
	}
	return false;
}

bool CairoGraphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { SIN45=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { TAN22=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"cairo") ) { cairo=ioValue.Cast<  ::lime::graphics::cairo::Cairo >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { hasFill=ioValue.Cast< Bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=ioValue.Cast<  ::openfl::display::Graphics >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { hasStroke=ioValue.Cast< Bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { bitmapFill=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { hitTesting=ioValue.Cast< Bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fillPattern") ) { fillPattern=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { bitmapRepeat=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { fillCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { pendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		if (HX_FIELD_EQ(inName,"strokePattern") ) { strokePattern=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { strokeCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillPatternMatrix") ) { fillPatternMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { inversePendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoGraphics_obj_sMemberStorageInfo = 0;
static hx::StaticInfo CairoGraphics_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &CairoGraphics_obj::SIN45,HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa")},
	{hx::fsFloat,(void *) &CairoGraphics_obj::TAN22,HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &CairoGraphics_obj::bitmapFill,HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35")},
	{hx::fsBool,(void *) &CairoGraphics_obj::bitmapRepeat,HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &CairoGraphics_obj::bounds,HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(void *) &CairoGraphics_obj::cairo,HX_HCSTRING("cairo","\x88","\x30","\x19","\x41")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CairoGraphics_obj::fillCommands,HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CairoGraphics_obj::fillPattern,HX_HCSTRING("fillPattern","\x0d","\x86","\x12","\x35")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::fillPatternMatrix,HX_HCSTRING("fillPatternMatrix","\x2e","\xb8","\xae","\x97")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(void *) &CairoGraphics_obj::graphics,HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hasFill,HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hasStroke,HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hitTesting,HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::inversePendingMatrix,HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::pendingMatrix,HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CairoGraphics_obj::strokeCommands,HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CairoGraphics_obj::strokePattern,HX_HCSTRING("strokePattern","\x78","\xe1","\x21","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void CairoGraphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::SIN45,"SIN45");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::TAN22,"TAN22");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bitmapFill,"bitmapFill");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bounds,"bounds");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::cairo,"cairo");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillCommands,"fillCommands");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillPattern,"fillPattern");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillPatternMatrix,"fillPatternMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::graphics,"graphics");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hasFill,"hasFill");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hasStroke,"hasStroke");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hitTesting,"hitTesting");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::strokeCommands,"strokeCommands");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::strokePattern,"strokePattern");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoGraphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::SIN45,"SIN45");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::TAN22,"TAN22");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bitmapFill,"bitmapFill");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bounds,"bounds");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::cairo,"cairo");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillCommands,"fillCommands");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillPattern,"fillPattern");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillPatternMatrix,"fillPatternMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::graphics,"graphics");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hasFill,"hasFill");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hasStroke,"hasStroke");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hitTesting,"hitTesting");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::strokeCommands,"strokeCommands");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::strokePattern,"strokePattern");
};

#endif

hx::Class CairoGraphics_obj::__mClass;

static ::String CairoGraphics_obj_sStaticFields[] = {
	HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa"),
	HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88"),
	HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35"),
	HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("cairo","\x88","\x30","\x19","\x41"),
	HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2"),
	HX_HCSTRING("fillPattern","\x0d","\x86","\x12","\x35"),
	HX_HCSTRING("fillPatternMatrix","\x2e","\xb8","\xae","\x97"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12"),
	HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52"),
	HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19"),
	HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb"),
	HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5"),
	HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67"),
	HX_HCSTRING("strokePattern","\x78","\xe1","\x21","\x7e"),
	HX_HCSTRING("closePath","\x7d","\x65","\x20","\x14"),
	HX_HCSTRING("createGradientPattern","\xa4","\xee","\x44","\xf6"),
	HX_HCSTRING("createImagePattern","\x51","\xbd","\x5d","\xfb"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("endStroke","\xf3","\x01","\x17","\x51"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("isCCW","\x0d","\x84","\x49","\xc1"),
	HX_HCSTRING("normalizeUVT","\x66","\x09","\x2f","\x47"),
	HX_HCSTRING("playCommands","\xdc","\xae","\xee","\x49"),
	HX_HCSTRING("quadraticCurveTo","\x12","\x48","\xc3","\x82"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	::String(null())
};

void CairoGraphics_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoGraphics","\x72","\x72","\xef","\x3c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoGraphics_obj::__GetStatic;
	__mClass->mSetStaticField = &CairoGraphics_obj::__SetStatic;
	__mClass->mMarkFunc = CairoGraphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoGraphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoGraphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoGraphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoGraphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoGraphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CairoGraphics_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",37,0x744ae94c)
HXLINE(  37)		SIN45 = ((Float)0.70710678118654752440084436210485);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",38,0x744ae94c)
HXLINE(  38)		TAN22 = ((Float)0.4142135623730950488016887242097);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",44,0x744ae94c)
HXLINE(  44)		fillCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",53,0x744ae94c)
HXLINE(  53)		strokeCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
