// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_DestReg
#include <openfl/_internal/stage3D/_AGALConverter/DestReg.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_ProgramType
#include <openfl/_internal/stage3D/_AGALConverter/ProgramType.h>
#endif

namespace openfl{
namespace _internal{
namespace stage3D{
namespace _AGALConverter{

void DestReg_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.DestReg","new",0x5dc81b95,"openfl._internal.stage3D._AGALConverter.DestReg.new","openfl/_internal/stage3D/AGALConverter.hx",35,0x0a35cc61)
            	HX_STACK_THIS(this)
            	}

Dynamic DestReg_obj::__CreateEmpty() { return new DestReg_obj; }

hx::ObjectPtr< DestReg_obj > DestReg_obj::__new()
{
	hx::ObjectPtr< DestReg_obj > _hx_result = new DestReg_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DestReg_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DestReg_obj > _hx_result = new DestReg_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String DestReg_obj::GetWriteMask(){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.DestReg","GetWriteMask",0x1d084440,"openfl._internal.stage3D._AGALConverter.DestReg.GetWriteMask","openfl/_internal/stage3D/AGALConverter.hx",49,0x0a35cc61)
            	HX_STACK_THIS(this)
HXLINE(  50)		HX_VARI( ::String,str) = HX_(".",2e,00,00,00);
HXLINE(  51)		if ((((int)this->mask & (int)(int)1) != (int)0)) {
HXLINE(  51)			str = (HX_(".",2e,00,00,00) + HX_("x",78,00,00,00));
            		}
HXLINE(  52)		if ((((int)this->mask & (int)(int)2) != (int)0)) {
HXLINE(  52)			hx::AddEq(str,HX_("y",79,00,00,00));
            		}
HXLINE(  53)		if ((((int)this->mask & (int)(int)4) != (int)0)) {
HXLINE(  53)			hx::AddEq(str,HX_("z",7a,00,00,00));
            		}
HXLINE(  54)		if ((((int)this->mask & (int)(int)8) != (int)0)) {
HXLINE(  54)			hx::AddEq(str,HX_("w",77,00,00,00));
            		}
HXLINE(  55)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DestReg_obj,GetWriteMask,return )

::String DestReg_obj::ToGLSL(hx::Null< Bool >  __o_useMask){
Bool useMask = __o_useMask.Default(true);
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.DestReg","ToGLSL",0xe7b1b104,"openfl._internal.stage3D._AGALConverter.DestReg.ToGLSL","openfl/_internal/stage3D/AGALConverter.hx",59,0x0a35cc61)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(useMask,"useMask")
HXLINE(  60)		HX_VAR( ::String,str);
HXLINE(  61)		Bool _hx_tmp = (this->type == (int)3);
HXDLIN(  61)		if (_hx_tmp) {
HXLINE(  62)			if (hx::IsEq( this->programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Vertex_dyn() )) {
HXLINE(  62)				str = HX_("gl_Position",63,0d,2a,e5);
            			}
            			else {
HXLINE(  62)				str = HX_("gl_FragColor",d7,68,e4,21);
            			}
            		}
            		else {
HXLINE(  65)			::String _hx_tmp1 = ::openfl::_internal::stage3D::AGALConverter_obj::PrefixFromType(this->type,this->programType);
HXDLIN(  65)			str = (_hx_tmp1 + this->n);
            		}
HXLINE(  68)		Bool _hx_tmp2;
HXDLIN(  68)		if (useMask) {
HXLINE(  68)			_hx_tmp2 = (this->mask != (int)15);
            		}
            		else {
HXLINE(  68)			_hx_tmp2 = false;
            		}
HXDLIN(  68)		if (_hx_tmp2) {
HXLINE(  69)			::String _hx_tmp3 = this->GetWriteMask();
HXDLIN(  69)			hx::AddEq(str,_hx_tmp3);
            		}
HXLINE(  71)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DestReg_obj,ToGLSL,return )

 ::openfl::_internal::stage3D::_AGALConverter::DestReg DestReg_obj::Parse(Int v,::hx::EnumBase programType){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.DestReg","Parse",0x2c084288,"openfl._internal.stage3D._AGALConverter.DestReg.Parse","openfl/_internal/stage3D/AGALConverter.hx",39,0x0a35cc61)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(programType,"programType")
HXLINE(  40)		HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::DestReg,dr) =  ::openfl::_internal::stage3D::_AGALConverter::DestReg_obj::__new();
HXLINE(  41)		dr->programType = programType;
HXLINE(  42)		dr->type = ((int)hx::UShr(v,(int)24) & (int)(int)15);
HXLINE(  43)		dr->mask = ((int)hx::UShr(v,(int)16) & (int)(int)15);
HXLINE(  44)		dr->n = ((int)v & (int)(int)65535);
HXLINE(  45)		return dr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DestReg_obj,Parse,return )


DestReg_obj::DestReg_obj()
{
}

void DestReg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DestReg);
	HX_MARK_MEMBER_NAME(programType,"programType");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(mask,"mask");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_END_CLASS();
}

void DestReg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(programType,"programType");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(mask,"mask");
	HX_VISIT_MEMBER_NAME(n,"n");
}

hx::Val DestReg_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { return hx::Val( n); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"mask") ) { return hx::Val( mask); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ToGLSL") ) { return hx::Val( ToGLSL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programType") ) { return hx::Val( programType); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"GetWriteMask") ) { return hx::Val( GetWriteMask_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool DestReg_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"Parse") ) { outValue = Parse_dyn(); return true; }
	}
	return false;
}

hx::Val DestReg_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mask") ) { mask=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programType") ) { programType=inValue.Cast< ::hx::EnumBase >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DestReg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("mask","\xec","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("n","\x6e","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DestReg_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::stage3D::_AGALConverter::ProgramType*/ ,(int)offsetof(DestReg_obj,programType),HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4")},
	{hx::fsInt,(int)offsetof(DestReg_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(DestReg_obj,mask),HX_HCSTRING("mask","\xec","\x40","\x56","\x48")},
	{hx::fsInt,(int)offsetof(DestReg_obj,n),HX_HCSTRING("n","\x6e","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DestReg_obj_sStaticStorageInfo = 0;
#endif

static ::String DestReg_obj_sMemberFields[] = {
	HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("mask","\xec","\x40","\x56","\x48"),
	HX_HCSTRING("n","\x6e","\x00","\x00","\x00"),
	HX_HCSTRING("GetWriteMask","\x15","\x1e","\x73","\x28"),
	HX_HCSTRING("ToGLSL","\x19","\xcd","\x9c","\xae"),
	::String(null()) };

static void DestReg_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DestReg_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DestReg_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DestReg_obj::__mClass,"__mClass");
};

#endif

hx::Class DestReg_obj::__mClass;

static ::String DestReg_obj_sStaticFields[] = {
	HX_HCSTRING("Parse","\x13","\x00","\x83","\x50"),
	::String(null())
};

void DestReg_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D._AGALConverter.DestReg","\x23","\xad","\x2b","\xd4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DestReg_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DestReg_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DestReg_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DestReg_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DestReg_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DestReg_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DestReg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DestReg_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace _AGALConverter
