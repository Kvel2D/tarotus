// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_RegisterMap
#include <openfl/_internal/stage3D/RegisterMap.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_DestReg
#include <openfl/_internal/stage3D/_AGALConverter/DestReg.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_ProgramType
#include <openfl/_internal/stage3D/_AGALConverter/ProgramType.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_RegisterUsage
#include <openfl/_internal/stage3D/_AGALConverter/RegisterUsage.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_SamplerReg
#include <openfl/_internal/stage3D/_AGALConverter/SamplerReg.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_SourceReg
#include <openfl/_internal/stage3D/_AGALConverter/SourceReg.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace _internal{
namespace stage3D{

void AGALConverter_obj::__construct() { }

Dynamic AGALConverter_obj::__CreateEmpty() { return new AGALConverter_obj; }

hx::ObjectPtr< AGALConverter_obj > AGALConverter_obj::__new()
{
	hx::ObjectPtr< AGALConverter_obj > _hx_result = new AGALConverter_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AGALConverter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AGALConverter_obj > _hx_result = new AGALConverter_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String AGALConverter_obj::PrefixFromType(Int t,::hx::EnumBase pt){
            	HX_STACK_FRAME("openfl._internal.stage3D.AGALConverter","PrefixFromType",0x9d2aa824,"openfl._internal.stage3D.AGALConverter.PrefixFromType","openfl/_internal/stage3D/AGALConverter.hx",455,0x0a35cc61)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(pt,"pt")
HXLINE( 455)		switch((int)(t)){
            			case (int)0: {
HXLINE( 456)				return HX_("va",2b,67,00,00);
            			}
            			break;
            			case (int)1: {
HXLINE( 457)				if (hx::IsEq( pt,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Vertex_dyn() )) {
HXLINE( 457)					return HX_("vc",2d,67,00,00);
            				}
            				else {
HXLINE( 457)					return HX_("fc",3d,59,00,00);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 458)				if (hx::IsEq( pt,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Vertex_dyn() )) {
HXLINE( 458)					return HX_("vt",3e,67,00,00);
            				}
            				else {
HXLINE( 458)					return HX_("ft",4e,59,00,00);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 459)				return HX_("output_",3e,12,6c,e4);
            			}
            			break;
            			case (int)4: {
HXLINE( 460)				return HX_("v",76,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE( 461)				return HX_("sampler",08,c5,c9,83);
            			}
            			break;
            			default:{
HXLINE( 462)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(HX_("Invalid data!",ae,d8,c0,b8)));
            			}
            		}
HXLINE( 455)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AGALConverter_obj,PrefixFromType,return )

 ::cpp::Int64Struct AGALConverter_obj::ReadUInt64( ::openfl::utils::ByteArrayData ba){
            	HX_STACK_FRAME("openfl._internal.stage3D.AGALConverter","ReadUInt64",0xd77ae15c,"openfl._internal.stage3D.AGALConverter.ReadUInt64","openfl/_internal/stage3D/AGALConverter.hx",468,0x0a35cc61)
            	HX_STACK_ARG(ba,"ba")
HXLINE( 469)		HX_VARI( Int,lo) = ba->readInt();
HXLINE( 470)		HX_VARI( Int,hi) = ba->readInt();
HXLINE( 471)		return _hx_int64_make(hi,lo);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AGALConverter_obj,ReadUInt64,return )

::String AGALConverter_obj::ConvertToGLSL( ::openfl::utils::ByteArrayData agal,::Array< ::Dynamic> outSamplers){
            	HX_STACK_FRAME("openfl._internal.stage3D.AGALConverter","ConvertToGLSL",0x773253de,"openfl._internal.stage3D.AGALConverter.ConvertToGLSL","openfl/_internal/stage3D/AGALConverter.hx",475,0x0a35cc61)
            	HX_STACK_ARG(agal,"agal")
            	HX_STACK_ARG(outSamplers,"outSamplers")
HXLINE( 476)		agal->position = (int)0;
HXLINE( 477)		agal->_hx___endian = (int)1;
HXLINE( 479)		Int _hx_tmp = agal->readByte();
HXDLIN( 479)		HX_VARI( Int,magic) = ((int)_hx_tmp & (int)(int)255);
HXLINE( 480)		if ((magic == (int)176)) {
HXLINE( 482)			return agal->readUTF();
            		}
HXLINE( 486)		if ((magic != (int)160)) {
HXLINE( 487)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(HX_("Magic value must be 0xA0, may not be AGAL",33,cd,d9,2e)));
            		}
HXLINE( 490)		HX_VARI( Int,version) = agal->readInt();
HXLINE( 491)		if ((version != (int)1)) {
HXLINE( 492)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(HX_("Version must be 1",e3,ba,ef,98)));
            		}
HXLINE( 495)		Int _hx_tmp1 = agal->readByte();
HXLINE( 496)		if ((((int)_hx_tmp1 & (int)(int)255) != (int)161)) {
HXLINE( 497)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(HX_("Shader type id must be 0xA1",38,9a,ad,fa)));
            		}
HXLINE( 500)		HX_VAR( ::hx::EnumBase,programType);
HXDLIN( 500)		Int _hx_tmp2 = agal->readByte();
HXDLIN( 500)		if ((((int)_hx_tmp2 & (int)(int)255) == (int)0)) {
HXLINE( 500)			programType = ::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Vertex_dyn();
            		}
            		else {
HXLINE( 500)			programType = ::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Fragment_dyn();
            		}
HXLINE( 502)		HX_VARI(  ::openfl::_internal::stage3D::RegisterMap,map) =  ::openfl::_internal::stage3D::RegisterMap_obj::__new();
HXLINE( 503)		HX_VARI(  ::StringBuf,sb) =  ::StringBuf_obj::__new();
HXLINE( 504)		while((agal->position < ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(agal))){
HXLINE( 507)			HX_VARI( Int,opcode) = agal->readInt();
HXLINE( 508)			HX_VARI( Int,dest) = agal->readInt();
HXLINE( 509)			HX_VARI(  ::cpp::Int64Struct,source1) = ::openfl::_internal::stage3D::AGALConverter_obj::ReadUInt64(agal);
HXLINE( 510)			HX_VARI(  ::cpp::Int64Struct,source2) = ::openfl::_internal::stage3D::AGALConverter_obj::ReadUInt64(agal);
HXLINE( 516)			HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::DestReg,dr) = ::openfl::_internal::stage3D::_AGALConverter::DestReg_obj::Parse(dest,programType);
HXLINE( 517)			HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::SourceReg,sr1) = ::openfl::_internal::stage3D::_AGALConverter::SourceReg_obj::Parse(source1,programType,dr->mask);
HXLINE( 518)			HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::SourceReg,sr2) = ::openfl::_internal::stage3D::_AGALConverter::SourceReg_obj::Parse(source2,programType,dr->mask);
HXLINE( 521)			{
HXLINE( 521)				Bool _hx_tmp3 = hx::IsNotNull( sb->charBuf );
HXDLIN( 521)				if (_hx_tmp3) {
HXLINE( 521)					sb->flush();
            				}
HXDLIN( 521)				sb->b->push(HX_("\t",09,00,00,00));
            			}
HXLINE( 522)			switch((int)(opcode)){
            				case (int)0: {
HXLINE( 525)					{
HXLINE( 525)						::String _hx_tmp4 = dr->ToGLSL(null());
HXDLIN( 525)						::String _hx_tmp5 = (_hx_tmp4 + HX_(" = ",63,7d,18,00));
HXDLIN( 525)						::String _hx_tmp6 = sr1->ToGLSL(null(),null());
HXDLIN( 525)						::String x = ((_hx_tmp5 + _hx_tmp6) + HX_("; // mov",19,49,64,51));
HXDLIN( 525)						Bool _hx_tmp7 = hx::IsNotNull( sb->charBuf );
HXDLIN( 525)						if (_hx_tmp7) {
HXLINE( 525)							sb->flush();
            						}
HXDLIN( 525)						::String _hx_tmp8 = ::Std_obj::string(x);
HXDLIN( 525)						sb->b->push(_hx_tmp8);
            					}
HXLINE( 526)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 527)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)1: {
HXLINE( 530)					{
HXLINE( 530)						::String _hx_tmp9 = dr->ToGLSL(null());
HXDLIN( 530)						::String _hx_tmp10 = (_hx_tmp9 + HX_(" = ",63,7d,18,00));
HXDLIN( 530)						::String _hx_tmp11 = sr1->ToGLSL(null(),null());
HXDLIN( 530)						::String _hx_tmp12 = ((_hx_tmp10 + _hx_tmp11) + HX_(" + ",b5,6d,18,00));
HXDLIN( 530)						::String _hx_tmp13 = sr2->ToGLSL(null(),null());
HXDLIN( 530)						::String x1 = ((_hx_tmp12 + _hx_tmp13) + HX_("; // add",66,24,5b,51));
HXDLIN( 530)						Bool _hx_tmp14 = hx::IsNotNull( sb->charBuf );
HXDLIN( 530)						if (_hx_tmp14) {
HXLINE( 530)							sb->flush();
            						}
HXDLIN( 530)						::String _hx_tmp15 = ::Std_obj::string(x1);
HXDLIN( 530)						sb->b->push(_hx_tmp15);
            					}
HXLINE( 531)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 532)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 533)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)2: {
HXLINE( 536)					{
HXLINE( 536)						::String _hx_tmp16 = dr->ToGLSL(null());
HXDLIN( 536)						::String _hx_tmp17 = (_hx_tmp16 + HX_(" = ",63,7d,18,00));
HXDLIN( 536)						::String _hx_tmp18 = sr1->ToGLSL(null(),null());
HXDLIN( 536)						::String _hx_tmp19 = ((_hx_tmp17 + _hx_tmp18) + HX_(" - ",73,6f,18,00));
HXDLIN( 536)						::String _hx_tmp20 = sr2->ToGLSL(null(),null());
HXDLIN( 536)						::String x2 = ((_hx_tmp19 + _hx_tmp20) + HX_("; // sub",c5,db,68,51));
HXDLIN( 536)						Bool _hx_tmp21 = hx::IsNotNull( sb->charBuf );
HXDLIN( 536)						if (_hx_tmp21) {
HXLINE( 536)							sb->flush();
            						}
HXDLIN( 536)						::String _hx_tmp22 = ::Std_obj::string(x2);
HXDLIN( 536)						sb->b->push(_hx_tmp22);
            					}
HXLINE( 537)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 538)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 539)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)3: {
HXLINE( 542)					{
HXLINE( 542)						::String _hx_tmp23 = dr->ToGLSL(null());
HXDLIN( 542)						::String _hx_tmp24 = (_hx_tmp23 + HX_(" = ",63,7d,18,00));
HXDLIN( 542)						::String _hx_tmp25 = sr1->ToGLSL(null(),null());
HXDLIN( 542)						::String _hx_tmp26 = ((_hx_tmp24 + _hx_tmp25) + HX_(" * ",d6,6c,18,00));
HXDLIN( 542)						::String _hx_tmp27 = sr2->ToGLSL(null(),null());
HXDLIN( 542)						::String x3 = ((_hx_tmp26 + _hx_tmp27) + HX_("; // mul",49,4e,64,51));
HXDLIN( 542)						Bool _hx_tmp28 = hx::IsNotNull( sb->charBuf );
HXDLIN( 542)						if (_hx_tmp28) {
HXLINE( 542)							sb->flush();
            						}
HXDLIN( 542)						::String _hx_tmp29 = ::Std_obj::string(x3);
HXDLIN( 542)						sb->b->push(_hx_tmp29);
            					}
HXLINE( 543)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 544)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 545)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)4: {
HXLINE( 548)					{
HXLINE( 548)						::String _hx_tmp30 = dr->ToGLSL(null());
HXDLIN( 548)						::String _hx_tmp31 = (_hx_tmp30 + HX_(" = ",63,7d,18,00));
HXDLIN( 548)						::String _hx_tmp32 = sr1->ToGLSL(null(),null());
HXDLIN( 548)						::String _hx_tmp33 = ((_hx_tmp31 + _hx_tmp32) + HX_(" / ",31,71,18,00));
HXDLIN( 548)						::String _hx_tmp34 = sr2->ToGLSL(null(),null());
HXDLIN( 548)						::String x4 = ((_hx_tmp33 + _hx_tmp34) + HX_("; // div",96,6f,5d,51));
HXDLIN( 548)						Bool _hx_tmp35 = hx::IsNotNull( sb->charBuf );
HXDLIN( 548)						if (_hx_tmp35) {
HXLINE( 548)							sb->flush();
            						}
HXDLIN( 548)						::String _hx_tmp36 = ::Std_obj::string(x4);
HXDLIN( 548)						sb->b->push(_hx_tmp36);
            					}
HXLINE( 549)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 550)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 551)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)5: {
HXLINE( 554)					{
HXLINE( 554)						::String _hx_tmp37 = dr->ToGLSL(null());
HXDLIN( 554)						::String _hx_tmp38 = (_hx_tmp37 + HX_(" = vec4(1) / ",b4,32,05,3b));
HXDLIN( 554)						::String _hx_tmp39 = sr1->ToGLSL(null(),null());
HXDLIN( 554)						::String _hx_tmp40 = ((_hx_tmp38 + _hx_tmp39) + HX_(", ",74,26,00,00));
HXDLIN( 554)						::String _hx_tmp41 = sr2->ToGLSL(null(),null());
HXDLIN( 554)						::String x5 = ((_hx_tmp40 + _hx_tmp41) + HX_("; // rcp (untested)",33,14,36,02));
HXDLIN( 554)						Bool _hx_tmp42 = hx::IsNotNull( sb->charBuf );
HXDLIN( 554)						if (_hx_tmp42) {
HXLINE( 554)							sb->flush();
            						}
HXDLIN( 554)						::String _hx_tmp43 = ::Std_obj::string(x5);
HXDLIN( 554)						sb->b->push(_hx_tmp43);
            					}
HXLINE( 555)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 556)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)6: {
HXLINE( 559)					{
HXLINE( 559)						::String _hx_tmp44 = dr->ToGLSL(null());
HXDLIN( 559)						::String _hx_tmp45 = (_hx_tmp44 + HX_(" = min(",39,b9,a2,4b));
HXDLIN( 559)						::String _hx_tmp46 = sr1->ToGLSL(null(),null());
HXDLIN( 559)						::String _hx_tmp47 = ((_hx_tmp45 + _hx_tmp46) + HX_(", ",74,26,00,00));
HXDLIN( 559)						::String _hx_tmp48 = sr2->ToGLSL(null(),null());
HXDLIN( 559)						::String x6 = ((_hx_tmp47 + _hx_tmp48) + HX_("); // min",00,15,0e,1a));
HXDLIN( 559)						Bool _hx_tmp49 = hx::IsNotNull( sb->charBuf );
HXDLIN( 559)						if (_hx_tmp49) {
HXLINE( 559)							sb->flush();
            						}
HXDLIN( 559)						::String _hx_tmp50 = ::Std_obj::string(x6);
HXDLIN( 559)						sb->b->push(_hx_tmp50);
            					}
HXLINE( 560)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 561)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 562)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)7: {
HXLINE( 565)					{
HXLINE( 565)						::String _hx_tmp51 = dr->ToGLSL(null());
HXDLIN( 565)						::String _hx_tmp52 = (_hx_tmp51 + HX_(" = max(",e7,af,9c,4b));
HXDLIN( 565)						::String _hx_tmp53 = sr1->ToGLSL(null(),null());
HXDLIN( 565)						::String _hx_tmp54 = ((_hx_tmp52 + _hx_tmp53) + HX_(", ",74,26,00,00));
HXDLIN( 565)						::String _hx_tmp55 = sr2->ToGLSL(null(),null());
HXDLIN( 565)						::String x7 = ((_hx_tmp54 + _hx_tmp55) + HX_("); // max",12,0e,0e,1a));
HXDLIN( 565)						Bool _hx_tmp56 = hx::IsNotNull( sb->charBuf );
HXDLIN( 565)						if (_hx_tmp56) {
HXLINE( 565)							sb->flush();
            						}
HXDLIN( 565)						::String _hx_tmp57 = ::Std_obj::string(x7);
HXDLIN( 565)						sb->b->push(_hx_tmp57);
            					}
HXLINE( 566)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 567)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 568)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)8: {
HXLINE( 571)					{
HXLINE( 571)						::String _hx_tmp58 = dr->ToGLSL(null());
HXDLIN( 571)						::String _hx_tmp59 = (_hx_tmp58 + HX_(" = fract(",85,4f,5f,de));
HXDLIN( 571)						::String _hx_tmp60 = sr1->ToGLSL(null(),null());
HXDLIN( 571)						::String x8 = ((_hx_tmp59 + _hx_tmp60) + HX_("); // frc",05,cd,08,1a));
HXDLIN( 571)						Bool _hx_tmp61 = hx::IsNotNull( sb->charBuf );
HXDLIN( 571)						if (_hx_tmp61) {
HXLINE( 571)							sb->flush();
            						}
HXDLIN( 571)						::String _hx_tmp62 = ::Std_obj::string(x8);
HXDLIN( 571)						sb->b->push(_hx_tmp62);
            					}
HXLINE( 572)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 573)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)9: {
HXLINE( 576)					{
HXLINE( 576)						::String _hx_tmp63 = dr->ToGLSL(null());
HXDLIN( 576)						::String _hx_tmp64 = (_hx_tmp63 + HX_(" = sqrt(",05,d4,73,5c));
HXDLIN( 576)						::String _hx_tmp65 = sr1->ToGLSL(null(),null());
HXDLIN( 576)						::String x9 = ((_hx_tmp64 + _hx_tmp65) + HX_("); // sqrt",b2,a8,41,b6));
HXDLIN( 576)						Bool _hx_tmp66 = hx::IsNotNull( sb->charBuf );
HXDLIN( 576)						if (_hx_tmp66) {
HXLINE( 576)							sb->flush();
            						}
HXDLIN( 576)						::String _hx_tmp67 = ::Std_obj::string(x9);
HXDLIN( 576)						sb->b->push(_hx_tmp67);
            					}
HXLINE( 577)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 578)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)10: {
HXLINE( 581)					{
HXLINE( 581)						::String _hx_tmp68 = dr->ToGLSL(null());
HXDLIN( 581)						::String _hx_tmp69 = (_hx_tmp68 + HX_(" = inversesqrt(",7b,94,3b,f8));
HXDLIN( 581)						::String _hx_tmp70 = sr1->ToGLSL(null(),null());
HXDLIN( 581)						::String x10 = ((_hx_tmp69 + _hx_tmp70) + HX_("); // rsq",fe,e8,11,1a));
HXDLIN( 581)						Bool _hx_tmp71 = hx::IsNotNull( sb->charBuf );
HXDLIN( 581)						if (_hx_tmp71) {
HXLINE( 581)							sb->flush();
            						}
HXDLIN( 581)						::String _hx_tmp72 = ::Std_obj::string(x10);
HXDLIN( 581)						sb->b->push(_hx_tmp72);
            					}
HXLINE( 582)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 583)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)11: {
HXLINE( 586)					{
HXLINE( 586)						::String _hx_tmp73 = dr->ToGLSL(null());
HXDLIN( 586)						::String _hx_tmp74 = (_hx_tmp73 + HX_(" = pow(",73,f2,a2,4d));
HXDLIN( 586)						::String _hx_tmp75 = sr1->ToGLSL(null(),null());
HXDLIN( 586)						::String _hx_tmp76 = ((_hx_tmp74 + _hx_tmp75) + HX_(", ",74,26,00,00));
HXDLIN( 586)						::String _hx_tmp77 = sr2->ToGLSL(null(),null());
HXDLIN( 586)						::String x11 = ((_hx_tmp76 + _hx_tmp77) + HX_("); // pow",06,61,10,1a));
HXDLIN( 586)						Bool _hx_tmp78 = hx::IsNotNull( sb->charBuf );
HXDLIN( 586)						if (_hx_tmp78) {
HXLINE( 586)							sb->flush();
            						}
HXDLIN( 586)						::String _hx_tmp79 = ::Std_obj::string(x11);
HXDLIN( 586)						sb->b->push(_hx_tmp79);
            					}
HXLINE( 587)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 588)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 589)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)12: {
HXLINE( 592)					{
HXLINE( 592)						::String _hx_tmp80 = dr->ToGLSL(null());
HXDLIN( 592)						::String _hx_tmp81 = (_hx_tmp80 + HX_(" = log2(",f7,c4,4a,53));
HXDLIN( 592)						::String _hx_tmp82 = sr1->ToGLSL(null(),null());
HXDLIN( 592)						::String x12 = ((_hx_tmp81 + _hx_tmp82) + HX_("); // log",f2,57,0d,1a));
HXDLIN( 592)						Bool _hx_tmp83 = hx::IsNotNull( sb->charBuf );
HXDLIN( 592)						if (_hx_tmp83) {
HXLINE( 592)							sb->flush();
            						}
HXDLIN( 592)						::String _hx_tmp84 = ::Std_obj::string(x12);
HXDLIN( 592)						sb->b->push(_hx_tmp84);
            					}
HXLINE( 593)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 594)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)13: {
HXLINE( 597)					{
HXLINE( 597)						::String _hx_tmp85 = dr->ToGLSL(null());
HXDLIN( 597)						::String _hx_tmp86 = (_hx_tmp85 + HX_(" = exp2(",50,75,76,51));
HXDLIN( 597)						::String _hx_tmp87 = sr1->ToGLSL(null(),null());
HXDLIN( 597)						::String x13 = ((_hx_tmp86 + _hx_tmp87) + HX_("); // exp",0b,10,08,1a));
HXDLIN( 597)						Bool _hx_tmp88 = hx::IsNotNull( sb->charBuf );
HXDLIN( 597)						if (_hx_tmp88) {
HXLINE( 597)							sb->flush();
            						}
HXDLIN( 597)						::String _hx_tmp89 = ::Std_obj::string(x13);
HXDLIN( 597)						sb->b->push(_hx_tmp89);
            					}
HXLINE( 598)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 599)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)14: {
HXLINE( 602)					{
HXLINE( 602)						::String _hx_tmp90 = dr->ToGLSL(null());
HXDLIN( 602)						::String _hx_tmp91 = (_hx_tmp90 + HX_(" = normalize(",1e,9b,e9,ff));
HXDLIN( 602)						::String _hx_tmp92 = sr1->ToGLSL(null(),null());
HXDLIN( 602)						::String x14 = ((_hx_tmp91 + _hx_tmp92) + HX_("); // normalize",7b,81,39,e2));
HXDLIN( 602)						Bool _hx_tmp93 = hx::IsNotNull( sb->charBuf );
HXDLIN( 602)						if (_hx_tmp93) {
HXLINE( 602)							sb->flush();
            						}
HXDLIN( 602)						::String _hx_tmp94 = ::Std_obj::string(x14);
HXDLIN( 602)						sb->b->push(_hx_tmp94);
            					}
HXLINE( 603)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 604)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)15: {
HXLINE( 607)					{
HXLINE( 607)						::String _hx_tmp95 = dr->ToGLSL(null());
HXDLIN( 607)						::String _hx_tmp96 = (_hx_tmp95 + HX_(" = sin(",f3,00,9a,4f));
HXDLIN( 607)						::String _hx_tmp97 = sr1->ToGLSL(null(),null());
HXDLIN( 607)						::String x15 = ((_hx_tmp96 + _hx_tmp97) + HX_("); // sin",86,a2,12,1a));
HXDLIN( 607)						Bool _hx_tmp98 = hx::IsNotNull( sb->charBuf );
HXDLIN( 607)						if (_hx_tmp98) {
HXLINE( 607)							sb->flush();
            						}
HXDLIN( 607)						::String _hx_tmp99 = ::Std_obj::string(x15);
HXDLIN( 607)						sb->b->push(_hx_tmp99);
            					}
HXLINE( 608)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 609)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)16: {
HXLINE( 612)					{
HXLINE( 612)						::String _hx_tmp100 = dr->ToGLSL(null());
HXDLIN( 612)						::String _hx_tmp101 = (_hx_tmp100 + HX_(" = cos(",e4,28,0b,45));
HXDLIN( 612)						::String _hx_tmp102 = sr1->ToGLSL(null(),null());
HXDLIN( 612)						::String x16 = ((_hx_tmp101 + _hx_tmp102) + HX_("); // cos",b5,83,06,1a));
HXDLIN( 612)						Bool _hx_tmp103 = hx::IsNotNull( sb->charBuf );
HXDLIN( 612)						if (_hx_tmp103) {
HXLINE( 612)							sb->flush();
            						}
HXDLIN( 612)						::String _hx_tmp104 = ::Std_obj::string(x16);
HXDLIN( 612)						sb->b->push(_hx_tmp104);
            					}
HXLINE( 613)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 614)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)17: {
HXLINE( 617)					sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 618)					{
HXLINE( 618)						::String _hx_tmp105 = dr->ToGLSL(null());
HXDLIN( 618)						::String _hx_tmp106 = (_hx_tmp105 + HX_(" = cross(vec3(",be,c1,b9,ac));
HXDLIN( 618)						::String _hx_tmp107 = sr1->ToGLSL(null(),null());
HXDLIN( 618)						::String _hx_tmp108 = ((_hx_tmp106 + _hx_tmp107) + HX_("), vec3(",ec,87,86,4e));
HXDLIN( 618)						::String _hx_tmp109 = sr2->ToGLSL(null(),null());
HXDLIN( 618)						::String x17 = ((_hx_tmp108 + _hx_tmp109) + HX_(")); // crs",09,b9,f3,e5));
HXDLIN( 618)						Bool _hx_tmp110 = hx::IsNotNull( sb->charBuf );
HXDLIN( 618)						if (_hx_tmp110) {
HXLINE( 618)							sb->flush();
            						}
HXDLIN( 618)						::String _hx_tmp111 = ::Std_obj::string(x17);
HXDLIN( 618)						sb->b->push(_hx_tmp111);
            					}
HXLINE( 619)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 620)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 621)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)18: {
HXLINE( 624)					sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 625)					{
HXLINE( 625)						::String _hx_tmp112 = dr->ToGLSL(null());
HXDLIN( 625)						::String _hx_tmp113 = (_hx_tmp112 + HX_(" = vec4(dot(vec3(",e5,e8,98,98));
HXDLIN( 625)						::String _hx_tmp114 = sr1->ToGLSL(null(),null());
HXDLIN( 625)						::String _hx_tmp115 = ((_hx_tmp113 + _hx_tmp114) + HX_("), vec3(",ec,87,86,4e));
HXDLIN( 625)						::String _hx_tmp116 = sr2->ToGLSL(null(),null());
HXDLIN( 625)						::String _hx_tmp117 = ((_hx_tmp115 + _hx_tmp116) + HX_(")))",49,40,1f,00));
HXDLIN( 625)						::String _hx_tmp118 = dr->GetWriteMask();
HXDLIN( 625)						::String x18 = ((_hx_tmp117 + _hx_tmp118) + HX_("; // dp3",6c,75,5d,51));
HXDLIN( 625)						Bool _hx_tmp119 = hx::IsNotNull( sb->charBuf );
HXDLIN( 625)						if (_hx_tmp119) {
HXLINE( 625)							sb->flush();
            						}
HXDLIN( 625)						::String _hx_tmp120 = ::Std_obj::string(x18);
HXDLIN( 625)						sb->b->push(_hx_tmp120);
            					}
HXLINE( 626)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 627)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 628)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)19: {
HXLINE( 631)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 632)					{
HXLINE( 632)						::String _hx_tmp121 = dr->ToGLSL(null());
HXDLIN( 632)						::String _hx_tmp122 = (_hx_tmp121 + HX_(" = vec4(dot(vec4(",c4,e9,98,98));
HXDLIN( 632)						::String _hx_tmp123 = sr1->ToGLSL(null(),null());
HXDLIN( 632)						::String _hx_tmp124 = ((_hx_tmp122 + _hx_tmp123) + HX_("), vec4(",cb,88,86,4e));
HXDLIN( 632)						::String _hx_tmp125 = sr2->ToGLSL(null(),null());
HXDLIN( 632)						::String _hx_tmp126 = ((_hx_tmp124 + _hx_tmp125) + HX_(")))",49,40,1f,00));
HXDLIN( 632)						::String _hx_tmp127 = dr->GetWriteMask();
HXDLIN( 632)						::String x19 = ((_hx_tmp126 + _hx_tmp127) + HX_("; // dp4",6d,75,5d,51));
HXDLIN( 632)						Bool _hx_tmp128 = hx::IsNotNull( sb->charBuf );
HXDLIN( 632)						if (_hx_tmp128) {
HXLINE( 632)							sb->flush();
            						}
HXDLIN( 632)						::String _hx_tmp129 = ::Std_obj::string(x19);
HXDLIN( 632)						sb->b->push(_hx_tmp129);
            					}
HXLINE( 633)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 634)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 635)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)20: {
HXLINE( 638)					{
HXLINE( 638)						::String _hx_tmp130 = dr->ToGLSL(null());
HXDLIN( 638)						::String _hx_tmp131 = (_hx_tmp130 + HX_(" = abs(",59,de,ae,43));
HXDLIN( 638)						::String _hx_tmp132 = sr1->ToGLSL(null(),null());
HXDLIN( 638)						::String x20 = ((_hx_tmp131 + _hx_tmp132) + HX_("); // abs",e0,f3,04,1a));
HXDLIN( 638)						Bool _hx_tmp133 = hx::IsNotNull( sb->charBuf );
HXDLIN( 638)						if (_hx_tmp133) {
HXLINE( 638)							sb->flush();
            						}
HXDLIN( 638)						::String _hx_tmp134 = ::Std_obj::string(x20);
HXDLIN( 638)						sb->b->push(_hx_tmp134);
            					}
HXLINE( 639)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 640)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)21: {
HXLINE( 643)					{
HXLINE( 643)						::String _hx_tmp135 = dr->ToGLSL(null());
HXDLIN( 643)						::String _hx_tmp136 = (_hx_tmp135 + HX_(" = -",6a,39,55,15));
HXDLIN( 643)						::String _hx_tmp137 = sr1->ToGLSL(null(),null());
HXDLIN( 643)						::String x21 = ((_hx_tmp136 + _hx_tmp137) + HX_("; // neg",95,02,65,51));
HXDLIN( 643)						Bool _hx_tmp138 = hx::IsNotNull( sb->charBuf );
HXDLIN( 643)						if (_hx_tmp138) {
HXLINE( 643)							sb->flush();
            						}
HXDLIN( 643)						::String _hx_tmp139 = ::Std_obj::string(x21);
HXDLIN( 643)						sb->b->push(_hx_tmp139);
            					}
HXLINE( 644)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 645)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)22: {
HXLINE( 648)					{
HXLINE( 648)						::String _hx_tmp140 = dr->ToGLSL(null());
HXDLIN( 648)						::String _hx_tmp141 = (_hx_tmp140 + HX_(" = clamp(",70,52,ed,36));
HXDLIN( 648)						::String _hx_tmp142 = sr1->ToGLSL(null(),null());
HXDLIN( 648)						::String x22 = ((_hx_tmp141 + _hx_tmp142) + HX_(", 0.0, 1.0); // saturate",02,d7,59,d0));
HXDLIN( 648)						Bool _hx_tmp143 = hx::IsNotNull( sb->charBuf );
HXDLIN( 648)						if (_hx_tmp143) {
HXLINE( 648)							sb->flush();
            						}
HXDLIN( 648)						::String _hx_tmp144 = ::Std_obj::string(x22);
HXDLIN( 648)						sb->b->push(_hx_tmp144);
            					}
HXLINE( 649)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 650)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)23: {
HXLINE( 657)					HX_VARI( ::hx::EnumBase,existingUsage) = map->GetRegisterUsage(sr2);
HXLINE( 658)					Bool _hx_tmp145;
HXDLIN( 658)					if (hx::IsNotEq( existingUsage,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn() )) {
HXLINE( 658)						_hx_tmp145 = hx::IsNotEq( existingUsage,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4Array_dyn() );
            					}
            					else {
HXLINE( 658)						_hx_tmp145 = false;
            					}
HXDLIN( 658)					if (_hx_tmp145) {
HXLINE( 659)						{
HXLINE( 659)							::String _hx_tmp146 = dr->ToGLSL(null());
HXDLIN( 659)							::String _hx_tmp147 = (_hx_tmp146 + HX_(" = ",63,7d,18,00));
HXDLIN( 659)							::String _hx_tmp148 = sr1->ToGLSL(null(),null());
HXDLIN( 659)							::String _hx_tmp149 = ((_hx_tmp147 + _hx_tmp148) + HX_(" * mat3(",9f,6a,62,c7));
HXDLIN( 659)							::String _hx_tmp150 = sr2->ToGLSL(false,null());
HXDLIN( 659)							::String x23 = ((_hx_tmp149 + _hx_tmp150) + HX_("); // m33",bb,e5,0d,1a));
HXDLIN( 659)							Bool _hx_tmp151 = hx::IsNotNull( sb->charBuf );
HXDLIN( 659)							if (_hx_tmp151) {
HXLINE( 659)								sb->flush();
            							}
HXDLIN( 659)							::String _hx_tmp152 = ::Std_obj::string(x23);
HXDLIN( 659)							sb->b->push(_hx_tmp152);
            						}
HXLINE( 660)						map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 661)						map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 662)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Matrix44_dyn(),null());
            					}
            					else {
HXLINE( 666)						sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 667)						{
HXLINE( 667)							::String _hx_tmp153 = dr->ToGLSL(null());
HXDLIN( 667)							::String _hx_tmp154 = ((_hx_tmp153 + HX_(" = vec3(",a6,67,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 668)							::String _hx_tmp155 = sr1->ToGLSL(true,null());
HXLINE( 667)							::String _hx_tmp156 = ((_hx_tmp154 + _hx_tmp155) + HX_(",",2c,00,00,00));
HXLINE( 668)							::String _hx_tmp157 = sr2->ToGLSL(true,(int)0);
HXLINE( 667)							::String _hx_tmp158 = (((_hx_tmp156 + _hx_tmp157) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 669)							::String _hx_tmp159 = sr1->ToGLSL(true,null());
HXLINE( 667)							::String _hx_tmp160 = ((_hx_tmp158 + _hx_tmp159) + HX_(",",2c,00,00,00));
HXLINE( 669)							::String _hx_tmp161 = sr2->ToGLSL(true,(int)1);
HXLINE( 667)							::String _hx_tmp162 = (((_hx_tmp160 + _hx_tmp161) + HX_("),",e3,23,00,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 670)							::String _hx_tmp163 = sr1->ToGLSL(true,null());
HXLINE( 667)							::String _hx_tmp164 = ((_hx_tmp162 + _hx_tmp163) + HX_(",",2c,00,00,00));
HXLINE( 670)							::String _hx_tmp165 = sr2->ToGLSL(true,(int)2);
HXLINE( 667)							::String x24 = ((_hx_tmp164 + _hx_tmp165) + HX_(")); // m33",72,18,fb,e5));
HXDLIN( 667)							Bool _hx_tmp166 = hx::IsNotNull( sb->charBuf );
HXDLIN( 667)							if (_hx_tmp166) {
HXLINE( 667)								sb->flush();
            							}
HXDLIN( 667)							::String _hx_tmp167 = ::Std_obj::string(x24);
HXDLIN( 667)							sb->b->push(_hx_tmp167);
            						}
HXLINE( 672)						map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 673)						map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 674)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)0);
HXLINE( 675)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)1);
HXLINE( 676)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)2);
            					}
            				}
            				break;
            				case (int)24: {
HXLINE( 687)					HX_VARI_NAME( ::hx::EnumBase,existingUsage1,"existingUsage") = map->GetRegisterUsage(sr2);
HXLINE( 688)					Bool _hx_tmp168;
HXDLIN( 688)					if (hx::IsNotEq( existingUsage1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn() )) {
HXLINE( 688)						_hx_tmp168 = hx::IsNotEq( existingUsage1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4Array_dyn() );
            					}
            					else {
HXLINE( 688)						_hx_tmp168 = false;
            					}
HXDLIN( 688)					if (_hx_tmp168) {
HXLINE( 689)						{
HXLINE( 689)							::String _hx_tmp169 = dr->ToGLSL(null());
HXDLIN( 689)							::String _hx_tmp170 = (_hx_tmp169 + HX_(" = ",63,7d,18,00));
HXDLIN( 689)							::String _hx_tmp171 = sr1->ToGLSL(null(),null());
HXDLIN( 689)							::String _hx_tmp172 = ((_hx_tmp170 + _hx_tmp171) + HX_(" * ",d6,6c,18,00));
HXDLIN( 689)							::String _hx_tmp173 = sr2->ToGLSL(false,null());
HXDLIN( 689)							::String x25 = ((_hx_tmp172 + _hx_tmp173) + HX_("; // m44",72,15,64,51));
HXDLIN( 689)							Bool _hx_tmp174 = hx::IsNotNull( sb->charBuf );
HXDLIN( 689)							if (_hx_tmp174) {
HXLINE( 689)								sb->flush();
            							}
HXDLIN( 689)							::String _hx_tmp175 = ::Std_obj::string(x25);
HXDLIN( 689)							sb->b->push(_hx_tmp175);
            						}
HXLINE( 690)						map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 691)						map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 692)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Matrix44_dyn(),null());
            					}
            					else {
HXLINE( 696)						sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 697)						{
HXLINE( 697)							::String _hx_tmp176 = dr->ToGLSL(null());
HXDLIN( 697)							::String _hx_tmp177 = ((_hx_tmp176 + HX_(" = vec4(",85,68,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 698)							::String _hx_tmp178 = sr1->ToGLSL(true,null());
HXLINE( 697)							::String _hx_tmp179 = ((_hx_tmp177 + _hx_tmp178) + HX_(",",2c,00,00,00));
HXLINE( 698)							::String _hx_tmp180 = sr2->ToGLSL(true,(int)0);
HXLINE( 697)							::String _hx_tmp181 = (((_hx_tmp179 + _hx_tmp180) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 699)							::String _hx_tmp182 = sr1->ToGLSL(true,null());
HXLINE( 697)							::String _hx_tmp183 = ((_hx_tmp181 + _hx_tmp182) + HX_(",",2c,00,00,00));
HXLINE( 699)							::String _hx_tmp184 = sr2->ToGLSL(true,(int)1);
HXLINE( 697)							::String _hx_tmp185 = (((_hx_tmp183 + _hx_tmp184) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 700)							::String _hx_tmp186 = sr1->ToGLSL(true,null());
HXLINE( 697)							::String _hx_tmp187 = ((_hx_tmp185 + _hx_tmp186) + HX_(",",2c,00,00,00));
HXLINE( 700)							::String _hx_tmp188 = sr2->ToGLSL(true,(int)2);
HXLINE( 697)							::String _hx_tmp189 = (((_hx_tmp187 + _hx_tmp188) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 701)							::String _hx_tmp190 = sr1->ToGLSL(true,null());
HXLINE( 697)							::String _hx_tmp191 = ((_hx_tmp189 + _hx_tmp190) + HX_(",",2c,00,00,00));
HXLINE( 701)							::String _hx_tmp192 = sr2->ToGLSL(true,(int)3);
HXLINE( 697)							::String x26 = ((_hx_tmp191 + _hx_tmp192) + HX_(")); // m44",52,19,fb,e5));
HXDLIN( 697)							Bool _hx_tmp193 = hx::IsNotNull( sb->charBuf );
HXDLIN( 697)							if (_hx_tmp193) {
HXLINE( 697)								sb->flush();
            							}
HXDLIN( 697)							::String _hx_tmp194 = ::Std_obj::string(x26);
HXDLIN( 697)							sb->b->push(_hx_tmp194);
            						}
HXLINE( 703)						map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 704)						map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 705)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)0);
HXLINE( 706)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)1);
HXLINE( 707)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)2);
HXLINE( 708)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)3);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 719)					hx::AndEq(dr->mask,(int)7);
HXLINE( 721)					HX_VARI_NAME( ::hx::EnumBase,existingUsage2,"existingUsage") = map->GetRegisterUsage(sr2);
HXLINE( 722)					Bool _hx_tmp195;
HXDLIN( 722)					if (hx::IsNotEq( existingUsage2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn() )) {
HXLINE( 722)						_hx_tmp195 = hx::IsNotEq( existingUsage2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4Array_dyn() );
            					}
            					else {
HXLINE( 722)						_hx_tmp195 = false;
            					}
HXDLIN( 722)					if (_hx_tmp195) {
HXLINE( 723)						{
HXLINE( 723)							::String _hx_tmp196 = dr->ToGLSL(null());
HXDLIN( 723)							::String _hx_tmp197 = (_hx_tmp196 + HX_(" = ",63,7d,18,00));
HXDLIN( 723)							::String _hx_tmp198 = sr1->ToGLSL(null(),null());
HXDLIN( 723)							::String _hx_tmp199 = ((_hx_tmp197 + _hx_tmp198) + HX_(" * ",d6,6c,18,00));
HXDLIN( 723)							::String _hx_tmp200 = sr2->ToGLSL(false,null());
HXDLIN( 723)							::String x27 = ((_hx_tmp199 + _hx_tmp200) + HX_("; // m34",93,14,64,51));
HXDLIN( 723)							Bool _hx_tmp201 = hx::IsNotNull( sb->charBuf );
HXDLIN( 723)							if (_hx_tmp201) {
HXLINE( 723)								sb->flush();
            							}
HXDLIN( 723)							::String _hx_tmp202 = ::Std_obj::string(x27);
HXDLIN( 723)							sb->b->push(_hx_tmp202);
            						}
HXLINE( 724)						map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 725)						map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 726)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Matrix44_dyn(),null());
            					}
            					else {
HXLINE( 730)						sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 731)						{
HXLINE( 731)							::String _hx_tmp203 = dr->ToGLSL(null());
HXDLIN( 731)							::String _hx_tmp204 = ((_hx_tmp203 + HX_(" = vec3(",a6,67,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 732)							::String _hx_tmp205 = sr1->ToGLSL(true,null());
HXLINE( 731)							::String _hx_tmp206 = ((_hx_tmp204 + _hx_tmp205) + HX_(",",2c,00,00,00));
HXLINE( 732)							::String _hx_tmp207 = sr2->ToGLSL(true,(int)0);
HXLINE( 731)							::String _hx_tmp208 = (((_hx_tmp206 + _hx_tmp207) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 733)							::String _hx_tmp209 = sr1->ToGLSL(true,null());
HXLINE( 731)							::String _hx_tmp210 = ((_hx_tmp208 + _hx_tmp209) + HX_(",",2c,00,00,00));
HXLINE( 733)							::String _hx_tmp211 = sr2->ToGLSL(true,(int)1);
HXLINE( 731)							::String _hx_tmp212 = (((_hx_tmp210 + _hx_tmp211) + HX_("),",e3,23,00,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 734)							::String _hx_tmp213 = sr1->ToGLSL(true,null());
HXLINE( 731)							::String _hx_tmp214 = ((_hx_tmp212 + _hx_tmp213) + HX_(",",2c,00,00,00));
HXLINE( 734)							::String _hx_tmp215 = sr2->ToGLSL(true,(int)2);
HXLINE( 731)							::String x28 = ((_hx_tmp214 + _hx_tmp215) + HX_(")); // m34",73,18,fb,e5));
HXDLIN( 731)							Bool _hx_tmp216 = hx::IsNotNull( sb->charBuf );
HXDLIN( 731)							if (_hx_tmp216) {
HXLINE( 731)								sb->flush();
            							}
HXDLIN( 731)							::String _hx_tmp217 = ::Std_obj::string(x28);
HXDLIN( 731)							sb->b->push(_hx_tmp217);
            						}
HXLINE( 736)						map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 737)						map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 738)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)0);
HXLINE( 739)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)1);
HXLINE( 740)						map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),(int)2);
            					}
            				}
            				break;
            				case (int)39: {
HXLINE( 747)					sr1->sourceMask = (int)15;
HXLINE( 748)					{
HXLINE( 748)						::String _hx_tmp218 = sr1->ToGLSL(null(),null());
HXDLIN( 748)						::String x29 = ((HX_("if (any(lessThan(",0d,a8,4d,9b) + _hx_tmp218) + HX_(", vec4(0)))) discard;",61,d7,c4,f0));
HXDLIN( 748)						Bool _hx_tmp219 = hx::IsNotNull( sb->charBuf );
HXDLIN( 748)						if (_hx_tmp219) {
HXLINE( 748)							sb->flush();
            						}
HXDLIN( 748)						::String _hx_tmp220 = ::Std_obj::string(x29);
HXDLIN( 748)						sb->b->push(_hx_tmp220);
            					}
HXLINE( 749)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)40: {
HXLINE( 753)					HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::SamplerReg,sampler) = ::openfl::_internal::stage3D::_AGALConverter::SamplerReg_obj::Parse(source2,programType);
HXLINE( 755)					{
HXLINE( 755)						HX_VARI( Int,_g) = sampler->d;
HXDLIN( 755)						switch((int)(_g)){
            							case (int)0: {
HXLINE( 759)								sr1->sourceMask = (int)3;
HXLINE( 760)								map->AddSaR(sampler,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Sampler2D_dyn());
HXLINE( 764)								{
HXLINE( 764)									::String _hx_tmp221 = dr->ToGLSL(null());
HXDLIN( 764)									::String _hx_tmp222 = (_hx_tmp221 + HX_(" = texture2D(",3e,55,2e,2f));
HXDLIN( 764)									::String _hx_tmp223 = sampler->ToGLSL();
HXDLIN( 764)									::String _hx_tmp224 = ((_hx_tmp222 + _hx_tmp223) + HX_(", ",74,26,00,00));
HXDLIN( 764)									::String _hx_tmp225 = sr1->ToGLSL(null(),null());
HXDLIN( 764)									::String x30 = ((_hx_tmp224 + _hx_tmp225) + HX_("); // tex",55,61,13,1a));
HXDLIN( 764)									Bool _hx_tmp226 = hx::IsNotNull( sb->charBuf );
HXDLIN( 764)									if (_hx_tmp226) {
HXLINE( 764)										sb->flush();
            									}
HXDLIN( 764)									::String _hx_tmp227 = ::Std_obj::string(x30);
HXDLIN( 764)									sb->b->push(_hx_tmp227);
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 768)								sr1->sourceMask = (int)7;
HXLINE( 769)								{
HXLINE( 769)									::String _hx_tmp228 = dr->ToGLSL(null());
HXDLIN( 769)									::String _hx_tmp229 = (_hx_tmp228 + HX_(" = textureCube(",9b,4c,bc,01));
HXDLIN( 769)									::String _hx_tmp230 = sampler->ToGLSL();
HXDLIN( 769)									::String _hx_tmp231 = ((_hx_tmp229 + _hx_tmp230) + HX_(", ",74,26,00,00));
HXDLIN( 769)									::String _hx_tmp232 = sr1->ToGLSL(null(),null());
HXDLIN( 769)									::String x31 = ((_hx_tmp231 + _hx_tmp232) + HX_("); // tex",55,61,13,1a));
HXDLIN( 769)									Bool _hx_tmp233 = hx::IsNotNull( sb->charBuf );
HXDLIN( 769)									if (_hx_tmp233) {
HXLINE( 769)										sb->flush();
            									}
HXDLIN( 769)									::String _hx_tmp234 = ::Std_obj::string(x31);
HXDLIN( 769)									sb->b->push(_hx_tmp234);
            								}
HXLINE( 770)								map->AddSaR(sampler,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::SamplerCube_dyn());
            							}
            							break;
            						}
            					}
HXLINE( 773)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 774)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 776)					Bool _hx_tmp235 = hx::IsNotNull( outSamplers );
HXDLIN( 776)					if (_hx_tmp235) {
HXLINE( 778)						Int _hx_tmp236 = sampler->n;
HXDLIN( 778)						 ::openfl::_internal::stage3D::SamplerState _hx_tmp237 = sampler->ToSamplerState();
HXDLIN( 778)						outSamplers[_hx_tmp236] = _hx_tmp237;
            					}
            				}
            				break;
            				case (int)41: {
HXLINE( 782)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 783)					{
HXLINE( 783)						::String _hx_tmp238 = dr->ToGLSL(null());
HXDLIN( 783)						::String _hx_tmp239 = (_hx_tmp238 + HX_(" = vec4(greaterThanEqual(",aa,a3,51,ec));
HXDLIN( 783)						::String _hx_tmp240 = sr1->ToGLSL(null(),null());
HXDLIN( 783)						::String _hx_tmp241 = ((_hx_tmp239 + _hx_tmp240) + HX_(", ",74,26,00,00));
HXDLIN( 783)						::String _hx_tmp242 = sr2->ToGLSL(null(),null());
HXDLIN( 783)						::String _hx_tmp243 = ((_hx_tmp241 + _hx_tmp242) + HX_("))",e0,23,00,00));
HXDLIN( 783)						::String _hx_tmp244 = dr->GetWriteMask();
HXDLIN( 783)						::String x32 = ((_hx_tmp243 + _hx_tmp244) + HX_("; // ste",e9,da,68,51));
HXDLIN( 783)						Bool _hx_tmp245 = hx::IsNotNull( sb->charBuf );
HXDLIN( 783)						if (_hx_tmp245) {
HXLINE( 783)							sb->flush();
            						}
HXDLIN( 783)						::String _hx_tmp246 = ::Std_obj::string(x32);
HXDLIN( 783)						sb->b->push(_hx_tmp246);
            					}
HXLINE( 784)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 785)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 786)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)42: {
HXLINE( 789)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 790)					{
HXLINE( 790)						::String _hx_tmp247 = dr->ToGLSL(null());
HXDLIN( 790)						::String _hx_tmp248 = (_hx_tmp247 + HX_(" = vec4(lessThan(",69,ee,b4,35));
HXDLIN( 790)						::String _hx_tmp249 = sr1->ToGLSL(null(),null());
HXDLIN( 790)						::String _hx_tmp250 = ((_hx_tmp248 + _hx_tmp249) + HX_(", ",74,26,00,00));
HXDLIN( 790)						::String _hx_tmp251 = sr2->ToGLSL(null(),null());
HXDLIN( 790)						::String _hx_tmp252 = ((_hx_tmp250 + _hx_tmp251) + HX_("))",e0,23,00,00));
HXDLIN( 790)						::String _hx_tmp253 = dr->GetWriteMask();
HXDLIN( 790)						::String x33 = ((_hx_tmp252 + _hx_tmp253) + HX_("; // slt",00,d4,68,51));
HXDLIN( 790)						Bool _hx_tmp254 = hx::IsNotNull( sb->charBuf );
HXDLIN( 790)						if (_hx_tmp254) {
HXLINE( 790)							sb->flush();
            						}
HXDLIN( 790)						::String _hx_tmp255 = ::Std_obj::string(x33);
HXDLIN( 790)						sb->b->push(_hx_tmp255);
            					}
HXLINE( 791)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 792)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 793)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)44: {
HXLINE( 796)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 797)					{
HXLINE( 797)						::String _hx_tmp256 = dr->ToGLSL(null());
HXDLIN( 797)						::String _hx_tmp257 = (_hx_tmp256 + HX_(" = vec4(equal(",39,08,45,e1));
HXDLIN( 797)						::String _hx_tmp258 = sr1->ToGLSL(null(),null());
HXDLIN( 797)						::String _hx_tmp259 = ((_hx_tmp257 + _hx_tmp258) + HX_(", ",74,26,00,00));
HXDLIN( 797)						::String _hx_tmp260 = sr2->ToGLSL(null(),null());
HXDLIN( 797)						::String _hx_tmp261 = ((_hx_tmp259 + _hx_tmp260) + HX_("))",e0,23,00,00));
HXDLIN( 797)						::String _hx_tmp262 = dr->GetWriteMask();
HXDLIN( 797)						::String x34 = ((_hx_tmp261 + _hx_tmp262) + HX_("; // seq",e4,cd,68,51));
HXDLIN( 797)						Bool _hx_tmp263 = hx::IsNotNull( sb->charBuf );
HXDLIN( 797)						if (_hx_tmp263) {
HXLINE( 797)							sb->flush();
            						}
HXDLIN( 797)						::String _hx_tmp264 = ::Std_obj::string(x34);
HXDLIN( 797)						sb->b->push(_hx_tmp264);
            					}
HXLINE( 798)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 799)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 800)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				case (int)45: {
HXLINE( 803)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 804)					{
HXLINE( 804)						::String _hx_tmp265 = dr->ToGLSL(null());
HXDLIN( 804)						::String _hx_tmp266 = (_hx_tmp265 + HX_(" = vec4(notEqual(",42,aa,f1,97));
HXDLIN( 804)						::String _hx_tmp267 = sr1->ToGLSL(null(),null());
HXDLIN( 804)						::String _hx_tmp268 = ((_hx_tmp266 + _hx_tmp267) + HX_(", ",74,26,00,00));
HXDLIN( 804)						::String _hx_tmp269 = sr2->ToGLSL(null(),null());
HXDLIN( 804)						::String _hx_tmp270 = ((_hx_tmp268 + _hx_tmp269) + HX_("))",e0,23,00,00));
HXDLIN( 804)						::String _hx_tmp271 = dr->GetWriteMask();
HXDLIN( 804)						::String x35 = ((_hx_tmp270 + _hx_tmp271) + HX_("; // sne",af,d5,68,51));
HXDLIN( 804)						Bool _hx_tmp272 = hx::IsNotNull( sb->charBuf );
HXDLIN( 804)						if (_hx_tmp272) {
HXLINE( 804)							sb->flush();
            						}
HXDLIN( 804)						::String _hx_tmp273 = ::Std_obj::string(x35);
HXDLIN( 804)						sb->b->push(_hx_tmp273);
            					}
HXLINE( 805)					map->AddDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn());
HXLINE( 806)					map->AddSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
HXLINE( 807)					map->AddSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::Vector4_dyn(),null());
            				}
            				break;
            				default:{
HXLINE( 811)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new((HX_("Opcode ",72,65,6e,e7) + opcode)));
            				}
            			}
HXLINE( 814)			{
HXLINE( 814)				Bool _hx_tmp274 = hx::IsNotNull( sb->charBuf );
HXDLIN( 814)				if (_hx_tmp274) {
HXLINE( 814)					sb->flush();
            				}
HXDLIN( 814)				sb->b->push(HX_("\n",0a,00,00,00));
            			}
            		}
HXLINE( 820)		HX_VARI(  ::StringBuf,glsl) =  ::StringBuf_obj::__new();
HXLINE( 821)		{
HXLINE( 821)			Bool _hx_tmp275 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 821)			if (_hx_tmp275) {
HXLINE( 821)				glsl->flush();
            			}
HXDLIN( 821)			::String _hx_tmp276;
HXDLIN( 821)			if (hx::IsEq( programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Vertex_dyn() )) {
HXLINE( 821)				_hx_tmp276 = HX_("vertex",64,db,47,a1);
            			}
            			else {
HXLINE( 821)				_hx_tmp276 = HX_("fragment",d0,5f,e5,ad);
            			}
HXDLIN( 821)			::String _hx_tmp277 = ::Std_obj::string(((HX_("// AGAL ",af,bc,4a,8a) + _hx_tmp276) + HX_(" shader\n",25,c5,d4,85)));
HXDLIN( 821)			glsl->b->push(_hx_tmp277);
            		}
HXLINE( 822)		{
HXLINE( 822)			Bool _hx_tmp278 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 822)			if (_hx_tmp278) {
HXLINE( 822)				glsl->flush();
            			}
HXDLIN( 822)			::String _hx_tmp279 = ::Std_obj::string(((HX_("#version ",2b,a9,b9,ad) + (int)100) + HX_("\n",0a,00,00,00)));
HXDLIN( 822)			glsl->b->push(_hx_tmp279);
            		}
HXLINE( 824)		{
HXLINE( 824)			Bool _hx_tmp280 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 824)			if (_hx_tmp280) {
HXLINE( 824)				glsl->flush();
            			}
HXDLIN( 824)			glsl->b->push(HX_("precision highp float;\n",57,4a,f7,14));
            		}
HXLINE( 825)		{
HXLINE( 825)			::String x36 = map->ToGLSL(false);
HXDLIN( 825)			Bool _hx_tmp281 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 825)			if (_hx_tmp281) {
HXLINE( 825)				glsl->flush();
            			}
HXDLIN( 825)			::String _hx_tmp282 = ::Std_obj::string(x36);
HXDLIN( 825)			glsl->b->push(_hx_tmp282);
            		}
HXLINE( 826)		if (hx::IsEq( programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Vertex_dyn() )) {
HXLINE( 828)			Bool _hx_tmp283 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 828)			if (_hx_tmp283) {
HXLINE( 828)				glsl->flush();
            			}
HXDLIN( 828)			glsl->b->push(HX_("uniform vec4 vcPositionScale;\n",cf,aa,4f,18));
            		}
HXLINE( 830)		{
HXLINE( 830)			Bool _hx_tmp284 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 830)			if (_hx_tmp284) {
HXLINE( 830)				glsl->flush();
            			}
HXDLIN( 830)			glsl->b->push(HX_("void main() {\n",49,b0,bf,fb));
            		}
HXLINE( 831)		{
HXLINE( 831)			::String x37 = map->ToGLSL(true);
HXDLIN( 831)			Bool _hx_tmp285 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 831)			if (_hx_tmp285) {
HXLINE( 831)				glsl->flush();
            			}
HXDLIN( 831)			::String _hx_tmp286 = ::Std_obj::string(x37);
HXDLIN( 831)			glsl->b->push(_hx_tmp286);
            		}
HXLINE( 832)		{
HXLINE( 832)			Bool _hx_tmp287 = hx::IsNotNull( sb->charBuf );
HXDLIN( 832)			if (_hx_tmp287) {
HXLINE( 832)				sb->flush();
            			}
HXDLIN( 832)			::String x38 = sb->b->join(HX_("",00,00,00,00));
HXDLIN( 832)			Bool _hx_tmp288 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 832)			if (_hx_tmp288) {
HXLINE( 832)				glsl->flush();
            			}
HXDLIN( 832)			::String _hx_tmp289 = ::Std_obj::string(x38);
HXDLIN( 832)			glsl->b->push(_hx_tmp289);
            		}
HXLINE( 834)		if (hx::IsEq( programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Vertex_dyn() )) {
HXLINE( 836)			Bool _hx_tmp290 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 836)			if (_hx_tmp290) {
HXLINE( 836)				glsl->flush();
            			}
HXDLIN( 836)			glsl->b->push(HX_("\tgl_Position *= vcPositionScale;\n",7c,ad,85,8d));
            		}
HXLINE( 838)		{
HXLINE( 838)			Bool _hx_tmp291 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 838)			if (_hx_tmp291) {
HXLINE( 838)				glsl->flush();
            			}
HXDLIN( 838)			glsl->b->push(HX_("}\n",ed,6c,00,00));
            		}
HXLINE( 840)		Bool _hx_tmp292 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 840)		if (_hx_tmp292) {
HXLINE( 840)			glsl->flush();
            		}
HXDLIN( 840)		return glsl->b->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AGALConverter_obj,ConvertToGLSL,return )


AGALConverter_obj::AGALConverter_obj()
{
}

bool AGALConverter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"ReadUInt64") ) { outValue = ReadUInt64_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ConvertToGLSL") ) { outValue = ConvertToGLSL_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"PrefixFromType") ) { outValue = PrefixFromType_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AGALConverter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *AGALConverter_obj_sStaticStorageInfo = 0;
#endif

static void AGALConverter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AGALConverter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AGALConverter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AGALConverter_obj::__mClass,"__mClass");
};

#endif

hx::Class AGALConverter_obj::__mClass;

static ::String AGALConverter_obj_sStaticFields[] = {
	HX_HCSTRING("PrefixFromType","\x16","\xcd","\x41","\x73"),
	HX_HCSTRING("ReadUInt64","\x4e","\x25","\x3c","\x09"),
	HX_HCSTRING("ConvertToGLSL","\x2c","\x93","\x52","\xfd"),
	::String(null())
};

void AGALConverter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.AGALConverter","\xa0","\x2d","\xe2","\x9e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AGALConverter_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AGALConverter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AGALConverter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AGALConverter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AGALConverter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AGALConverter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AGALConverter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
