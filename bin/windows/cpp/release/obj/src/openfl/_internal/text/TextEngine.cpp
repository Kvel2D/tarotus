// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphPosition
#include <lime/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text_TextLayout
#include <lime/text/TextLayout.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",120,0xdff93b7f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(textField,"textField")
HXLINE( 122)		this->textField = textField;
HXLINE( 124)		this->width = (int)100;
HXLINE( 125)		this->height = (int)100;
HXLINE( 126)		this->text = HX_("",00,00,00,00);
HXLINE( 128)		this->bounds =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,(int)0,(int)0);
HXLINE( 130)		this->type = (int)0;
HXLINE( 131)		this->autoSize = (int)2;
HXLINE( 132)		this->displayAsPassword = false;
HXLINE( 133)		this->embedFonts = false;
HXLINE( 134)		this->selectable = true;
HXLINE( 135)		this->borderColor = (int)0;
HXLINE( 136)		this->border = false;
HXLINE( 137)		this->backgroundColor = (int)16777215;
HXLINE( 138)		this->background = false;
HXLINE( 139)		this->gridFitType = (int)1;
HXLINE( 140)		this->maxChars = (int)0;
HXLINE( 141)		this->multiline = false;
HXLINE( 142)		this->sharpness = (int)0;
HXLINE( 143)		this->scrollH = (int)0;
HXLINE( 144)		this->scrollV = (int)1;
HXLINE( 145)		this->wordWrap = false;
HXLINE( 147)		this->lineAscents = ::Array_obj< Float >::__new();
HXLINE( 148)		this->lineBreaks = ::Array_obj< Int >::__new();
HXLINE( 149)		this->lineDescents = ::Array_obj< Float >::__new();
HXLINE( 150)		this->lineLeadings = ::Array_obj< Float >::__new();
HXLINE( 151)		this->lineHeights = ::Array_obj< Float >::__new();
HXLINE( 152)		this->lineWidths = ::Array_obj< Float >::__new();
HXLINE( 153)		this->layoutGroups = ::Array_obj< ::Dynamic>::__new();
HXLINE( 154)		this->textFormatRanges = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(textField);
	return _hx_result;
}

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TextEngine_obj::getBounds(){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",196,0xdff93b7f)
            	HX_STACK_THIS(this)
HXLINE( 198)		HX_VAR( Int,padding);
HXDLIN( 198)		if (this->border) {
HXLINE( 198)			padding = (int)1;
            		}
            		else {
HXLINE( 198)			padding = (int)0;
            		}
HXLINE( 200)		this->bounds->width = (this->width + padding);
HXLINE( 201)		this->bounds->height = (this->height + padding);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(Int index){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",433,0xdff93b7f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 435)		Bool _hx_tmp;
HXDLIN( 435)		if ((index >= (int)0)) {
HXLINE( 435)			_hx_tmp = (index > (this->lineBreaks->length + (int)1));
            		}
            		else {
HXLINE( 435)			_hx_tmp = true;
            		}
HXDLIN( 435)		if (_hx_tmp) {
HXLINE( 437)			return null();
            		}
HXLINE( 441)		Bool _hx_tmp1 = (this->lineBreaks->length == (int)0);
HXDLIN( 441)		if (_hx_tmp1) {
HXLINE( 443)			return this->text;
            		}
            		else {
HXLINE( 447)			Int _hx_tmp2;
HXDLIN( 447)			if ((index > (int)0)) {
HXLINE( 447)				_hx_tmp2 = this->lineBreaks->__get((index - (int)1));
            			}
            			else {
HXLINE( 447)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 447)			Int _hx_tmp3 = this->lineBreaks->__get(index);
HXDLIN( 447)			return this->text.substring(_hx_tmp2,_hx_tmp3);
            		}
HXLINE( 441)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

Int TextEngine_obj::getLineBreakIndex(hx::Null< Int >  __o_startIndex){
Int startIndex = __o_startIndex.Default(0);
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",454,0xdff93b7f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(startIndex,"startIndex")
HXLINE( 456)		HX_VARI( Int,cr) = this->text.indexOf(HX_("\n",0a,00,00,00),startIndex);
HXLINE( 457)		HX_VARI( Int,lf) = this->text.indexOf(HX_("\r",0d,00,00,00),startIndex);
HXLINE( 459)		if ((cr == (int)-1)) {
HXLINE( 459)			return lf;
            		}
HXLINE( 460)		if ((lf == (int)-1)) {
HXLINE( 460)			return cr;
            		}
HXLINE( 462)		if ((cr < lf)) {
HXLINE( 462)			return cr;
            		}
            		else {
HXLINE( 462)			return lf;
            		}
HXDLIN( 462)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",467,0xdff93b7f)
            	HX_STACK_THIS(this)
HXLINE( 469)		this->lineAscents->removeRange((int)0,this->lineAscents->length);
HXLINE( 470)		this->lineDescents->removeRange((int)0,this->lineDescents->length);
HXLINE( 471)		this->lineLeadings->removeRange((int)0,this->lineLeadings->length);
HXLINE( 472)		this->lineHeights->removeRange((int)0,this->lineHeights->length);
HXLINE( 473)		this->lineWidths->removeRange((int)0,this->lineWidths->length);
HXLINE( 475)		HX_VARI( Float,currentLineAscent) = ((Float)0.0);
HXLINE( 476)		HX_VARI( Float,currentLineDescent) = ((Float)0.0);
HXLINE( 477)		HX_VARI(  ::Dynamic,currentLineLeading) = null();
HXLINE( 478)		HX_VARI( Float,currentLineHeight) = ((Float)0.0);
HXLINE( 479)		HX_VARI( Float,currentLineWidth) = ((Float)0.0);
HXLINE( 481)		this->textWidth = (int)0;
HXLINE( 482)		this->textHeight = (int)0;
HXLINE( 483)		this->numLines = (int)1;
HXLINE( 484)		this->bottomScrollV = (int)0;
HXLINE( 485)		this->maxScrollH = (int)0;
HXLINE( 487)		{
HXLINE( 487)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 487)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->layoutGroups;
HXDLIN( 487)			while((_g < _g1->length)){
HXLINE( 487)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 487)				++_g;
HXLINE( 489)				while((group->lineIndex > (this->numLines - (int)1))){
HXLINE( 491)					this->lineAscents->push(currentLineAscent);
HXLINE( 492)					this->lineDescents->push(currentLineDescent);
HXLINE( 493)					Float _hx_tmp;
HXDLIN( 493)					Bool _hx_tmp1 = hx::IsNotNull( currentLineLeading );
HXDLIN( 493)					if (_hx_tmp1) {
HXLINE( 493)						_hx_tmp = currentLineLeading;
            					}
            					else {
HXLINE( 493)						_hx_tmp = (int)0;
            					}
HXDLIN( 493)					this->lineLeadings->push(_hx_tmp);
HXLINE( 494)					this->lineHeights->push(currentLineHeight);
HXLINE( 495)					this->lineWidths->push(currentLineWidth);
HXLINE( 497)					currentLineAscent = (int)0;
HXLINE( 498)					currentLineDescent = (int)0;
HXLINE( 499)					currentLineLeading = null();
HXLINE( 500)					currentLineHeight = (int)0;
HXLINE( 501)					currentLineWidth = (int)0;
HXLINE( 503)					this->numLines++;
HXLINE( 505)					Bool _hx_tmp2 = (this->textHeight <= (this->height - (int)2));
HXDLIN( 505)					if (_hx_tmp2) {
HXLINE( 507)						this->bottomScrollV++;
            					}
            				}
HXLINE( 513)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 514)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 516)				Bool _hx_tmp3 = hx::IsNull( currentLineLeading );
HXDLIN( 516)				if (_hx_tmp3) {
HXLINE( 518)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 522)					Float _hx_tmp4 = ::Math_obj::max(currentLineLeading,group->leading);
HXDLIN( 522)					currentLineLeading = ::Std_obj::_hx_int(_hx_tmp4);
            				}
HXLINE( 526)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 527)				currentLineWidth = ((group->offsetX - (int)2) + group->width);
HXLINE( 529)				Bool _hx_tmp5 = (currentLineWidth > this->textWidth);
HXDLIN( 529)				if (_hx_tmp5) {
HXLINE( 531)					this->textWidth = currentLineWidth;
            				}
HXLINE( 535)				Float _hx_tmp6 = ((group->offsetY - (int)2) + group->ascent);
HXDLIN( 535)				this->textHeight = (_hx_tmp6 + group->descent);
            			}
            		}
HXLINE( 539)		this->lineAscents->push(currentLineAscent);
HXLINE( 540)		this->lineDescents->push(currentLineDescent);
HXLINE( 541)		Float _hx_tmp7;
HXDLIN( 541)		Bool _hx_tmp8 = hx::IsNotNull( currentLineLeading );
HXDLIN( 541)		if (_hx_tmp8) {
HXLINE( 541)			_hx_tmp7 = currentLineLeading;
            		}
            		else {
HXLINE( 541)			_hx_tmp7 = (int)0;
            		}
HXDLIN( 541)		this->lineLeadings->push(_hx_tmp7);
HXLINE( 542)		this->lineHeights->push(currentLineHeight);
HXLINE( 543)		this->lineWidths->push(currentLineWidth);
HXLINE( 545)		Bool _hx_tmp9 = (this->numLines == (int)1);
HXDLIN( 545)		if (_hx_tmp9) {
HXLINE( 547)			this->bottomScrollV = (int)1;
HXLINE( 549)			if (hx::IsGreater( currentLineLeading,(int)0 )) {
HXLINE( 551)				hx::AddEq(this->textHeight,currentLineLeading);
            			}
            		}
            		else {
HXLINE( 555)			Bool _hx_tmp10 = (this->textHeight <= (this->height - (int)2));
HXDLIN( 555)			if (_hx_tmp10) {
HXLINE( 557)				this->bottomScrollV++;
            			}
            		}
HXLINE( 561)		Bool _hx_tmp11 = (this->textWidth > (this->width - (int)4));
HXDLIN( 561)		if (_hx_tmp11) {
HXLINE( 563)			Float _hx_tmp12 = ((this->textWidth - this->width) + (int)4);
HXDLIN( 563)			this->maxScrollH = ::Std_obj::_hx_int(_hx_tmp12);
            		}
            		else {
HXLINE( 567)			this->maxScrollH = (int)0;
            		}
HXLINE( 571)		Int _hx_tmp13 = (this->numLines - this->bottomScrollV);
HXDLIN( 571)		this->maxScrollV = (_hx_tmp13 + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",576,0xdff93b7f)
            	HX_STACK_THIS(this)
HXLINE( 576)		HX_VARI(  ::openfl::_internal::text::TextEngine,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 578)		this->layoutGroups->removeRange((int)0,this->layoutGroups->length);
HXLINE( 580)		HX_VARI( Int,rangeIndex) = (int)-1;
HXLINE( 581)		HX_VARI(  ::openfl::_internal::text::TextFormatRange,formatRange) = null();
HXLINE( 582)		HX_VARI(  ::lime::text::Font,font) = null();
HXLINE( 584)		HX_VARI(  ::openfl::text::TextFormat,currentFormat) = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 586)		HX_VARI( Int,leading) = (int)0;
HXLINE( 587)		HX_VARI( Float,ascent) = ((Float)0.0);
HXLINE( 588)		HX_VARI( Float,descent) = ((Float)0.0);
HXLINE( 590)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,layoutGroup);
HXLINE( 591)		HX_VAR( Float,widthValue);
HXDLIN( 591)		HX_VARI( Float,heightValue) = ((Float)0.0);
HXLINE( 593)		HX_VARI( Float,spaceWidth) = ((Float)0.0);
HXLINE( 594)		HX_VARI( Int,previousSpaceIndex) = (int)0;
HXLINE( 595)		HX_VARI( Int,spaceIndex) = this->text.indexOf(HX_(" ",20,00,00,00),null());
HXLINE( 596)		HX_VARI( Int,breakIndex) = this->getLineBreakIndex(null());
HXLINE( 598)		HX_VARI( Float,marginRight) = ((Float)0.0);
HXLINE( 599)		HX_VARI( Float,offsetX) = ((Float)2.0);
HXLINE( 600)		HX_VARI( Float,offsetY) = ((Float)2.0);
HXLINE( 601)		HX_VARI( Int,textIndex) = (int)0;
HXLINE( 602)		HX_VARI( Int,lineIndex) = (int)0;
HXLINE( 603)		HX_VARI(  ::openfl::text::TextFormat,lineFormat) = null();
HXLINE( 757)		Bool _hx_tmp = ((int)-1 < (_gthis->textFormatRanges->length - (int)1));
HXDLIN( 757)		if (_hx_tmp) {
HXLINE( 757)			rangeIndex = (int)0;
HXDLIN( 757)			formatRange = _gthis->textFormatRanges->__get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 757)			currentFormat->_hx___merge(formatRange->format);
HXDLIN( 757)			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN( 757)			Bool _hx_tmp1 = hx::IsNotNull( font );
HXDLIN( 757)			if (_hx_tmp1) {
HXLINE( 757)				Int _hx_tmp2 = font->get_ascender();
HXDLIN( 757)				Int _hx_tmp3 = font->get_unitsPerEM();
HXDLIN( 757)				ascent = (((Float)_hx_tmp2 / (Float)_hx_tmp3) * currentFormat->size);
HXDLIN( 757)				Int _hx_tmp4 = font->get_descender();
HXDLIN( 757)				Int _hx_tmp5 = font->get_unitsPerEM();
HXDLIN( 757)				Float _hx_tmp6 = (((Float)_hx_tmp4 / (Float)_hx_tmp5) * currentFormat->size);
HXDLIN( 757)				descent = ::Math_obj::abs(_hx_tmp6);
HXDLIN( 757)				leading = currentFormat->leading;
HXDLIN( 757)				heightValue = ((ascent + descent) + leading);
            			}
            			else {
HXLINE( 757)				ascent = currentFormat->size;
HXDLIN( 757)				descent = (currentFormat->size * ((Float)0.185));
HXDLIN( 757)				leading = currentFormat->leading;
HXDLIN( 757)				heightValue = ((ascent + descent) + leading);
            			}
HXDLIN( 757)			if ((spaceIndex > (int)-1)) {
HXLINE( 757)				Bool _hx_tmp7 = hx::IsNull( _gthis->_hx___textLayout );
HXDLIN( 757)				if (_hx_tmp7) {
HXLINE( 757)					_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__new(null(),null(),null(),null(),null(),null());
            				}
HXDLIN( 757)				HX_VARI( Float,width) = ((Float)0.0);
HXDLIN( 757)				_gthis->_hx___textLayout->set_text(null());
HXDLIN( 757)				_gthis->_hx___textLayout->set_font(font);
HXDLIN( 757)				Bool _hx_tmp8 = hx::IsNotNull( formatRange->format->size );
HXDLIN( 757)				if (_hx_tmp8) {
HXLINE( 757)					_gthis->_hx___textLayout->set_size(formatRange->format->size);
            				}
HXDLIN( 757)				_gthis->_hx___textLayout->set_text(HX_(" ",20,00,00,00));
HXDLIN( 757)				{
HXLINE( 757)					HX_VARI( Int,_g) = (int)0;
HXDLIN( 757)					HX_VARI( ::Array< ::Dynamic>,_g1) = _gthis->_hx___textLayout->get_positions();
HXDLIN( 757)					while((_g < _g1->length)){
HXLINE( 757)						HX_VARI(  ::lime::text::GlyphPosition,position) = _g1->__get(_g).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 757)						++_g;
HXDLIN( 757)						hx::AddEq(width,position->advance->x);
            					}
            				}
HXDLIN( 757)				spaceWidth = width;
            			}
            		}
HXLINE( 759)		lineFormat = formatRange->format;
HXLINE( 760)		HX_VAR( Bool,wrap);
HXLINE( 762)		while((textIndex < this->text.length)){
HXLINE( 764)			Bool _hx_tmp9;
HXDLIN( 764)			Bool _hx_tmp10;
HXDLIN( 764)			if ((breakIndex > (int)-1)) {
HXLINE( 764)				if ((spaceIndex != (int)-1)) {
HXLINE( 764)					_hx_tmp10 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE( 764)					_hx_tmp10 = true;
            				}
            			}
            			else {
HXLINE( 764)				_hx_tmp10 = false;
            			}
HXDLIN( 764)			if (_hx_tmp10) {
HXLINE( 764)				_hx_tmp9 = (formatRange->end >= breakIndex);
            			}
            			else {
HXLINE( 764)				_hx_tmp9 = false;
            			}
HXDLIN( 764)			if (_hx_tmp9) {
HXLINE( 766)				layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__new(formatRange->format,textIndex,breakIndex);
HXLINE( 767)				HX_VARI( ::Array< Float >,advances) = ::Array_obj< Float >::__new(0);
HXDLIN( 767)				Bool _hx_tmp11 = hx::IsNull( _gthis->_hx___textLayout );
HXDLIN( 767)				if (_hx_tmp11) {
HXLINE( 767)					_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__new(null(),null(),null(),null(),null(),null());
            				}
HXDLIN( 767)				_gthis->_hx___textLayout->set_text(null());
HXDLIN( 767)				_gthis->_hx___textLayout->set_font(font);
HXDLIN( 767)				Bool _hx_tmp12 = hx::IsNotNull( formatRange->format->size );
HXDLIN( 767)				if (_hx_tmp12) {
HXLINE( 767)					_gthis->_hx___textLayout->set_size(formatRange->format->size);
            				}
HXDLIN( 767)				::String _hx_tmp13 = this->text.substring(textIndex,breakIndex);
HXDLIN( 767)				_gthis->_hx___textLayout->set_text(_hx_tmp13);
HXDLIN( 767)				{
HXLINE( 767)					HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 767)					HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN( 767)					while((_g2 < _g11->length)){
HXLINE( 767)						HX_VARI_NAME(  ::lime::text::GlyphPosition,position1,"position") = _g11->__get(_g2).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 767)						++_g2;
HXDLIN( 767)						advances->push(position1->advance->x);
            					}
            				}
HXDLIN( 767)				layoutGroup->advances = advances;
HXLINE( 768)				layoutGroup->offsetX = offsetX;
HXLINE( 769)				layoutGroup->ascent = ascent;
HXLINE( 770)				layoutGroup->descent = descent;
HXLINE( 771)				layoutGroup->leading = leading;
HXLINE( 772)				layoutGroup->lineIndex = lineIndex;
HXLINE( 773)				layoutGroup->offsetY = offsetY;
HXLINE( 774)				HX_VARI_NAME( ::Array< Float >,advances1,"advances") = layoutGroup->advances;
HXDLIN( 774)				HX_VARI_NAME( Float,width1,"width") = ((Float)0.0);
HXDLIN( 774)				{
HXLINE( 774)					HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 774)					while((_g3 < advances1->length)){
HXLINE( 774)						HX_VARI( Float,advance) = advances1->__get(_g3);
HXDLIN( 774)						++_g3;
HXDLIN( 774)						hx::AddEq(width1,advance);
            					}
            				}
HXDLIN( 774)				layoutGroup->width = width1;
HXLINE( 775)				layoutGroup->height = heightValue;
HXLINE( 776)				this->layoutGroups->push(layoutGroup);
HXLINE( 778)				hx::AddEq(offsetY,heightValue);
HXLINE( 779)				offsetX = (int)2;
HXLINE( 781)				Bool _hx_tmp14;
HXDLIN( 781)				if (this->wordWrap) {
HXLINE( 781)					_hx_tmp14 = ((layoutGroup->offsetX + layoutGroup->width) > (this->width - (int)2));
            				}
            				else {
HXLINE( 781)					_hx_tmp14 = false;
            				}
HXDLIN( 781)				if (_hx_tmp14) {
HXLINE( 783)					layoutGroup->offsetY = offsetY;
HXLINE( 784)					layoutGroup->offsetX = offsetX;
HXLINE( 785)					layoutGroup->lineIndex++;
HXLINE( 787)					hx::AddEq(offsetY,heightValue);
HXLINE( 788)					++lineIndex;
            				}
HXLINE( 792)				Bool _hx_tmp15 = (formatRange->end == breakIndex);
HXDLIN( 792)				if (_hx_tmp15) {
HXLINE( 794)					Bool _hx_tmp16 = (rangeIndex < (_gthis->textFormatRanges->length - (int)1));
HXDLIN( 794)					if (_hx_tmp16) {
HXLINE( 794)						++rangeIndex;
HXDLIN( 794)						formatRange = _gthis->textFormatRanges->__get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 794)						currentFormat->_hx___merge(formatRange->format);
HXDLIN( 794)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN( 794)						Bool _hx_tmp17 = hx::IsNotNull( font );
HXDLIN( 794)						if (_hx_tmp17) {
HXLINE( 794)							Int _hx_tmp18 = font->get_ascender();
HXDLIN( 794)							Int _hx_tmp19 = font->get_unitsPerEM();
HXDLIN( 794)							ascent = (((Float)_hx_tmp18 / (Float)_hx_tmp19) * currentFormat->size);
HXDLIN( 794)							Int _hx_tmp20 = font->get_descender();
HXDLIN( 794)							Int _hx_tmp21 = font->get_unitsPerEM();
HXDLIN( 794)							Float _hx_tmp22 = (((Float)_hx_tmp20 / (Float)_hx_tmp21) * currentFormat->size);
HXDLIN( 794)							descent = ::Math_obj::abs(_hx_tmp22);
HXDLIN( 794)							leading = currentFormat->leading;
HXDLIN( 794)							heightValue = ((ascent + descent) + leading);
            						}
            						else {
HXLINE( 794)							ascent = currentFormat->size;
HXDLIN( 794)							descent = (currentFormat->size * ((Float)0.185));
HXDLIN( 794)							leading = currentFormat->leading;
HXDLIN( 794)							heightValue = ((ascent + descent) + leading);
            						}
HXDLIN( 794)						if ((spaceIndex > (int)-1)) {
HXLINE( 794)							Bool _hx_tmp23 = hx::IsNull( _gthis->_hx___textLayout );
HXDLIN( 794)							if (_hx_tmp23) {
HXLINE( 794)								_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__new(null(),null(),null(),null(),null(),null());
            							}
HXDLIN( 794)							HX_VARI_NAME( Float,width2,"width") = ((Float)0.0);
HXDLIN( 794)							_gthis->_hx___textLayout->set_text(null());
HXDLIN( 794)							_gthis->_hx___textLayout->set_font(font);
HXDLIN( 794)							Bool _hx_tmp24 = hx::IsNotNull( formatRange->format->size );
HXDLIN( 794)							if (_hx_tmp24) {
HXLINE( 794)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN( 794)							_gthis->_hx___textLayout->set_text(HX_(" ",20,00,00,00));
HXDLIN( 794)							{
HXLINE( 794)								HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 794)								HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN( 794)								while((_g4 < _g12->length)){
HXLINE( 794)									HX_VARI_NAME(  ::lime::text::GlyphPosition,position2,"position") = _g12->__get(_g4).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 794)									++_g4;
HXDLIN( 794)									hx::AddEq(width2,position2->advance->x);
            								}
            							}
HXDLIN( 794)							spaceWidth = width2;
            						}
            					}
HXLINE( 795)					lineFormat = formatRange->format;
            				}
HXLINE( 799)				textIndex = (breakIndex + (int)1);
HXLINE( 800)				breakIndex = this->getLineBreakIndex(textIndex);
HXLINE( 801)				++lineIndex;
            			}
            			else {
HXLINE( 803)				Bool _hx_tmp25;
HXDLIN( 803)				if ((formatRange->end >= spaceIndex)) {
HXLINE( 803)					_hx_tmp25 = (spaceIndex > (int)-1);
            				}
            				else {
HXLINE( 803)					_hx_tmp25 = false;
            				}
HXDLIN( 803)				if (_hx_tmp25) {
HXLINE( 805)					layoutGroup = null();
HXLINE( 806)					wrap = false;
HXLINE( 808)					while(true){
HXLINE( 810)						Bool _hx_tmp26 = (spaceIndex == (int)-1);
HXDLIN( 810)						if (_hx_tmp26) {
HXLINE( 810)							spaceIndex = formatRange->end;
            						}
HXLINE( 812)						HX_VARI_NAME( ::Array< Float >,advances2,"advances") = ::Array_obj< Float >::__new(0);
HXDLIN( 812)						Bool _hx_tmp27 = hx::IsNull( _gthis->_hx___textLayout );
HXDLIN( 812)						if (_hx_tmp27) {
HXLINE( 812)							_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__new(null(),null(),null(),null(),null(),null());
            						}
HXDLIN( 812)						_gthis->_hx___textLayout->set_text(null());
HXDLIN( 812)						_gthis->_hx___textLayout->set_font(font);
HXDLIN( 812)						Bool _hx_tmp28 = hx::IsNotNull( formatRange->format->size );
HXDLIN( 812)						if (_hx_tmp28) {
HXLINE( 812)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN( 812)						::String _hx_tmp29 = this->text.substring(textIndex,spaceIndex);
HXDLIN( 812)						_gthis->_hx___textLayout->set_text(_hx_tmp29);
HXDLIN( 812)						{
HXLINE( 812)							HX_VARI_NAME( Int,_g5,"_g") = (int)0;
HXDLIN( 812)							HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN( 812)							while((_g5 < _g13->length)){
HXLINE( 812)								HX_VARI_NAME(  ::lime::text::GlyphPosition,position3,"position") = _g13->__get(_g5).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 812)								++_g5;
HXDLIN( 812)								advances2->push(position3->advance->x);
            							}
            						}
HXLINE( 813)						HX_VARI_NAME( Float,width3,"width") = ((Float)0.0);
HXDLIN( 813)						{
HXLINE( 813)							HX_VARI_NAME( Int,_g6,"_g") = (int)0;
HXDLIN( 813)							while((_g6 < advances2->length)){
HXLINE( 813)								HX_VARI_NAME( Float,advance1,"advance") = advances2->__get(_g6);
HXDLIN( 813)								++_g6;
HXDLIN( 813)								hx::AddEq(width3,advance1);
            							}
            						}
HXDLIN( 813)						widthValue = width3;
HXLINE( 815)						if (this->wordWrap) {
HXLINE( 817)							if (((offsetX + widthValue) > (this->width - (int)2))) {
HXLINE( 819)								wrap = true;
            							}
            						}
HXLINE( 825)						if (wrap) {
HXLINE( 827)							hx::AddEq(offsetY,heightValue);
HXLINE( 829)							HX_VARI( Int,i) = (this->layoutGroups->length - (int)1);
HXLINE( 830)							HX_VARI( Int,offsetCount) = (int)0;
HXLINE( 832)							while(true){
HXLINE( 834)								layoutGroup = this->layoutGroups->__get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE( 836)								Bool _hx_tmp30;
HXDLIN( 836)								if ((i > (int)0)) {
HXLINE( 836)									_hx_tmp30 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE( 836)									_hx_tmp30 = false;
            								}
HXDLIN( 836)								if (_hx_tmp30) {
HXLINE( 838)									++offsetCount;
            								}
            								else {
HXLINE( 842)									goto _hx_goto_10;
            								}
HXLINE( 846)								--i;
            							}
            							_hx_goto_10:;
HXLINE( 850)							++lineIndex;
HXLINE( 852)							offsetX = (int)2;
HXLINE( 854)							if ((offsetCount > (int)0)) {
HXLINE( 856)								HX_VARI( Float,bumpX) = this->layoutGroups->__get((this->layoutGroups->length - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE( 858)								{
HXLINE( 858)									HX_VARI_NAME( Int,_g14,"_g1") = (this->layoutGroups->length - offsetCount);
HXDLIN( 858)									HX_VARI_NAME( Int,_g7,"_g") = this->layoutGroups->length;
HXDLIN( 858)									while((_g14 < _g7)){
HXLINE( 858)										HX_VARI_NAME( Int,i1,"i") = _g14++;
HXLINE( 860)										layoutGroup = this->layoutGroups->__get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE( 861)										hx::SubEq(layoutGroup->offsetX,bumpX);
HXLINE( 862)										layoutGroup->offsetY = offsetY;
HXLINE( 863)										layoutGroup->lineIndex = lineIndex;
HXLINE( 864)										hx::AddEq(offsetX,layoutGroup->width);
            									}
            								}
            							}
HXLINE( 870)							layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__new(formatRange->format,textIndex,spaceIndex);
HXLINE( 871)							layoutGroup->advances = advances2;
HXLINE( 872)							layoutGroup->offsetX = offsetX;
HXLINE( 873)							layoutGroup->ascent = ascent;
HXLINE( 874)							layoutGroup->descent = descent;
HXLINE( 875)							layoutGroup->leading = leading;
HXLINE( 876)							layoutGroup->lineIndex = lineIndex;
HXLINE( 877)							layoutGroup->offsetY = offsetY;
HXLINE( 878)							layoutGroup->width = widthValue;
HXLINE( 879)							layoutGroup->height = heightValue;
HXLINE( 880)							this->layoutGroups->push(layoutGroup);
HXLINE( 882)							offsetX = (widthValue + spaceWidth);
HXLINE( 883)							marginRight = spaceWidth;
HXLINE( 885)							wrap = false;
            						}
            						else {
HXLINE( 889)							Bool _hx_tmp31;
HXDLIN( 889)							Bool _hx_tmp32 = hx::IsNotNull( layoutGroup );
HXDLIN( 889)							if (_hx_tmp32) {
HXLINE( 889)								_hx_tmp31 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE( 889)								_hx_tmp31 = false;
            							}
HXDLIN( 889)							if (_hx_tmp31) {
HXLINE( 891)								Bool _hx_tmp33 = hx::IsNotEq( formatRange->format->align,(int)2 );
HXDLIN( 891)								if (_hx_tmp33) {
HXLINE( 893)									layoutGroup->endIndex = spaceIndex;
            								}
HXLINE( 897)								layoutGroup->advances->push(spaceWidth);
HXLINE( 898)								hx::AddEq(marginRight,spaceWidth);
            							}
            							else {
HXLINE( 900)								Bool _hx_tmp34;
HXDLIN( 900)								Bool _hx_tmp35 = hx::IsNotNull( layoutGroup );
HXDLIN( 900)								if (_hx_tmp35) {
HXLINE( 900)									_hx_tmp34 = hx::IsEq( lineFormat->align,(int)2 );
            								}
            								else {
HXLINE( 900)									_hx_tmp34 = true;
            								}
HXDLIN( 900)								if (_hx_tmp34) {
HXLINE( 902)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__new(formatRange->format,textIndex,spaceIndex);
HXLINE( 903)									layoutGroup->advances = advances2;
HXLINE( 904)									layoutGroup->offsetX = offsetX;
HXLINE( 905)									layoutGroup->ascent = ascent;
HXLINE( 906)									layoutGroup->descent = descent;
HXLINE( 907)									layoutGroup->leading = leading;
HXLINE( 908)									layoutGroup->lineIndex = lineIndex;
HXLINE( 909)									layoutGroup->offsetY = offsetY;
HXLINE( 910)									layoutGroup->width = widthValue;
HXLINE( 911)									layoutGroup->height = heightValue;
HXLINE( 912)									this->layoutGroups->push(layoutGroup);
HXLINE( 914)									layoutGroup->advances->push(spaceWidth);
HXLINE( 915)									marginRight = spaceWidth;
            								}
            								else {
HXLINE( 919)									layoutGroup->endIndex = spaceIndex;
HXLINE( 920)									layoutGroup->advances = layoutGroup->advances->concat(advances2);
HXLINE( 921)									hx::AddEq(layoutGroup->width,(marginRight + widthValue));
HXLINE( 923)									layoutGroup->advances->push(spaceWidth);
HXLINE( 924)									marginRight = spaceWidth;
            								}
            							}
HXLINE( 928)							hx::AddEq(offsetX,(widthValue + spaceWidth));
            						}
HXLINE( 932)						textIndex = (spaceIndex + (int)1);
HXLINE( 934)						previousSpaceIndex = spaceIndex;
HXLINE( 935)						spaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),(previousSpaceIndex + (int)1));
HXLINE( 937)						Bool _hx_tmp36 = (formatRange->end <= previousSpaceIndex);
HXDLIN( 937)						if (_hx_tmp36) {
HXLINE( 939)							layoutGroup = null();
HXLINE( 940)							Bool _hx_tmp37 = (rangeIndex < (_gthis->textFormatRanges->length - (int)1));
HXDLIN( 940)							if (_hx_tmp37) {
HXLINE( 940)								++rangeIndex;
HXDLIN( 940)								formatRange = _gthis->textFormatRanges->__get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 940)								currentFormat->_hx___merge(formatRange->format);
HXDLIN( 940)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN( 940)								Bool _hx_tmp38 = hx::IsNotNull( font );
HXDLIN( 940)								if (_hx_tmp38) {
HXLINE( 940)									Int _hx_tmp39 = font->get_ascender();
HXDLIN( 940)									Int _hx_tmp40 = font->get_unitsPerEM();
HXDLIN( 940)									ascent = (((Float)_hx_tmp39 / (Float)_hx_tmp40) * currentFormat->size);
HXDLIN( 940)									Int _hx_tmp41 = font->get_descender();
HXDLIN( 940)									Int _hx_tmp42 = font->get_unitsPerEM();
HXDLIN( 940)									Float _hx_tmp43 = (((Float)_hx_tmp41 / (Float)_hx_tmp42) * currentFormat->size);
HXDLIN( 940)									descent = ::Math_obj::abs(_hx_tmp43);
HXDLIN( 940)									leading = currentFormat->leading;
HXDLIN( 940)									heightValue = ((ascent + descent) + leading);
            								}
            								else {
HXLINE( 940)									ascent = currentFormat->size;
HXDLIN( 940)									descent = (currentFormat->size * ((Float)0.185));
HXDLIN( 940)									leading = currentFormat->leading;
HXDLIN( 940)									heightValue = ((ascent + descent) + leading);
            								}
HXDLIN( 940)								if ((spaceIndex > (int)-1)) {
HXLINE( 940)									Bool _hx_tmp44 = hx::IsNull( _gthis->_hx___textLayout );
HXDLIN( 940)									if (_hx_tmp44) {
HXLINE( 940)										_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__new(null(),null(),null(),null(),null(),null());
            									}
HXDLIN( 940)									HX_VARI_NAME( Float,width4,"width") = ((Float)0.0);
HXDLIN( 940)									_gthis->_hx___textLayout->set_text(null());
HXDLIN( 940)									_gthis->_hx___textLayout->set_font(font);
HXDLIN( 940)									Bool _hx_tmp45 = hx::IsNotNull( formatRange->format->size );
HXDLIN( 940)									if (_hx_tmp45) {
HXLINE( 940)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN( 940)									_gthis->_hx___textLayout->set_text(HX_(" ",20,00,00,00));
HXDLIN( 940)									{
HXLINE( 940)										HX_VARI_NAME( Int,_g8,"_g") = (int)0;
HXDLIN( 940)										HX_VARI_NAME( ::Array< ::Dynamic>,_g15,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN( 940)										while((_g8 < _g15->length)){
HXLINE( 940)											HX_VARI_NAME(  ::lime::text::GlyphPosition,position4,"position") = _g15->__get(_g8).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 940)											++_g8;
HXDLIN( 940)											hx::AddEq(width4,position4->advance->x);
            										}
            									}
HXDLIN( 940)									spaceWidth = width4;
            								}
            							}
            						}
HXLINE( 944)						Bool _hx_tmp46;
HXDLIN( 944)						Bool _hx_tmp47;
HXDLIN( 944)						Bool _hx_tmp48;
HXDLIN( 944)						Bool _hx_tmp49;
HXDLIN( 944)						if ((spaceIndex > breakIndex)) {
HXLINE( 944)							_hx_tmp49 = (breakIndex > (int)-1);
            						}
            						else {
HXLINE( 944)							_hx_tmp49 = false;
            						}
HXDLIN( 944)						if (!(_hx_tmp49)) {
HXLINE( 944)							_hx_tmp48 = (textIndex > this->text.length);
            						}
            						else {
HXLINE( 944)							_hx_tmp48 = true;
            						}
HXDLIN( 944)						if (!(_hx_tmp48)) {
HXLINE( 944)							_hx_tmp47 = (spaceIndex > formatRange->end);
            						}
            						else {
HXLINE( 944)							_hx_tmp47 = true;
            						}
HXDLIN( 944)						if (!(_hx_tmp47)) {
HXLINE( 944)							if ((spaceIndex == (int)-1)) {
HXLINE( 944)								_hx_tmp46 = (breakIndex > (int)-1);
            							}
            							else {
HXLINE( 944)								_hx_tmp46 = false;
            							}
            						}
            						else {
HXLINE( 944)							_hx_tmp46 = true;
            						}
HXDLIN( 944)						if (_hx_tmp46) {
HXLINE( 946)							if ((spaceIndex > formatRange->end)) {
HXLINE( 948)								--textIndex;
            							}
HXLINE( 952)							goto _hx_goto_7;
            						}
            					}
            					_hx_goto_7:;
            				}
            				else {
HXLINE( 960)					if ((textIndex > formatRange->end)) {
HXLINE( 962)						goto _hx_goto_3;
            					}
HXLINE( 966)					Bool _hx_tmp50 = (textIndex < formatRange->end);
HXDLIN( 966)					if (_hx_tmp50) {
HXLINE( 968)						layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__new(formatRange->format,textIndex,formatRange->end);
HXLINE( 969)						Int endIndex = formatRange->end;
HXDLIN( 969)						HX_VARI_NAME( ::Array< Float >,advances3,"advances") = ::Array_obj< Float >::__new(0);
HXDLIN( 969)						Bool _hx_tmp51 = hx::IsNull( _gthis->_hx___textLayout );
HXDLIN( 969)						if (_hx_tmp51) {
HXLINE( 969)							_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__new(null(),null(),null(),null(),null(),null());
            						}
HXDLIN( 969)						_gthis->_hx___textLayout->set_text(null());
HXDLIN( 969)						_gthis->_hx___textLayout->set_font(font);
HXDLIN( 969)						Bool _hx_tmp52 = hx::IsNotNull( formatRange->format->size );
HXDLIN( 969)						if (_hx_tmp52) {
HXLINE( 969)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN( 969)						::String _hx_tmp53 = this->text.substring(textIndex,endIndex);
HXDLIN( 969)						_gthis->_hx___textLayout->set_text(_hx_tmp53);
HXDLIN( 969)						{
HXLINE( 969)							HX_VARI_NAME( Int,_g9,"_g") = (int)0;
HXDLIN( 969)							HX_VARI_NAME( ::Array< ::Dynamic>,_g16,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN( 969)							while((_g9 < _g16->length)){
HXLINE( 969)								HX_VARI_NAME(  ::lime::text::GlyphPosition,position5,"position") = _g16->__get(_g9).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 969)								++_g9;
HXDLIN( 969)								advances3->push(position5->advance->x);
            							}
            						}
HXDLIN( 969)						layoutGroup->advances = advances3;
HXLINE( 970)						layoutGroup->offsetX = offsetX;
HXLINE( 971)						layoutGroup->ascent = ascent;
HXLINE( 972)						layoutGroup->descent = descent;
HXLINE( 973)						layoutGroup->leading = leading;
HXLINE( 974)						layoutGroup->lineIndex = lineIndex;
HXLINE( 975)						layoutGroup->offsetY = offsetY;
HXLINE( 976)						HX_VARI_NAME( ::Array< Float >,advances4,"advances") = layoutGroup->advances;
HXDLIN( 976)						HX_VARI_NAME( Float,width5,"width") = ((Float)0.0);
HXDLIN( 976)						{
HXLINE( 976)							HX_VARI_NAME( Int,_g10,"_g") = (int)0;
HXDLIN( 976)							while((_g10 < advances4->length)){
HXLINE( 976)								HX_VARI_NAME( Float,advance2,"advance") = advances4->__get(_g10);
HXDLIN( 976)								++_g10;
HXDLIN( 976)								hx::AddEq(width5,advance2);
            							}
            						}
HXDLIN( 976)						layoutGroup->width = width5;
HXLINE( 977)						layoutGroup->height = heightValue;
HXLINE( 978)						this->layoutGroups->push(layoutGroup);
HXLINE( 980)						hx::AddEq(offsetX,layoutGroup->width);
HXLINE( 982)						textIndex = formatRange->end;
            					}
HXLINE( 986)					Bool _hx_tmp54 = (rangeIndex < (_gthis->textFormatRanges->length - (int)1));
HXDLIN( 986)					if (_hx_tmp54) {
HXLINE( 986)						++rangeIndex;
HXDLIN( 986)						formatRange = _gthis->textFormatRanges->__get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 986)						currentFormat->_hx___merge(formatRange->format);
HXDLIN( 986)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN( 986)						Bool _hx_tmp55 = hx::IsNotNull( font );
HXDLIN( 986)						if (_hx_tmp55) {
HXLINE( 986)							Int _hx_tmp56 = font->get_ascender();
HXDLIN( 986)							Int _hx_tmp57 = font->get_unitsPerEM();
HXDLIN( 986)							ascent = (((Float)_hx_tmp56 / (Float)_hx_tmp57) * currentFormat->size);
HXDLIN( 986)							Int _hx_tmp58 = font->get_descender();
HXDLIN( 986)							Int _hx_tmp59 = font->get_unitsPerEM();
HXDLIN( 986)							Float _hx_tmp60 = (((Float)_hx_tmp58 / (Float)_hx_tmp59) * currentFormat->size);
HXDLIN( 986)							descent = ::Math_obj::abs(_hx_tmp60);
HXDLIN( 986)							leading = currentFormat->leading;
HXDLIN( 986)							heightValue = ((ascent + descent) + leading);
            						}
            						else {
HXLINE( 986)							ascent = currentFormat->size;
HXDLIN( 986)							descent = (currentFormat->size * ((Float)0.185));
HXDLIN( 986)							leading = currentFormat->leading;
HXDLIN( 986)							heightValue = ((ascent + descent) + leading);
            						}
HXDLIN( 986)						if ((spaceIndex > (int)-1)) {
HXLINE( 986)							Bool _hx_tmp61 = hx::IsNull( _gthis->_hx___textLayout );
HXDLIN( 986)							if (_hx_tmp61) {
HXLINE( 986)								_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__new(null(),null(),null(),null(),null(),null());
            							}
HXDLIN( 986)							HX_VARI_NAME( Float,width6,"width") = ((Float)0.0);
HXDLIN( 986)							_gthis->_hx___textLayout->set_text(null());
HXDLIN( 986)							_gthis->_hx___textLayout->set_font(font);
HXDLIN( 986)							Bool _hx_tmp62 = hx::IsNotNull( formatRange->format->size );
HXDLIN( 986)							if (_hx_tmp62) {
HXLINE( 986)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN( 986)							_gthis->_hx___textLayout->set_text(HX_(" ",20,00,00,00));
HXDLIN( 986)							{
HXLINE( 986)								HX_VARI_NAME( Int,_g17,"_g") = (int)0;
HXDLIN( 986)								HX_VARI_NAME( ::Array< ::Dynamic>,_g18,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN( 986)								while((_g17 < _g18->length)){
HXLINE( 986)									HX_VARI_NAME(  ::lime::text::GlyphPosition,position6,"position") = _g18->__get(_g17).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 986)									++_g17;
HXDLIN( 986)									hx::AddEq(width6,position6->advance->x);
            								}
            							}
HXDLIN( 986)							spaceWidth = width6;
            						}
            					}
            				}
            			}
            		}
            		_hx_goto_3:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

void TextEngine_obj::setTextAlignment(){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",995,0xdff93b7f)
            	HX_STACK_THIS(this)
HXLINE( 997)		HX_VARI( Int,lineIndex) = (int)-1;
HXLINE( 998)		HX_VARI( Float,offsetX) = ((Float)0.0);
HXLINE( 999)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,group);
HXDLIN( 999)		HX_VAR( Int,lineLength);
HXLINE(1001)		{
HXLINE(1001)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1001)			HX_VARI( Int,_g) = this->layoutGroups->length;
HXDLIN(1001)			while((_g1 < _g)){
HXLINE(1001)				HX_VARI( Int,i) = _g1++;
HXLINE(1003)				group = this->layoutGroups->__get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1005)				Bool _hx_tmp = (group->lineIndex != lineIndex);
HXDLIN(1005)				if (_hx_tmp) {
HXLINE(1007)					lineIndex = group->lineIndex;
HXLINE(1009)					{
HXLINE(1009)						HX_VARI(  ::Dynamic,_g2) = group->format->align;
HXDLIN(1009)						 ::Dynamic _hx_switch_0 = _g2;
            						if (  (_hx_switch_0==(int)0) ){
HXLINE(1013)							Bool _hx_tmp1 = (this->lineWidths->__get(lineIndex) < (this->width - (int)4));
HXDLIN(1013)							if (_hx_tmp1) {
HXLINE(1015)								Float _hx_tmp2 = ((this->width - (int)4) - this->lineWidths->__get(lineIndex));
HXDLIN(1015)								offsetX = ::Math_obj::round(((Float)_hx_tmp2 / (Float)(int)2));
            							}
            							else {
HXLINE(1019)								offsetX = (int)0;
            							}
HXLINE(1013)							goto _hx_goto_17;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1037)							Bool _hx_tmp3 = (this->lineWidths->__get(lineIndex) < (this->width - (int)4));
HXDLIN(1037)							if (_hx_tmp3) {
HXLINE(1039)								lineLength = (int)1;
HXLINE(1041)								{
HXLINE(1041)									HX_VARI( Int,_g3) = (i + (int)1);
HXDLIN(1041)									HX_VARI_NAME( Int,_g21,"_g2") = this->layoutGroups->length;
HXDLIN(1041)									while((_g3 < _g21)){
HXLINE(1041)										HX_VARI( Int,j) = _g3++;
HXLINE(1043)										if ((this->layoutGroups->__get(j).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->lineIndex == lineIndex)) {
HXLINE(1045)											++lineLength;
            										}
            										else {
HXLINE(1049)											goto _hx_goto_18;
            										}
            									}
            									_hx_goto_18:;
            								}
HXLINE(1055)								if ((lineLength > (int)1)) {
HXLINE(1057)									group = this->layoutGroups->__get(((i + lineLength) - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1059)									HX_VARI( ::String,endChar) = this->text.charAt(group->endIndex);
HXLINE(1060)									Bool _hx_tmp4;
HXDLIN(1060)									Bool _hx_tmp5;
HXDLIN(1060)									if ((group->endIndex < this->text.length)) {
HXLINE(1060)										_hx_tmp5 = (endChar != HX_("\n",0a,00,00,00));
            									}
            									else {
HXLINE(1060)										_hx_tmp5 = false;
            									}
HXDLIN(1060)									if (_hx_tmp5) {
HXLINE(1060)										_hx_tmp4 = (endChar != HX_("\r",0d,00,00,00));
            									}
            									else {
HXLINE(1060)										_hx_tmp4 = false;
            									}
HXDLIN(1060)									if (_hx_tmp4) {
HXLINE(1062)										offsetX = ((Float)((this->width - (int)4) - this->lineWidths->__get(lineIndex)) / (Float)(lineLength - (int)1));
HXLINE(1064)										{
HXLINE(1064)											HX_VARI_NAME( Int,_g31,"_g3") = (int)1;
HXDLIN(1064)											HX_VARI_NAME( Int,_g22,"_g2") = lineLength;
HXDLIN(1064)											while((_g31 < _g22)){
HXLINE(1064)												HX_VARI_NAME( Int,j1,"j") = _g31++;
HXLINE(1066)												hx::AddEq(this->layoutGroups->__get((i + j1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX,(offsetX * j1));
            											}
            										}
            									}
            								}
            							}
HXLINE(1076)							offsetX = (int)0;
HXLINE(1035)							goto _hx_goto_17;
            						}
            						if (  (_hx_switch_0==(int)4) ){
HXLINE(1025)							Bool _hx_tmp6 = (this->lineWidths->__get(lineIndex) < (this->width - (int)4));
HXDLIN(1025)							if (_hx_tmp6) {
HXLINE(1027)								Float _hx_tmp7 = ((this->width - (int)4) - this->lineWidths->__get(lineIndex));
HXDLIN(1027)								offsetX = ::Math_obj::round(_hx_tmp7);
            							}
            							else {
HXLINE(1031)								offsetX = (int)0;
            							}
HXLINE(1025)							goto _hx_goto_17;
            						}
            						/* default */{
HXLINE(1080)							offsetX = (int)0;
            						}
            						_hx_goto_17:;
            					}
            				}
HXLINE(1086)				if ((offsetX > (int)0)) {
HXLINE(1088)					hx::AddEq(group->offsetX,offsetX);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

void TextEngine_obj::update(){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1097,0xdff93b7f)
            	HX_STACK_THIS(this)
HXLINE(1099)		Bool _hx_tmp;
HXDLIN(1099)		Bool _hx_tmp1;
HXDLIN(1099)		Bool _hx_tmp2 = hx::IsNotNull( this->text );
HXDLIN(1099)		if (_hx_tmp2) {
HXLINE(1099)			::String _hx_tmp3 = ::StringTools_obj::trim(this->text);
HXDLIN(1099)			_hx_tmp1 = (_hx_tmp3 == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1099)			_hx_tmp1 = true;
            		}
HXDLIN(1099)		if (!(_hx_tmp1)) {
HXLINE(1099)			_hx_tmp = (this->textFormatRanges->length == (int)0);
            		}
            		else {
HXLINE(1099)			_hx_tmp = true;
            		}
HXDLIN(1099)		if (_hx_tmp) {
HXLINE(1101)			this->lineAscents->removeRange((int)0,this->lineAscents->length);
HXLINE(1102)			this->lineBreaks->removeRange((int)0,this->lineBreaks->length);
HXLINE(1103)			this->lineDescents->removeRange((int)0,this->lineDescents->length);
HXLINE(1104)			this->lineLeadings->removeRange((int)0,this->lineLeadings->length);
HXLINE(1105)			this->lineHeights->removeRange((int)0,this->lineHeights->length);
HXLINE(1106)			this->lineWidths->removeRange((int)0,this->lineWidths->length);
HXLINE(1107)			this->layoutGroups->removeRange((int)0,this->layoutGroups->length);
HXLINE(1109)			this->textWidth = (int)0;
HXLINE(1110)			this->textHeight = (int)0;
HXLINE(1111)			this->numLines = (int)1;
HXLINE(1112)			this->maxScrollH = (int)0;
HXLINE(1113)			this->maxScrollV = (int)1;
HXLINE(1114)			this->bottomScrollV = (int)1;
            		}
            		else {
HXLINE(1118)			this->getLayoutGroups();
HXLINE(1119)			this->getLineMeasurements();
HXLINE(1120)			this->setTextAlignment();
            		}
HXLINE(1124)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

Int TextEngine_obj::UTF8_TAB;

Int TextEngine_obj::UTF8_ENDLINE;

Int TextEngine_obj::UTF8_SPACE;

Int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",164,0xdff93b7f)
            	HX_STACK_ARG(name,"name")
HXLINE( 168)		{
HXLINE( 168)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 168)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 168)			while((_g < _g1->length)){
HXLINE( 168)				HX_VARI(  ::openfl::text::Font,registeredFont) = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 168)				++_g;
HXLINE( 170)				Bool _hx_tmp = hx::IsNull( registeredFont );
HXDLIN( 170)				if (_hx_tmp) {
HXLINE( 170)					continue;
            				}
HXLINE( 172)				Bool _hx_tmp1;
HXDLIN( 172)				if ((registeredFont->name != name)) {
HXLINE( 172)					Bool _hx_tmp2 = hx::IsNotNull( registeredFont->_hx___fontPath );
HXDLIN( 172)					if (_hx_tmp2) {
HXLINE( 172)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 172)							_hx_tmp1 = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 172)							_hx_tmp1 = true;
            						}
            					}
            					else {
HXLINE( 172)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 172)					_hx_tmp1 = true;
            				}
HXDLIN( 172)				if (_hx_tmp1) {
HXLINE( 174)					return registeredFont;
            				}
            			}
            		}
HXLINE( 180)		HX_VARI(  ::openfl::text::Font,font) = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 182)		Bool _hx_tmp3 = hx::IsNotNull( font );
HXDLIN( 182)		if (_hx_tmp3) {
HXLINE( 184)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 185)			return font;
            		}
HXLINE( 191)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",206,0xdff93b7f)
            	HX_STACK_ARG(format,"format")
HXLINE( 208)		HX_VAR( ::String,font);
HXDLIN( 208)		if (format->italic) {
HXLINE( 208)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 208)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 209)		hx::AddEq(font,HX_("normal ",19,70,da,2b));
HXLINE( 210)		::String _hx_tmp;
HXDLIN( 210)		if (format->bold) {
HXLINE( 210)			_hx_tmp = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 210)			_hx_tmp = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 210)		hx::AddEq(font,_hx_tmp);
HXLINE( 211)		hx::AddEq(font,(format->size + HX_("px",08,62,00,00)));
HXLINE( 212)		hx::AddEq(font,((HX_("/",2f,00,00,00) + ((format->size + format->leading) + (int)6)) + HX_("px ",18,65,55,00)));
HXLINE( 214)		HX_VARI( ::String,_g1) = format->font;
HXDLIN( 214)		::String _hx_tmp1;
HXDLIN( 214)		::String _hx_switch_0 = _g1;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 214)			_hx_tmp1 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 214)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 214)			_hx_tmp1 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 214)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 214)			_hx_tmp1 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 214)			goto _hx_goto_21;
            		}
            		/* default */{
HXLINE( 214)			_hx_tmp1 = ((HX_("'",27,00,00,00) + format->font) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_21:;
HXDLIN( 214)		hx::AddEq(font,(HX_("",00,00,00,00) + _hx_tmp1));
HXLINE( 223)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",228,0xdff93b7f)
            	HX_STACK_ARG(format,"format")
HXLINE( 232)		HX_VARI(  ::openfl::text::Font,instance) = null();
HXLINE( 233)		HX_VARI( ::Array< ::String >,fontList) = null();
HXLINE( 235)		Bool _hx_tmp;
HXDLIN( 235)		Bool _hx_tmp1 = hx::IsNotNull( format );
HXDLIN( 235)		if (_hx_tmp1) {
HXLINE( 235)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 235)			_hx_tmp = false;
            		}
HXDLIN( 235)		if (_hx_tmp) {
HXLINE( 237)			Bool _hx_tmp2 = ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font);
HXDLIN( 237)			if (_hx_tmp2) {
HXLINE( 239)				return ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font).StaticCast<  ::openfl::text::Font >();
            			}
HXLINE( 243)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(format->font);
HXLINE( 244)			Bool _hx_tmp3 = hx::IsNotNull( instance );
HXDLIN( 244)			if (_hx_tmp3) {
HXLINE( 244)				return instance;
            			}
HXLINE( 246)			HX_VARI( ::String,systemFontDirectory) = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 248)			::String _hx_switch_0 = format->font;
            			if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 253)				if (format->bold) {
HXLINE( 255)					if (format->italic) {
HXLINE( 257)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbi.ttf",73,0e,91,06)));
            					}
            					else {
HXLINE( 261)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbd.ttf",ee,27,90,25)));
            					}
            				}
            				else {
HXLINE( 267)					if (format->italic) {
HXLINE( 269)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/ariali.ttf",2d,c9,3e,6e)));
            					}
            					else {
HXLINE( 273)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arial.ttf",2c,34,8e,d8)));
            					}
            				}
HXLINE( 253)				goto _hx_goto_22;
            			}
            			if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 288)				goto _hx_goto_22;
            			}
            			if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 295)				if (format->bold) {
HXLINE( 297)					if (format->italic) {
HXLINE( 299)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbi.ttf",77,1e,b8,e7)));
            					}
            					else {
HXLINE( 303)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbd.ttf",f2,37,b7,06)));
            					}
            				}
            				else {
HXLINE( 309)					if (format->italic) {
HXLINE( 311)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/couri.ttf",a9,a5,b8,d7)));
            					}
            					else {
HXLINE( 315)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/cour.ttf",30,7b,d2,6a)));
            					}
            				}
HXLINE( 295)				goto _hx_goto_22;
            			}
            			/* default */{
HXLINE( 332)				fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            			}
            			_hx_goto_22:;
HXLINE( 349)			Bool _hx_tmp4 = hx::IsNotNull( fontList );
HXDLIN( 349)			if (_hx_tmp4) {
HXLINE( 351)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 351)				while((_g1 < fontList->length)){
HXLINE( 351)					HX_VARI( ::String,font) = fontList->__get(_g1);
HXDLIN( 351)					++_g1;
HXLINE( 353)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 355)					Bool _hx_tmp5 = hx::IsNotNull( instance );
HXDLIN( 355)					if (_hx_tmp5) {
HXLINE( 357)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 358)						return instance;
            					}
            				}
            			}
HXLINE( 366)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 367)			Bool _hx_tmp6 = hx::IsNotNull( instance );
HXDLIN( 367)			if (_hx_tmp6) {
HXLINE( 367)				return instance;
            			}
            		}
HXLINE( 371)		HX_VARI_NAME( ::String,systemFontDirectory1,"systemFontDirectory") = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 374)		if (format->bold) {
HXLINE( 376)			if (format->italic) {
HXLINE( 378)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbi.ttf",36,79,1a,28)));
            			}
            			else {
HXLINE( 382)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbd.ttf",b1,92,19,47)));
            			}
            		}
            		else {
HXLINE( 388)			if (format->italic) {
HXLINE( 390)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesi.ttf",ca,27,e8,a0)));
            			}
            			else {
HXLINE( 394)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/times.ttf",2f,58,44,c5)));
            			}
            		}
HXLINE( 411)		{
HXLINE( 411)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 411)			while((_g < fontList->length)){
HXLINE( 411)				HX_VARI_NAME( ::String,font1,"font") = fontList->__get(_g);
HXDLIN( 411)				++_g;
HXLINE( 413)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 415)				Bool _hx_tmp7 = hx::IsNotNull( instance );
HXDLIN( 415)				if (_hx_tmp7) {
HXLINE( 417)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 418)					return instance;
            				}
            			}
            		}
HXLINE( 424)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 428)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(displayAsPassword,"displayAsPassword");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorPosition,"__cursorPosition");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(displayAsPassword,"displayAsPassword");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorPosition,"__cursorPosition");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( scrollV); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( maxScrollV); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( bottomScrollV); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges); }
		if (HX_FIELD_EQ(inName,"__cursorPosition") ) { return hx::Val( _hx___cursorPosition); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { return hx::Val( displayAsPassword); }
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = _hx___defaultFonts; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { scrollV=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast< ::Array< Int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::lime::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< Int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorPosition") ) { _hx___cursorPosition=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { displayAsPassword=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"));
	outFields->push(HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"));
	outFields->push(HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"));
	outFields->push(HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"));
	outFields->push(HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"));
	outFields->push(HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"));
	outFields->push(HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("__cursorPosition","\xbf","\x3c","\xe0","\x7d"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"));
	outFields->push(HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"));
	outFields->push(HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"));
	outFields->push(HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"));
	outFields->push(HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	outFields->push(HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,autoSize),HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,displayAsPassword),HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,gridFitType),HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(TextEngine_obj,lineAscents),HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(TextEngine_obj,lineDescents),HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(TextEngine_obj,lineHeights),HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(TextEngine_obj,lineWidths),HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b")},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(TextEngine_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___cursorPosition),HX_HCSTRING("__cursorPosition","\xbf","\x3c","\xe0","\x7d")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{hx::fsObject /*::lime::text::TextLayout*/ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(TextEngine_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"),
	HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"),
	HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"),
	HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"),
	HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"),
	HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"),
	HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"),
	HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"),
	HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"),
	HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"),
	HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"),
	HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"),
	HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"),
	HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"),
	HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("__cursorPosition","\xbf","\x3c","\xe0","\x7d"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"),
	HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"),
	HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"),
	HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"),
	HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getLine","\xaa","\xc7","\x35","\x1a"),
	HX_HCSTRING("getLineBreakIndex","\x1d","\x16","\x36","\x36"),
	HX_HCSTRING("getLineMeasurements","\xc1","\x9f","\x81","\x56"),
	HX_HCSTRING("getLayoutGroups","\x54","\xf8","\x56","\x5a"),
	HX_HCSTRING("setTextAlignment","\x74","\x0f","\x33","\x62"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d"),
	HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf"),
	HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7"),
	HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf"),
	HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getFontInstance","\x3a","\x76","\x96","\x9e"),
	::String(null())
};

void TextEngine_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextEngine","\x60","\x7a","\x88","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",45,0xdff93b7f)
HXLINE(  45)		UTF8_TAB = (int)9;
            	}
{
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",46,0xdff93b7f)
HXLINE(  46)		UTF8_ENDLINE = (int)10;
            	}
{
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",47,0xdff93b7f)
HXLINE(  47)		UTF8_SPACE = (int)32;
            	}
{
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",48,0xdff93b7f)
HXLINE(  48)		UTF8_HYPHEN = (int)45;
            	}
{
            	HX_STACK_FRAME("openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",50,0xdff93b7f)
HXLINE(  50)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
