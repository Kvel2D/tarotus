// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLShape
#include <openfl/_internal/renderer/opengl/GLShape.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLShape_obj::__construct() { }

Dynamic GLShape_obj::__CreateEmpty() { return new GLShape_obj; }

hx::ObjectPtr< GLShape_obj > GLShape_obj::__new()
{
	hx::ObjectPtr< GLShape_obj > _hx_result = new GLShape_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic GLShape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLShape_obj > _hx_result = new GLShape_obj();
	_hx_result->__construct();
	return _hx_result;
}

void GLShape_obj::render( ::openfl::display::DisplayObject shape, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLShape","render",0x6f8c5eac,"openfl._internal.renderer.opengl.GLShape.render","openfl/_internal/renderer/opengl/GLShape.hx",21,0xf928bb48)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(  23)		Bool _hx_tmp;
HXDLIN(  23)		if (!(!(shape->_hx___renderable))) {
HXLINE(  23)			_hx_tmp = (shape->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(  23)			_hx_tmp = true;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  23)			return;
            		}
HXLINE(  25)		HX_VARI(  ::openfl::display::Graphics,graphics) = shape->_hx___graphics;
HXLINE(  26)		HX_VARI(  ::lime::graphics::GLRenderContext,gl) = renderSession->gl;
HXLINE(  28)		Bool _hx_tmp1 = hx::IsNotNull( graphics );
HXDLIN(  28)		if (_hx_tmp1) {
HXLINE(  33)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,renderSession,shape->_hx___worldTransform);
HXLINE(  38)			Bool _hx_tmp2;
HXDLIN(  38)			Bool _hx_tmp3 = hx::IsNotNull( graphics->_hx___bitmap );
HXDLIN(  38)			if (_hx_tmp3) {
HXLINE(  38)				_hx_tmp2 = graphics->_hx___visible;
            			}
            			else {
HXLINE(  38)				_hx_tmp2 = false;
            			}
HXDLIN(  38)			if (_hx_tmp2) {
HXLINE(  40)				HX_VAR(  ::openfl::display::Shader,shader);
HXLINE(  42)				Bool _hx_tmp4;
HXDLIN(  42)				Bool _hx_tmp5 = hx::IsNotNull( shape->_hx___filters );
HXDLIN(  42)				if (_hx_tmp5) {
HXLINE(  42)					 ::openfl::filters::BitmapFilter _hx_tmp6 = shape->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(  42)					_hx_tmp4 = ::Std_obj::is(_hx_tmp6,hx::ClassOf< ::openfl::filters::ShaderFilter >());
            				}
            				else {
HXLINE(  42)					_hx_tmp4 = false;
            				}
HXDLIN(  42)				if (_hx_tmp4) {
HXLINE(  44)					shader = hx::TCast<  ::openfl::filters::ShaderFilter >::cast(shape->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >())->shader;
            				}
            				else {
HXLINE(  48)					shader = renderSession->shaderManager->defaultShader;
            				}
HXLINE(  52)				 ::Dynamic _hx_tmp7 = shape->get_blendMode();
HXDLIN(  52)				renderSession->blendModeManager->setBlendMode(_hx_tmp7);
HXLINE(  53)				renderSession->shaderManager->setShader(shader);
HXLINE(  54)				renderSession->maskManager->pushObject(shape,null());
HXLINE(  56)				HX_VARI(  ::openfl::_internal::renderer::opengl::GLRenderer,renderer) = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(renderSession->renderer) );
HXLINE(  58)				{
HXLINE(  58)					Int index = ( (Int)( ::Dynamic(shader->data->__Field(HX_("aAlpha",3d,17,62,7d),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  58)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable_vertex_attrib_array(index);
            				}
HXLINE(  59)				{
HXLINE(  59)					Int location = ( (Int)( ::Dynamic(shader->data->__Field(HX_("uMatrix",96,f0,ab,f1),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  59)					 ::lime::utils::ArrayBufferView v = renderer->getMatrix(graphics->_hx___worldTransform);
HXDLIN(  59)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(location,false,hx::DynamicPtr(v->buffer),(int)4);
            				}
HXLINE(  61)				{
HXLINE(  61)					Int target = gl->TEXTURE_2D;
HXDLIN(  61)					HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = graphics->_hx___bitmap->getTexture(gl);
HXDLIN(  61)					{
HXLINE(  61)						 ::Dynamic texture1;
HXDLIN(  61)						Bool _hx_tmp8 = hx::IsNull( texture );
HXDLIN(  61)						if (_hx_tmp8) {
HXLINE(  61)							texture1 = null();
            						}
            						else {
HXLINE(  61)							texture1 = texture->id;
            						}
HXDLIN(  61)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,hx::DynamicPtr(texture1));
            					}
            				}
HXLINE(  63)				{
HXLINE(  63)					Int target1 = gl->TEXTURE_2D;
HXDLIN(  63)					Int pname = gl->TEXTURE_MAG_FILTER;
HXDLIN(  63)					Int param = gl->LINEAR;
HXDLIN(  63)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target1,pname,param);
            				}
HXLINE(  64)				{
HXLINE(  64)					Int target2 = gl->TEXTURE_2D;
HXDLIN(  64)					Int pname1 = gl->TEXTURE_MIN_FILTER;
HXDLIN(  64)					Int param1 = gl->LINEAR;
HXDLIN(  64)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target2,pname1,param1);
            				}
HXLINE(  66)				{
HXLINE(  66)					Int target3 = gl->ARRAY_BUFFER;
HXDLIN(  66)					HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = graphics->_hx___bitmap->getBuffer(gl,shape->_hx___worldAlpha);
HXDLIN(  66)					{
HXLINE(  66)						 ::Dynamic buffer1;
HXDLIN(  66)						Bool _hx_tmp9 = hx::IsNull( buffer );
HXDLIN(  66)						if (_hx_tmp9) {
HXLINE(  66)							buffer1 = null();
            						}
            						else {
HXLINE(  66)							buffer1 = buffer->id;
            						}
HXDLIN(  66)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target3,hx::DynamicPtr(buffer1));
            					}
            				}
HXLINE(  67)				{
HXLINE(  67)					Int indx = ( (Int)( ::Dynamic(shader->data->__Field(HX_("aPosition",2a,26,25,92),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  67)					Int type = gl->FLOAT;
HXDLIN(  67)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx,(int)3,type,false,(int)24,(int)0);
            				}
HXLINE(  68)				{
HXLINE(  68)					Int indx1 = ( (Int)( ::Dynamic(shader->data->__Field(HX_("aTexCoord",cf,8c,5d,f2),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  68)					Int type1 = gl->FLOAT;
HXDLIN(  68)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx1,(int)2,type1,false,(int)24,(int)12);
            				}
HXLINE(  69)				{
HXLINE(  69)					Int indx2 = ( (Int)( ::Dynamic(shader->data->__Field(HX_("aAlpha",3d,17,62,7d),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  69)					Int type2 = gl->FLOAT;
HXDLIN(  69)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx2,(int)1,type2,false,(int)24,(int)20);
            				}
HXLINE(  71)				{
HXLINE(  71)					Int mode = gl->TRIANGLE_STRIP;
HXDLIN(  71)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_draw_arrays(mode,(int)0,(int)4);
            				}
HXLINE(  73)				renderSession->maskManager->popObject(shape,null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLShape_obj,render,(void))


GLShape_obj::GLShape_obj()
{
}

bool GLShape_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLShape_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLShape_obj_sStaticStorageInfo = 0;
#endif

static void GLShape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLShape_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLShape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLShape_obj::__mClass,"__mClass");
};

#endif

hx::Class GLShape_obj::__mClass;

static ::String GLShape_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null())
};

void GLShape_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLShape","\x58","\x5e","\x97","\x4e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLShape_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLShape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLShape_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLShape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLShape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLShape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
