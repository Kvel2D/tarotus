// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLBitmap
#include <openfl/_internal/renderer/opengl/GLBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLBitmap_obj::__construct() { }

Dynamic GLBitmap_obj::__CreateEmpty() { return new GLBitmap_obj; }

hx::ObjectPtr< GLBitmap_obj > GLBitmap_obj::__new()
{
	hx::ObjectPtr< GLBitmap_obj > _hx_result = new GLBitmap_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic GLBitmap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLBitmap_obj > _hx_result = new GLBitmap_obj();
	_hx_result->__construct();
	return _hx_result;
}

void GLBitmap_obj::render( ::openfl::display::Bitmap bitmap, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLBitmap","render",0x8d0c282c,"openfl._internal.renderer.opengl.GLBitmap.render","openfl/_internal/renderer/opengl/GLBitmap.hx",17,0x02850ac4)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(  19)		Bool _hx_tmp;
HXDLIN(  19)		if (!(!(bitmap->_hx___renderable))) {
HXLINE(  19)			_hx_tmp = (bitmap->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(  19)			_hx_tmp = true;
            		}
HXDLIN(  19)		if (_hx_tmp) {
HXLINE(  19)			return;
            		}
HXLINE(  21)		HX_VARI(  ::lime::graphics::GLRenderContext,gl) = renderSession->gl;
HXLINE(  23)		Bool _hx_tmp1;
HXDLIN(  23)		Bool _hx_tmp2 = hx::IsNotNull( bitmap->bitmapData );
HXDLIN(  23)		if (_hx_tmp2) {
HXLINE(  23)			_hx_tmp1 = bitmap->bitmapData->_hx___isValid;
            		}
            		else {
HXLINE(  23)			_hx_tmp1 = false;
            		}
HXDLIN(  23)		if (_hx_tmp1) {
HXLINE(  25)			HX_VAR(  ::openfl::display::Shader,shader);
HXLINE(  27)			Bool _hx_tmp3;
HXDLIN(  27)			Bool _hx_tmp4 = hx::IsNotNull( bitmap->_hx___filters );
HXDLIN(  27)			if (_hx_tmp4) {
HXLINE(  27)				 ::openfl::filters::BitmapFilter _hx_tmp5 = bitmap->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(  27)				_hx_tmp3 = ::Std_obj::is(_hx_tmp5,hx::ClassOf< ::openfl::filters::ShaderFilter >());
            			}
            			else {
HXLINE(  27)				_hx_tmp3 = false;
            			}
HXDLIN(  27)			if (_hx_tmp3) {
HXLINE(  29)				shader = hx::TCast<  ::openfl::filters::ShaderFilter >::cast(bitmap->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >())->shader;
            			}
            			else {
HXLINE(  33)				shader = renderSession->shaderManager->defaultShader;
            			}
HXLINE(  37)			 ::Dynamic _hx_tmp6 = bitmap->get_blendMode();
HXDLIN(  37)			renderSession->blendModeManager->setBlendMode(_hx_tmp6);
HXLINE(  38)			renderSession->shaderManager->setShader(shader);
HXLINE(  39)			renderSession->maskManager->pushObject(bitmap,null());
HXLINE(  41)			HX_VARI(  ::openfl::_internal::renderer::opengl::GLRenderer,renderer) = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(renderSession->renderer) );
HXLINE(  43)			{
HXLINE(  43)				Int index = ( (Int)( ::Dynamic(shader->data->__Field(HX_("aAlpha",3d,17,62,7d),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  43)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable_vertex_attrib_array(index);
            			}
HXLINE(  44)			{
HXLINE(  44)				Int location = ( (Int)( ::Dynamic(shader->data->__Field(HX_("uMatrix",96,f0,ab,f1),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  44)				 ::lime::utils::ArrayBufferView v = renderer->getMatrix(bitmap->_hx___worldTransform);
HXDLIN(  44)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(location,false,hx::DynamicPtr(v->buffer),(int)4);
            			}
HXLINE(  46)			{
HXLINE(  46)				Int target = gl->TEXTURE_2D;
HXDLIN(  46)				HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = bitmap->bitmapData->getTexture(gl);
HXDLIN(  46)				{
HXLINE(  46)					 ::Dynamic texture1;
HXDLIN(  46)					Bool _hx_tmp7 = hx::IsNull( texture );
HXDLIN(  46)					if (_hx_tmp7) {
HXLINE(  46)						texture1 = null();
            					}
            					else {
HXLINE(  46)						texture1 = texture->id;
            					}
HXDLIN(  46)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,hx::DynamicPtr(texture1));
            				}
            			}
HXLINE(  48)			Bool _hx_tmp8;
HXDLIN(  48)			if (!(bitmap->smoothing)) {
HXLINE(  48)				Bool _hx_tmp9 = hx::IsNotNull( bitmap->stage );
HXDLIN(  48)				if (_hx_tmp9) {
HXLINE(  48)					if ((bitmap->stage->_hx___displayMatrix->a == (int)1)) {
HXLINE(  48)						_hx_tmp8 = (bitmap->stage->_hx___displayMatrix->d != (int)1);
            					}
            					else {
HXLINE(  48)						_hx_tmp8 = true;
            					}
            				}
            				else {
HXLINE(  48)					_hx_tmp8 = false;
            				}
            			}
            			else {
HXLINE(  48)				_hx_tmp8 = true;
            			}
HXDLIN(  48)			if (_hx_tmp8) {
HXLINE(  50)				{
HXLINE(  50)					Int target1 = gl->TEXTURE_2D;
HXDLIN(  50)					Int pname = gl->TEXTURE_MAG_FILTER;
HXDLIN(  50)					Int param = gl->LINEAR;
HXDLIN(  50)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target1,pname,param);
            				}
HXLINE(  51)				{
HXLINE(  51)					Int target2 = gl->TEXTURE_2D;
HXDLIN(  51)					Int pname1 = gl->TEXTURE_MIN_FILTER;
HXDLIN(  51)					Int param1 = gl->LINEAR;
HXDLIN(  51)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target2,pname1,param1);
            				}
            			}
            			else {
HXLINE(  55)				{
HXLINE(  55)					Int target3 = gl->TEXTURE_2D;
HXDLIN(  55)					Int pname2 = gl->TEXTURE_MAG_FILTER;
HXDLIN(  55)					Int param2 = gl->NEAREST;
HXDLIN(  55)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target3,pname2,param2);
            				}
HXLINE(  56)				{
HXLINE(  56)					Int target4 = gl->TEXTURE_2D;
HXDLIN(  56)					Int pname3 = gl->TEXTURE_MIN_FILTER;
HXDLIN(  56)					Int param3 = gl->NEAREST;
HXDLIN(  56)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target4,pname3,param3);
            				}
            			}
HXLINE(  60)			{
HXLINE(  60)				Int target5 = gl->ARRAY_BUFFER;
HXDLIN(  60)				HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = bitmap->bitmapData->getBuffer(gl,bitmap->_hx___worldAlpha);
HXDLIN(  60)				{
HXLINE(  60)					 ::Dynamic buffer1;
HXDLIN(  60)					Bool _hx_tmp10 = hx::IsNull( buffer );
HXDLIN(  60)					if (_hx_tmp10) {
HXLINE(  60)						buffer1 = null();
            					}
            					else {
HXLINE(  60)						buffer1 = buffer->id;
            					}
HXDLIN(  60)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target5,hx::DynamicPtr(buffer1));
            				}
            			}
HXLINE(  61)			{
HXLINE(  61)				Int indx = ( (Int)( ::Dynamic(shader->data->__Field(HX_("aPosition",2a,26,25,92),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  61)				Int type = gl->FLOAT;
HXDLIN(  61)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx,(int)3,type,false,(int)24,(int)0);
            			}
HXLINE(  62)			{
HXLINE(  62)				Int indx1 = ( (Int)( ::Dynamic(shader->data->__Field(HX_("aTexCoord",cf,8c,5d,f2),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  62)				Int type1 = gl->FLOAT;
HXDLIN(  62)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx1,(int)2,type1,false,(int)24,(int)12);
            			}
HXLINE(  63)			{
HXLINE(  63)				Int indx2 = ( (Int)( ::Dynamic(shader->data->__Field(HX_("aAlpha",3d,17,62,7d),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN(  63)				Int type2 = gl->FLOAT;
HXDLIN(  63)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx2,(int)1,type2,false,(int)24,(int)20);
            			}
HXLINE(  65)			{
HXLINE(  65)				Int mode = gl->TRIANGLE_STRIP;
HXDLIN(  65)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_draw_arrays(mode,(int)0,(int)4);
            			}
HXLINE(  67)			renderSession->maskManager->popObject(bitmap,null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLBitmap_obj,render,(void))


GLBitmap_obj::GLBitmap_obj()
{
}

bool GLBitmap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLBitmap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLBitmap_obj_sStaticStorageInfo = 0;
#endif

static void GLBitmap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLBitmap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLBitmap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLBitmap_obj::__mClass,"__mClass");
};

#endif

hx::Class GLBitmap_obj::__mClass;

static ::String GLBitmap_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null())
};

void GLBitmap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLBitmap","\xd8","\x64","\xbd","\x49");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLBitmap_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLBitmap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLBitmap_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLBitmap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLBitmap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLBitmap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLBitmap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
