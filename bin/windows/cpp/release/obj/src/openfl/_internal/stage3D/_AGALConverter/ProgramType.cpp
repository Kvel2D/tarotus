// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_ProgramType
#include <openfl/_internal/stage3D/_AGALConverter/ProgramType.h>
#endif
namespace openfl{
namespace _internal{
namespace stage3D{
namespace _AGALConverter{

::openfl::_internal::stage3D::_AGALConverter::ProgramType ProgramType_obj::Fragment;

::openfl::_internal::stage3D::_AGALConverter::ProgramType ProgramType_obj::Vertex;

bool ProgramType_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Fragment",f0,1b,97,87)) { outValue = ProgramType_obj::Fragment; return true; }
	if (inName==HX_("Vertex",84,4f,dc,d5)) { outValue = ProgramType_obj::Vertex; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(ProgramType_obj)

int ProgramType_obj::__FindIndex(::String inName)
{
	if (inName==HX_("Fragment",f0,1b,97,87)) return 1;
	if (inName==HX_("Vertex",84,4f,dc,d5)) return 0;
	return super::__FindIndex(inName);
}

int ProgramType_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("Fragment",f0,1b,97,87)) return 0;
	if (inName==HX_("Vertex",84,4f,dc,d5)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val ProgramType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Fragment",f0,1b,97,87)) return Fragment;
	if (inName==HX_("Vertex",84,4f,dc,d5)) return Vertex;
	return super::__Field(inName,inCallProp);
}

static ::String ProgramType_obj_sStaticFields[] = {
	HX_("Vertex",84,4f,dc,d5),
	HX_("Fragment",f0,1b,97,87),
	::String(null())
};

static void ProgramType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ProgramType_obj::Fragment,"Fragment");
	HX_MARK_MEMBER_NAME(ProgramType_obj::Vertex,"Vertex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ProgramType_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ProgramType_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ProgramType_obj::Fragment,"Fragment");
	HX_VISIT_MEMBER_NAME(ProgramType_obj::Vertex,"Vertex");
};
#endif

hx::Class ProgramType_obj::__mClass;

Dynamic __Create_ProgramType_obj() { return new ProgramType_obj; }

void ProgramType_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("openfl._internal.stage3D._AGALConverter.ProgramType","\xef","\x28","\x77","\x1f"), hx::TCanCast< ProgramType_obj >,ProgramType_obj_sStaticFields,0,
	&__Create_ProgramType_obj, &__Create,
	&super::__SGetClass(), &CreateProgramType_obj, ProgramType_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , ProgramType_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &ProgramType_obj::__GetStatic;
}

void ProgramType_obj::__boot()
{
Fragment = hx::CreateEnum< ProgramType_obj >(HX_HCSTRING("Fragment","\xf0","\x1b","\x97","\x87"),1,0);
Vertex = hx::CreateEnum< ProgramType_obj >(HX_HCSTRING("Vertex","\x84","\x4f","\xdc","\xd5"),0,0);
}


} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace _AGALConverter
