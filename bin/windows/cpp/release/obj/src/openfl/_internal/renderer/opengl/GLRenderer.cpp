// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLBlendModeManager
#include <openfl/_internal/renderer/opengl/GLBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskManager
#include <openfl/_internal/renderer/opengl/GLMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLShaderManager
#include <openfl/_internal/renderer/opengl/GLShaderManager.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLRenderer_obj::__construct(Int width,Int height, ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLRenderer","new",0xb6a82d5e,"openfl._internal.renderer.opengl.GLRenderer.new","openfl/_internal/renderer/opengl/GLRenderer.hx",25,0xb2b97130)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(gl,"gl")
HXLINE(  27)		super::__construct(width,height);
HXLINE(  29)		this->gl = gl;
HXLINE(  30)		this->matrix = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE(  32)		this->renderSession =  ::openfl::_internal::renderer::RenderSession_obj::__new();
HXLINE(  33)		this->renderSession->gl = gl;
HXLINE(  34)		this->renderSession->roundPixels = true;
HXLINE(  35)		this->renderSession->renderer = hx::ObjectPtr<OBJ_>(this);
HXLINE(  36)		this->renderSession->blendModeManager =  ::openfl::_internal::renderer::opengl::GLBlendModeManager_obj::__new(gl);
HXLINE(  37)		this->renderSession->shaderManager =  ::openfl::_internal::renderer::opengl::GLShaderManager_obj::__new(gl);
HXLINE(  38)		this->renderSession->maskManager =  ::openfl::_internal::renderer::opengl::GLMaskManager_obj::__new(this->renderSession);
HXLINE(  40)		this->projection = ::lime::math::_Matrix4::Matrix4_Impl__obj::createOrtho((int)0,width,height,(int)0,(int)-1000,(int)1000);
            	}

Dynamic GLRenderer_obj::__CreateEmpty() { return new GLRenderer_obj; }

hx::ObjectPtr< GLRenderer_obj > GLRenderer_obj::__new(Int width,Int height, ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< GLRenderer_obj > _hx_result = new GLRenderer_obj();
	_hx_result->__construct(width,height,gl);
	return _hx_result;
}

Dynamic GLRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLRenderer_obj > _hx_result = new GLRenderer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

 ::lime::utils::ArrayBufferView GLRenderer_obj::getMatrix( ::openfl::geom::Matrix transform){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLRenderer","getMatrix",0x5e6beef5,"openfl._internal.renderer.opengl.GLRenderer.getMatrix","openfl/_internal/renderer/opengl/GLRenderer.hx",45,0xb2b97130)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transform,"transform")
HXLINE(  47)		::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->matrix);
HXLINE(  48)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->matrix,(int)0,transform->a);
HXLINE(  49)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->matrix,(int)1,transform->b);
HXLINE(  50)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->matrix,(int)4,transform->c);
HXLINE(  51)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->matrix,(int)5,transform->d);
HXLINE(  52)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->matrix,(int)12,transform->tx);
HXLINE(  53)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->matrix,(int)13,transform->ty);
HXLINE(  54)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this->matrix,this->projection);
HXLINE(  56)		return this->matrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLRenderer_obj,getMatrix,return )

void GLRenderer_obj::init( ::openfl::display::Stage stage){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLRenderer","init",0x19383c52,"openfl._internal.renderer.opengl.GLRenderer.init","openfl/_internal/renderer/opengl/GLRenderer.hx",61,0xb2b97130)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stage,"stage")
HXLINE(  63)		Bool _hx_tmp = stage->_hx___transparent;
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  65)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear_color((int)0,(int)0,(int)0,(int)0);
            		}
            		else {
HXLINE(  69)			Float _hx_tmp1 = stage->_hx___colorSplit->__get((int)0);
HXDLIN(  69)			Float _hx_tmp2 = stage->_hx___colorSplit->__get((int)1);
HXDLIN(  69)			Float _hx_tmp3 = stage->_hx___colorSplit->__get((int)2);
HXDLIN(  69)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear_color(_hx_tmp1,_hx_tmp2,_hx_tmp3,(int)1);
            		}
HXLINE(  73)		{
HXLINE(  73)			Int mask = this->gl->COLOR_BUFFER_BIT;
HXDLIN(  73)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear(mask);
            		}
HXLINE(  75)		{
HXLINE(  75)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  75)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = stage->stage3Ds;
HXDLIN(  75)			while(true){
HXLINE(  75)				Int _hx_tmp4 = _g1->get_length();
HXDLIN(  75)				if (!((_g < _hx_tmp4))) {
HXLINE(  75)					goto _hx_goto_0;
            				}
HXDLIN(  75)				HX_VARI(  ::openfl::display::Stage3D,stage3D) = _g1->get(_g).StaticCast<  ::openfl::display::Stage3D >();
HXDLIN(  75)				++_g;
HXLINE(  77)				Bool _hx_tmp5 = hx::IsNotNull( stage3D->context3D );
HXDLIN(  77)				if (_hx_tmp5) {
HXLINE(  79)					this->renderSession->shaderManager->setShader(null());
HXLINE(  80)					this->renderSession->blendModeManager->setBlendMode(null());
HXLINE(  81)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
            	}


void GLRenderer_obj::render( ::openfl::display::Stage stage){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLRenderer","render",0x72dac118,"openfl._internal.renderer.opengl.GLRenderer.render","openfl/_internal/renderer/opengl/GLRenderer.hx",90,0xb2b97130)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stage,"stage")
HXLINE(  92)		HX_VARI(  ::openfl::geom::Matrix,displayMatrix) = stage->_hx___displayMatrix;
HXLINE(  93)		Float _hx_tmp = ((((int)0 * displayMatrix->a) + ((int)0 * displayMatrix->c)) + displayMatrix->tx);
HXDLIN(  93)		HX_VARI( Int,offsetX) = ::Math_obj::round(_hx_tmp);
HXLINE(  94)		Float _hx_tmp1 = ((((int)0 * displayMatrix->b) + ((int)0 * displayMatrix->d)) + displayMatrix->ty);
HXDLIN(  94)		HX_VARI( Int,offsetY) = ::Math_obj::round(_hx_tmp1);
HXLINE(  95)		Float _hx_tmp2 = ((((this->width * displayMatrix->a) + ((int)0 * displayMatrix->c)) + displayMatrix->tx) - offsetX);
HXDLIN(  95)		HX_VARI( Int,displayWidth) = ::Math_obj::round(_hx_tmp2);
HXLINE(  96)		Float _hx_tmp3 = (((((int)0 * displayMatrix->b) + (this->height * displayMatrix->d)) + displayMatrix->ty) - offsetY);
HXDLIN(  96)		HX_VARI( Int,displayHeight) = ::Math_obj::round(_hx_tmp3);
HXLINE(  98)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_viewport(offsetX,offsetY,displayWidth,displayHeight);
HXLINE( 100)		this->windowWidth = stage->window->_hx___width;
HXLINE( 101)		this->windowHeight = stage->window->_hx___height;
HXLINE( 103)		stage->_hx___renderGL(this->renderSession);
HXLINE( 105)		Bool _hx_tmp4;
HXDLIN( 105)		if ((offsetX <= (int)0)) {
HXLINE( 105)			_hx_tmp4 = (offsetY > (int)0);
            		}
            		else {
HXLINE( 105)			_hx_tmp4 = true;
            		}
HXDLIN( 105)		if (_hx_tmp4) {
HXLINE( 107)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear_color((int)0,(int)0,(int)0,(int)1);
HXLINE( 108)			{
HXLINE( 108)				Int cap = this->gl->SCISSOR_TEST;
HXDLIN( 108)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable(cap);
            			}
HXLINE( 110)			if ((offsetX > (int)0)) {
HXLINE( 112)				{
HXLINE( 112)					Int height = this->windowHeight;
HXDLIN( 112)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_scissor((int)0,(int)0,offsetX,height);
            				}
HXLINE( 113)				{
HXLINE( 113)					Int mask = this->gl->COLOR_BUFFER_BIT;
HXDLIN( 113)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear(mask);
            				}
HXLINE( 115)				{
HXLINE( 115)					Int width = this->windowWidth;
HXDLIN( 115)					Int height1 = this->windowHeight;
HXDLIN( 115)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_scissor((offsetX + displayWidth),(int)0,width,height1);
            				}
HXLINE( 116)				{
HXLINE( 116)					Int mask1 = this->gl->COLOR_BUFFER_BIT;
HXDLIN( 116)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear(mask1);
            				}
            			}
HXLINE( 120)			if ((offsetY > (int)0)) {
HXLINE( 122)				{
HXLINE( 122)					Int width1 = this->windowWidth;
HXDLIN( 122)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_scissor((int)0,(int)0,width1,offsetY);
            				}
HXLINE( 123)				{
HXLINE( 123)					Int mask2 = this->gl->COLOR_BUFFER_BIT;
HXDLIN( 123)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear(mask2);
            				}
HXLINE( 125)				{
HXLINE( 125)					Int width2 = this->windowWidth;
HXDLIN( 125)					Int height2 = this->windowHeight;
HXDLIN( 125)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_scissor((int)0,(offsetY + displayHeight),width2,height2);
            				}
HXLINE( 126)				{
HXLINE( 126)					Int mask3 = this->gl->COLOR_BUFFER_BIT;
HXDLIN( 126)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear(mask3);
            				}
            			}
HXLINE( 130)			{
HXLINE( 130)				Int cap1 = this->gl->SCISSOR_TEST;
HXDLIN( 130)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable(cap1);
            			}
            		}
            	}


void GLRenderer_obj::resize(Int width,Int height){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLRenderer","resize",0x762cafb6,"openfl._internal.renderer.opengl.GLRenderer.resize","openfl/_internal/renderer/opengl/GLRenderer.hx",137,0xb2b97130)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 139)		this->super::resize(width,height);
HXLINE( 141)		this->projection = ::lime::math::_Matrix4::Matrix4_Impl__obj::createOrtho((int)0,width,height,(int)0,(int)-1000,(int)1000);
            	}



GLRenderer_obj::GLRenderer_obj()
{
}

void GLRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLRenderer);
	HX_MARK_MEMBER_NAME(projection,"projection");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(windowHeight,"windowHeight");
	HX_MARK_MEMBER_NAME(windowWidth,"windowWidth");
	 ::openfl::_internal::renderer::AbstractRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GLRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projection,"projection");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(windowHeight,"windowHeight");
	HX_VISIT_MEMBER_NAME(windowWidth,"windowWidth");
	 ::openfl::_internal::renderer::AbstractRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GLRenderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn()); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getMatrix") ) { return hx::Val( getMatrix_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"projection") ) { return hx::Val( projection); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windowWidth") ) { return hx::Val( windowWidth); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"windowHeight") ) { return hx::Val( windowHeight); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLRenderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"projection") ) { projection=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windowWidth") ) { windowWidth=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"windowHeight") ) { windowHeight=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("projection","\x8f","\x88","\x8b","\xc4"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("windowHeight","\xf7","\xa3","\xbc","\xc9"));
	outFields->push(HX_HCSTRING("windowWidth","\xf6","\x4b","\x35","\xbb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLRenderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(GLRenderer_obj,projection),HX_HCSTRING("projection","\x8f","\x88","\x8b","\xc4")},
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(GLRenderer_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(GLRenderer_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{hx::fsInt,(int)offsetof(GLRenderer_obj,windowHeight),HX_HCSTRING("windowHeight","\xf7","\xa3","\xbc","\xc9")},
	{hx::fsInt,(int)offsetof(GLRenderer_obj,windowWidth),HX_HCSTRING("windowWidth","\xf6","\x4b","\x35","\xbb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLRenderer_obj_sStaticStorageInfo = 0;
#endif

static ::String GLRenderer_obj_sMemberFields[] = {
	HX_HCSTRING("projection","\x8f","\x88","\x8b","\xc4"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("windowHeight","\xf7","\xa3","\xbc","\xc9"),
	HX_HCSTRING("windowWidth","\xf6","\x4b","\x35","\xbb"),
	HX_HCSTRING("getMatrix","\x77","\xbf","\x1e","\x38"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	::String(null()) };

static void GLRenderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLRenderer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLRenderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLRenderer_obj::__mClass,"__mClass");
};

#endif

hx::Class GLRenderer_obj::__mClass;

void GLRenderer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLRenderer","\x6c","\xe6","\x3a","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLRenderer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLRenderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLRenderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLRenderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
