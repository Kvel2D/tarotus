// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_ProgramType
#include <openfl/_internal/stage3D/_AGALConverter/ProgramType.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_SourceReg
#include <openfl/_internal/stage3D/_AGALConverter/SourceReg.h>
#endif

namespace openfl{
namespace _internal{
namespace stage3D{
namespace _AGALConverter{

void SourceReg_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.SourceReg","new",0x07d6407c,"openfl._internal.stage3D._AGALConverter.SourceReg.new","openfl/_internal/stage3D/AGALConverter.hx",87,0x0a35cc61)
            	HX_STACK_THIS(this)
            	}

Dynamic SourceReg_obj::__CreateEmpty() { return new SourceReg_obj; }

hx::ObjectPtr< SourceReg_obj > SourceReg_obj::__new()
{
	hx::ObjectPtr< SourceReg_obj > _hx_result = new SourceReg_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic SourceReg_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SourceReg_obj > _hx_result = new SourceReg_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String SourceReg_obj::ToGLSL(hx::Null< Bool >  __o_emitSwizzle,hx::Null< Int >  __o_offset){
Bool emitSwizzle = __o_emitSwizzle.Default(true);
Int offset = __o_offset.Default(0);
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.SourceReg","ToGLSL",0xdec2567d,"openfl._internal.stage3D._AGALConverter.SourceReg.ToGLSL","openfl/_internal/stage3D/AGALConverter.hx",105,0x0a35cc61)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(emitSwizzle,"emitSwizzle")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 106)		if ((this->type == (int)3)) {
HXLINE( 107)			if (hx::IsEq( this->programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::Vertex_dyn() )) {
HXLINE( 107)				return HX_("gl_Position",63,0d,2a,e5);
            			}
            			else {
HXLINE( 107)				return HX_("gl_FragColor",d7,68,e4,21);
            			}
            		}
HXLINE( 111)		HX_VAR( Bool,fullxyzw);
HXDLIN( 111)		if ((this->s == (int)228)) {
HXLINE( 111)			fullxyzw = (this->sourceMask == (int)15);
            		}
            		else {
HXLINE( 111)			fullxyzw = false;
            		}
HXLINE( 113)		HX_VARI( ::String,swizzle) = HX_("",00,00,00,00);
HXLINE( 114)		Bool _hx_tmp;
HXDLIN( 114)		if ((this->type != (int)5)) {
HXLINE( 114)			_hx_tmp = !(fullxyzw);
            		}
            		else {
HXLINE( 114)			_hx_tmp = false;
            		}
HXDLIN( 114)		if (_hx_tmp) {
HXLINE( 115)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 115)			while((_g < (int)4)){
HXLINE( 115)				HX_VARI( Int,i) = _g++;
HXLINE( 118)				if ((((int)this->sourceMask & (int)((int)(int)1 << (int)i)) != (int)0)) {
HXLINE( 119)					switch((int)(((int)((int)this->s >> (int)(i * (int)2)) & (int)(int)3))){
            						case (int)0: {
HXLINE( 121)							hx::AddEq(swizzle,HX_("x",78,00,00,00));
            						}
            						break;
            						case (int)1: {
HXLINE( 124)							hx::AddEq(swizzle,HX_("y",79,00,00,00));
            						}
            						break;
            						case (int)2: {
HXLINE( 127)							hx::AddEq(swizzle,HX_("z",7a,00,00,00));
            						}
            						break;
            						case (int)3: {
HXLINE( 130)							hx::AddEq(swizzle,HX_("w",77,00,00,00));
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 137)		HX_VARI( ::String,str) = ::openfl::_internal::stage3D::AGALConverter_obj::PrefixFromType(this->type,this->programType);
HXLINE( 138)		Bool _hx_tmp1 = (this->d == (int)0);
HXDLIN( 138)		if (_hx_tmp1) {
HXLINE( 140)			hx::AddEq(str,(this->n + offset));
            		}
            		else {
HXLINE( 143)			hx::AddEq(str,this->o);
HXLINE( 144)			 ::Dynamic _hx_tmp2 = HX_("x",78,00,00,00).charCodeAt((int)0);
HXDLIN( 144)			HX_VARI( ::String,indexComponent) = ::String::fromCharCode((_hx_tmp2 + this->q));
HXLINE( 145)			::String _hx_tmp3 = ::openfl::_internal::stage3D::AGALConverter_obj::PrefixFromType(this->itype,this->programType);
HXLINE( 146)			hx::AddEq(str,((((HX_("[ int(",3e,aa,07,15) + (((_hx_tmp3 + this->n) + HX_(".",2e,00,00,00)) + indexComponent)) + HX_(") +",74,38,1f,00)) + offset) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 149)		Bool _hx_tmp4;
HXDLIN( 149)		if (emitSwizzle) {
HXLINE( 149)			_hx_tmp4 = (swizzle != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 149)			_hx_tmp4 = false;
            		}
HXDLIN( 149)		if (_hx_tmp4) {
HXLINE( 150)			hx::AddEq(str,(HX_(".",2e,00,00,00) + swizzle));
            		}
HXLINE( 153)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SourceReg_obj,ToGLSL,return )

 ::openfl::_internal::stage3D::_AGALConverter::SourceReg SourceReg_obj::Parse( ::cpp::Int64Struct v,::hx::EnumBase programType,Int sourceMask){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.SourceReg","Parse",0x1196af2f,"openfl._internal.stage3D._AGALConverter.SourceReg.Parse","openfl/_internal/stage3D/AGALConverter.hx",90,0x0a35cc61)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(programType,"programType")
            	HX_STACK_ARG(sourceMask,"sourceMask")
HXLINE(  91)		HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::SourceReg,sr) =  ::openfl::_internal::stage3D::_AGALConverter::SourceReg_obj::__new();
HXLINE(  92)		sr->programType = programType;
HXLINE(  93)		 ::cpp::Int64Struct a = _hx_int64_shr(v,(int)63);
HXDLIN(  93)		 ::cpp::Int64Struct b = ( ::cpp::Int64Struct((int)1));
HXDLIN(  93)		 ::cpp::Int64Struct this1 = _hx_int64_and(a,b);
HXDLIN(  93)		Int _hx_tmp = _hx_int64_low(this1);
HXDLIN(  93)		sr->d = _hx_tmp;
HXLINE(  94)		 ::cpp::Int64Struct a1 = _hx_int64_shr(v,(int)48);
HXDLIN(  94)		 ::cpp::Int64Struct b1 = ( ::cpp::Int64Struct((int)3));
HXDLIN(  94)		 ::cpp::Int64Struct this2 = _hx_int64_and(a1,b1);
HXDLIN(  94)		Int _hx_tmp1 = _hx_int64_low(this2);
HXDLIN(  94)		sr->q = _hx_tmp1;
HXLINE(  95)		 ::cpp::Int64Struct a2 = _hx_int64_shr(v,(int)40);
HXDLIN(  95)		 ::cpp::Int64Struct b2 = ( ::cpp::Int64Struct((int)15));
HXDLIN(  95)		 ::cpp::Int64Struct this3 = _hx_int64_and(a2,b2);
HXDLIN(  95)		Int _hx_tmp2 = _hx_int64_low(this3);
HXDLIN(  95)		sr->itype = _hx_tmp2;
HXLINE(  96)		 ::cpp::Int64Struct a3 = _hx_int64_shr(v,(int)32);
HXDLIN(  96)		 ::cpp::Int64Struct b3 = ( ::cpp::Int64Struct((int)15));
HXDLIN(  96)		 ::cpp::Int64Struct this4 = _hx_int64_and(a3,b3);
HXDLIN(  96)		Int _hx_tmp3 = _hx_int64_low(this4);
HXDLIN(  96)		sr->type = _hx_tmp3;
HXLINE(  97)		 ::cpp::Int64Struct a4 = _hx_int64_shr(v,(int)24);
HXDLIN(  97)		 ::cpp::Int64Struct b4 = ( ::cpp::Int64Struct((int)255));
HXDLIN(  97)		 ::cpp::Int64Struct this5 = _hx_int64_and(a4,b4);
HXDLIN(  97)		Int _hx_tmp4 = _hx_int64_low(this5);
HXDLIN(  97)		sr->s = _hx_tmp4;
HXLINE(  98)		 ::cpp::Int64Struct a5 = _hx_int64_shr(v,(int)16);
HXDLIN(  98)		 ::cpp::Int64Struct b5 = ( ::cpp::Int64Struct((int)255));
HXDLIN(  98)		 ::cpp::Int64Struct this6 = _hx_int64_and(a5,b5);
HXDLIN(  98)		Int _hx_tmp5 = _hx_int64_low(this6);
HXDLIN(  98)		sr->o = _hx_tmp5;
HXLINE(  99)		 ::cpp::Int64Struct b6 = ( ::cpp::Int64Struct((int)65535));
HXDLIN(  99)		 ::cpp::Int64Struct this7 = _hx_int64_and(v,b6);
HXDLIN(  99)		Int _hx_tmp6 = _hx_int64_low(this7);
HXDLIN(  99)		sr->n = _hx_tmp6;
HXLINE( 100)		sr->sourceMask = sourceMask;
HXLINE( 101)		return sr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SourceReg_obj,Parse,return )


SourceReg_obj::SourceReg_obj()
{
}

void SourceReg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SourceReg);
	HX_MARK_MEMBER_NAME(programType,"programType");
	HX_MARK_MEMBER_NAME(d,"d");
	HX_MARK_MEMBER_NAME(q,"q");
	HX_MARK_MEMBER_NAME(itype,"itype");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(s,"s");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_MEMBER_NAME(sourceMask,"sourceMask");
	HX_MARK_END_CLASS();
}

void SourceReg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(programType,"programType");
	HX_VISIT_MEMBER_NAME(d,"d");
	HX_VISIT_MEMBER_NAME(q,"q");
	HX_VISIT_MEMBER_NAME(itype,"itype");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(s,"s");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(n,"n");
	HX_VISIT_MEMBER_NAME(sourceMask,"sourceMask");
}

hx::Val SourceReg_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"d") ) { return hx::Val( d); }
		if (HX_FIELD_EQ(inName,"q") ) { return hx::Val( q); }
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s); }
		if (HX_FIELD_EQ(inName,"o") ) { return hx::Val( o); }
		if (HX_FIELD_EQ(inName,"n") ) { return hx::Val( n); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"itype") ) { return hx::Val( itype); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ToGLSL") ) { return hx::Val( ToGLSL_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceMask") ) { return hx::Val( sourceMask); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programType") ) { return hx::Val( programType); }
	}
	return super::__Field(inName,inCallProp);
}

bool SourceReg_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"Parse") ) { outValue = Parse_dyn(); return true; }
	}
	return false;
}

hx::Val SourceReg_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"d") ) { d=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"q") ) { q=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"itype") ) { itype=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceMask") ) { sourceMask=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programType") ) { programType=inValue.Cast< ::hx::EnumBase >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SourceReg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4"));
	outFields->push(HX_HCSTRING("d","\x64","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("q","\x71","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("o","\x6f","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("n","\x6e","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("sourceMask","\x67","\x27","\xba","\x70"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SourceReg_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::stage3D::_AGALConverter::ProgramType*/ ,(int)offsetof(SourceReg_obj,programType),HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4")},
	{hx::fsInt,(int)offsetof(SourceReg_obj,d),HX_HCSTRING("d","\x64","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceReg_obj,q),HX_HCSTRING("q","\x71","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceReg_obj,itype),HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2")},
	{hx::fsInt,(int)offsetof(SourceReg_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(SourceReg_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceReg_obj,o),HX_HCSTRING("o","\x6f","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceReg_obj,n),HX_HCSTRING("n","\x6e","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceReg_obj,sourceMask),HX_HCSTRING("sourceMask","\x67","\x27","\xba","\x70")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SourceReg_obj_sStaticStorageInfo = 0;
#endif

static ::String SourceReg_obj_sMemberFields[] = {
	HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4"),
	HX_HCSTRING("d","\x64","\x00","\x00","\x00"),
	HX_HCSTRING("q","\x71","\x00","\x00","\x00"),
	HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("o","\x6f","\x00","\x00","\x00"),
	HX_HCSTRING("n","\x6e","\x00","\x00","\x00"),
	HX_HCSTRING("sourceMask","\x67","\x27","\xba","\x70"),
	HX_HCSTRING("ToGLSL","\x19","\xcd","\x9c","\xae"),
	::String(null()) };

static void SourceReg_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SourceReg_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SourceReg_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SourceReg_obj::__mClass,"__mClass");
};

#endif

hx::Class SourceReg_obj::__mClass;

static ::String SourceReg_obj_sStaticFields[] = {
	HX_HCSTRING("Parse","\x13","\x00","\x83","\x50"),
	::String(null())
};

void SourceReg_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D._AGALConverter.SourceReg","\x8a","\x92","\x9d","\xe0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SourceReg_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SourceReg_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SourceReg_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SourceReg_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SourceReg_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SourceReg_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SourceReg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SourceReg_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace _AGALConverter
