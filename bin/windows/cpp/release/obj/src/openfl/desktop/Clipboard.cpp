// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_desktop_Clipboard
#include <openfl/desktop/Clipboard.h>
#endif

namespace openfl{
namespace desktop{

void Clipboard_obj::__construct(){
            	HX_STACK_FRAME("openfl.desktop.Clipboard","new",0x2618b038,"openfl.desktop.Clipboard.new","openfl/desktop/Clipboard.hx",23,0x374e223a)
            	HX_STACK_THIS(this)
            	}

Dynamic Clipboard_obj::__CreateEmpty() { return new Clipboard_obj; }

hx::ObjectPtr< Clipboard_obj > Clipboard_obj::__new()
{
	hx::ObjectPtr< Clipboard_obj > _hx_result = new Clipboard_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Clipboard_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Clipboard_obj > _hx_result = new Clipboard_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Clipboard_obj::clear(){
            	HX_STACK_FRAME("openfl.desktop.Clipboard","clear",0x10f9f765,"openfl.desktop.Clipboard.clear","openfl/desktop/Clipboard.hx",32,0x374e223a)
            	HX_STACK_THIS(this)
HXLINE(  32)		Bool _hx_tmp = !(this->_hx___systemClipboard);
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  34)			this->_hx___htmlText = null();
HXLINE(  35)			this->_hx___richText = null();
HXLINE(  36)			this->_hx___text = null();
            		}
            		else {
HXLINE(  40)			::lime::_hx_system::Clipboard_obj::set_text(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clipboard_obj,clear,(void))

void Clipboard_obj::clearData( ::Dynamic format){
            	HX_STACK_FRAME("openfl.desktop.Clipboard","clearData",0xcf76902f,"openfl.desktop.Clipboard.clearData","openfl/desktop/Clipboard.hx",49,0x374e223a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
HXLINE(  49)		Bool _hx_tmp = !(this->_hx___systemClipboard);
HXDLIN(  49)		if (_hx_tmp) {
HXLINE(  51)			 ::Dynamic _hx_switch_0 = format;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE(  55)				this->_hx___htmlText = null();
HXDLIN(  55)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE(  59)				this->_hx___richText = null();
HXDLIN(  59)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE(  63)				this->_hx___text = null();
HXDLIN(  63)				goto _hx_goto_0;
            			}
            			/* default */{
            			}
            			_hx_goto_0:;
            		}
            		else {
HXLINE(  71)			 ::Dynamic _hx_switch_1 = format;
            			if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)2) ){
HXLINE(  75)				::lime::_hx_system::Clipboard_obj::set_text(null());
HXDLIN(  75)				goto _hx_goto_1;
            			}
            			/* default */{
            			}
            			_hx_goto_1:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clipboard_obj,clearData,(void))

 ::Dynamic Clipboard_obj::getData( ::Dynamic format, ::Dynamic transferMode){
            	HX_STACK_FRAME("openfl.desktop.Clipboard","getData",0x2693b1b8,"openfl.desktop.Clipboard.getData","openfl/desktop/Clipboard.hx",86,0x374e223a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(transferMode,"transferMode")
HXLINE(  88)		Bool _hx_tmp = hx::IsNull( transferMode );
HXDLIN(  88)		if (_hx_tmp) {
HXLINE(  90)			transferMode = (int)3;
            		}
HXLINE(  94)		Bool _hx_tmp1 = !(this->_hx___systemClipboard);
HXDLIN(  94)		if (_hx_tmp1) {
HXLINE(  96)			 ::Dynamic _hx_switch_0 = format;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE(  96)				return this->_hx___htmlText;
HXDLIN(  96)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE(  96)				return this->_hx___richText;
HXDLIN(  96)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE(  96)				return this->_hx___text;
HXDLIN(  96)				goto _hx_goto_2;
            			}
            			/* default */{
HXLINE(  96)				return null();
            			}
            			_hx_goto_2:;
            		}
            		else {
HXLINE( 107)			 ::Dynamic _hx_switch_1 = format;
            			if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)2) ){
HXLINE( 107)				return ::lime::_hx_system::Clipboard_obj::get_text();
HXDLIN( 107)				goto _hx_goto_3;
            			}
            			/* default */{
HXLINE( 107)				return null();
            			}
            			_hx_goto_3:;
            		}
HXLINE(  94)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Clipboard_obj,getData,return )

Bool Clipboard_obj::hasFormat( ::Dynamic format){
            	HX_STACK_FRAME("openfl.desktop.Clipboard","hasFormat",0x57c99409,"openfl.desktop.Clipboard.hasFormat","openfl/desktop/Clipboard.hx",121,0x374e223a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
HXLINE( 121)		Bool _hx_tmp = !(this->_hx___systemClipboard);
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 123)			 ::Dynamic _hx_switch_0 = format;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 123)				return hx::IsNotNull( this->_hx___htmlText );
HXDLIN( 123)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 123)				return hx::IsNotNull( this->_hx___richText );
HXDLIN( 123)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 123)				return hx::IsNotNull( this->_hx___text );
HXDLIN( 123)				goto _hx_goto_4;
            			}
            			/* default */{
HXLINE( 123)				return false;
            			}
            			_hx_goto_4:;
            		}
            		else {
HXLINE( 134)			 ::Dynamic _hx_switch_1 = format;
            			if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)2) ){
HXLINE( 136)				::String _hx_tmp1 = ::lime::_hx_system::Clipboard_obj::get_text();
HXLINE( 134)				return hx::IsNotNull( _hx_tmp1 );
HXDLIN( 134)				goto _hx_goto_5;
            			}
            			/* default */{
HXLINE( 134)				return false;
            			}
            			_hx_goto_5:;
            		}
HXLINE( 121)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clipboard_obj,hasFormat,return )

Bool Clipboard_obj::setData( ::Dynamic format, ::Dynamic data,hx::Null< Bool >  __o_serializable){
Bool serializable = __o_serializable.Default(true);
            	HX_STACK_FRAME("openfl.desktop.Clipboard","setData",0x199542c4,"openfl.desktop.Clipboard.setData","openfl/desktop/Clipboard.hx",148,0x374e223a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(serializable,"serializable")
HXLINE( 148)		Bool _hx_tmp = !(this->_hx___systemClipboard);
HXDLIN( 148)		if (_hx_tmp) {
HXLINE( 150)			 ::Dynamic _hx_switch_0 = format;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 154)				this->_hx___htmlText = ::Std_obj::string(data);
HXLINE( 155)				return true;
HXLINE( 152)				goto _hx_goto_6;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 159)				this->_hx___richText = ::Std_obj::string(data);
HXLINE( 160)				return true;
HXLINE( 157)				goto _hx_goto_6;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 164)				this->_hx___text = ::Std_obj::string(data);
HXLINE( 165)				return true;
HXLINE( 162)				goto _hx_goto_6;
            			}
            			/* default */{
HXLINE( 169)				return false;
            			}
            			_hx_goto_6:;
            		}
            		else {
HXLINE( 175)			 ::Dynamic _hx_switch_1 = format;
            			if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)2) ){
HXLINE( 179)				::lime::_hx_system::Clipboard_obj::set_text(::Std_obj::string(data));
HXLINE( 180)				return true;
HXLINE( 177)				goto _hx_goto_7;
            			}
            			/* default */{
HXLINE( 184)				return false;
            			}
            			_hx_goto_7:;
            		}
HXLINE( 148)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Clipboard_obj,setData,return )

Bool Clipboard_obj::setDataHandler( ::Dynamic format, ::Dynamic handler,hx::Null< Bool >  __o_serializable){
Bool serializable = __o_serializable.Default(true);
            	HX_STACK_FRAME("openfl.desktop.Clipboard","setDataHandler",0x523d3566,"openfl.desktop.Clipboard.setDataHandler","openfl/desktop/Clipboard.hx",193,0x374e223a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(handler,"handler")
            	HX_STACK_ARG(serializable,"serializable")
HXLINE( 195)		::openfl::Lib_obj::notImplemented(HX_("Clipboard.setDataHandler",f6,81,9e,57));
HXLINE( 196)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Clipboard_obj,setDataHandler,return )

 ::openfl::desktop::Clipboard Clipboard_obj::_hx___generalClipboard;

 ::openfl::desktop::Clipboard Clipboard_obj::get_generalClipboard(){
            	HX_STACK_FRAME("openfl.desktop.Clipboard","get_generalClipboard",0x033867bf,"openfl.desktop.Clipboard.get_generalClipboard","openfl/desktop/Clipboard.hx",208,0x374e223a)
HXLINE( 210)		Bool _hx_tmp = hx::IsNull( ::openfl::desktop::Clipboard_obj::_hx___generalClipboard );
HXDLIN( 210)		if (_hx_tmp) {
HXLINE( 212)			::openfl::desktop::Clipboard_obj::_hx___generalClipboard =  ::openfl::desktop::Clipboard_obj::__new();
HXLINE( 213)			::openfl::desktop::Clipboard_obj::_hx___generalClipboard->_hx___systemClipboard = true;
            		}
HXLINE( 217)		return ::openfl::desktop::Clipboard_obj::_hx___generalClipboard;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Clipboard_obj,get_generalClipboard,return )


Clipboard_obj::Clipboard_obj()
{
}

void Clipboard_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Clipboard);
	HX_MARK_MEMBER_NAME(formats,"formats");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___richText,"__richText");
	HX_MARK_MEMBER_NAME(_hx___systemClipboard,"__systemClipboard");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_END_CLASS();
}

void Clipboard_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(formats,"formats");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___richText,"__richText");
	HX_VISIT_MEMBER_NAME(_hx___systemClipboard,"__systemClipboard");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
}

hx::Val Clipboard_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"formats") ) { return hx::Val( formats); }
		if (HX_FIELD_EQ(inName,"getData") ) { return hx::Val( getData_dyn()); }
		if (HX_FIELD_EQ(inName,"setData") ) { return hx::Val( setData_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clearData") ) { return hx::Val( clearData_dyn()); }
		if (HX_FIELD_EQ(inName,"hasFormat") ) { return hx::Val( hasFormat_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return hx::Val( _hx___htmlText); }
		if (HX_FIELD_EQ(inName,"__richText") ) { return hx::Val( _hx___richText); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setDataHandler") ) { return hx::Val( setDataHandler_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__systemClipboard") ) { return hx::Val( _hx___systemClipboard); }
	}
	return super::__Field(inName,inCallProp);
}

bool Clipboard_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"generalClipboard") ) { if (inCallProp == hx::paccAlways) { outValue = get_generalClipboard(); return true; } }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__generalClipboard") ) { outValue = _hx___generalClipboard; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_generalClipboard") ) { outValue = get_generalClipboard_dyn(); return true; }
	}
	return false;
}

hx::Val Clipboard_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"formats") ) { formats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__richText") ) { _hx___richText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__systemClipboard") ) { _hx___systemClipboard=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Clipboard_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"__generalClipboard") ) { _hx___generalClipboard=ioValue.Cast<  ::openfl::desktop::Clipboard >(); return true; }
	}
	return false;
}

void Clipboard_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("formats","\x5c","\xc1","\x2e","\xdf"));
	outFields->push(HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"));
	outFields->push(HX_HCSTRING("__richText","\x09","\x00","\xd1","\xd8"));
	outFields->push(HX_HCSTRING("__systemClipboard","\xc7","\x09","\xa5","\x2f"));
	outFields->push(HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Clipboard_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Clipboard_obj,formats),HX_HCSTRING("formats","\x5c","\xc1","\x2e","\xdf")},
	{hx::fsString,(int)offsetof(Clipboard_obj,_hx___htmlText),HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3")},
	{hx::fsString,(int)offsetof(Clipboard_obj,_hx___richText),HX_HCSTRING("__richText","\x09","\x00","\xd1","\xd8")},
	{hx::fsBool,(int)offsetof(Clipboard_obj,_hx___systemClipboard),HX_HCSTRING("__systemClipboard","\xc7","\x09","\xa5","\x2f")},
	{hx::fsString,(int)offsetof(Clipboard_obj,_hx___text),HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Clipboard_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::desktop::Clipboard*/ ,(void *) &Clipboard_obj::_hx___generalClipboard,HX_HCSTRING("__generalClipboard","\xae","\xc8","\x3c","\xa1")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Clipboard_obj_sMemberFields[] = {
	HX_HCSTRING("formats","\x5c","\xc1","\x2e","\xdf"),
	HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"),
	HX_HCSTRING("__richText","\x09","\x00","\xd1","\xd8"),
	HX_HCSTRING("__systemClipboard","\xc7","\x09","\xa5","\x2f"),
	HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clearData","\x57","\x3e","\x24","\xb6"),
	HX_HCSTRING("getData","\xe0","\x05","\xe6","\x14"),
	HX_HCSTRING("hasFormat","\x31","\x42","\x77","\x3e"),
	HX_HCSTRING("setData","\xec","\x96","\xe7","\x07"),
	HX_HCSTRING("setDataHandler","\x3e","\x36","\x7f","\x2f"),
	::String(null()) };

static void Clipboard_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Clipboard_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Clipboard_obj::_hx___generalClipboard,"__generalClipboard");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Clipboard_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Clipboard_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Clipboard_obj::_hx___generalClipboard,"__generalClipboard");
};

#endif

hx::Class Clipboard_obj::__mClass;

static ::String Clipboard_obj_sStaticFields[] = {
	HX_HCSTRING("__generalClipboard","\xae","\xc8","\x3c","\xa1"),
	HX_HCSTRING("get_generalClipboard","\x97","\x9a","\x16","\x54"),
	::String(null())
};

void Clipboard_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.desktop.Clipboard","\x46","\x74","\x06","\x43");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Clipboard_obj::__GetStatic;
	__mClass->mSetStaticField = &Clipboard_obj::__SetStatic;
	__mClass->mMarkFunc = Clipboard_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Clipboard_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Clipboard_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Clipboard_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Clipboard_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Clipboard_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Clipboard_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace desktop
