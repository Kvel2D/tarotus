// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_desktop__ClipboardTransferMode_ClipboardTransferMode_Impl_
#include <openfl/desktop/_ClipboardTransferMode/ClipboardTransferMode_Impl_.h>
#endif

namespace openfl{
namespace desktop{
namespace _ClipboardTransferMode{

void ClipboardTransferMode_Impl__obj::__construct() { }

Dynamic ClipboardTransferMode_Impl__obj::__CreateEmpty() { return new ClipboardTransferMode_Impl__obj; }

hx::ObjectPtr< ClipboardTransferMode_Impl__obj > ClipboardTransferMode_Impl__obj::__new()
{
	hx::ObjectPtr< ClipboardTransferMode_Impl__obj > _hx_result = new ClipboardTransferMode_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ClipboardTransferMode_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ClipboardTransferMode_Impl__obj > _hx_result = new ClipboardTransferMode_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic ClipboardTransferMode_Impl__obj::CLONE_ONLY;

 ::Dynamic ClipboardTransferMode_Impl__obj::CLONE_PREFERRED;

 ::Dynamic ClipboardTransferMode_Impl__obj::ORIGINAL_ONLY;

 ::Dynamic ClipboardTransferMode_Impl__obj::ORIGINAL_PREFERRED;

 ::Dynamic ClipboardTransferMode_Impl__obj::fromString(::String value){
            	HX_STACK_FRAME("openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_","fromString",0x6c619afe,"openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_.fromString","openfl/desktop/ClipboardTransferMode.hx",13,0xf47f24ac)
            	HX_STACK_ARG(value,"value")
HXLINE(  13)		::String _hx_switch_0 = value;
            		if (  (_hx_switch_0==HX_("cloneOnly",69,37,b8,13)) ){
HXLINE(  13)			return (int)0;
HXDLIN(  13)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("clonePreferred",24,26,a0,7c)) ){
HXLINE(  13)			return (int)1;
HXDLIN(  13)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("originalOnly",5d,e2,12,23)) ){
HXLINE(  13)			return (int)2;
HXDLIN(  13)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("originalPreferred",b0,46,71,c1)) ){
HXLINE(  13)			return (int)3;
HXDLIN(  13)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  13)			return null();
            		}
            		_hx_goto_0:;
HXDLIN(  13)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ClipboardTransferMode_Impl__obj,fromString,return )

::String ClipboardTransferMode_Impl__obj::toString(Int value){
            	HX_STACK_FRAME("openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_","toString",0xdb419f0f,"openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_.toString","openfl/desktop/ClipboardTransferMode.hx",27,0xf47f24ac)
            	HX_STACK_ARG(value,"value")
HXLINE(  27)		switch((int)(value)){
            			case (int)0: {
HXLINE(  27)				return HX_("cloneOnly",69,37,b8,13);
            			}
            			break;
            			case (int)1: {
HXLINE(  27)				return HX_("clonePreferred",24,26,a0,7c);
            			}
            			break;
            			case (int)2: {
HXLINE(  27)				return HX_("originalOnly",5d,e2,12,23);
            			}
            			break;
            			case (int)3: {
HXLINE(  27)				return HX_("originalPreferred",b0,46,71,c1);
            			}
            			break;
            			default:{
HXLINE(  27)				return null();
            			}
            		}
HXDLIN(  27)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ClipboardTransferMode_Impl__obj,toString,return )


ClipboardTransferMode_Impl__obj::ClipboardTransferMode_Impl__obj()
{
}

bool ClipboardTransferMode_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ClipboardTransferMode_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo ClipboardTransferMode_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &ClipboardTransferMode_Impl__obj::CLONE_ONLY,HX_HCSTRING("CLONE_ONLY","\xee","\x40","\x68","\xc3")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ClipboardTransferMode_Impl__obj::CLONE_PREFERRED,HX_HCSTRING("CLONE_PREFERRED","\x5f","\xb2","\x94","\xd0")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ClipboardTransferMode_Impl__obj::ORIGINAL_ONLY,HX_HCSTRING("ORIGINAL_ONLY","\x5a","\x5f","\x98","\x17")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ClipboardTransferMode_Impl__obj::ORIGINAL_PREFERRED,HX_HCSTRING("ORIGINAL_PREFERRED","\x73","\xcc","\xc2","\x31")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ClipboardTransferMode_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ClipboardTransferMode_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ClipboardTransferMode_Impl__obj::CLONE_ONLY,"CLONE_ONLY");
	HX_MARK_MEMBER_NAME(ClipboardTransferMode_Impl__obj::CLONE_PREFERRED,"CLONE_PREFERRED");
	HX_MARK_MEMBER_NAME(ClipboardTransferMode_Impl__obj::ORIGINAL_ONLY,"ORIGINAL_ONLY");
	HX_MARK_MEMBER_NAME(ClipboardTransferMode_Impl__obj::ORIGINAL_PREFERRED,"ORIGINAL_PREFERRED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ClipboardTransferMode_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ClipboardTransferMode_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ClipboardTransferMode_Impl__obj::CLONE_ONLY,"CLONE_ONLY");
	HX_VISIT_MEMBER_NAME(ClipboardTransferMode_Impl__obj::CLONE_PREFERRED,"CLONE_PREFERRED");
	HX_VISIT_MEMBER_NAME(ClipboardTransferMode_Impl__obj::ORIGINAL_ONLY,"ORIGINAL_ONLY");
	HX_VISIT_MEMBER_NAME(ClipboardTransferMode_Impl__obj::ORIGINAL_PREFERRED,"ORIGINAL_PREFERRED");
};

#endif

hx::Class ClipboardTransferMode_Impl__obj::__mClass;

static ::String ClipboardTransferMode_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("CLONE_ONLY","\xee","\x40","\x68","\xc3"),
	HX_HCSTRING("CLONE_PREFERRED","\x5f","\xb2","\x94","\xd0"),
	HX_HCSTRING("ORIGINAL_ONLY","\x5a","\x5f","\x98","\x17"),
	HX_HCSTRING("ORIGINAL_PREFERRED","\x73","\xcc","\xc2","\x31"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void ClipboardTransferMode_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_","\x6b","\xea","\x40","\x0d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ClipboardTransferMode_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ClipboardTransferMode_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ClipboardTransferMode_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ClipboardTransferMode_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ClipboardTransferMode_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClipboardTransferMode_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClipboardTransferMode_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ClipboardTransferMode_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_","boot",0xf2e8a515,"openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_.boot","openfl/desktop/ClipboardTransferMode.hx",6,0xf47f24ac)
HXLINE(   6)		CLONE_ONLY = (int)0;
            	}
{
            	HX_STACK_FRAME("openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_","boot",0xf2e8a515,"openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_.boot","openfl/desktop/ClipboardTransferMode.hx",7,0xf47f24ac)
HXLINE(   7)		CLONE_PREFERRED = (int)1;
            	}
{
            	HX_STACK_FRAME("openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_","boot",0xf2e8a515,"openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_.boot","openfl/desktop/ClipboardTransferMode.hx",8,0xf47f24ac)
HXLINE(   8)		ORIGINAL_ONLY = (int)2;
            	}
{
            	HX_STACK_FRAME("openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_","boot",0xf2e8a515,"openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_.boot","openfl/desktop/ClipboardTransferMode.hx",9,0xf47f24ac)
HXLINE(   9)		ORIGINAL_PREFERRED = (int)3;
            	}
}

} // end namespace openfl
} // end namespace desktop
} // end namespace _ClipboardTransferMode
