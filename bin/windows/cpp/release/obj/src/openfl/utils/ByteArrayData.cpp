// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_lime_utils_compress_Deflate
#include <lime/utils/compress/Deflate.h>
#endif
#ifndef INCLUDED_lime_utils_compress_LZMA
#include <lime/utils/compress/LZMA.h>
#endif
#ifndef INCLUDED_lime_utils_compress_Zlib
#include <lime/utils/compress/Zlib.h>
#endif
#ifndef INCLUDED_openfl_errors_EOFError
#include <openfl/errors/EOFError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IOError
#include <openfl/errors/IOError.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace utils{

void ByteArrayData_obj::__construct(hx::Null< Int >  __o_length){
Int length = __o_length.Default(0);
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","new",0x36383a32,"openfl.utils.ByteArrayData.new","openfl/utils/ByteArray.hx",234,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
HXLINE( 236)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc(length);
HXLINE( 241)		super::__construct(length,bytes->b);
HXLINE( 244)		this->__length = length;
HXLINE( 245)		this->_hx___endian = (int)0;
HXLINE( 246)		this->position = (int)0;
            	}

Dynamic ByteArrayData_obj::__CreateEmpty() { return new ByteArrayData_obj; }

hx::ObjectPtr< ByteArrayData_obj > ByteArrayData_obj::__new(hx::Null< Int >  __o_length)
{
	hx::ObjectPtr< ByteArrayData_obj > _hx_result = new ByteArrayData_obj();
	_hx_result->__construct(__o_length);
	return _hx_result;
}

Dynamic ByteArrayData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ByteArrayData_obj > _hx_result = new ByteArrayData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::openfl::utils::IDataOutput_obj _hx_openfl_utils_ByteArrayData__hx_openfl_utils_IDataOutput= {
	(  ::Dynamic (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::get_endian,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::openfl::utils::ByteArrayData_obj::set_endian,
	( void (hx::Object::*)(Bool))&::openfl::utils::ByteArrayData_obj::writeBoolean,
	( void (hx::Object::*)(Int))&::openfl::utils::ByteArrayData_obj::writeByte,
	( void (hx::Object::*)( ::openfl::utils::ByteArrayData,hx::Null< Int > ,hx::Null< Int > ))&::openfl::utils::ByteArrayData_obj::writeBytes,
	( void (hx::Object::*)(Float))&::openfl::utils::ByteArrayData_obj::writeDouble,
	( void (hx::Object::*)(Float))&::openfl::utils::ByteArrayData_obj::writeFloat,
	( void (hx::Object::*)(Int))&::openfl::utils::ByteArrayData_obj::writeInt,
	( void (hx::Object::*)(::String,::String))&::openfl::utils::ByteArrayData_obj::writeMultiByte,
	( void (hx::Object::*)(Int))&::openfl::utils::ByteArrayData_obj::writeShort,
	( void (hx::Object::*)(::String))&::openfl::utils::ByteArrayData_obj::writeUTF,
	( void (hx::Object::*)(::String))&::openfl::utils::ByteArrayData_obj::writeUTFBytes,
	( void (hx::Object::*)(Int))&::openfl::utils::ByteArrayData_obj::writeUnsignedInt,
};

static ::openfl::utils::IDataInput_obj _hx_openfl_utils_ByteArrayData__hx_openfl_utils_IDataInput= {
	( Int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::get_bytesAvailable,
	(  ::Dynamic (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::get_endian,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::openfl::utils::ByteArrayData_obj::set_endian,
	( Bool (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readBoolean,
	( Int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readByte,
	( void (hx::Object::*)( ::openfl::utils::ByteArrayData,hx::Null< Int > ,hx::Null< Int > ))&::openfl::utils::ByteArrayData_obj::readBytes,
	( Float (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readDouble,
	( Float (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readFloat,
	( Int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readInt,
	( ::String (hx::Object::*)(Int,::String))&::openfl::utils::ByteArrayData_obj::readMultiByte,
	( Int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readShort,
	( Int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readUnsignedByte,
	( Int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readUnsignedInt,
	( Int (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readUnsignedShort,
	( ::String (hx::Object::*)())&::openfl::utils::ByteArrayData_obj::readUTF,
	( ::String (hx::Object::*)(Int))&::openfl::utils::ByteArrayData_obj::readUTFBytes,
};

void *ByteArrayData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x948d2d33: return &_hx_openfl_utils_ByteArrayData__hx_openfl_utils_IDataOutput;
		case (int)0xbeb9f218: return &_hx_openfl_utils_ByteArrayData__hx_openfl_utils_IDataInput;
	}
	return super::_hx_getInterface(inHash);
}

void ByteArrayData_obj::clear(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","clear",0x0f8b73df,"openfl.utils.ByteArrayData.clear","openfl/utils/ByteArray.hx",251,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 253)		this->length = (int)0;
HXLINE( 254)		this->position = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,clear,(void))

void ByteArrayData_obj::compress( ::Dynamic __o_algorithm){
 ::Dynamic algorithm = __o_algorithm.Default(2);
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","compress",0xe3300490,"openfl.utils.ByteArrayData.compress","openfl/utils/ByteArray.hx",259,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(algorithm,"algorithm")
HXLINE( 274)		HX_VAR(  ::haxe::io::Bytes,bytes);
HXDLIN( 274)		 ::Dynamic _hx_switch_0 = algorithm;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 274)			bytes = ::lime::utils::compress::Deflate_obj::compress(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 274)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 274)			bytes = ::lime::utils::compress::LZMA_obj::compress(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 274)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE( 274)			bytes = ::lime::utils::compress::Zlib_obj::compress(hx::ObjectPtr<OBJ_>(this));
            		}
            		_hx_goto_0:;
HXLINE( 282)		Bool _hx_tmp = hx::IsNotNull( bytes );
HXDLIN( 282)		if (_hx_tmp) {
HXLINE( 284)			{
HXLINE( 284)				this->b = bytes->b;
HXDLIN( 284)				this->__length = bytes->length;
            			}
HXLINE( 286)			this->length = this->__length;
HXLINE( 287)			this->position = this->length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,compress,(void))

void ByteArrayData_obj::deflate(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","deflate",0x97ecc63d,"openfl.utils.ByteArrayData.deflate","openfl/utils/ByteArray.hx",296,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 296)		this->compress((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,deflate,(void))

void ByteArrayData_obj::inflate(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","inflate",0x010e5759,"openfl.utils.ByteArrayData.inflate","openfl/utils/ByteArray.hx",312,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 312)		this->uncompress((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,inflate,(void))

Bool ByteArrayData_obj::readBoolean(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readBoolean",0x98e809c4,"openfl.utils.ByteArrayData.readBoolean","openfl/utils/ByteArray.hx",319,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 319)		Bool _hx_tmp = (this->position < this->length);
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 321)			Int pos = this->position++;
HXDLIN( 321)			return (this->b->__get(pos) != (int)0);
            		}
            		else {
HXLINE( 325)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__new());
            		}
HXLINE( 319)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readBoolean,return )

Int ByteArrayData_obj::readByte(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readByte",0xc88bb66c,"openfl.utils.ByteArrayData.readByte","openfl/utils/ByteArray.hx",333,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 335)		HX_VARI( Int,value) = this->readUnsignedByte();
HXLINE( 337)		if ((((int)value & (int)(int)128) != (int)0)) {
HXLINE( 339)			return (value - (int)256);
            		}
            		else {
HXLINE( 343)			return value;
            		}
HXLINE( 337)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readByte,return )

void ByteArrayData_obj::readBytes( ::openfl::utils::ByteArrayData bytes,hx::Null< Int >  __o_offset,hx::Null< Int >  __o_length){
Int offset = __o_offset.Default(0);
Int length = __o_length.Default(0);
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readBytes",0xb1b3e887,"openfl.utils.ByteArrayData.readBytes","openfl/utils/ByteArray.hx",350,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(length,"length")
HXLINE( 352)		Bool _hx_tmp = (length == (int)0);
HXDLIN( 352)		if (_hx_tmp) {
HXLINE( 352)			length = (this->length - this->position);
            		}
HXLINE( 354)		Bool _hx_tmp1 = ((this->position + length) > this->length);
HXDLIN( 354)		if (_hx_tmp1) {
HXLINE( 356)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__new());
            		}
HXLINE( 360)		Bool _hx_tmp2 = (bytes->length < (offset + length));
HXDLIN( 360)		if (_hx_tmp2) {
HXLINE( 362)			bytes->_hx___resize((offset + length));
            		}
HXLINE( 366)		bytes->blit(offset,hx::ObjectPtr<OBJ_>(this),this->position,length);
HXLINE( 367)		hx::AddEq(this->position,length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ByteArrayData_obj,readBytes,(void))

Float ByteArrayData_obj::readDouble(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readDouble",0xd7136375,"openfl.utils.ByteArrayData.readDouble","openfl/utils/ByteArray.hx",372,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 374)		Bool _hx_tmp = ((this->position + (int)8) > this->length);
HXDLIN( 374)		if (_hx_tmp) {
HXLINE( 376)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__new());
            		}
HXLINE( 380)		hx::AddEq(this->position,(int)8);
HXLINE( 381)		HX_VARI( Int,pos) = (this->position - (int)8);
HXDLIN( 381)		Bool _hx_tmp1;
HXDLIN( 381)		if ((pos >= (int)0)) {
HXLINE( 381)			_hx_tmp1 = ((pos + (int)8) > this->length);
            		}
            		else {
HXLINE( 381)			_hx_tmp1 = true;
            		}
HXDLIN( 381)		if (_hx_tmp1) {
HXLINE( 381)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXDLIN( 381)		return ::__hxcpp_memory_get_double(this->b,pos);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readDouble,return )

Float ByteArrayData_obj::readFloat(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readFloat",0xf6b2a5b8,"openfl.utils.ByteArrayData.readFloat","openfl/utils/ByteArray.hx",386,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 388)		Bool _hx_tmp = ((this->position + (int)4) > this->length);
HXDLIN( 388)		if (_hx_tmp) {
HXLINE( 390)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__new());
            		}
HXLINE( 394)		hx::AddEq(this->position,(int)4);
HXLINE( 395)		HX_VARI( Int,pos) = (this->position - (int)4);
HXDLIN( 395)		Bool _hx_tmp1;
HXDLIN( 395)		if ((pos >= (int)0)) {
HXLINE( 395)			_hx_tmp1 = ((pos + (int)4) > this->length);
            		}
            		else {
HXLINE( 395)			_hx_tmp1 = true;
            		}
HXDLIN( 395)		if (_hx_tmp1) {
HXLINE( 395)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXDLIN( 395)		return ::__hxcpp_memory_get_float(this->b,pos);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readFloat,return )

Int ByteArrayData_obj::readInt(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readInt",0xf7bc6e0b,"openfl.utils.ByteArrayData.readInt","openfl/utils/ByteArray.hx",400,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 402)		HX_VARI( Int,ch1) = this->readUnsignedByte();
HXLINE( 403)		HX_VARI( Int,ch2) = this->readUnsignedByte();
HXLINE( 404)		HX_VARI( Int,ch3) = this->readUnsignedByte();
HXLINE( 405)		HX_VARI( Int,ch4) = this->readUnsignedByte();
HXLINE( 407)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 409)			return ((int)((int)((int)((int)ch4 << (int)(int)24) | (int)((int)ch3 << (int)(int)16)) | (int)((int)ch2 << (int)(int)8)) | (int)ch1);
            		}
            		else {
HXLINE( 413)			return ((int)((int)((int)((int)ch1 << (int)(int)24) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch3 << (int)(int)8)) | (int)ch4);
            		}
HXLINE( 407)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readInt,return )

::String ByteArrayData_obj::readMultiByte(Int length,::String charSet){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readMultiByte",0x011f243d,"openfl.utils.ByteArrayData.readMultiByte","openfl/utils/ByteArray.hx",422,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(charSet,"charSet")
HXLINE( 422)		return this->readUTFBytes(length);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ByteArrayData_obj,readMultiByte,return )

Int ByteArrayData_obj::readShort(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readShort",0x70436498,"openfl.utils.ByteArrayData.readShort","openfl/utils/ByteArray.hx",427,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 429)		HX_VARI( Int,ch1) = this->readUnsignedByte();
HXLINE( 430)		HX_VARI( Int,ch2) = this->readUnsignedByte();
HXLINE( 432)		HX_VAR( Int,value);
HXLINE( 434)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 436)			value = ((int)((int)ch2 << (int)(int)8) | (int)ch1);
            		}
            		else {
HXLINE( 440)			value = ((int)((int)ch1 << (int)(int)8) | (int)ch2);
            		}
HXLINE( 444)		if ((((int)value & (int)(int)32768) != (int)0)) {
HXLINE( 446)			return (value - (int)65536);
            		}
            		else {
HXLINE( 450)			return value;
            		}
HXLINE( 444)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readShort,return )

Int ByteArrayData_obj::readUnsignedByte(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readUnsignedByte",0x50ca6601,"openfl.utils.ByteArrayData.readUnsignedByte","openfl/utils/ByteArray.hx",459,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 459)		Bool _hx_tmp = (this->position < this->length);
HXDLIN( 459)		if (_hx_tmp) {
HXLINE( 461)			Int pos = this->position++;
HXDLIN( 461)			return this->b->__get(pos);
            		}
            		else {
HXLINE( 465)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__new());
            		}
HXLINE( 459)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readUnsignedByte,return )

Int ByteArrayData_obj::readUnsignedInt(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readUnsignedInt",0xac948816,"openfl.utils.ByteArrayData.readUnsignedInt","openfl/utils/ByteArray.hx",473,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 475)		HX_VARI( Int,ch1) = this->readUnsignedByte();
HXLINE( 476)		HX_VARI( Int,ch2) = this->readUnsignedByte();
HXLINE( 477)		HX_VARI( Int,ch3) = this->readUnsignedByte();
HXLINE( 478)		HX_VARI( Int,ch4) = this->readUnsignedByte();
HXLINE( 480)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 482)			return ((int)((int)((int)((int)ch4 << (int)(int)24) | (int)((int)ch3 << (int)(int)16)) | (int)((int)ch2 << (int)(int)8)) | (int)ch1);
            		}
            		else {
HXLINE( 486)			return ((int)((int)((int)((int)ch1 << (int)(int)24) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch3 << (int)(int)8)) | (int)ch4);
            		}
HXLINE( 480)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readUnsignedInt,return )

Int ByteArrayData_obj::readUnsignedShort(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readUnsignedShort",0x1ede5763,"openfl.utils.ByteArrayData.readUnsignedShort","openfl/utils/ByteArray.hx",493,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 495)		HX_VARI( Int,ch1) = this->readUnsignedByte();
HXLINE( 496)		HX_VARI( Int,ch2) = this->readUnsignedByte();
HXLINE( 498)		if (hx::IsEq( this->_hx___endian,(int)1 )) {
HXLINE( 500)			return (((int)ch2 << (int)(int)8) + ch1);
            		}
            		else {
HXLINE( 504)			return ((int)((int)ch1 << (int)(int)8) | (int)ch2);
            		}
HXLINE( 498)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readUnsignedShort,return )

::String ByteArrayData_obj::readUTF(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readUTF",0xf7c57243,"openfl.utils.ByteArrayData.readUTF","openfl/utils/ByteArray.hx",511,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 513)		HX_VARI( Int,bytesCount) = this->readUnsignedShort();
HXLINE( 514)		return this->readUTFBytes(bytesCount);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,readUTF,return )

::String ByteArrayData_obj::readUTFBytes(Int length){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","readUTFBytes",0x87ebf328,"openfl.utils.ByteArrayData.readUTFBytes","openfl/utils/ByteArray.hx",519,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
HXLINE( 521)		Bool _hx_tmp = ((this->position + length) > this->length);
HXDLIN( 521)		if (_hx_tmp) {
HXLINE( 523)			HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__new());
            		}
HXLINE( 527)		hx::AddEq(this->position,length);
HXLINE( 529)		Int _hx_tmp1 = (this->position - length);
HXDLIN( 529)		return this->getString(_hx_tmp1,length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,readUTFBytes,return )

void ByteArrayData_obj::uncompress( ::Dynamic __o_algorithm){
 ::Dynamic algorithm = __o_algorithm.Default(2);
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","uncompress",0xb44f8369,"openfl.utils.ByteArrayData.uncompress","openfl/utils/ByteArray.hx",534,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(algorithm,"algorithm")
HXLINE( 549)		HX_VAR(  ::haxe::io::Bytes,bytes);
HXDLIN( 549)		 ::Dynamic _hx_switch_0 = algorithm;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 549)			bytes = ::lime::utils::compress::Deflate_obj::decompress(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 549)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 549)			bytes = ::lime::utils::compress::LZMA_obj::decompress(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 549)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE( 549)			bytes = ::lime::utils::compress::Zlib_obj::decompress(hx::ObjectPtr<OBJ_>(this));
            		}
            		_hx_goto_1:;
HXLINE( 557)		Bool _hx_tmp = hx::IsNotNull( bytes );
HXDLIN( 557)		if (_hx_tmp) {
HXLINE( 559)			{
HXLINE( 559)				this->b = bytes->b;
HXDLIN( 559)				this->__length = bytes->length;
            			}
HXLINE( 561)			this->length = this->__length;
HXLINE( 562)			this->position = this->__length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,uncompress,(void))

void ByteArrayData_obj::writeBoolean(Bool value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeBoolean",0x790a5b77,"openfl.utils.ByteArrayData.writeBoolean","openfl/utils/ByteArray.hx",571,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 571)		Int _hx_tmp;
HXDLIN( 571)		if (value) {
HXLINE( 571)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE( 571)			_hx_tmp = (int)0;
            		}
HXDLIN( 571)		this->writeByte(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeBoolean,(void))

void ByteArrayData_obj::writeByte(Int value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeByte",0x6d0ba6d9,"openfl.utils.ByteArrayData.writeByte","openfl/utils/ByteArray.hx",576,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 578)		Int _hx_tmp = (this->position + (int)1);
HXDLIN( 578)		this->_hx___resize(_hx_tmp);
HXLINE( 579)		{
HXLINE( 579)			Int pos = this->position++;
HXDLIN( 579)			this->b[pos] = ((int)value & (int)(int)255);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeByte,(void))

void ByteArrayData_obj::writeBytes( ::openfl::utils::ByteArrayData bytes,hx::Null< Int >  __o_offset,hx::Null< Int >  __o_length){
Int offset = __o_offset.Default(0);
Int length = __o_length.Default(0);
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeBytes",0xfd26577a,"openfl.utils.ByteArrayData.writeBytes","openfl/utils/ByteArray.hx",584,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(length,"length")
HXLINE( 586)		if ((::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes) == (int)0)) {
HXLINE( 586)			return;
            		}
HXLINE( 587)		Bool _hx_tmp = (length == (int)0);
HXDLIN( 587)		if (_hx_tmp) {
HXLINE( 587)			length = (::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes) - offset);
            		}
HXLINE( 589)		Int _hx_tmp1 = (this->position + length);
HXDLIN( 589)		this->_hx___resize(_hx_tmp1);
HXLINE( 590)		this->blit(this->position,bytes,offset,length);
HXLINE( 592)		Int _hx_tmp2 = (this->position + length);
HXDLIN( 592)		this->position = _hx_tmp2;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ByteArrayData_obj,writeBytes,(void))

void ByteArrayData_obj::writeDouble(Float value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeDouble",0x8fc20922,"openfl.utils.ByteArrayData.writeDouble","openfl/utils/ByteArray.hx",597,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 599)		Int _hx_tmp = (this->position + (int)8);
HXDLIN( 599)		this->_hx___resize(_hx_tmp);
HXLINE( 600)		this->setDouble(this->position,value);
HXLINE( 601)		hx::AddEq(this->position,(int)8);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeDouble,(void))

void ByteArrayData_obj::writeFloat(Float value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeFloat",0x422514ab,"openfl.utils.ByteArrayData.writeFloat","openfl/utils/ByteArray.hx",606,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 608)		Int _hx_tmp = (this->position + (int)4);
HXDLIN( 608)		this->_hx___resize(_hx_tmp);
HXLINE( 609)		this->setFloat(this->position,value);
HXLINE( 610)		hx::AddEq(this->position,(int)4);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeFloat,(void))

void ByteArrayData_obj::writeInt(Int value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeInt",0x83612a3e,"openfl.utils.ByteArrayData.writeInt","openfl/utils/ByteArray.hx",615,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 617)		Int _hx_tmp = (this->position + (int)4);
HXDLIN( 617)		this->_hx___resize(_hx_tmp);
HXLINE( 619)		Bool _hx_tmp1 = hx::IsEq( this->_hx___endian,(int)1 );
HXDLIN( 619)		if (_hx_tmp1) {
HXLINE( 621)			{
HXLINE( 621)				Int pos = this->position++;
HXDLIN( 621)				this->b[pos] = value;
            			}
HXLINE( 622)			{
HXLINE( 622)				Int pos1 = this->position++;
HXDLIN( 622)				this->b[pos1] = ((int)value >> (int)(int)8);
            			}
HXLINE( 623)			{
HXLINE( 623)				Int pos2 = this->position++;
HXDLIN( 623)				this->b[pos2] = ((int)value >> (int)(int)16);
            			}
HXLINE( 624)			{
HXLINE( 624)				Int pos3 = this->position++;
HXDLIN( 624)				this->b[pos3] = ((int)value >> (int)(int)24);
            			}
            		}
            		else {
HXLINE( 628)			{
HXLINE( 628)				Int pos4 = this->position++;
HXDLIN( 628)				this->b[pos4] = ((int)value >> (int)(int)24);
            			}
HXLINE( 629)			{
HXLINE( 629)				Int pos5 = this->position++;
HXDLIN( 629)				this->b[pos5] = ((int)value >> (int)(int)16);
            			}
HXLINE( 630)			{
HXLINE( 630)				Int pos6 = this->position++;
HXDLIN( 630)				this->b[pos6] = ((int)value >> (int)(int)8);
            			}
HXLINE( 631)			{
HXLINE( 631)				Int pos7 = this->position++;
HXDLIN( 631)				this->b[pos7] = value;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeInt,(void))

void ByteArrayData_obj::writeMultiByte(::String value,::String charSet){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeMultiByte",0xebbf88b0,"openfl.utils.ByteArrayData.writeMultiByte","openfl/utils/ByteArray.hx",640,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(charSet,"charSet")
HXLINE( 640)		this->writeUTFBytes(value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ByteArrayData_obj,writeMultiByte,(void))

void ByteArrayData_obj::writeShort(Int value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeShort",0xbbb5d38b,"openfl.utils.ByteArrayData.writeShort","openfl/utils/ByteArray.hx",645,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 647)		Int _hx_tmp = (this->position + (int)2);
HXDLIN( 647)		this->_hx___resize(_hx_tmp);
HXLINE( 649)		Bool _hx_tmp1 = hx::IsEq( this->_hx___endian,(int)1 );
HXDLIN( 649)		if (_hx_tmp1) {
HXLINE( 651)			{
HXLINE( 651)				Int pos = this->position++;
HXDLIN( 651)				this->b[pos] = value;
            			}
HXLINE( 652)			{
HXLINE( 652)				Int pos1 = this->position++;
HXDLIN( 652)				this->b[pos1] = ((int)value >> (int)(int)8);
            			}
            		}
            		else {
HXLINE( 656)			{
HXLINE( 656)				Int pos2 = this->position++;
HXDLIN( 656)				this->b[pos2] = ((int)value >> (int)(int)8);
            			}
HXLINE( 657)			{
HXLINE( 657)				Int pos3 = this->position++;
HXDLIN( 657)				this->b[pos3] = value;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeShort,(void))

void ByteArrayData_obj::writeUnsignedInt(Int value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeUnsignedInt",0xcb6d2f49,"openfl.utils.ByteArrayData.writeUnsignedInt","openfl/utils/ByteArray.hx",666,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 666)		this->writeInt(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeUnsignedInt,(void))

void ByteArrayData_obj::writeUTF(::String value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeUTF",0x836a2e76,"openfl.utils.ByteArrayData.writeUTF","openfl/utils/ByteArray.hx",671,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 673)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::ofString(value);
HXLINE( 675)		this->writeShort(bytes->length);
HXLINE( 676)		this->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(bytes),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeUTF,(void))

void ByteArrayData_obj::writeUTFBytes(::String value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","writeUTFBytes",0xc5d11e15,"openfl.utils.ByteArrayData.writeUTFBytes","openfl/utils/ByteArray.hx",684,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 684)		this->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(::haxe::io::Bytes_obj::ofString(value)),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,writeUTFBytes,(void))

void ByteArrayData_obj::_hx___fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","__fromBytes",0x684ac753,"openfl.utils.ByteArrayData.__fromBytes","openfl/utils/ByteArray.hx",689,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 691)		{
HXLINE( 691)			this->b = bytes->b;
HXDLIN( 691)			this->__length = bytes->length;
            		}
HXLINE( 692)		this->length = bytes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,_hx___fromBytes,(void))

void ByteArrayData_obj::_hx___resize(Int size){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","__resize",0x101b8202,"openfl.utils.ByteArrayData.__resize","openfl/utils/ByteArray.hx",697,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
HXLINE( 699)		Bool _hx_tmp = (size > this->__length);
HXDLIN( 699)		if (_hx_tmp) {
HXLINE( 701)			HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc(((int)((size + (int)1) * (int)3) >> (int)(int)1));
HXLINE( 702)			HX_VARI( Int,cacheLength) = this->length;
HXLINE( 703)			this->length = this->__length;
HXLINE( 704)			bytes->blit((int)0,hx::ObjectPtr<OBJ_>(this),(int)0,this->__length);
HXLINE( 705)			this->length = cacheLength;
HXLINE( 706)			{
HXLINE( 706)				this->b = bytes->b;
HXDLIN( 706)				this->__length = bytes->length;
            			}
            		}
HXLINE( 710)		Bool _hx_tmp1 = (this->length < size);
HXDLIN( 710)		if (_hx_tmp1) {
HXLINE( 712)			this->length = size;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,_hx___resize,(void))

void ByteArrayData_obj::_hx___setData( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","__setData",0xac6a7b1e,"openfl.utils.ByteArrayData.__setData","openfl/utils/ByteArray.hx",719,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 721)		this->b = bytes->b;
HXLINE( 722)		this->__length = bytes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,_hx___setData,(void))

Int ByteArrayData_obj::get_bytesAvailable(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","get_bytesAvailable",0x68329f15,"openfl.utils.ByteArrayData.get_bytesAvailable","openfl/utils/ByteArray.hx",740,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 740)		return (this->length - this->position);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,get_bytesAvailable,return )

 ::Dynamic ByteArrayData_obj::get_endian(){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","get_endian",0x95dc5cd2,"openfl.utils.ByteArrayData.get_endian","openfl/utils/ByteArray.hx",747,0xaa5cee4a)
            	HX_STACK_THIS(this)
HXLINE( 747)		return this->_hx___endian;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ByteArrayData_obj,get_endian,return )

 ::Dynamic ByteArrayData_obj::set_endian( ::Dynamic value){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","set_endian",0x9959fb46,"openfl.utils.ByteArrayData.set_endian","openfl/utils/ByteArray.hx",754,0xaa5cee4a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 754)		return (this->_hx___endian = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,set_endian,return )

 ::openfl::utils::ByteArrayData ByteArrayData_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("openfl.utils.ByteArrayData","fromBytes",0x955585f3,"openfl.utils.ByteArrayData.fromBytes","openfl/utils/ByteArray.hx",301,0xaa5cee4a)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 303)		HX_VARI(  ::openfl::utils::ByteArrayData,result) =  ::openfl::utils::ByteArrayData_obj::__new(null());
HXLINE( 304)		result->_hx___fromBytes(bytes);
HXLINE( 305)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ByteArrayData_obj,fromBytes,return )


ByteArrayData_obj::ByteArrayData_obj()
{
}

void ByteArrayData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ByteArrayData);
	HX_MARK_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(_hx___endian,"__endian");
	HX_MARK_MEMBER_NAME(__length,"__length");
	 ::haxe::io::Bytes_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ByteArrayData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(_hx___endian,"__endian");
	HX_VISIT_MEMBER_NAME(__length,"__length");
	 ::haxe::io::Bytes_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ByteArrayData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"endian") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_endian()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"deflate") ) { return hx::Val( deflate_dyn()); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return hx::Val( inflate_dyn()); }
		if (HX_FIELD_EQ(inName,"readInt") ) { return hx::Val( readInt_dyn()); }
		if (HX_FIELD_EQ(inName,"readUTF") ) { return hx::Val( readUTF_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position); }
		if (HX_FIELD_EQ(inName,"__endian") ) { return hx::Val( _hx___endian); }
		if (HX_FIELD_EQ(inName,"__length") ) { return hx::Val( __length); }
		if (HX_FIELD_EQ(inName,"compress") ) { return hx::Val( compress_dyn()); }
		if (HX_FIELD_EQ(inName,"readByte") ) { return hx::Val( readByte_dyn()); }
		if (HX_FIELD_EQ(inName,"writeInt") ) { return hx::Val( writeInt_dyn()); }
		if (HX_FIELD_EQ(inName,"writeUTF") ) { return hx::Val( writeUTF_dyn()); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"readFloat") ) { return hx::Val( readFloat_dyn()); }
		if (HX_FIELD_EQ(inName,"readShort") ) { return hx::Val( readShort_dyn()); }
		if (HX_FIELD_EQ(inName,"writeByte") ) { return hx::Val( writeByte_dyn()); }
		if (HX_FIELD_EQ(inName,"__setData") ) { return hx::Val( _hx___setData_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readDouble") ) { return hx::Val( readDouble_dyn()); }
		if (HX_FIELD_EQ(inName,"uncompress") ) { return hx::Val( uncompress_dyn()); }
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return hx::Val( writeBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"writeFloat") ) { return hx::Val( writeFloat_dyn()); }
		if (HX_FIELD_EQ(inName,"writeShort") ) { return hx::Val( writeShort_dyn()); }
		if (HX_FIELD_EQ(inName,"get_endian") ) { return hx::Val( get_endian_dyn()); }
		if (HX_FIELD_EQ(inName,"set_endian") ) { return hx::Val( set_endian_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"readBoolean") ) { return hx::Val( readBoolean_dyn()); }
		if (HX_FIELD_EQ(inName,"writeDouble") ) { return hx::Val( writeDouble_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"readUTFBytes") ) { return hx::Val( readUTFBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"writeBoolean") ) { return hx::Val( writeBoolean_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readMultiByte") ) { return hx::Val( readMultiByte_dyn()); }
		if (HX_FIELD_EQ(inName,"writeUTFBytes") ) { return hx::Val( writeUTFBytes_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bytesAvailable") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bytesAvailable()); }
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { return hx::Val( objectEncoding); }
		if (HX_FIELD_EQ(inName,"writeMultiByte") ) { return hx::Val( writeMultiByte_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"readUnsignedInt") ) { return hx::Val( readUnsignedInt_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"readUnsignedByte") ) { return hx::Val( readUnsignedByte_dyn()); }
		if (HX_FIELD_EQ(inName,"writeUnsignedInt") ) { return hx::Val( writeUnsignedInt_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"readUnsignedShort") ) { return hx::Val( readUnsignedShort_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_bytesAvailable") ) { return hx::Val( get_bytesAvailable_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ByteArrayData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
	}
	return false;
}

hx::Val ByteArrayData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"endian") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_endian(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__endian") ) { _hx___endian=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__length") ) { __length=inValue.Cast< Int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { objectEncoding=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ByteArrayData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bytesAvailable","\xde","\x4b","\x9d","\x9b"));
	outFields->push(HX_HCSTRING("endian","\x9b","\x98","\x88","\xfa"));
	outFields->push(HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2"));
	outFields->push(HX_HCSTRING("__length","\x06","\x00","\x37","\x47"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ByteArrayData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ByteArrayData_obj,objectEncoding),HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a")},
	{hx::fsInt,(int)offsetof(ByteArrayData_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ByteArrayData_obj,_hx___endian),HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2")},
	{hx::fsInt,(int)offsetof(ByteArrayData_obj,__length),HX_HCSTRING("__length","\x06","\x00","\x37","\x47")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ByteArrayData_obj_sStaticStorageInfo = 0;
#endif

static ::String ByteArrayData_obj_sMemberFields[] = {
	HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2"),
	HX_HCSTRING("__length","\x06","\x00","\x37","\x47"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("compress","\xa2","\x47","\xbf","\x83"),
	HX_HCSTRING("deflate","\x6b","\x0b","\xfa","\xa2"),
	HX_HCSTRING("inflate","\x87","\x9c","\x1b","\x0c"),
	HX_HCSTRING("readBoolean","\xf2","\x7d","\xea","\xd0"),
	HX_HCSTRING("readByte","\x7e","\xf9","\x1a","\x69"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	HX_HCSTRING("readDouble","\x07","\x0f","\x47","\x2c"),
	HX_HCSTRING("readFloat","\x66","\x12","\x7e","\xd3"),
	HX_HCSTRING("readInt","\x39","\xb3","\xc9","\x02"),
	HX_HCSTRING("readMultiByte","\xeb","\x7f","\xc9","\x15"),
	HX_HCSTRING("readShort","\x46","\xd1","\x0e","\x4d"),
	HX_HCSTRING("readUnsignedByte","\x13","\x0b","\xce","\x9b"),
	HX_HCSTRING("readUnsignedInt","\x44","\xab","\x4f","\x05"),
	HX_HCSTRING("readUnsignedShort","\x11","\x22","\x0b","\x77"),
	HX_HCSTRING("readUTF","\x71","\xb7","\xd2","\x02"),
	HX_HCSTRING("readUTFBytes","\x3a","\x27","\x0f","\x52"),
	HX_HCSTRING("uncompress","\xfb","\x2e","\x83","\x09"),
	HX_HCSTRING("writeBoolean","\x89","\x8f","\x2d","\x43"),
	HX_HCSTRING("writeByte","\x87","\x13","\xd7","\x49"),
	HX_HCSTRING("writeBytes","\x0c","\x03","\x5a","\x52"),
	HX_HCSTRING("writeDouble","\x50","\x7d","\xc4","\xc7"),
	HX_HCSTRING("writeFloat","\x3d","\xc0","\x58","\x97"),
	HX_HCSTRING("writeInt","\x50","\x6d","\xf0","\x23"),
	HX_HCSTRING("writeMultiByte","\x42","\x65","\x25","\xec"),
	HX_HCSTRING("writeShort","\x1d","\x7f","\xe9","\x10"),
	HX_HCSTRING("writeUnsignedInt","\x5b","\xd4","\x70","\x16"),
	HX_HCSTRING("writeUTF","\x88","\x71","\xf9","\x23"),
	HX_HCSTRING("writeUTFBytes","\xc3","\x79","\x7b","\xda"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__setData","\xcc","\xe7","\x35","\x89"),
	HX_HCSTRING("get_bytesAvailable","\xa7","\x2c","\x37","\x37"),
	HX_HCSTRING("get_endian","\x64","\x08","\x10","\xeb"),
	HX_HCSTRING("set_endian","\xd8","\xa6","\x8d","\xee"),
	::String(null()) };

static void ByteArrayData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ByteArrayData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ByteArrayData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ByteArrayData_obj::__mClass,"__mClass");
};

#endif

hx::Class ByteArrayData_obj::__mClass;

static ::String ByteArrayData_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	::String(null())
};

void ByteArrayData_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.utils.ByteArrayData","\x40","\xf9","\x66","\x4c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ByteArrayData_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ByteArrayData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ByteArrayData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ByteArrayData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ByteArrayData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ByteArrayData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ByteArrayData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ByteArrayData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace utils
