// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif

namespace openfl{
namespace _Vector{

void IntVector_obj::__construct( ::Dynamic length, ::Dynamic fixed,::Array< Int > array){
            	HX_STACK_FRAME("openfl._Vector.IntVector","new",0x6313ae9a,"openfl._Vector.IntVector.new","openfl/Vector.hx",1149,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(fixed,"fixed")
            	HX_STACK_ARG(array,"array")
HXLINE(1151)		Bool _hx_tmp = hx::IsNull( array );
HXDLIN(1151)		if (_hx_tmp) {
HXLINE(1153)			array = ::Array_obj< Int >::__new();
            		}
HXLINE(1157)		this->_hx___array = array;
HXLINE(1159)		Bool _hx_tmp1 = hx::IsNotNull( length );
HXDLIN(1159)		if (_hx_tmp1) {
HXLINE(1161)			this->set_length(length);
            		}
HXLINE(1165)		this->fixed = hx::IsEq( fixed,true );
            	}

Dynamic IntVector_obj::__CreateEmpty() { return new IntVector_obj; }

hx::ObjectPtr< IntVector_obj > IntVector_obj::__new( ::Dynamic length, ::Dynamic fixed,::Array< Int > array)
{
	hx::ObjectPtr< IntVector_obj > _hx_result = new IntVector_obj();
	_hx_result->__construct(length,fixed,array);
	return _hx_result;
}

Dynamic IntVector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IntVector_obj > _hx_result = new IntVector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

static ::openfl::_Vector::IVector_obj _hx_openfl__Vector_IntVector__hx_openfl__Vector_IVector= {
	( Int (hx::Object::*)())&::openfl::_Vector::IntVector_obj::get_length,
	( Int (hx::Object::*)(Int))&::openfl::_Vector::IntVector_obj::set_length,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::openfl::_Vector::IntVector_obj::concat,
	( ::Dynamic (hx::Object::*)())&::openfl::_Vector::IntVector_obj::copy,
	(  ::Dynamic (hx::Object::*)(Int))&::openfl::_Vector::IntVector_obj::get_57ed5e34,
	( Int (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::IntVector_obj::indexOf_12fde4d1,
	( void (hx::Object::*)(Int, ::Dynamic))&::openfl::_Vector::IntVector_obj::insertAt_771a7002,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::IntVector_obj::iterator,
	( ::String (hx::Object::*)(::String))&::openfl::_Vector::IntVector_obj::join,
	( Int (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::IntVector_obj::lastIndexOf_12fde4d1,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::IntVector_obj::pop,
	( Int (hx::Object::*)( ::Dynamic))&::openfl::_Vector::IntVector_obj::push_b160819a,
	( void (hx::Object::*)())&::openfl::_Vector::IntVector_obj::reverse,
	(  ::Dynamic (hx::Object::*)(Int, ::Dynamic))&::openfl::_Vector::IntVector_obj::set_2f4e7a77,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::IntVector_obj::shift,
	( ::Dynamic (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::IntVector_obj::slice,
	( void (hx::Object::*)( ::Dynamic))&::openfl::_Vector::IntVector_obj::sort,
	( ::Dynamic (hx::Object::*)(Int,Int))&::openfl::_Vector::IntVector_obj::splice,
	( ::String (hx::Object::*)())&::openfl::_Vector::IntVector_obj::toString,
	( void (hx::Object::*)( ::Dynamic))&::openfl::_Vector::IntVector_obj::unshift_489e4d05,
};

void IntVector_obj::unshift_489e4d05( ::Dynamic x) {
			unshift(x);
}

 ::Dynamic IntVector_obj::set_2f4e7a77(Int index, ::Dynamic value) {
			return set(index,value);
}

Int IntVector_obj::push_b160819a( ::Dynamic x) {
			return push(x);
}

Int IntVector_obj::lastIndexOf_12fde4d1( ::Dynamic x, ::Dynamic from) {
			return lastIndexOf(x,from);
}

void IntVector_obj::insertAt_771a7002(Int index, ::Dynamic element) {
			insertAt(index,element);
}

Int IntVector_obj::indexOf_12fde4d1( ::Dynamic x, ::Dynamic from) {
			return indexOf(x,from);
}

 ::Dynamic IntVector_obj::get_57ed5e34(Int index) {
			return get(index);
}
void *IntVector_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x45e7caba: return &_hx_openfl__Vector_IntVector__hx_openfl__Vector_IVector;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic IntVector_obj::concat(::Dynamic a){
            	HX_STACK_FRAME("openfl._Vector.IntVector","concat",0x4a254b1a,"openfl._Vector.IntVector.concat","openfl/Vector.hx",1172,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(1172)		Bool _hx_tmp = hx::IsNull( a );
HXDLIN(1172)		if (_hx_tmp) {
HXLINE(1174)			::Array< Int > _hx_tmp1 = this->_hx___array->copy();
HXDLIN(1174)			return  ::openfl::_Vector::IntVector_obj::__new(null(),null(),_hx_tmp1);
            		}
            		else {
HXLINE(1178)			::Array< Int > _hx_tmp2 = this->_hx___array->concat(hx::TCast<  ::openfl::_Vector::IntVector >::cast(a)->_hx___array);
HXDLIN(1178)			return  ::openfl::_Vector::IntVector_obj::__new(null(),null(),_hx_tmp2);
            		}
HXLINE(1172)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntVector_obj,concat,return )

::Dynamic IntVector_obj::copy(){
            	HX_STACK_FRAME("openfl._Vector.IntVector","copy",0x46e7503b,"openfl._Vector.IntVector.copy","openfl/Vector.hx",1187,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1187)		Bool _hx_tmp = this->fixed;
HXDLIN(1187)		::Array< Int > _hx_tmp1 = this->_hx___array->copy();
HXDLIN(1187)		return  ::openfl::_Vector::IntVector_obj::__new(null(),_hx_tmp,_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntVector_obj,copy,return )

Int IntVector_obj::get(Int index){
            	HX_STACK_FRAME("openfl._Vector.IntVector","get",0x630e5ed0,"openfl._Vector.IntVector.get","openfl/Vector.hx",1194,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(1194)		return this->_hx___array->__get(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntVector_obj,get,return )

Int IntVector_obj::indexOf(Int x, ::Dynamic __o_from){
 ::Dynamic from = __o_from.Default(0);
            	HX_STACK_FRAME("openfl._Vector.IntVector","indexOf",0x6903cc03,"openfl._Vector.IntVector.indexOf","openfl/Vector.hx",1199,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(from,"from")
HXLINE(1201)		{
HXLINE(1201)			HX_VARI( Int,_g1) = from;
HXDLIN(1201)			HX_VARI( Int,_g) = this->_hx___array->length;
HXDLIN(1201)			while((_g1 < _g)){
HXLINE(1201)				HX_VARI( Int,i) = _g1++;
HXLINE(1203)				if ((this->_hx___array->__get(i) == x)) {
HXLINE(1205)					return i;
            				}
            			}
            		}
HXLINE(1211)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntVector_obj,indexOf,return )

void IntVector_obj::insertAt(Int index,Int element){
            	HX_STACK_FRAME("openfl._Vector.IntVector","insertAt",0x75cdcc12,"openfl._Vector.IntVector.insertAt","openfl/Vector.hx",1218,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(element,"element")
HXLINE(1218)		Bool _hx_tmp;
HXDLIN(1218)		if (!(!(this->fixed))) {
HXLINE(1218)			_hx_tmp = (index < this->_hx___array->length);
            		}
            		else {
HXLINE(1218)			_hx_tmp = true;
            		}
HXDLIN(1218)		if (_hx_tmp) {
HXLINE(1220)			this->_hx___array->insert(index,element);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntVector_obj,insertAt,(void))

 ::Dynamic IntVector_obj::iterator(){
            	HX_STACK_FRAME("openfl._Vector.IntVector","iterator",0x47489974,"openfl._Vector.IntVector.iterator","openfl/Vector.hx",1229,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1229)		return this->_hx___array->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntVector_obj,iterator,return )

::String IntVector_obj::join(::String sep){
            	HX_STACK_FRAME("openfl._Vector.IntVector","join",0x4b87c870,"openfl._Vector.IntVector.join","openfl/Vector.hx",1236,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sep,"sep")
HXLINE(1236)		return this->_hx___array->join(sep);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntVector_obj,join,return )

Int IntVector_obj::lastIndexOf(Int x, ::Dynamic __o_from){
 ::Dynamic from = __o_from.Default(0);
            	HX_STACK_FRAME("openfl._Vector.IntVector","lastIndexOf",0x72eaa54d,"openfl._Vector.IntVector.lastIndexOf","openfl/Vector.hx",1241,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(from,"from")
HXLINE(1243)		HX_VARI( Int,i) = (this->_hx___array->length - (int)1);
HXLINE(1245)		while(hx::IsGreaterEq( i,from )){
HXLINE(1247)			if ((this->_hx___array->__get(i) == x)) {
HXLINE(1247)				return i;
            			}
HXLINE(1248)			--i;
            		}
HXLINE(1252)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntVector_obj,lastIndexOf,return )

 ::Dynamic IntVector_obj::pop(){
            	HX_STACK_FRAME("openfl._Vector.IntVector","pop",0x63153bcb,"openfl._Vector.IntVector.pop","openfl/Vector.hx",1259,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1259)		Bool _hx_tmp = !(this->fixed);
HXDLIN(1259)		if (_hx_tmp) {
HXLINE(1261)			return this->_hx___array->pop();
            		}
            		else {
HXLINE(1265)			return null();
            		}
HXLINE(1259)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntVector_obj,pop,return )

Int IntVector_obj::push(Int x){
            	HX_STACK_FRAME("openfl._Vector.IntVector","push",0x4f83a660,"openfl._Vector.IntVector.push","openfl/Vector.hx",1274,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1274)		Bool _hx_tmp = !(this->fixed);
HXDLIN(1274)		if (_hx_tmp) {
HXLINE(1276)			return this->_hx___array->push(x);
            		}
            		else {
HXLINE(1280)			return this->_hx___array->length;
            		}
HXLINE(1274)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntVector_obj,push,return )

void IntVector_obj::reverse(){
            	HX_STACK_FRAME("openfl._Vector.IntVector","reverse",0xa340bc5c,"openfl._Vector.IntVector.reverse","openfl/Vector.hx",1289,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1289)		this->_hx___array->reverse();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntVector_obj,reverse,(void))

Int IntVector_obj::set(Int index,Int value){
            	HX_STACK_FRAME("openfl._Vector.IntVector","set",0x631779dc,"openfl._Vector.IntVector.set","openfl/Vector.hx",1296,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(value,"value")
HXLINE(1296)		Bool _hx_tmp;
HXDLIN(1296)		if (!(!(this->fixed))) {
HXLINE(1296)			_hx_tmp = (index < this->_hx___array->length);
            		}
            		else {
HXLINE(1296)			_hx_tmp = true;
            		}
HXDLIN(1296)		if (_hx_tmp) {
HXLINE(1298)			return (this->_hx___array[index] = value);
            		}
            		else {
HXLINE(1302)			return value;
            		}
HXLINE(1296)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntVector_obj,set,return )

 ::Dynamic IntVector_obj::shift(){
            	HX_STACK_FRAME("openfl._Vector.IntVector","shift",0xf5424d3c,"openfl._Vector.IntVector.shift","openfl/Vector.hx",1311,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1311)		Bool _hx_tmp = !(this->fixed);
HXDLIN(1311)		if (_hx_tmp) {
HXLINE(1313)			return this->_hx___array->shift();
            		}
            		else {
HXLINE(1317)			return null();
            		}
HXLINE(1311)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntVector_obj,shift,return )

::Dynamic IntVector_obj::slice( ::Dynamic __o_startIndex, ::Dynamic __o_endIndex){
 ::Dynamic startIndex = __o_startIndex.Default(0);
 ::Dynamic endIndex = __o_endIndex.Default(16777215);
            	HX_STACK_FRAME("openfl._Vector.IntVector","slice",0xf7e7250c,"openfl._Vector.IntVector.slice","openfl/Vector.hx",1326,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(startIndex,"startIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE(1326)		::Array< Int > _hx_tmp = this->_hx___array->slice(startIndex,endIndex);
HXDLIN(1326)		return  ::openfl::_Vector::IntVector_obj::__new(null(),null(),_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntVector_obj,slice,return )

void IntVector_obj::sort( ::Dynamic f){
            	HX_STACK_FRAME("openfl._Vector.IntVector","sort",0x517abbe4,"openfl._Vector.IntVector.sort","openfl/Vector.hx",1333,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
HXLINE(1333)		this->_hx___array->sort(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntVector_obj,sort,(void))

::Dynamic IntVector_obj::splice(Int pos,Int len){
            	HX_STACK_FRAME("openfl._Vector.IntVector","splice",0x41f3c782,"openfl._Vector.IntVector.splice","openfl/Vector.hx",1340,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE(1340)		::Array< Int > _hx_tmp = this->_hx___array->splice(pos,len);
HXDLIN(1340)		return  ::openfl::_Vector::IntVector_obj::__new(null(),null(),_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntVector_obj,splice,return )

::String IntVector_obj::toString(){
            	HX_STACK_FRAME("openfl._Vector.IntVector","toString",0xec1d2032,"openfl._Vector.IntVector.toString","openfl/Vector.hx",1347,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1347)		return this->_hx___array->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntVector_obj,toString,return )

void IntVector_obj::unshift(Int x){
            	HX_STACK_FRAME("openfl._Vector.IntVector","unshift",0x00f866c3,"openfl._Vector.IntVector.unshift","openfl/Vector.hx",1354,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1354)		Bool _hx_tmp = !(this->fixed);
HXDLIN(1354)		if (_hx_tmp) {
HXLINE(1356)			this->_hx___array->unshift(x);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntVector_obj,unshift,(void))

Int IntVector_obj::get_length(){
            	HX_STACK_FRAME("openfl._Vector.IntVector","get_length",0x4714c1b5,"openfl._Vector.IntVector.get_length","openfl/Vector.hx",1372,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1372)		return this->_hx___array->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntVector_obj,get_length,return )

Int IntVector_obj::set_length(Int value){
            	HX_STACK_FRAME("openfl._Vector.IntVector","set_length",0x4a926029,"openfl._Vector.IntVector.set_length","openfl/Vector.hx",1377,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1379)		Bool _hx_tmp = !(this->fixed);
HXDLIN(1379)		if (_hx_tmp) {
HXLINE(1383)			_hx_array_set_size_exact(this->_hx___array,value);
            		}
HXLINE(1412)		return this->_hx___array->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntVector_obj,set_length,return )


IntVector_obj::IntVector_obj()
{
}

void IntVector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IntVector);
	HX_MARK_MEMBER_NAME(fixed,"fixed");
	HX_MARK_MEMBER_NAME(_hx___array,"__array");
	HX_MARK_END_CLASS();
}

void IntVector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixed,"fixed");
	HX_VISIT_MEMBER_NAME(_hx___array,"__array");
}

hx::Val IntVector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"join") ) { return hx::Val( join_dyn()); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { return hx::Val( fixed); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn()); }
		if (HX_FIELD_EQ(inName,"slice") ) { return hx::Val( slice_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { return hx::Val( _hx___array); }
		if (HX_FIELD_EQ(inName,"indexOf") ) { return hx::Val( indexOf_dyn()); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"insertAt") ) { return hx::Val( insertAt_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { return hx::Val( lastIndexOf_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IntVector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { fixed=inValue.Cast< Bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { _hx___array=inValue.Cast< ::Array< Int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IntVector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IntVector_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(IntVector_obj,fixed),HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntVector_obj,_hx___array),HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IntVector_obj_sStaticStorageInfo = 0;
#endif

static ::String IntVector_obj_sMemberFields[] = {
	HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"),
	HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("insertAt","\x8c","\x7c","\x1f","\xc2"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("join","\xea","\x33","\x65","\x46"),
	HX_HCSTRING("lastIndexOf","\x13","\xfd","\x6a","\x95"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("slice","\x52","\xc4","\xc7","\x7e"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	::String(null()) };

static void IntVector_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IntVector_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IntVector_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IntVector_obj::__mClass,"__mClass");
};

#endif

hx::Class IntVector_obj::__mClass;

void IntVector_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._Vector.IntVector","\xa8","\x19","\x86","\x49");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IntVector_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IntVector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IntVector_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IntVector_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntVector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntVector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _Vector
