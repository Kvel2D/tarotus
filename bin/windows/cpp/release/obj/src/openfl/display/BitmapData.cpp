// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoBlendModeManager
#include <openfl/_internal/renderer/cairo/CairoBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoMaskManager
#include <openfl/_internal/renderer/cairo/CairoMaskManager.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace display{

void BitmapData_obj::__construct(Int width,Int height,hx::Null< Bool >  __o_transparent,hx::Null< Int >  __o_fillColor){
Bool transparent = __o_transparent.Default(true);
Int fillColor = __o_fillColor.Default(-1);
            	HX_STACK_FRAME("openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",84,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(transparent,"transparent")
            	HX_STACK_ARG(fillColor,"fillColor")
HXLINE(  86)		this->transparent = transparent;
HXLINE(  93)		Bool _hx_tmp = (width < (int)0);
HXDLIN(  93)		if (_hx_tmp) {
HXLINE(  93)			width = (int)0;
            		}
            		else {
HXLINE(  93)			width = width;
            		}
HXLINE(  94)		Bool _hx_tmp1 = (height < (int)0);
HXDLIN(  94)		if (_hx_tmp1) {
HXLINE(  94)			height = (int)0;
            		}
            		else {
HXLINE(  94)			height = height;
            		}
HXLINE(  96)		this->width = width;
HXLINE(  97)		this->height = height;
HXLINE(  98)		this->rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,width,height);
HXLINE( 100)		Bool _hx_tmp2;
HXDLIN( 100)		if ((width > (int)0)) {
HXLINE( 100)			_hx_tmp2 = (height > (int)0);
            		}
            		else {
HXLINE( 100)			_hx_tmp2 = false;
            		}
HXDLIN( 100)		if (_hx_tmp2) {
HXLINE( 102)			if (transparent) {
HXLINE( 104)				Bool _hx_tmp3 = (((int)fillColor & (int)(int)-16777216) == (int)0);
HXDLIN( 104)				if (_hx_tmp3) {
HXLINE( 106)					fillColor = (int)0;
            				}
            			}
            			else {
HXLINE( 112)				fillColor = ((int)(int)-16777216 | (int)((int)fillColor & (int)(int)16777215));
            			}
HXLINE( 116)			fillColor = ((int)((int)fillColor << (int)(int)8) | (int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255));
HXLINE( 119)			HX_VARI(  ::Dynamic,elements) = ((width * height) * (int)4);
HXDLIN( 119)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 119)			Bool _hx_tmp4 = hx::IsNotNull( elements );
HXDLIN( 119)			if (_hx_tmp4) {
HXLINE( 119)				this1 =  ::lime::utils::ArrayBufferView_obj::__new(elements,(int)4);
            			}
            			else {
HXLINE( 119)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 119)			HX_VARI(  ::lime::graphics::ImageBuffer,buffer) =  ::lime::graphics::ImageBuffer_obj::__new(this1,width,height,null(),null());
HXLINE( 120)			buffer->format = (int)2;
HXLINE( 121)			buffer->premultiplied = true;
HXLINE( 123)			this->image =  ::lime::graphics::Image_obj::__new(buffer,(int)0,(int)0,width,height,null(),null());
HXLINE( 125)			if ((fillColor != (int)0)) {
HXLINE( 127)				 ::lime::math::Rectangle _hx_tmp5 = this->image->get_rect();
HXDLIN( 127)				this->image->fillRect(_hx_tmp5,fillColor,null());
            			}
HXLINE( 134)			this->image->set_transparent(transparent);
HXLINE( 135)			this->_hx___isValid = true;
            		}
HXLINE( 139)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 140)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(Int width,Int height,hx::Null< Bool >  __o_transparent,hx::Null< Int >  __o_fillColor)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(width,height,__o_transparent,__o_fillColor);
	return _hx_result;
}

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderGL,
	( void (hx::Object::*)(Bool))&::openfl::display::BitmapData_obj::_hx___updateChildren,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___updateTransforms,
	( void (hx::Object::*)( ::openfl::display::Graphics))&::openfl::display::BitmapData_obj::_hx___updateMask,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::filters::BitmapFilter filter){
            	HX_STACK_FRAME("openfl.display.BitmapData","applyFilter",0xfbb98d7b,"openfl.display.BitmapData.applyFilter","openfl/display/BitmapData.hx",145,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 147)		Bool _hx_tmp;
HXDLIN( 147)		Bool _hx_tmp1;
HXDLIN( 147)		if (!(!(this->_hx___isValid))) {
HXLINE( 147)			_hx_tmp1 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 147)			_hx_tmp1 = true;
            		}
HXDLIN( 147)		if (!(_hx_tmp1)) {
HXLINE( 147)			_hx_tmp = !(sourceBitmapData->_hx___isValid);
            		}
            		else {
HXLINE( 147)			_hx_tmp = true;
            		}
HXDLIN( 147)		if (_hx_tmp) {
HXLINE( 147)			return;
            		}
HXLINE( 149)		filter->_hx___applyFilter(sourceBitmapData,hx::ObjectPtr<OBJ_>(this),sourceRect,destPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_STACK_FRAME("openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",156,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 156)		Bool _hx_tmp = !(this->_hx___isValid);
HXDLIN( 156)		if (_hx_tmp) {
HXLINE( 158)			return  ::openfl::display::BitmapData_obj::__new(this->width,this->height,this->transparent,null());
            		}
            		else {
HXLINE( 162)			 ::lime::graphics::Image _hx_tmp1 = this->image->clone();
HXDLIN( 162)			return ::openfl::display::BitmapData_obj::fromImage(_hx_tmp1,this->transparent);
            		}
HXLINE( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACK_FRAME("openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",169,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorTransform,"colorTransform")
HXLINE( 171)		if (!(this->_hx___isValid)) {
HXLINE( 171)			return;
            		}
HXLINE( 173)		 ::lime::math::Rectangle _hx_tmp = rect->_hx___toLimeRectangle();
HXDLIN( 173)		 ::lime::utils::ArrayBufferView _hx_tmp1 = colorTransform->_hx___toLimeColorMatrix();
HXDLIN( 173)		this->image->colorTransform(_hx_tmp,_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

 ::Dynamic BitmapData_obj::compare( ::openfl::display::BitmapData otherBitmapData){
            	HX_STACK_FRAME("openfl.display.BitmapData","compare",0x56d287da,"openfl.display.BitmapData.compare","openfl/display/BitmapData.hx",178,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(otherBitmapData,"otherBitmapData")
HXLINE( 180)		if (hx::IsEq( otherBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 182)			return (int)0;
            		}
            		else {
HXLINE( 184)			Bool _hx_tmp = hx::IsNull( otherBitmapData );
HXDLIN( 184)			if (_hx_tmp) {
HXLINE( 186)				return (int)-1;
            			}
            			else {
HXLINE( 188)				Bool _hx_tmp1;
HXDLIN( 188)				if ((this->_hx___isValid != false)) {
HXLINE( 188)					_hx_tmp1 = (otherBitmapData->_hx___isValid == false);
            				}
            				else {
HXLINE( 188)					_hx_tmp1 = true;
            				}
HXDLIN( 188)				if (_hx_tmp1) {
HXLINE( 190)					return (int)-2;
            				}
            				else {
HXLINE( 192)					if ((this->width != otherBitmapData->width)) {
HXLINE( 194)						return (int)-3;
            					}
            					else {
HXLINE( 196)						if ((this->height != otherBitmapData->height)) {
HXLINE( 198)							return (int)-4;
            						}
            					}
            				}
            			}
            		}
HXLINE( 202)		Bool _hx_tmp2;
HXDLIN( 202)		Bool _hx_tmp3;
HXDLIN( 202)		Bool _hx_tmp4 = hx::IsNotNull( this->image );
HXDLIN( 202)		if (_hx_tmp4) {
HXLINE( 202)			_hx_tmp3 = hx::IsNotNull( otherBitmapData->image );
            		}
            		else {
HXLINE( 202)			_hx_tmp3 = false;
            		}
HXDLIN( 202)		if (_hx_tmp3) {
HXLINE( 202)			Int _hx_tmp5 = this->image->get_format();
HXDLIN( 202)			Int _hx_tmp6 = otherBitmapData->image->get_format();
HXDLIN( 202)			_hx_tmp2 = (_hx_tmp5 == _hx_tmp6);
            		}
            		else {
HXLINE( 202)			_hx_tmp2 = false;
            		}
HXDLIN( 202)		if (_hx_tmp2) {
HXLINE( 204)			HX_VARI(  ::lime::utils::ArrayBufferView,bytes) = this->image->get_data();
HXLINE( 205)			HX_VARI(  ::lime::utils::ArrayBufferView,otherBytes) = otherBitmapData->image->get_data();
HXLINE( 206)			HX_VARI( Bool,equal) = true;
HXLINE( 208)			{
HXLINE( 208)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 208)				HX_VARI( Int,_g) = bytes->length;
HXDLIN( 208)				while((_g1 < _g)){
HXLINE( 208)					HX_VARI( Int,i) = _g1++;
HXLINE( 210)					Int byteOffset = (bytes->byteOffset + i);
HXDLIN( 210)					Int _hx_tmp7 = ::__hxcpp_memory_get_byte(bytes->buffer->b,byteOffset);
HXDLIN( 210)					Int a = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN( 210)					Int byteOffset1 = (otherBytes->byteOffset + i);
HXDLIN( 210)					Int _hx_tmp8 = ::__hxcpp_memory_get_byte(otherBytes->buffer->b,byteOffset1);
HXDLIN( 210)					if (hx::IsNotEq( a,((int)_hx_tmp8 & (int)(int)255) )) {
HXLINE( 212)						equal = false;
HXLINE( 213)						goto _hx_goto_0;
            					}
            				}
            				_hx_goto_0:;
            			}
HXLINE( 218)			if (equal) {
HXLINE( 220)				return (int)0;
            			}
            		}
HXLINE( 226)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) = null();
HXLINE( 227)		HX_VAR( Bool,foundDifference);
HXDLIN( 227)		HX_VAR( Int,pixel);
HXDLIN( 227)		HX_VAR( Int,otherPixel);
HXDLIN( 227)		HX_VAR( Int,comparePixel);
HXDLIN( 227)		HX_VAR( Int,r);
HXDLIN( 227)		HX_VAR( Int,g);
HXDLIN( 227)		HX_VAR( Int,b);
HXDLIN( 227)		HX_VAR_NAME( Int,a1,"a");
HXLINE( 229)		{
HXLINE( 229)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 229)			HX_VARI_NAME( Int,_g2,"_g") = this->height;
HXDLIN( 229)			while((_g11 < _g2)){
HXLINE( 229)				HX_VARI( Int,y) = _g11++;
HXLINE( 231)				{
HXLINE( 231)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 231)					HX_VARI_NAME( Int,_g21,"_g2") = this->width;
HXDLIN( 231)					while((_g3 < _g21)){
HXLINE( 231)						HX_VARI( Int,x) = _g3++;
HXLINE( 233)						foundDifference = false;
HXLINE( 235)						pixel = this->getPixel32(x,y);
HXLINE( 236)						otherPixel = otherBitmapData->getPixel32(x,y);
HXLINE( 237)						comparePixel = (int)0;
HXLINE( 239)						if ((pixel != otherPixel)) {
HXLINE( 241)							r = (((int)((int)pixel >> (int)(int)16) & (int)(int)255) - ((int)((int)otherPixel >> (int)(int)16) & (int)(int)255));
HXLINE( 242)							g = (((int)((int)pixel >> (int)(int)8) & (int)(int)255) - ((int)((int)otherPixel >> (int)(int)8) & (int)(int)255));
HXLINE( 243)							b = (((int)pixel & (int)(int)255) - ((int)otherPixel & (int)(int)255));
HXLINE( 245)							Bool _hx_tmp9 = (r < (int)0);
HXDLIN( 245)							if (_hx_tmp9) {
HXLINE( 245)								hx::MultEq(r,(int)-1);
            							}
HXLINE( 246)							Bool _hx_tmp10 = (g < (int)0);
HXDLIN( 246)							if (_hx_tmp10) {
HXLINE( 246)								hx::MultEq(g,(int)-1);
            							}
HXLINE( 247)							Bool _hx_tmp11 = (b < (int)0);
HXDLIN( 247)							if (_hx_tmp11) {
HXLINE( 247)								hx::MultEq(b,(int)-1);
            							}
HXLINE( 249)							Bool _hx_tmp12;
HXDLIN( 249)							Bool _hx_tmp13;
HXDLIN( 249)							if ((r == (int)0)) {
HXLINE( 249)								_hx_tmp13 = (g == (int)0);
            							}
            							else {
HXLINE( 249)								_hx_tmp13 = false;
            							}
HXDLIN( 249)							if (_hx_tmp13) {
HXLINE( 249)								_hx_tmp12 = (b == (int)0);
            							}
            							else {
HXLINE( 249)								_hx_tmp12 = false;
            							}
HXDLIN( 249)							if (_hx_tmp12) {
HXLINE( 251)								a1 = (((int)((int)pixel >> (int)(int)24) & (int)(int)255) - ((int)((int)otherPixel >> (int)(int)24) & (int)(int)255));
HXLINE( 253)								if ((a1 != (int)0)) {
HXLINE( 255)									comparePixel = (int)16711680;
HXLINE( 256)									comparePixel = (int)16776960;
HXLINE( 257)									comparePixel = (int)16777215;
HXLINE( 258)									comparePixel = ((int)((int)((int)((int)((int)a1 & (int)(int)255) << (int)(int)24) | (int)(int)16711680) | (int)(int)65280) | (int)(int)255);
HXLINE( 260)									foundDifference = true;
            								}
            							}
            							else {
HXLINE( 266)								comparePixel = ((int)((int)((int)(int)0 | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)(int)0) | (int)(int)0);
HXLINE( 267)								{
HXLINE( 267)									Int _hx_tmp14 = ((int)((int)((int)((int)((int)((int)comparePixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)comparePixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8));
HXDLIN( 267)									Int _hx_tmp15 = ((int)((int)comparePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 267)									comparePixel = ((int)_hx_tmp14 | (int)_hx_tmp15);
            								}
HXLINE( 268)								{
HXLINE( 268)									Int _hx_tmp16 = ((int)((int)((int)((int)((int)comparePixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)comparePixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN( 268)									Int _hx_tmp17 = ((int)((int)((int)((int)comparePixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN( 268)									comparePixel = ((int)((int)_hx_tmp16 | (int)_hx_tmp17) | (int)((int)b & (int)(int)255));
            								}
HXLINE( 269)								{
HXLINE( 269)									Int _hx_tmp18 = ((int)((int)(int)-16777216 | (int)((int)((int)((int)((int)comparePixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)comparePixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 269)									Int _hx_tmp19 = ((int)((int)comparePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 269)									comparePixel = ((int)_hx_tmp18 | (int)_hx_tmp19);
            								}
HXLINE( 271)								foundDifference = true;
            							}
            						}
HXLINE( 277)						if (foundDifference) {
HXLINE( 279)							Bool _hx_tmp20 = hx::IsNull( bitmapData );
HXDLIN( 279)							if (_hx_tmp20) {
HXLINE( 281)								Bool _hx_tmp21;
HXDLIN( 281)								if (!(this->transparent)) {
HXLINE( 281)									_hx_tmp21 = otherBitmapData->transparent;
            								}
            								else {
HXLINE( 281)									_hx_tmp21 = true;
            								}
HXDLIN( 281)								bitmapData =  ::openfl::display::BitmapData_obj::__new(this->width,this->height,_hx_tmp21,(int)0);
            							}
HXLINE( 285)							bitmapData->setPixel32(x,y,comparePixel);
            						}
            					}
            				}
            			}
            		}
HXLINE( 293)		Bool _hx_tmp22 = hx::IsNull( bitmapData );
HXDLIN( 293)		if (_hx_tmp22) {
HXLINE( 295)			return (int)0;
            		}
HXLINE( 299)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,compare,return )

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,Int sourceChannel,Int destChannel){
            	HX_STACK_FRAME("openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",304,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(sourceChannel,"sourceChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE( 306)		if (!(this->_hx___isValid)) {
HXLINE( 306)			return;
            		}
HXLINE( 308)		HX_VAR_NAME( ::hx::EnumBase,sourceChannel1,"sourceChannel");
HXDLIN( 308)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 308)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 308)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 308)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 308)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 314)				return;
            			}
            		}
HXLINE( 318)		HX_VAR_NAME( ::hx::EnumBase,destChannel1,"destChannel");
HXDLIN( 318)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 318)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 318)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 318)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 318)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 324)				return;
            			}
            		}
HXLINE( 328)		 ::lime::math::Rectangle _hx_tmp = sourceRect->_hx___toLimeRectangle();
HXDLIN( 328)		 ::lime::math::Vector2 _hx_tmp1 = destPoint->_hx___toLimeVector2();
HXDLIN( 328)		this->image->copyChannel(sourceBitmapData->image,_hx_tmp,_hx_tmp1,sourceChannel1,destChannel1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,hx::Null< Bool >  __o_mergeAlpha){
Bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",333,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaBitmapData,"alphaBitmapData")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE( 335)		Bool _hx_tmp;
HXDLIN( 335)		if (!(!(this->_hx___isValid))) {
HXLINE( 335)			_hx_tmp = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 335)			_hx_tmp = true;
            		}
HXDLIN( 335)		if (_hx_tmp) {
HXLINE( 335)			return;
            		}
HXLINE( 337)		if (hx::IsEq( sourceBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 339)			sourceBitmapData = sourceBitmapData->clone();
            		}
HXLINE( 343)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 343)		 ::lime::math::Vector2 _hx_tmp2 = destPoint->_hx___toLimeVector2();
HXDLIN( 343)		 ::lime::graphics::Image _hx_tmp3;
HXDLIN( 343)		Bool _hx_tmp4 = hx::IsNotNull( alphaBitmapData );
HXDLIN( 343)		if (_hx_tmp4) {
HXLINE( 343)			_hx_tmp3 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 343)			_hx_tmp3 = null();
            		}
HXDLIN( 343)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 343)		Bool _hx_tmp6 = hx::IsNotNull( alphaPoint );
HXDLIN( 343)		if (_hx_tmp6) {
HXLINE( 343)			_hx_tmp5 = alphaPoint->_hx___toLimeVector2();
            		}
            		else {
HXLINE( 343)			_hx_tmp5 = null();
            		}
HXDLIN( 343)		this->image->copyPixels(sourceBitmapData->image,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp5,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACK_FRAME("openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",348,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 350)		this->image = null();
HXLINE( 352)		this->width = (int)0;
HXLINE( 353)		this->height = (int)0;
HXLINE( 354)		this->rect = null();
HXLINE( 355)		this->_hx___isValid = false;
HXLINE( 357)		Bool _hx_tmp = hx::IsNotNull( this->_hx___texture );
HXDLIN( 357)		if (_hx_tmp) {
HXLINE( 359)			HX_VARI(  ::openfl::_internal::renderer::AbstractRenderer,renderer) = ::openfl::Lib_obj::current->stage->_hx___renderer;
HXLINE( 361)			Bool _hx_tmp1 = hx::IsNotNull( renderer );
HXDLIN( 361)			if (_hx_tmp1) {
HXLINE( 366)				Bool _hx_tmp2 = hx::IsNotNull( renderer->renderSession->gl );
HXDLIN( 366)				if (_hx_tmp2) {
HXLINE( 368)					{
HXLINE( 368)						HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->_hx___texture;
HXDLIN( 368)						{
HXLINE( 368)							{
HXLINE( 368)								 ::Dynamic texture1 = texture->id;
HXDLIN( 368)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_texture(hx::DynamicPtr(texture1));
            							}
HXDLIN( 368)							texture->invalidate();
            						}
            					}
HXLINE( 369)					this->_hx___texture = null();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< Bool >  __o_smoothing){
Bool smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",380,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(colorTransform,"colorTransform")
            	HX_STACK_ARG(blendMode,"blendMode")
            	HX_STACK_ARG(clipRect,"clipRect")
            	HX_STACK_ARG(smoothing,"smoothing")
HXLINE( 382)		if (!(this->_hx___isValid)) {
HXLINE( 382)			return;
            		}
HXLINE( 450)		if (hx::IsEq( source,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 452)			source = this->clone();
            		}
HXLINE( 456)		Bool _hx_tmp = hx::IsNotNull( colorTransform );
HXDLIN( 456)		if (_hx_tmp) {
HXLINE( 458)			 ::Dynamic _hx_tmp1 = ::Reflect_obj::getProperty(source,HX_("width",06,b6,62,ca));
HXDLIN( 458)			 ::Dynamic _hx_tmp2 = ::Reflect_obj::getProperty(source,HX_("height",e7,07,4c,02));
HXDLIN( 458)			HX_VARI(  ::openfl::display::BitmapData,copy) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp1,_hx_tmp2,true,(int)0);
HXLINE( 459)			copy->draw(source,null(),null(),null(),null(),null());
HXLINE( 460)			copy->colorTransform(copy->rect,colorTransform);
HXLINE( 461)			source = copy;
            		}
HXLINE( 465)		HX_VARI(  ::Dynamic,surface) = this->getSurface();
HXLINE( 466)		HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) =  ::lime::graphics::cairo::Cairo_obj::__new(surface);
HXLINE( 468)		if (!(smoothing)) {
HXLINE( 470)			cairo->set_antialias((int)1);
            		}
HXLINE( 474)		HX_VARI(  ::openfl::_internal::renderer::RenderSession,renderSession) =  ::openfl::_internal::renderer::RenderSession_obj::__new();
HXLINE( 475)		renderSession->cairo = cairo;
HXLINE( 476)		renderSession->roundPixels = true;
HXLINE( 477)		renderSession->maskManager =  ::openfl::_internal::renderer::cairo::CairoMaskManager_obj::__new(renderSession);
HXLINE( 478)		renderSession->blendModeManager =  ::openfl::_internal::renderer::cairo::CairoBlendModeManager_obj::__new(renderSession);
HXLINE( 480)		Bool _hx_tmp3 = hx::IsNotNull( clipRect );
HXDLIN( 480)		if (_hx_tmp3) {
HXLINE( 482)			renderSession->maskManager->pushRect(clipRect, ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null()));
            		}
HXLINE( 486)		HX_VARI(  ::openfl::geom::Matrix,matrixCache) = ( ( ::openfl::geom::Matrix)(source->__Field(HX_("__worldTransform",da,a7,d8,9a),hx::paccDynamic)) );
HXLINE( 487)		 ::openfl::geom::Matrix _hx_tmp4;
HXDLIN( 487)		Bool _hx_tmp5 = hx::IsNotNull( matrix );
HXDLIN( 487)		if (_hx_tmp5) {
HXLINE( 487)			_hx_tmp4 = matrix;
            		}
            		else {
HXLINE( 487)			_hx_tmp4 =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXDLIN( 487)		::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,_hx_tmp4);
HXLINE( 488)		::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,false);
HXLINE( 489)		::openfl::display::IBitmapDrawable_obj::_hx___renderCairo(source,renderSession);
HXLINE( 490)		::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrixCache);
HXLINE( 491)		::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,true);
HXLINE( 493)		Bool _hx_tmp6 = hx::IsNotNull( clipRect );
HXDLIN( 493)		if (_hx_tmp6) {
HXLINE( 495)			renderSession->maskManager->popRect();
            		}
HXLINE( 499)		::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(surface);
HXLINE( 501)		this->image->dirty = true;
HXLINE( 502)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::drawWithQuality(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< Bool >  __o_smoothing, ::Dynamic quality){
Bool smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","drawWithQuality",0xabf0f1ea,"openfl.display.BitmapData.drawWithQuality","openfl/display/BitmapData.hx",511,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(colorTransform,"colorTransform")
            	HX_STACK_ARG(blendMode,"blendMode")
            	HX_STACK_ARG(clipRect,"clipRect")
            	HX_STACK_ARG(smoothing,"smoothing")
            	HX_STACK_ARG(quality,"quality")
HXLINE( 511)		this->draw(source,matrix,colorTransform,blendMode,clipRect,smoothing);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,drawWithQuality,(void))

 ::openfl::utils::ByteArrayData BitmapData_obj::encode( ::openfl::geom::Rectangle rect, ::Dynamic compressor, ::openfl::utils::ByteArrayData byteArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","encode",0x09c32081,"openfl.display.BitmapData.encode","openfl/display/BitmapData.hx",516,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(compressor,"compressor")
            	HX_STACK_ARG(byteArray,"byteArray")
HXLINE( 520)		Bool _hx_tmp;
HXDLIN( 520)		if (!(!(this->_hx___isValid))) {
HXLINE( 520)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 520)			_hx_tmp = true;
            		}
HXDLIN( 520)		if (_hx_tmp) {
HXLINE( 520)			byteArray = null();
HXDLIN( 520)			return byteArray;
            		}
HXLINE( 522)		Bool _hx_tmp1 = ::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::PNGEncoderOptions >());
HXDLIN( 522)		if (_hx_tmp1) {
HXLINE( 524)			 ::haxe::io::Bytes _hx_tmp2 = this->image->encode(HX_("png",a9,5c,55,00),null());
HXDLIN( 524)			byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp2);
HXDLIN( 524)			return byteArray;
            		}
            		else {
HXLINE( 526)			Bool _hx_tmp3 = ::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >());
HXDLIN( 526)			if (_hx_tmp3) {
HXLINE( 528)				 ::haxe::io::Bytes _hx_tmp4 = this->image->encode(HX_("jpg",e1,d0,50,00),hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressor)->quality);
HXDLIN( 528)				byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp4);
HXDLIN( 528)				return byteArray;
            			}
            		}
HXLINE( 532)		byteArray = null();
HXDLIN( 532)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",537,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(color,"color")
HXLINE( 539)		Bool _hx_tmp;
HXDLIN( 539)		if (!(!(this->_hx___isValid))) {
HXLINE( 539)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 539)			_hx_tmp = true;
            		}
HXDLIN( 539)		if (_hx_tmp) {
HXLINE( 539)			return;
            		}
HXLINE( 541)		Bool _hx_tmp1;
HXDLIN( 541)		if (this->transparent) {
HXLINE( 541)			_hx_tmp1 = (((int)color & (int)(int)-16777216) == (int)0);
            		}
            		else {
HXLINE( 541)			_hx_tmp1 = false;
            		}
HXDLIN( 541)		if (_hx_tmp1) {
HXLINE( 543)			color = (int)0;
            		}
HXLINE( 547)		 ::lime::math::Rectangle _hx_tmp2 = rect->_hx___toLimeRectangle();
HXDLIN( 547)		this->image->fillRect(_hx_tmp2,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::floodFill(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","floodFill",0xed95e9d6,"openfl.display.BitmapData.floodFill","openfl/display/BitmapData.hx",552,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE( 554)		if (!(this->_hx___isValid)) {
HXLINE( 554)			return;
            		}
HXLINE( 555)		this->image->floodFill(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::geom::Rectangle sourceRect, ::openfl::filters::BitmapFilter filter){
            	HX_STACK_FRAME("openfl.display.BitmapData","generateFilterRect",0x1ef8cf7c,"openfl.display.BitmapData.generateFilterRect","openfl/display/BitmapData.hx",615,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 615)		return sourceRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::lime::graphics::opengl::GLBuffer BitmapData_obj::getBuffer( ::lime::graphics::GLRenderContext gl,Float alpha){
            	HX_STACK_FRAME("openfl.display.BitmapData","getBuffer",0xe0f6acab,"openfl.display.BitmapData.getBuffer","openfl/display/BitmapData.hx",620,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 622)		Bool _hx_tmp = hx::IsNull( this->_hx___buffer );
HXDLIN( 622)		if (_hx_tmp) {
HXLINE( 624)			HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(24)->init(0,this->width)->init(1,this->height)->init(2,(int)0)->init(3,(int)1)->init(4,(int)1)->init(5,alpha)->init(6,(int)0)->init(7,this->height)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,alpha)->init(12,this->width)->init(13,(int)0)->init(14,(int)0)->init(15,(int)1)->init(16,(int)0)->init(17,alpha)->init(18,(int)0)->init(19,(int)0)->init(20,(int)0)->init(21,(int)0)->init(22,(int)0)->init(23,alpha);
HXDLIN( 624)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 624)			Bool _hx_tmp1 = hx::IsNotNull( array );
HXDLIN( 624)			if (_hx_tmp1) {
HXLINE( 624)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 624)				_this->byteOffset = (int)0;
HXDLIN( 624)				_this->length = array->get_length();
HXDLIN( 624)				Int _hx_tmp2 = (_this->length * _this->bytesPerElement);
HXDLIN( 624)				_this->byteLength = _hx_tmp2;
HXDLIN( 624)				Int byteLength = _this->byteLength;
HXDLIN( 624)				HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 624)				_this->buffer = this2;
HXDLIN( 624)				_this->copyFromArray(array,null());
HXDLIN( 624)				this1 = _this;
            			}
            			else {
HXLINE( 624)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 624)			this->_hx___bufferData = this1;
HXLINE( 633)			this->_hx___bufferAlpha = alpha;
HXLINE( 634)			Int _hx_tmp3 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 634)			 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN( 634)			 ::Dynamic _hx_tmp4 = Dynamic(hx::DynamicPtr(inVal));
HXDLIN( 634)			this->_hx___buffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp3,_hx_tmp4);
HXLINE( 636)			{
HXLINE( 636)				Int target = gl->ARRAY_BUFFER;
HXDLIN( 636)				HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->_hx___buffer;
HXDLIN( 636)				{
HXLINE( 636)					 ::Dynamic buffer1;
HXDLIN( 636)					Bool _hx_tmp5 = hx::IsNull( buffer );
HXDLIN( 636)					if (_hx_tmp5) {
HXLINE( 636)						buffer1 = null();
            					}
            					else {
HXLINE( 636)						buffer1 = buffer->id;
            					}
HXDLIN( 636)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,hx::DynamicPtr(buffer1));
            				}
            			}
HXLINE( 637)			{
HXLINE( 637)				Int target1 = gl->ARRAY_BUFFER;
HXDLIN( 637)				HX_VARI(  ::lime::utils::ArrayBufferView,data) = this->_hx___bufferData;
HXDLIN( 637)				Int usage = gl->STATIC_DRAW;
HXDLIN( 637)				{
HXLINE( 637)					Int byteOffset = data->byteOffset;
HXDLIN( 637)					Int size = data->byteLength;
HXDLIN( 637)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target1,hx::DynamicPtr(data->buffer),byteOffset,size,usage);
            				}
            			}
            		}
            		else {
HXLINE( 640)			Bool _hx_tmp6 = (this->_hx___bufferAlpha != alpha);
HXDLIN( 640)			if (_hx_tmp6) {
HXLINE( 642)				{
HXLINE( 642)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = this->_hx___bufferData;
HXDLIN( 642)					{
HXLINE( 642)						Int byteOffset1 = (this3->byteOffset + (int)20);
HXDLIN( 642)						::__hxcpp_memory_set_float(this3->buffer->b,byteOffset1,alpha);
            					}
            				}
HXLINE( 643)				{
HXLINE( 643)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = this->_hx___bufferData;
HXDLIN( 643)					{
HXLINE( 643)						Int byteOffset2 = (this4->byteOffset + (int)44);
HXDLIN( 643)						::__hxcpp_memory_set_float(this4->buffer->b,byteOffset2,alpha);
            					}
            				}
HXLINE( 644)				{
HXLINE( 644)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = this->_hx___bufferData;
HXDLIN( 644)					{
HXLINE( 644)						Int byteOffset3 = (this5->byteOffset + (int)68);
HXDLIN( 644)						::__hxcpp_memory_set_float(this5->buffer->b,byteOffset3,alpha);
            					}
            				}
HXLINE( 645)				{
HXLINE( 645)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = this->_hx___bufferData;
HXDLIN( 645)					{
HXLINE( 645)						Int byteOffset4 = (this6->byteOffset + (int)92);
HXDLIN( 645)						::__hxcpp_memory_set_float(this6->buffer->b,byteOffset4,alpha);
            					}
            				}
HXLINE( 646)				this->_hx___bufferAlpha = alpha;
HXLINE( 648)				{
HXLINE( 648)					Int target2 = gl->ARRAY_BUFFER;
HXDLIN( 648)					HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer2,"buffer") = this->_hx___buffer;
HXDLIN( 648)					{
HXLINE( 648)						 ::Dynamic buffer3;
HXDLIN( 648)						Bool _hx_tmp7 = hx::IsNull( buffer2 );
HXDLIN( 648)						if (_hx_tmp7) {
HXLINE( 648)							buffer3 = null();
            						}
            						else {
HXLINE( 648)							buffer3 = buffer2->id;
            						}
HXDLIN( 648)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target2,hx::DynamicPtr(buffer3));
            					}
            				}
HXLINE( 649)				{
HXLINE( 649)					Int target3 = gl->ARRAY_BUFFER;
HXDLIN( 649)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,data1,"data") = this->_hx___bufferData;
HXDLIN( 649)					Int usage1 = gl->STATIC_DRAW;
HXDLIN( 649)					{
HXLINE( 649)						Int byteOffset5 = data1->byteOffset;
HXDLIN( 649)						Int size1 = data1->byteLength;
HXDLIN( 649)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target3,hx::DynamicPtr(data1->buffer),byteOffset5,size1,usage1);
            					}
            				}
            			}
            		}
HXLINE( 653)		return this->_hx___buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getBuffer,return )

 ::openfl::geom::Rectangle BitmapData_obj::getColorBoundsRect(Int mask,Int color,hx::Null< Bool >  __o_findColor){
Bool findColor = __o_findColor.Default(true);
            	HX_STACK_FRAME("openfl.display.BitmapData","getColorBoundsRect",0x21495071,"openfl.display.BitmapData.getColorBoundsRect","openfl/display/BitmapData.hx",658,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(findColor,"findColor")
HXLINE( 660)		if (!(this->_hx___isValid)) {
HXLINE( 660)			return  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,this->width,this->height);
            		}
HXLINE( 662)		Bool _hx_tmp;
HXDLIN( 662)		if (!(!(this->transparent))) {
HXLINE( 662)			_hx_tmp = (((int)((int)mask >> (int)(int)24) & (int)(int)255) > (int)0);
            		}
            		else {
HXLINE( 662)			_hx_tmp = true;
            		}
HXDLIN( 662)		if (_hx_tmp) {
HXLINE( 664)			HX_VARI_NAME( Int,color1,"color") = color;
HXLINE( 665)			Int _hx_tmp1 = ((int)((int)color1 >> (int)(int)24) & (int)(int)255);
HXDLIN( 665)			if ((_hx_tmp1 == (int)0)) {
HXLINE( 665)				color1 = (int)0;
            			}
            		}
HXLINE( 669)		HX_VARI(  ::lime::math::Rectangle,rect) = this->image->getColorBoundsRect(mask,color,findColor,(int)1);
HXLINE( 670)		return  ::openfl::geom::Rectangle_obj::__new(rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

Int BitmapData_obj::getPixel(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixel",0x4b52b53b,"openfl.display.BitmapData.getPixel","openfl/display/BitmapData.hx",675,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 677)		if (!(this->_hx___isValid)) {
HXLINE( 677)			return (int)0;
            		}
HXLINE( 678)		return this->image->getPixel(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

Int BitmapData_obj::getPixel32(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",683,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 685)		if (!(this->_hx___isValid)) {
HXLINE( 685)			return (int)0;
            		}
HXLINE( 686)		return this->image->getPixel32(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::utils::ByteArrayData BitmapData_obj::getPixels( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixels",0x9d0bded8,"openfl.display.BitmapData.getPixels","openfl/display/BitmapData.hx",691,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 693)		if (!(this->_hx___isValid)) {
HXLINE( 693)			return null();
            		}
HXLINE( 694)		Bool _hx_tmp = hx::IsNull( rect );
HXDLIN( 694)		if (_hx_tmp) {
HXLINE( 694)			rect = this->rect;
            		}
HXLINE( 695)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 695)		 ::haxe::io::Bytes _hx_tmp2 = this->image->getPixels(_hx_tmp1,(int)1);
HXDLIN( 695)		return ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACK_FRAME("openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",700,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 702)		if (!(this->_hx___isValid)) {
HXLINE( 702)			return null();
            		}
HXLINE( 704)		Bool _hx_tmp = hx::IsNull( this->_hx___surface );
HXDLIN( 704)		if (_hx_tmp) {
HXLINE( 706)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE( 710)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::lime::graphics::opengl::GLTexture BitmapData_obj::getTexture( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",715,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE( 717)		if (!(this->_hx___isValid)) {
HXLINE( 717)			return null();
            		}
HXLINE( 719)		Bool _hx_tmp = hx::IsNull( this->_hx___texture );
HXDLIN( 719)		if (_hx_tmp) {
HXLINE( 721)			Int _hx_tmp1 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 721)			 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_texture()) );
HXDLIN( 721)			 ::Dynamic _hx_tmp2 = Dynamic(hx::DynamicPtr(inVal));
HXDLIN( 721)			this->_hx___texture =  ::lime::graphics::opengl::GLTexture_obj::__new(_hx_tmp1,_hx_tmp2);
HXLINE( 722)			{
HXLINE( 722)				Int target = gl->TEXTURE_2D;
HXDLIN( 722)				HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->_hx___texture;
HXDLIN( 722)				{
HXLINE( 722)					 ::Dynamic texture1;
HXDLIN( 722)					Bool _hx_tmp3 = hx::IsNull( texture );
HXDLIN( 722)					if (_hx_tmp3) {
HXLINE( 722)						texture1 = null();
            					}
            					else {
HXLINE( 722)						texture1 = texture->id;
            					}
HXDLIN( 722)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,hx::DynamicPtr(texture1));
            				}
            			}
HXLINE( 723)			{
HXLINE( 723)				Int target1 = gl->TEXTURE_2D;
HXDLIN( 723)				Int pname = gl->TEXTURE_WRAP_S;
HXDLIN( 723)				Int param = gl->CLAMP_TO_EDGE;
HXDLIN( 723)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target1,pname,param);
            			}
HXLINE( 724)			{
HXLINE( 724)				Int target2 = gl->TEXTURE_2D;
HXDLIN( 724)				Int pname1 = gl->TEXTURE_WRAP_T;
HXDLIN( 724)				Int param1 = gl->CLAMP_TO_EDGE;
HXDLIN( 724)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target2,pname1,param1);
            			}
HXLINE( 725)			{
HXLINE( 725)				Int target3 = gl->TEXTURE_2D;
HXDLIN( 725)				Int pname2 = gl->TEXTURE_MAG_FILTER;
HXDLIN( 725)				Int param2 = gl->NEAREST;
HXDLIN( 725)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target3,pname2,param2);
            			}
HXLINE( 726)			{
HXLINE( 726)				Int target4 = gl->TEXTURE_2D;
HXDLIN( 726)				Int pname3 = gl->TEXTURE_MIN_FILTER;
HXDLIN( 726)				Int param3 = gl->NEAREST;
HXDLIN( 726)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target4,pname3,param3);
            			}
HXLINE( 727)			this->_hx___textureVersion = (int)-1;
            		}
HXLINE( 735)		Bool _hx_tmp4;
HXDLIN( 735)		Bool _hx_tmp5 = hx::IsNotNull( this->image );
HXDLIN( 735)		if (_hx_tmp5) {
HXLINE( 735)			_hx_tmp4 = (this->image->version != this->_hx___textureVersion);
            		}
            		else {
HXLINE( 735)			_hx_tmp4 = false;
            		}
HXDLIN( 735)		if (_hx_tmp4) {
HXLINE( 737)			HX_VAR( Int,internalFormat);
HXDLIN( 737)			HX_VAR( Int,format);
HXLINE( 739)			Bool _hx_tmp6 = hx::IsNotNull( this->_hx___surface );
HXDLIN( 739)			if (_hx_tmp6) {
HXLINE( 741)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE( 745)			Bool _hx_tmp7 = (this->image->buffer->bitsPerPixel == (int)1);
HXDLIN( 745)			if (_hx_tmp7) {
HXLINE( 747)				internalFormat = gl->ALPHA;
HXLINE( 748)				format = gl->ALPHA;
            			}
            			else {
HXLINE( 764)				Bool _hx_tmp8 = hx::IsNull( ::openfl::display::BitmapData_obj::_hx___isGLES );
HXDLIN( 764)				if (_hx_tmp8) {
HXLINE( 766)					Int pname4 = gl->VERSION;
HXDLIN( 766)					 ::hx::Object * inVal1 = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_parameter(pname4)) );
HXDLIN( 766)					HX_VARI( ::String,version) = ( (::String)(Dynamic(hx::DynamicPtr(inVal1))) );
HXLINE( 767)					Bool _hx_tmp9;
HXDLIN( 767)					Int _hx_tmp10 = version.indexOf(HX_("OpenGL ES",5f,cb,92,95),null());
HXDLIN( 767)					if ((_hx_tmp10 > (int)-1)) {
HXLINE( 767)						Int _hx_tmp11 = version.indexOf(HX_("WebGL",99,9f,e9,5a),null());
HXDLIN( 767)						_hx_tmp9 = (_hx_tmp11 == (int)-1);
            					}
            					else {
HXLINE( 767)						_hx_tmp9 = false;
            					}
HXDLIN( 767)					::openfl::display::BitmapData_obj::_hx___isGLES = _hx_tmp9;
            				}
HXLINE( 771)				if (::openfl::display::BitmapData_obj::_hx___isGLES) {
HXLINE( 771)					internalFormat = gl->BGRA_EXT;
            				}
            				else {
HXLINE( 771)					internalFormat = gl->RGBA;
            				}
HXLINE( 772)				format = gl->BGRA_EXT;
            			}
HXLINE( 778)			{
HXLINE( 778)				Int target5 = gl->TEXTURE_2D;
HXDLIN( 778)				HX_VARI_NAME(  ::lime::graphics::opengl::GLTexture,texture2,"texture") = this->_hx___texture;
HXDLIN( 778)				{
HXLINE( 778)					 ::Dynamic texture3;
HXDLIN( 778)					Bool _hx_tmp12 = hx::IsNull( texture2 );
HXDLIN( 778)					if (_hx_tmp12) {
HXLINE( 778)						texture3 = null();
            					}
            					else {
HXLINE( 778)						texture3 = texture2->id;
            					}
HXDLIN( 778)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target5,hx::DynamicPtr(texture3));
            				}
            			}
HXLINE( 780)			HX_VARI(  ::lime::graphics::Image,textureImage) = this->image;
HXLINE( 816)			Bool _hx_tmp13;
HXDLIN( 816)			Bool _hx_tmp14 = !(textureImage->get_premultiplied());
HXDLIN( 816)			if (_hx_tmp14) {
HXLINE( 816)				_hx_tmp13 = textureImage->get_transparent();
            			}
            			else {
HXLINE( 816)				_hx_tmp13 = false;
            			}
HXDLIN( 816)			if (_hx_tmp13) {
HXLINE( 818)				textureImage = textureImage->clone();
HXLINE( 819)				textureImage->set_premultiplied(true);
            			}
HXLINE( 823)			{
HXLINE( 823)				Int target6 = gl->TEXTURE_2D;
HXDLIN( 823)				Int width = this->width;
HXDLIN( 823)				Int height = this->height;
HXDLIN( 823)				Int type = gl->UNSIGNED_BYTE;
HXDLIN( 823)				HX_VARI(  ::lime::utils::ArrayBufferView,pixels) = textureImage->get_data();
HXDLIN( 823)				{
HXLINE( 823)					HX_VAR(  ::haxe::io::Bytes,buffer);
HXDLIN( 823)					Bool _hx_tmp15 = hx::IsNull( pixels );
HXDLIN( 823)					if (_hx_tmp15) {
HXLINE( 823)						buffer = null();
            					}
            					else {
HXLINE( 823)						buffer = pixels->buffer;
            					}
HXDLIN( 823)					{
HXLINE( 823)						Int byteOffset;
HXDLIN( 823)						Bool _hx_tmp16 = hx::IsNull( pixels );
HXDLIN( 823)						if (_hx_tmp16) {
HXLINE( 823)							byteOffset = (int)0;
            						}
            						else {
HXLINE( 823)							byteOffset = pixels->byteOffset;
            						}
HXDLIN( 823)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_image_2d(target6,(int)0,internalFormat,width,height,(int)0,format,type,hx::DynamicPtr(buffer),byteOffset);
            					}
            				}
            			}
HXLINE( 827)			{
HXLINE( 827)				Int target7 = gl->TEXTURE_2D;
HXDLIN( 827)				{
HXLINE( 827)					 ::Dynamic texture4 = null();
HXDLIN( 827)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target7,hx::DynamicPtr(texture4));
            				}
            			}
HXLINE( 828)			this->_hx___textureVersion = this->image->version;
            		}
HXLINE( 832)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

 ::openfl::_Vector::IntVector BitmapData_obj::getVector( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.display.BitmapData","getVector",0xa7bfa06e,"openfl.display.BitmapData.getVector","openfl/display/BitmapData.hx",837,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 839)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(rect);
HXLINE( 840)		HX_VARI( Int,length) = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels) / (Float)(int)4));
HXLINE( 841)		HX_VARI(  ::openfl::_Vector::IntVector,result) =  ::openfl::_Vector::IntVector_obj::__new(length,true,null());
HXLINE( 843)		{
HXLINE( 843)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 843)			while((_g1 < length)){
HXLINE( 843)				HX_VARI( Int,i) = _g1++;
HXLINE( 845)				{
HXLINE( 845)					Int value = pixels->readUnsignedInt();
HXDLIN( 845)					result->set(i,value);
            				}
            			}
            		}
HXLINE( 849)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

::Array< ::Dynamic> BitmapData_obj::histogram( ::openfl::geom::Rectangle hRect){
            	HX_STACK_FRAME("openfl.display.BitmapData","histogram",0xf93f4519,"openfl.display.BitmapData.histogram","openfl/display/BitmapData.hx",854,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(hRect,"hRect")
HXLINE( 856)		HX_VAR(  ::openfl::geom::Rectangle,rect);
HXDLIN( 856)		Bool _hx_tmp = hx::IsNotNull( hRect );
HXDLIN( 856)		if (_hx_tmp) {
HXLINE( 856)			rect = hRect;
            		}
            		else {
HXLINE( 856)			rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,this->width,this->height);
            		}
HXLINE( 857)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(rect);
HXLINE( 858)		HX_VARI( ::Array< ::Dynamic>,_g) = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 858)		{
HXLINE( 858)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 858)			while((_g1 < (int)4)){
HXLINE( 858)				++_g1;
HXDLIN( 858)				HX_VARI( ::Array< Int >,_g2) = ::Array_obj< Int >::__new(0);
HXDLIN( 858)				{
HXLINE( 858)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 858)					while((_g3 < (int)256)){
HXLINE( 858)						++_g3;
HXDLIN( 858)						_g2->push((int)0);
            					}
            				}
HXDLIN( 858)				_g->push(_g2);
            			}
            		}
HXLINE( 860)		{
HXLINE( 860)			HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 860)			HX_VARI_NAME( Int,_g11,"_g1") = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN( 860)			while((_g21 < _g11)){
HXLINE( 860)				HX_VARI( Int,i) = _g21++;
HXLINE( 862)				::Array< Int > _hx_tmp1 = _g->__get(hx::Mod(i,(int)4)).StaticCast< ::Array< Int > >();
HXDLIN( 862)				Int _hx_tmp2 = pixels->readUnsignedByte();
HXDLIN( 862)				++_hx_tmp1[_hx_tmp2];
            			}
            		}
HXLINE( 866)		return _g;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,histogram,return )

Bool BitmapData_obj::hitTest( ::openfl::geom::Point firstPoint,Int firstAlphaThreshold, ::Dynamic secondObject, ::openfl::geom::Point secondBitmapDataPoint,hx::Null< Int >  __o_secondAlphaThreshold){
Int secondAlphaThreshold = __o_secondAlphaThreshold.Default(1);
            	HX_STACK_FRAME("openfl.display.BitmapData","hitTest",0xb5e8cf7a,"openfl.display.BitmapData.hitTest","openfl/display/BitmapData.hx",871,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(firstPoint,"firstPoint")
            	HX_STACK_ARG(firstAlphaThreshold,"firstAlphaThreshold")
            	HX_STACK_ARG(secondObject,"secondObject")
            	HX_STACK_ARG(secondBitmapDataPoint,"secondBitmapDataPoint")
            	HX_STACK_ARG(secondAlphaThreshold,"secondAlphaThreshold")
HXLINE( 873)		if (!(this->_hx___isValid)) {
HXLINE( 873)			return false;
            		}
HXLINE( 875)		Bool _hx_tmp = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::Bitmap >());
HXDLIN( 875)		if (_hx_tmp) {
HXLINE( 877)			secondObject = hx::TCast<  ::openfl::display::Bitmap >::cast(secondObject)->bitmapData;
            		}
HXLINE( 881)		Bool _hx_tmp1 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Point >());
HXDLIN( 881)		if (_hx_tmp1) {
HXLINE( 883)			HX_VARI(  ::openfl::geom::Point,secondPoint) = ( ( ::openfl::geom::Point)(secondObject) );
HXLINE( 885)			Float _hx_tmp2 = (secondPoint->x - firstPoint->x);
HXDLIN( 885)			HX_VARI( Int,x) = ::Std_obj::_hx_int(_hx_tmp2);
HXLINE( 886)			Float _hx_tmp3 = (secondPoint->y - firstPoint->y);
HXDLIN( 886)			HX_VARI( Int,y) = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE( 888)			Bool _hx_tmp4 = this->rect->contains(x,y);
HXDLIN( 888)			if (_hx_tmp4) {
HXLINE( 890)				HX_VARI( Int,pixel) = this->getPixel32(x,y);
HXLINE( 892)				if ((((int)((int)pixel >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE( 894)					return true;
            				}
            			}
            		}
            		else {
HXLINE( 900)			Bool _hx_tmp5 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::BitmapData >());
HXDLIN( 900)			if (_hx_tmp5) {
HXLINE( 902)				HX_VARI(  ::openfl::display::BitmapData,secondBitmapData) = ( ( ::openfl::display::BitmapData)(secondObject) );
HXLINE( 903)				HX_VAR_NAME( Int,x1,"x");
HXDLIN( 903)				HX_VAR_NAME( Int,y1,"y");
HXLINE( 905)				Bool _hx_tmp6 = hx::IsNull( secondBitmapDataPoint );
HXDLIN( 905)				if (_hx_tmp6) {
HXLINE( 907)					x1 = (int)0;
HXLINE( 908)					y1 = (int)0;
            				}
            				else {
HXLINE( 912)					Float _hx_tmp7 = (secondBitmapDataPoint->x - firstPoint->x);
HXDLIN( 912)					x1 = ::Std_obj::_hx_int(_hx_tmp7);
HXLINE( 913)					Float _hx_tmp8 = (secondBitmapDataPoint->y - firstPoint->y);
HXDLIN( 913)					y1 = ::Std_obj::_hx_int(_hx_tmp8);
            				}
HXLINE( 917)				Bool _hx_tmp9 = this->rect->contains(x1,y1);
HXDLIN( 917)				if (_hx_tmp9) {
HXLINE( 919)					HX_VARI(  ::openfl::geom::Rectangle,hitRect) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 920)					Int _hx_tmp10 = secondBitmapData->width;
HXDLIN( 920)					Int _hx_tmp11 = (this->width - x1);
HXDLIN( 920)					Float _hx_tmp12 = ::Math_obj::min(_hx_tmp10,_hx_tmp11);
HXDLIN( 920)					Int _hx_tmp13 = secondBitmapData->height;
HXDLIN( 920)					Int _hx_tmp14 = (this->height - y1);
HXDLIN( 920)					Float _hx_tmp15 = ::Math_obj::min(_hx_tmp13,_hx_tmp14);
HXDLIN( 920)					hitRect->setTo(x1,y1,_hx_tmp12,_hx_tmp15);
HXLINE( 922)					HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(hitRect);
HXLINE( 924)					hitRect->offset(-(x1),-(y1));
HXLINE( 925)					HX_VARI(  ::openfl::utils::ByteArrayData,testPixels) = secondBitmapData->getPixels(hitRect);
HXLINE( 927)					Float _hx_tmp16 = (hitRect->width * hitRect->height);
HXDLIN( 927)					HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp16);
HXLINE( 928)					HX_VAR_NAME( Int,pixel1,"pixel");
HXDLIN( 928)					HX_VAR( Int,testPixel);
HXLINE( 930)					{
HXLINE( 930)						HX_VARI( Int,_g1) = (int)0;
HXDLIN( 930)						while((_g1 < length)){
HXLINE( 930)							++_g1;
HXLINE( 932)							pixel1 = pixels->readUnsignedInt();
HXLINE( 933)							testPixel = testPixels->readUnsignedInt();
HXLINE( 935)							Bool _hx_tmp17;
HXDLIN( 935)							if ((((int)((int)pixel1 >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE( 935)								_hx_tmp17 = (((int)((int)testPixel >> (int)(int)24) & (int)(int)255) >= secondAlphaThreshold);
            							}
            							else {
HXLINE( 935)								_hx_tmp17 = false;
            							}
HXDLIN( 935)							if (_hx_tmp17) {
HXLINE( 937)								return true;
            							}
            						}
            					}
HXLINE( 943)					return false;
            				}
            			}
            			else {
HXLINE( 947)				Bool _hx_tmp18 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Rectangle >());
HXDLIN( 947)				if (_hx_tmp18) {
HXLINE( 949)					HX_VARI(  ::openfl::geom::Rectangle,secondRectangle) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 950)					secondRectangle->copyFrom(( ( ::openfl::geom::Rectangle)(secondObject) ));
HXLINE( 951)					secondRectangle->offset(-(firstPoint->x),-(firstPoint->y));
HXLINE( 952)					secondRectangle->_hx___contract((int)0,(int)0,this->width,this->height);
HXLINE( 954)					Bool _hx_tmp19;
HXDLIN( 954)					if ((secondRectangle->width > (int)0)) {
HXLINE( 954)						_hx_tmp19 = (secondRectangle->height > (int)0);
            					}
            					else {
HXLINE( 954)						_hx_tmp19 = false;
            					}
HXDLIN( 954)					if (_hx_tmp19) {
HXLINE( 956)						HX_VARI_NAME(  ::openfl::utils::ByteArrayData,pixels1,"pixels") = this->getPixels(secondRectangle);
HXLINE( 957)						HX_VARI_NAME( Int,length1,"length") = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels1) / (Float)(int)4));
HXLINE( 958)						HX_VAR_NAME( Int,pixel2,"pixel");
HXLINE( 960)						{
HXLINE( 960)							HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 960)							while((_g11 < length1)){
HXLINE( 960)								++_g11;
HXLINE( 962)								pixel2 = pixels1->readUnsignedInt();
HXLINE( 964)								if ((((int)((int)pixel2 >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE( 966)									return true;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 976)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,hitTest,return )

void BitmapData_obj::lock(){
            	HX_STACK_FRAME("openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",981,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,Int redMultiplier,Int greenMultiplier,Int blueMultiplier,Int alphaMultiplier){
            	HX_STACK_FRAME("openfl.display.BitmapData","merge",0xa7b66aad,"openfl.display.BitmapData.merge","openfl/display/BitmapData.hx",988,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE( 990)		Bool _hx_tmp;
HXDLIN( 990)		Bool _hx_tmp1;
HXDLIN( 990)		Bool _hx_tmp2;
HXDLIN( 990)		Bool _hx_tmp3;
HXDLIN( 990)		if (!(!(this->_hx___isValid))) {
HXLINE( 990)			_hx_tmp3 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 990)			_hx_tmp3 = true;
            		}
HXDLIN( 990)		if (!(_hx_tmp3)) {
HXLINE( 990)			_hx_tmp2 = !(sourceBitmapData->_hx___isValid);
            		}
            		else {
HXLINE( 990)			_hx_tmp2 = true;
            		}
HXDLIN( 990)		if (!(_hx_tmp2)) {
HXLINE( 990)			_hx_tmp1 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 990)			_hx_tmp1 = true;
            		}
HXDLIN( 990)		if (!(_hx_tmp1)) {
HXLINE( 990)			_hx_tmp = hx::IsNull( destPoint );
            		}
            		else {
HXLINE( 990)			_hx_tmp = true;
            		}
HXDLIN( 990)		if (_hx_tmp) {
HXLINE( 990)			return;
            		}
HXLINE( 991)		 ::lime::math::Rectangle _hx_tmp4 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 991)		 ::lime::math::Vector2 _hx_tmp5 = destPoint->_hx___toLimeVector2();
HXDLIN( 991)		this->image->merge(sourceBitmapData->image,_hx_tmp4,_hx_tmp5,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::noise(Int randomSeed,hx::Null< Int >  __o_low,hx::Null< Int >  __o_high,hx::Null< Int >  __o_channelOptions,hx::Null< Bool >  __o_grayScale){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,randomSeed1) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",1003,0xdd12d5b9)
HXLINE(1004)			Int _hx_tmp = (randomSeed1->__get((int)0) * (int)1103515245);
HXDLIN(1004)			randomSeed1[(int)0] = (_hx_tmp + (int)12345);
HXLINE(1005)			Float _hx_tmp1 = ((Float)randomSeed1->__get((int)0) / (Float)(int)65536);
HXDLIN(1005)			Float _hx_tmp2 = ::Math_obj::abs(_hx_tmp1);
HXDLIN(1005)			Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN(1005)			return hx::Mod(_hx_tmp3,(int)32768);
            		}
            		HX_END_LOCAL_FUNC0(return)

Int low = __o_low.Default(0);
Int high = __o_high.Default(255);
Int channelOptions = __o_channelOptions.Default(7);
Bool grayScale = __o_grayScale.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",996,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(randomSeed,"randomSeed")
            	HX_STACK_ARG(low,"low")
            	HX_STACK_ARG(high,"high")
            	HX_STACK_ARG(channelOptions,"channelOptions")
            	HX_STACK_ARG(grayScale,"grayScale")
HXLINE( 996)		HX_VARI_NAME( ::Array< Int >,randomSeed1,"randomSeed") = ::Array_obj< Int >::__new(1)->init(0,randomSeed);
HXLINE( 998)		if (!(this->_hx___isValid)) {
HXLINE( 998)			return;
            		}
HXLINE(1002)		HX_VARI(  ::Dynamic,func) =  ::Dynamic(new _hx_Closure_0(randomSeed1));
HXLINE(1008)		func();
HXLINE(1011)		HX_VARI( Int,range) = (high - low);
HXLINE(1012)		 ::openfl::utils::ByteArrayData_obj::__new((int)0);
HXLINE(1014)		HX_VARI( Bool,redChannel) = (((int)channelOptions & (int)(int)1) == (int)1);
HXLINE(1015)		HX_VARI( Bool,greenChannel) = (((int)((int)channelOptions & (int)(int)2) >> (int)(int)1) == (int)1);
HXLINE(1016)		HX_VARI( Bool,blueChannel) = (((int)((int)channelOptions & (int)(int)4) >> (int)(int)2) == (int)1);
HXLINE(1017)		HX_VARI( Bool,alphaChannel) = (((int)((int)channelOptions & (int)(int)8) >> (int)(int)3) == (int)1);
HXLINE(1019)		{
HXLINE(1019)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1019)			HX_VARI( Int,_g) = this->height;
HXDLIN(1019)			while((_g1 < _g)){
HXLINE(1019)				HX_VARI( Int,y) = _g1++;
HXLINE(1021)				{
HXLINE(1021)					HX_VARI( Int,_g3) = (int)0;
HXDLIN(1021)					HX_VARI( Int,_g2) = this->width;
HXDLIN(1021)					while((_g3 < _g2)){
HXLINE(1021)						HX_VARI( Int,x) = _g3++;
HXLINE(1024)						HX_VARI( Int,red) = (int)0;
HXLINE(1025)						HX_VARI( Int,blue) = (int)0;
HXLINE(1026)						HX_VARI( Int,green) = (int)0;
HXLINE(1027)						HX_VARI( Int,alpha) = (int)255;
HXLINE(1029)						if (grayScale) {
HXLINE(1031)							Int _hx_tmp4 = ( (Int)(func()) );
HXDLIN(1031)							blue = (low + hx::Mod(_hx_tmp4,range));
HXDLIN(1031)							green = blue;
HXDLIN(1031)							red = green;
HXLINE(1032)							alpha = (int)255;
            						}
            						else {
HXLINE(1036)							if (redChannel) {
HXLINE(1036)								Int _hx_tmp5 = ( (Int)(func()) );
HXDLIN(1036)								red = (low + hx::Mod(_hx_tmp5,range));
            							}
HXLINE(1037)							if (greenChannel) {
HXLINE(1037)								Int _hx_tmp6 = ( (Int)(func()) );
HXDLIN(1037)								green = (low + hx::Mod(_hx_tmp6,range));
            							}
HXLINE(1038)							if (blueChannel) {
HXLINE(1038)								Int _hx_tmp7 = ( (Int)(func()) );
HXDLIN(1038)								blue = (low + hx::Mod(_hx_tmp7,range));
            							}
HXLINE(1039)							if (alphaChannel) {
HXLINE(1039)								Int _hx_tmp8 = ( (Int)(func()) );
HXDLIN(1039)								alpha = (low + hx::Mod(_hx_tmp8,range));
            							}
            						}
HXLINE(1042)						HX_VARI( Int,rgb) = alpha;
HXLINE(1043)						Int _hx_tmp9 = ((int)rgb << (int)(int)8);
HXDLIN(1043)						rgb = (_hx_tmp9 + red);
HXLINE(1044)						Int _hx_tmp10 = ((int)rgb << (int)(int)8);
HXDLIN(1044)						rgb = (_hx_tmp10 + green);
HXLINE(1045)						Int _hx_tmp11 = ((int)rgb << (int)(int)8);
HXDLIN(1045)						rgb = (_hx_tmp11 + blue);
HXLINE(1047)						this->setPixel32(x,y,rgb);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::Array< Int > redArray,::Array< Int > greenArray,::Array< Int > blueArray,::Array< Int > alphaArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","paletteMap",0xfc19eecc,"openfl.display.BitmapData.paletteMap","openfl/display/BitmapData.hx",1053,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redArray,"redArray")
            	HX_STACK_ARG(greenArray,"greenArray")
            	HX_STACK_ARG(blueArray,"blueArray")
            	HX_STACK_ARG(alphaArray,"alphaArray")
HXLINE(1055)		HX_VARI( Int,sw) = ::Std_obj::_hx_int(sourceRect->width);
HXLINE(1056)		HX_VARI( Int,sh) = ::Std_obj::_hx_int(sourceRect->height);
HXLINE(1058)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(sourceRect);
HXLINE(1059)		pixels->position = (int)0;
HXLINE(1061)		HX_VAR( Int,pixelValue);
HXDLIN(1061)		HX_VAR( Int,r);
HXDLIN(1061)		HX_VAR( Int,g);
HXDLIN(1061)		HX_VAR( Int,b);
HXDLIN(1061)		HX_VAR( Int,a);
HXDLIN(1061)		HX_VAR( Int,color);
HXDLIN(1061)		HX_VAR( Int,c1);
HXDLIN(1061)		HX_VAR( Int,c2);
HXDLIN(1061)		HX_VAR( Int,c3);
HXDLIN(1061)		HX_VAR( Int,c4);
HXLINE(1063)		{
HXLINE(1063)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1063)			HX_VARI( Int,_g) = (sh * sw);
HXDLIN(1063)			while((_g1 < _g)){
HXLINE(1063)				HX_VARI( Int,i) = _g1++;
HXLINE(1065)				pixelValue = pixels->readUnsignedInt();
HXLINE(1067)				Bool _hx_tmp = hx::IsNull( alphaArray );
HXDLIN(1067)				if (_hx_tmp) {
HXLINE(1067)					c1 = ((int)pixelValue & (int)(int)-16777216);
            				}
            				else {
HXLINE(1067)					c1 = alphaArray->__get(((int)((int)pixelValue >> (int)(int)24) & (int)(int)255));
            				}
HXLINE(1068)				Bool _hx_tmp1 = hx::IsNull( redArray );
HXDLIN(1068)				if (_hx_tmp1) {
HXLINE(1068)					c2 = ((int)pixelValue & (int)(int)16711680);
            				}
            				else {
HXLINE(1068)					c2 = redArray->__get(((int)((int)pixelValue >> (int)(int)16) & (int)(int)255));
            				}
HXLINE(1069)				Bool _hx_tmp2 = hx::IsNull( greenArray );
HXDLIN(1069)				if (_hx_tmp2) {
HXLINE(1069)					c3 = ((int)pixelValue & (int)(int)65280);
            				}
            				else {
HXLINE(1069)					c3 = greenArray->__get(((int)((int)pixelValue >> (int)(int)8) & (int)(int)255));
            				}
HXLINE(1070)				Bool _hx_tmp3 = hx::IsNull( blueArray );
HXDLIN(1070)				if (_hx_tmp3) {
HXLINE(1070)					c4 = ((int)pixelValue & (int)(int)255);
            				}
            				else {
HXLINE(1070)					c4 = blueArray->__get(((int)pixelValue & (int)(int)255));
            				}
HXLINE(1072)				a = (((((int)((int)c1 >> (int)(int)24) & (int)(int)255) + ((int)((int)c2 >> (int)(int)24) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)24) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)24) & (int)(int)255));
HXLINE(1075)				r = (((((int)((int)c1 >> (int)(int)16) & (int)(int)255) + ((int)((int)c2 >> (int)(int)16) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)16) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)16) & (int)(int)255));
HXLINE(1078)				g = (((((int)((int)c1 >> (int)(int)8) & (int)(int)255) + ((int)((int)c2 >> (int)(int)8) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)8) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)8) & (int)(int)255));
HXLINE(1081)				b = (((((int)c1 & (int)(int)255) + ((int)c2 & (int)(int)255)) + ((int)c3 & (int)(int)255)) + ((int)c4 & (int)(int)255));
HXLINE(1084)				color = ((int)((int)((int)((int)a << (int)(int)24) | (int)((int)r << (int)(int)16)) | (int)((int)g << (int)(int)8)) | (int)b);
HXLINE(1086)				pixels->position = (i * (int)4);
HXLINE(1087)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE(1091)		pixels->position = (int)0;
HXLINE(1092)		HX_VARI(  ::openfl::geom::Rectangle,destRect) =  ::openfl::geom::Rectangle_obj::__new(destPoint->x,destPoint->y,sw,sh);
HXLINE(1093)		this->setPixels(destRect,pixels);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,Int numOctaves,Int randomSeed,Bool stitch,Bool fractalNoise,hx::Null< Int >  __o_channelOptions,hx::Null< Bool >  __o_grayScale,::Array< ::Dynamic> offsets){
Int channelOptions = __o_channelOptions.Default(7);
Bool grayScale = __o_grayScale.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","perlinNoise",0xc682321b,"openfl.display.BitmapData.perlinNoise","openfl/display/BitmapData.hx",1100,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(baseX,"baseX")
            	HX_STACK_ARG(baseY,"baseY")
            	HX_STACK_ARG(numOctaves,"numOctaves")
            	HX_STACK_ARG(randomSeed,"randomSeed")
            	HX_STACK_ARG(stitch,"stitch")
            	HX_STACK_ARG(fractalNoise,"fractalNoise")
            	HX_STACK_ARG(channelOptions,"channelOptions")
            	HX_STACK_ARG(grayScale,"grayScale")
            	HX_STACK_ARG(offsets,"offsets")
HXLINE(1100)		::openfl::Lib_obj::notImplemented(HX_("BitmapData.perlinNoise",51,d2,2b,27));
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","scroll",0x57440678,"openfl.display.BitmapData.scroll","openfl/display/BitmapData.hx",1105,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1107)		if (!(this->_hx___isValid)) {
HXLINE(1107)			return;
            		}
HXLINE(1108)		this->image->scroll(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setPixel(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",1113,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE(1115)		if (!(this->_hx___isValid)) {
HXLINE(1115)			return;
            		}
HXLINE(1116)		this->image->setPixel(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",1121,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE(1123)		if (!(this->_hx___isValid)) {
HXLINE(1123)			return;
            		}
HXLINE(1124)		this->image->setPixel32(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",1129,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(byteArray,"byteArray")
HXLINE(1131)		Bool _hx_tmp;
HXDLIN(1131)		if (!(!(this->_hx___isValid))) {
HXLINE(1131)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1131)			_hx_tmp = true;
            		}
HXDLIN(1131)		if (_hx_tmp) {
HXLINE(1131)			return;
            		}
HXLINE(1132)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN(1132)		this->image->setPixels(_hx_tmp1,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray),(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::geom::Rectangle rect, ::openfl::_Vector::IntVector inputVector){
            	HX_STACK_FRAME("openfl.display.BitmapData","setVector",0x8b108c7a,"openfl.display.BitmapData.setVector","openfl/display/BitmapData.hx",1137,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(inputVector,"inputVector")
HXLINE(1139)		HX_VARI_NAME(  ::openfl::utils::ByteArrayData,this1,"this") =  ::openfl::utils::ByteArrayData_obj::__new((int)0);
HXDLIN(1139)		HX_VARI(  ::openfl::utils::ByteArrayData,byteArray) = this1;
HXLINE(1140)		Int _hx_tmp = inputVector->get_length();
HXDLIN(1140)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(byteArray,(_hx_tmp * (int)4));
HXLINE(1142)		{
HXLINE(1142)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1142)			while(true){
HXLINE(1142)				Int _hx_tmp1 = inputVector->get_length();
HXDLIN(1142)				if (!((_g < _hx_tmp1))) {
HXLINE(1142)					goto _hx_goto_12;
            				}
HXDLIN(1142)				HX_VARI( Int,color) = inputVector->get(_g);
HXDLIN(1142)				++_g;
HXLINE(1144)				byteArray->writeUnsignedInt(color);
            			}
            			_hx_goto_12:;
            		}
HXLINE(1148)		byteArray->position = (int)0;
HXLINE(1149)		this->setPixels(rect,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

Int BitmapData_obj::threshold( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::String operation,Int threshold,hx::Null< Int >  __o_color,hx::Null< Int >  __o_mask,hx::Null< Bool >  __o_copySource){
Int color = __o_color.Default(0);
Int mask = __o_mask.Default(-1);
Bool copySource = __o_copySource.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","threshold",0xc8af2a20,"openfl.display.BitmapData.threshold","openfl/display/BitmapData.hx",1154,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(threshold,"threshold")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(copySource,"copySource")
HXLINE(1156)		Bool _hx_tmp;
HXDLIN(1156)		Bool _hx_tmp1;
HXDLIN(1156)		Bool _hx_tmp2;
HXDLIN(1156)		Bool _hx_tmp3;
HXDLIN(1156)		Bool _hx_tmp4;
HXDLIN(1156)		Bool _hx_tmp5;
HXDLIN(1156)		Bool _hx_tmp6 = hx::IsNotNull( sourceBitmapData );
HXDLIN(1156)		if (_hx_tmp6) {
HXLINE(1156)			_hx_tmp5 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1156)			_hx_tmp5 = true;
            		}
HXDLIN(1156)		if (!(_hx_tmp5)) {
HXLINE(1156)			_hx_tmp4 = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(1156)			_hx_tmp4 = true;
            		}
HXDLIN(1156)		if (!(_hx_tmp4)) {
HXLINE(1156)			_hx_tmp3 = (sourceRect->x > sourceBitmapData->width);
            		}
            		else {
HXLINE(1156)			_hx_tmp3 = true;
            		}
HXDLIN(1156)		if (!(_hx_tmp3)) {
HXLINE(1156)			_hx_tmp2 = (sourceRect->y > sourceBitmapData->height);
            		}
            		else {
HXLINE(1156)			_hx_tmp2 = true;
            		}
HXDLIN(1156)		if (!(_hx_tmp2)) {
HXLINE(1156)			_hx_tmp1 = (destPoint->x > this->width);
            		}
            		else {
HXLINE(1156)			_hx_tmp1 = true;
            		}
HXDLIN(1156)		if (!(_hx_tmp1)) {
HXLINE(1156)			_hx_tmp = (destPoint->y > this->height);
            		}
            		else {
HXLINE(1156)			_hx_tmp = true;
            		}
HXDLIN(1156)		if (_hx_tmp) {
HXLINE(1156)			return (int)0;
            		}
HXLINE(1158)		 ::lime::math::Rectangle _hx_tmp7 = sourceRect->_hx___toLimeRectangle();
HXDLIN(1158)		 ::lime::math::Vector2 _hx_tmp8 = destPoint->_hx___toLimeVector2();
HXDLIN(1158)		return this->image->threshold(sourceBitmapData->image,_hx_tmp7,_hx_tmp8,operation,threshold,color,mask,copySource,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACK_FRAME("openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",1163,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(changeRect,"changeRect")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___fromBase64(::String base64,::String type, ::Dynamic onload){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",1172,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1174)			_gthis->_hx___fromImage(image);
HXLINE(1176)			Bool _hx_tmp = hx::IsNotNull( onload );
HXDLIN(1176)			if (_hx_tmp) {
HXLINE(1178)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",1170,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
HXLINE(1170)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1172)		::lime::graphics::Image_obj::fromBase64(base64,type, ::Dynamic(new _hx_Closure_0(_gthis,onload)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromBase64,(void))

void BitmapData_obj::_hx___fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha, ::Dynamic onload){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",1189,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1191)			_gthis->_hx___fromImage(image);
HXLINE(1193)			Bool _hx_tmp = hx::IsNotNull( rawAlpha );
HXDLIN(1193)			if (_hx_tmp) {
HXLINE(1200)				HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE(1202)				{
HXLINE(1202)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(1202)					HX_VARI( Int,_g) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(rawAlpha);
HXDLIN(1202)					while((_g1 < _g)){
HXLINE(1202)						HX_VARI( Int,i) = _g1++;
HXLINE(1204)						{
HXLINE(1204)							HX_VARI( Int,val) = rawAlpha->readUnsignedByte();
HXDLIN(1204)							{
HXLINE(1204)								Int _hx_tmp1 = data->byteOffset;
HXDLIN(1204)								::__hxcpp_memory_set_byte(data->buffer->b,(_hx_tmp1 + ((i * (int)4) + (int)3)),val);
            							}
            						}
            					}
            				}
HXLINE(1208)				image->version++;
            			}
HXLINE(1212)			Bool _hx_tmp2 = hx::IsNotNull( onload );
HXDLIN(1212)			if (_hx_tmp2) {
HXLINE(1214)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",1187,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(rawAlpha,"rawAlpha")
            	HX_STACK_ARG(onload,"onload")
HXLINE(1187)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1189)		::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes), ::Dynamic(new _hx_Closure_0(rawAlpha,_gthis,onload)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromBytes,(void))

void BitmapData_obj::_hx___fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",1225,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1227)			_gthis->_hx___fromImage(image);
HXLINE(1229)			Bool _hx_tmp = hx::IsNotNull( onload );
HXDLIN(1229)			if (_hx_tmp) {
HXLINE(1231)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",1223,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE(1223)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1225)		::lime::graphics::Image_obj::fromFile(path, ::Dynamic(new _hx_Closure_0(_gthis,onload)),onerror);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_STACK_FRAME("openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",1242,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(image,"image")
HXLINE(1242)		Bool _hx_tmp;
HXDLIN(1242)		Bool _hx_tmp1 = hx::IsNotNull( image );
HXDLIN(1242)		if (_hx_tmp1) {
HXLINE(1242)			_hx_tmp = hx::IsNotNull( image->buffer );
            		}
            		else {
HXLINE(1242)			_hx_tmp = false;
            		}
HXDLIN(1242)		if (_hx_tmp) {
HXLINE(1244)			this->image = image;
HXLINE(1246)			this->width = image->width;
HXLINE(1247)			this->height = image->height;
HXLINE(1248)			this->rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,image->width,image->height);
HXLINE(1251)			image->set_format((int)2);
HXLINE(1252)			image->set_premultiplied(true);
HXLINE(1255)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

void BitmapData_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCairo",0x87dae327,"openfl.display.BitmapData.__renderCairo","openfl/display/BitmapData.hx",1262,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1264)		if (!(this->_hx___isValid)) {
HXLINE(1264)			return;
            		}
HXLINE(1266)		HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(1268)		Bool _hx_tmp = hx::IsNull( this->_hx___worldTransform );
HXDLIN(1268)		if (_hx_tmp) {
HXLINE(1268)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE(1270)		HX_VARI(  ::openfl::geom::Matrix,transform) = this->_hx___worldTransform;
HXLINE(1272)		Bool _hx_tmp1 = renderSession->roundPixels;
HXDLIN(1272)		if (_hx_tmp1) {
HXLINE(1274)			HX_VARI(  ::lime::math::Matrix3,matrix) = transform->_hx___toMatrix3();
HXLINE(1275)			matrix->tx = ::Math_obj::round(matrix->tx);
HXLINE(1276)			matrix->ty = ::Math_obj::round(matrix->ty);
HXLINE(1277)			cairo->set_matrix(matrix);
            		}
            		else {
HXLINE(1281)			 ::lime::math::Matrix3 _hx_tmp2 = transform->_hx___toMatrix3();
HXDLIN(1281)			cairo->set_matrix(_hx_tmp2);
            		}
HXLINE(1285)		HX_VARI(  ::Dynamic,surface) = this->getSurface();
HXLINE(1287)		Bool _hx_tmp3 = hx::IsNotNull( surface );
HXDLIN(1287)		if (_hx_tmp3) {
HXLINE(1289)			HX_VARI(  ::Dynamic,pattern) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE(1291)			Int _hx_tmp4 = cairo->get_antialias();
HXDLIN(1291)			if ((_hx_tmp4 == (int)1)) {
HXLINE(1293)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)3);
            			}
            			else {
HXLINE(1297)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)1);
            			}
HXLINE(1301)			cairo->set_source(pattern);
HXLINE(1302)			cairo->paint();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairo,(void))

void BitmapData_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCairoMask",0x1a586fb3,"openfl.display.BitmapData.__renderCairoMask","openfl/display/BitmapData.hx",1309,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairoMask,(void))

void BitmapData_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCanvas",0x5afced59,"openfl.display.BitmapData.__renderCanvas","openfl/display/BitmapData.hx",1316,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvas,(void))

void BitmapData_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCanvasMask",0xf2507ae5,"openfl.display.BitmapData.__renderCanvasMask","openfl/display/BitmapData.hx",1346,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvasMask,(void))

void BitmapData_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderGL",0x4c025e06,"openfl.display.BitmapData.__renderGL","openfl/display/BitmapData.hx",1353,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGL,(void))

void BitmapData_obj::_hx___resize(Int width,Int height){
            	HX_STACK_FRAME("openfl.display.BitmapData","__resize",0xd982a43f,"openfl.display.BitmapData.__resize","openfl/display/BitmapData.hx",1360,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1362)		this->width = width;
HXLINE(1363)		this->height = height;
HXLINE(1364)		this->rect->width = width;
HXLINE(1365)		this->rect->height = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___resize,(void))

void BitmapData_obj::_hx___sync(){
            	HX_STACK_FRAME("openfl.display.BitmapData","__sync",0x0b374be6,"openfl.display.BitmapData.__sync","openfl/display/BitmapData.hx",1370,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,_hx___sync,(void))

void BitmapData_obj::_hx___updateChildren(Bool transformOnly){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateChildren",0xeaaf19b3,"openfl.display.BitmapData.__updateChildren","openfl/display/BitmapData.hx",1379,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateChildren,(void))

void BitmapData_obj::_hx___updateMask( ::openfl::display::Graphics maskGraphics){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateMask",0x378cf760,"openfl.display.BitmapData.__updateMask","openfl/display/BitmapData.hx",1386,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(maskGraphics,"maskGraphics")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateMask,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",1395,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(overrideTransform,"overrideTransform")
HXLINE(1395)		Bool _hx_tmp = hx::IsNull( overrideTransform );
HXDLIN(1395)		if (_hx_tmp) {
HXLINE(1397)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(1401)			this->_hx___worldTransform = overrideTransform;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

 ::Dynamic BitmapData_obj::_hx___isGLES;

 ::openfl::display::BitmapData BitmapData_obj::fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",560,0xdd12d5b9)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 562)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,null());
HXLINE( 563)		{
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload1) HXARGC(1)
            			void _hx_run( ::lime::graphics::Image image){
            				HX_STACK_FRAME("openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",563,0xdd12d5b9)
            				HX_STACK_ARG(image,"image")
HXLINE( 563)				_gthis->_hx___fromImage(image);
HXDLIN( 563)				Bool _hx_tmp = hx::IsNotNull( onload1 );
HXDLIN( 563)				if (_hx_tmp) {
HXLINE( 563)					onload1(_gthis);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 563)			HX_VARI_NAME(  ::Dynamic,onload1,"onload") = onload;
HXDLIN( 563)			HX_VARI(  ::openfl::display::BitmapData,_gthis) = bitmapData;
HXDLIN( 563)			::lime::graphics::Image_obj::fromBase64(base64,type, ::Dynamic(new _hx_Closure_0(_gthis,onload1)));
            		}
HXLINE( 564)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromBase64,return )

 ::openfl::display::BitmapData BitmapData_obj::fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha, ::Dynamic onload){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",569,0xdd12d5b9)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(rawAlpha,"rawAlpha")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 571)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,null());
HXLINE( 572)		{
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload1, ::openfl::utils::ByteArrayData,rawAlpha1) HXARGC(1)
            			void _hx_run( ::lime::graphics::Image image){
            				HX_STACK_FRAME("openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",572,0xdd12d5b9)
            				HX_STACK_ARG(image,"image")
HXLINE( 572)				_gthis->_hx___fromImage(image);
HXDLIN( 572)				Bool _hx_tmp = hx::IsNotNull( rawAlpha1 );
HXDLIN( 572)				if (_hx_tmp) {
HXLINE( 572)					HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN( 572)					{
HXLINE( 572)						HX_VARI( Int,_g1) = (int)0;
HXDLIN( 572)						HX_VARI( Int,_g) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(rawAlpha1);
HXDLIN( 572)						while((_g1 < _g)){
HXLINE( 572)							HX_VARI( Int,i) = _g1++;
HXDLIN( 572)							{
HXLINE( 572)								HX_VARI( Int,val) = rawAlpha1->readUnsignedByte();
HXDLIN( 572)								{
HXLINE( 572)									Int _hx_tmp1 = data->byteOffset;
HXDLIN( 572)									::__hxcpp_memory_set_byte(data->buffer->b,(_hx_tmp1 + ((i * (int)4) + (int)3)),val);
            								}
            							}
            						}
            					}
HXDLIN( 572)					image->version++;
            				}
HXDLIN( 572)				Bool _hx_tmp2 = hx::IsNotNull( onload1 );
HXDLIN( 572)				if (_hx_tmp2) {
HXLINE( 572)					onload1(_gthis);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 572)			HX_VARI_NAME(  ::openfl::utils::ByteArrayData,rawAlpha1,"rawAlpha") = rawAlpha;
HXDLIN( 572)			HX_VARI_NAME(  ::Dynamic,onload1,"onload") = onload;
HXDLIN( 572)			HX_VARI(  ::openfl::display::BitmapData,_gthis) = bitmapData;
HXDLIN( 572)			::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes), ::Dynamic(new _hx_Closure_0(_gthis,onload1,rawAlpha1)));
            		}
HXLINE( 573)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromBytes,return )

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",592,0xdd12d5b9)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE( 594)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,null());
HXLINE( 595)		bitmapData->_hx___fromFile(path,onload,onerror);
HXLINE( 596)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,hx::Null< Bool >  __o_transparent){
Bool transparent = __o_transparent.Default(true);
            	HX_STACK_FRAME("openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",601,0xdd12d5b9)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(transparent,"transparent")
HXLINE( 603)		Bool _hx_tmp;
HXDLIN( 603)		Bool _hx_tmp1 = hx::IsNotNull( image );
HXDLIN( 603)		if (_hx_tmp1) {
HXLINE( 603)			_hx_tmp = hx::IsNull( image->buffer );
            		}
            		else {
HXLINE( 603)			_hx_tmp = true;
            		}
HXDLIN( 603)		if (_hx_tmp) {
HXLINE( 603)			return null();
            		}
HXLINE( 605)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,transparent,null());
HXLINE( 606)		bitmapData->_hx___fromImage(image);
HXLINE( 607)		bitmapData->image->set_transparent(transparent);
HXLINE( 608)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )


BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___bufferAlpha,"__bufferAlpha");
	HX_MARK_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___bufferAlpha,"__bufferAlpha");
	HX_VISIT_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn()); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn()); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn()); }
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn()); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return hx::Val( _hx___surface); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn()); }
		if (HX_FIELD_EQ(inName,"getBuffer") ) { return hx::Val( getBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn()); }
		if (HX_FIELD_EQ(inName,"histogram") ) { return hx::Val( histogram_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn()); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return hx::Val( getSurface_dyn()); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn()); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn()); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return hx::Val( _hx___fromImage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { return hx::Val( _hx___bufferData); }
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateMask") ) { return hx::Val( _hx___updateMask_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferAlpha") ) { return hx::Val( _hx___bufferAlpha); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"drawWithQuality") ) { return hx::Val( drawWithQuality_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform); }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { return hx::Val( _hx___textureVersion); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__isGLES") ) { outValue = _hx___isGLES; return true; }
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { _hx___bufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferAlpha") ) { _hx___bufferAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { _hx___textureVersion=inValue.Cast< Int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__isGLES") ) { _hx___isGLES=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07"));
	outFields->push(HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"));
	outFields->push(HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"));
	outFields->push(HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(BitmapData_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(BitmapData_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___bufferAlpha),HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(BitmapData_obj,_hx___bufferData),HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureVersion),HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::_hx___isGLES,HX_HCSTRING("__isGLES","\xdd","\x11","\xe5","\x09")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07"),
	HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"),
	HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"),
	HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"),
	HX_HCSTRING("applyFilter","\xc6","\xdf","\x2f","\xc1"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawWithQuality","\xb5","\xc5","\x05","\x6f"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("generateFilterRect","\x91","\x2c","\x98","\x7e"),
	HX_HCSTRING("getBuffer","\x36","\x46","\xeb","\x4c"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("getSurface","\x37","\xec","\xaa","\xac"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getVector","\xf9","\x39","\xb4","\x13"),
	HX_HCSTRING("histogram","\xa4","\xde","\x33","\x65"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("noise","\x9a","\x8f","\xc2","\x9f"),
	HX_HCSTRING("paletteMap","\xe1","\xae","\x2b","\x06"),
	HX_HCSTRING("perlinNoise","\x66","\x84","\xf8","\x8b"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("setVector","\x05","\x26","\x05","\xf7"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImage","\x71","\x52","\x1e","\xa0"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__sync","\x7b","\x1d","\x58","\xfb"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateMask","\xb5","\xa6","\x9e","\x39"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___isGLES,"__isGLES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___isGLES,"__isGLES");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_HCSTRING("__isGLES","\xdd","\x11","\xe5","\x09"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImage","\x91","\x09","\xf2","\x71"),
	::String(null())
};

void BitmapData_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.BitmapData","\xa3","\x12","\x41","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",63,0xdd12d5b9)
HXLINE(  63)		_hx___isGLES = null();
            	}
}

} // end namespace openfl
} // end namespace display
