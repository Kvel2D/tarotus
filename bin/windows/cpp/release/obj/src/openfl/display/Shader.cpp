// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_lime_utils_GLUtils
#include <lime/utils/GLUtils.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput
#include <openfl/display/ShaderInput.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter
#include <openfl/display/ShaderParameter.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

namespace openfl{
namespace display{

void Shader_obj::__construct( ::openfl::utils::ByteArrayData code){
            	HX_STACK_FRAME("openfl.display.Shader","new",0x88fbb381,"openfl.display.Shader.new","openfl/display/Shader.hx",26,0xae8f5dcd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(code,"code")
HXLINE(  28)		this->byteCode = code;
HXLINE(  29)		this->precisionHint = (int)1;
HXLINE(  31)		Bool _hx_tmp = hx::IsNull( this->glVertexSource );
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  33)			this->glVertexSource = HX_("attribute float aAlpha;\n\t\t\t\tattribute vec4 aPosition;\n\t\t\t\tattribute vec2 aTexCoord;\n\t\t\t\tvarying float vAlpha;\n\t\t\t\tvarying vec2 vTexCoord;\n\t\t\t\t\n\t\t\t\tuniform mat4 uMatrix;\n\t\t\t\t\n\t\t\t\tvoid main(void) {\n\t\t\t\t\t\n\t\t\t\t\tvAlpha = aAlpha;\n\t\t\t\t\tvTexCoord = aTexCoord;\n\t\t\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\t\t\n\t\t\t\t}",62,40,fa,ec);
            		}
HXLINE(  53)		Bool _hx_tmp1 = hx::IsNull( this->glFragmentSource );
HXDLIN(  53)		if (_hx_tmp1) {
HXLINE(  55)			this->glFragmentSource = HX_("varying float vAlpha;\n\t\t\t\tvarying vec2 vTexCoord;\n\t\t\t\tuniform sampler2D uImage0;\n\t\t\t\t\n\t\t\t\tvoid main(void) {\n\t\t\t\t\t\n\t\t\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\t\t\n\t\t\t\t\tif (color.a == 0.0) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4 (color.rgb / color.a, color.a * vAlpha);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}",51,e9,90,31);
            		}
HXLINE(  79)		this->_hx___init();
            	}

Dynamic Shader_obj::__CreateEmpty() { return new Shader_obj; }

hx::ObjectPtr< Shader_obj > Shader_obj::__new( ::openfl::utils::ByteArrayData code)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(code);
	return _hx_result;
}

Dynamic Shader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Shader_obj::_hx___disable(){
            	HX_STACK_FRAME("openfl.display.Shader","__disable",0x171f2ca9,"openfl.display.Shader.__disable","openfl/display/Shader.hx",86,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE(  86)		Bool _hx_tmp = hx::IsNotNull( this->glProgram );
HXDLIN(  86)		if (_hx_tmp) {
HXLINE(  88)			HX_VAR(  ::Dynamic,value);
HXDLIN(  88)			HX_VAR(  ::openfl::display::ShaderParameter,parameter);
HXLINE(  90)			{
HXLINE(  90)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  90)				HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(this->data);
HXDLIN(  90)				while((_g < _g1->length)){
HXLINE(  90)					HX_VARI( ::String,field) = _g1->__get(_g);
HXDLIN(  90)					++_g;
HXLINE(  92)					value = ::Reflect_obj::field(this->data,field);
HXLINE(  94)					Bool _hx_tmp1 = ::Std_obj::is(value,hx::ClassOf< ::openfl::display::ShaderParameter >());
HXDLIN(  94)					if (_hx_tmp1) {
HXLINE(  96)						parameter = ( ( ::openfl::display::ShaderParameter)(value) );
HXLINE(  98)						{
HXLINE(  98)							HX_VARI(  ::Dynamic,_g2) = parameter->type;
HXDLIN(  98)							 ::Dynamic _hx_switch_0 = _g2;
            							if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ||  (_hx_switch_0==(int)6) ||  (_hx_switch_0==(int)7) ||  (_hx_switch_0==(int)9) ||  (_hx_switch_0==(int)10) ||  (_hx_switch_0==(int)11) ){
HXLINE( 102)								Int index = ( (Int)(parameter->index) );
HXDLIN( 102)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable_vertex_attrib_array(index);
HXDLIN( 102)								goto _hx_goto_1;
            							}
            							/* default */{
            							}
            							_hx_goto_1:;
            						}
            					}
            				}
            			}
HXLINE( 112)			{
HXLINE( 112)				Int target = this->gl->ARRAY_BUFFER;
HXDLIN( 112)				{
HXLINE( 112)					 ::Dynamic buffer = null();
HXDLIN( 112)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,hx::DynamicPtr(buffer));
            				}
            			}
HXLINE( 113)			{
HXLINE( 113)				Int target1 = this->gl->TEXTURE_2D;
HXDLIN( 113)				{
HXLINE( 113)					 ::Dynamic texture = null();
HXDLIN( 113)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target1,hx::DynamicPtr(texture));
            				}
            			}
HXLINE( 116)			{
HXLINE( 116)				Int cap = this->gl->TEXTURE_2D;
HXDLIN( 116)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable(cap);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___disable,(void))

void Shader_obj::_hx___enable(){
            	HX_STACK_FRAME("openfl.display.Shader","__enable",0x8f5f3ee2,"openfl.display.Shader.__enable","openfl/display/Shader.hx",124,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 126)		this->_hx___init();
HXLINE( 128)		Bool _hx_tmp = hx::IsNotNull( this->glProgram );
HXDLIN( 128)		if (_hx_tmp) {
HXLINE( 130)			HX_VAR(  ::openfl::display::ShaderParameter,parameter);
HXDLIN( 130)			HX_VAR(  ::Dynamic,value);
HXLINE( 131)			HX_VARI( Int,textureCount) = (int)0;
HXLINE( 133)			{
HXLINE( 133)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 133)				HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(this->data);
HXDLIN( 133)				while((_g < _g1->length)){
HXLINE( 133)					HX_VARI( ::String,field) = _g1->__get(_g);
HXDLIN( 133)					++_g;
HXLINE( 135)					value = ::Reflect_obj::field(this->data,field);
HXLINE( 137)					Bool _hx_tmp1 = ::Std_obj::is(value,hx::ClassOf< ::openfl::display::ShaderInput >());
HXDLIN( 137)					if (_hx_tmp1) {
HXLINE( 139)						{
HXLINE( 139)							Int location = ( (Int)(value->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) );
HXDLIN( 139)							::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform1i(location,textureCount);
            						}
HXLINE( 140)						++textureCount;
            					}
            					else {
HXLINE( 144)						parameter = ( ( ::openfl::display::ShaderParameter)(value) );
HXLINE( 146)						{
HXLINE( 146)							HX_VARI(  ::Dynamic,_g2) = parameter->type;
HXDLIN( 146)							 ::Dynamic _hx_switch_0 = _g2;
            							if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ||  (_hx_switch_0==(int)6) ||  (_hx_switch_0==(int)7) ||  (_hx_switch_0==(int)9) ||  (_hx_switch_0==(int)10) ||  (_hx_switch_0==(int)11) ){
HXLINE( 150)								Int index = ( (Int)(parameter->index) );
HXDLIN( 150)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable_vertex_attrib_array(index);
HXDLIN( 150)								goto _hx_goto_3;
            							}
            							/* default */{
            							}
            							_hx_goto_3:;
            						}
            					}
            				}
            			}
HXLINE( 160)			if ((textureCount > (int)0)) {
HXLINE( 162)				{
HXLINE( 162)					Int texture = this->gl->TEXTURE0;
HXDLIN( 162)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_active_texture(texture);
            				}
HXLINE( 165)				{
HXLINE( 165)					Int cap = this->gl->TEXTURE_2D;
HXDLIN( 165)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable(cap);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___enable,(void))

void Shader_obj::_hx___init(){
            	HX_STACK_FRAME("openfl.display.Shader","__init",0x2faba5af,"openfl.display.Shader.__init","openfl/display/Shader.hx",175,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 177)		Bool _hx_tmp = hx::IsNull( this->data );
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 179)			this->data =  ::openfl::display::ShaderData_obj::__new(null());
            		}
HXLINE( 183)		Bool _hx_tmp1;
HXDLIN( 183)		Bool _hx_tmp2;
HXDLIN( 183)		Bool _hx_tmp3;
HXDLIN( 183)		Bool _hx_tmp4 = hx::IsNotNull( this->gl );
HXDLIN( 183)		if (_hx_tmp4) {
HXLINE( 183)			_hx_tmp3 = hx::IsNull( this->glProgram );
            		}
            		else {
HXLINE( 183)			_hx_tmp3 = false;
            		}
HXDLIN( 183)		if (_hx_tmp3) {
HXLINE( 183)			_hx_tmp2 = hx::IsNotNull( this->glFragmentSource );
            		}
            		else {
HXLINE( 183)			_hx_tmp2 = false;
            		}
HXDLIN( 183)		if (_hx_tmp2) {
HXLINE( 183)			_hx_tmp1 = hx::IsNotNull( this->glVertexSource );
            		}
            		else {
HXLINE( 183)			_hx_tmp1 = false;
            		}
HXDLIN( 183)		if (_hx_tmp1) {
HXLINE( 188)			::String _hx_tmp5;
HXDLIN( 188)			if (hx::IsEq( this->precisionHint,(int)1 )) {
HXLINE( 188)				_hx_tmp5 = HX_("mediump",5b,92,81,f0);
            			}
            			else {
HXLINE( 188)				_hx_tmp5 = HX_("lowp",5c,ad,b7,47);
            			}
HXLINE( 192)			this->glProgram = ::lime::utils::GLUtils_obj::createProgram(this->glVertexSource,(((HX_("#ifdef GL_ES\n\t\t\t\tprecision ",df,92,6a,64) + _hx_tmp5) + HX_(" float;\n\t\t\t\t#endif\n\t\t\t\t",ea,d3,26,bb)) + this->glFragmentSource));
HXLINE( 194)			Bool _hx_tmp6 = hx::IsNotNull( this->glProgram );
HXDLIN( 194)			if (_hx_tmp6) {
HXLINE( 196)				this->_hx___processGLData(this->glVertexSource,HX_("attribute",1c,70,f0,fa));
HXLINE( 197)				this->_hx___processGLData(this->glVertexSource,HX_("uniform",34,41,64,b5));
HXLINE( 198)				this->_hx___processGLData(this->glFragmentSource,HX_("uniform",34,41,64,b5));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___init,(void))

void Shader_obj::_hx___processGLData(::String source,::String storageType){
            	HX_STACK_FRAME("openfl.display.Shader","__processGLData",0x90b8a01f,"openfl.display.Shader.__processGLData","openfl/display/Shader.hx",207,0xae8f5dcd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(storageType,"storageType")
HXLINE( 209)		HX_VARI( Int,lastMatch) = (int)0;
HXDLIN( 209)		HX_VAR(  ::Dynamic,position);
HXDLIN( 209)		HX_VAR(  ::EReg,regex);
HXDLIN( 209)		HX_VAR( ::String,name);
HXDLIN( 209)		HX_VAR( ::String,type);
HXLINE( 211)		if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 213)			regex =  ::EReg_obj::__new(HX_("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)",74,9c,40,21),HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 217)			regex =  ::EReg_obj::__new(HX_("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)",5c,61,a8,c8),HX_("",00,00,00,00));
            		}
HXLINE( 221)		while(true){
HXLINE( 221)			Bool _hx_tmp = !(regex->matchSub(source,lastMatch,null()));
HXDLIN( 221)			if (_hx_tmp) {
HXLINE( 221)				goto _hx_goto_4;
            			}
HXLINE( 223)			type = regex->matched((int)1);
HXLINE( 224)			name = regex->matched((int)2);
HXLINE( 226)			Bool _hx_tmp1 = ::StringTools_obj::startsWith(type,HX_("sampler",08,c5,c9,83));
HXDLIN( 226)			if (_hx_tmp1) {
HXLINE( 228)				HX_VARI(  ::openfl::display::ShaderInput,input) =  ::openfl::display::ShaderInput_obj::__new();
HXLINE( 230)				if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 232)					 ::Dynamic program = this->glProgram->id;
HXDLIN( 232)					Int _hx_tmp2 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_uniform_location(hx::DynamicPtr(program),name)) );
HXDLIN( 232)					input->index = _hx_tmp2;
            				}
            				else {
HXLINE( 236)					 ::Dynamic program1 = this->glProgram->id;
HXDLIN( 236)					Int _hx_tmp3 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_attrib_location(hx::DynamicPtr(program1),name)) );
HXDLIN( 236)					input->index = _hx_tmp3;
            				}
HXLINE( 240)				::Reflect_obj::setField(this->data,name,input);
            			}
            			else {
HXLINE( 244)				HX_VARI(  ::openfl::display::ShaderParameter,parameter) =  ::openfl::display::ShaderParameter_obj::__new();
HXLINE( 246)				 ::Dynamic _hx_tmp4;
HXDLIN( 246)				::String _hx_switch_0 = type;
            				if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ){
HXLINE( 246)					_hx_tmp4 = (int)0;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("bvec2",c0,00,91,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)1;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("bvec3",c1,00,91,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)2;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("bvec4",c2,00,91,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)3;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("dvec2",c2,29,5e,e2)) ||  (_hx_switch_0==HX_("vec2",5e,27,4c,4e)) ){
HXLINE( 246)					_hx_tmp4 = (int)5;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("dvec3",c3,29,5e,e2)) ||  (_hx_switch_0==HX_("vec3",5f,27,4c,4e)) ){
HXLINE( 246)					_hx_tmp4 = (int)6;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("double",11,2b,cb,32)) ||  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 246)					_hx_tmp4 = (int)4;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("ivec3",48,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec3",54,06,2e,ac)) ){
HXLINE( 246)					_hx_tmp4 = (int)10;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("ivec4",49,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec4",55,06,2e,ac)) ){
HXLINE( 246)					_hx_tmp4 = (int)11;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat2",92,41,56,48)) ||  (_hx_switch_0==HX_("mat2x2",cc,b2,97,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)12;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat2x3",cd,b2,97,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)13;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat2x4",ce,b2,97,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)14;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat3x2",0d,75,98,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)15;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat3",93,41,56,48)) ||  (_hx_switch_0==HX_("mat3x3",0e,75,98,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)16;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat3x4",0f,75,98,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)17;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat4",94,41,56,48)) ||  (_hx_switch_0==HX_("mat4x4",50,37,99,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)20;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat4x2",4e,37,99,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)18;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("mat4x3",4f,37,99,bb)) ){
HXLINE( 246)					_hx_tmp4 = (int)19;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ||  (_hx_switch_0==HX_("uint",9a,03,a6,4d)) ){
HXLINE( 246)					_hx_tmp4 = (int)8;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("ivec2",47,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec2",53,06,2e,ac)) ){
HXLINE( 246)					_hx_tmp4 = (int)9;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("dvec4",c4,29,5e,e2)) ||  (_hx_switch_0==HX_("vec4",60,27,4c,4e)) ){
HXLINE( 246)					_hx_tmp4 = (int)7;
HXDLIN( 246)					goto _hx_goto_5;
            				}
            				/* default */{
HXLINE( 246)					_hx_tmp4 = null();
            				}
            				_hx_goto_5:;
HXDLIN( 246)				parameter->type = _hx_tmp4;
HXLINE( 273)				if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 275)					 ::Dynamic program2 = this->glProgram->id;
HXDLIN( 275)					Int _hx_tmp5 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_uniform_location(hx::DynamicPtr(program2),name)) );
HXDLIN( 275)					parameter->index = _hx_tmp5;
            				}
            				else {
HXLINE( 279)					 ::Dynamic program3 = this->glProgram->id;
HXDLIN( 279)					Int _hx_tmp6 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_attrib_location(hx::DynamicPtr(program3),name)) );
HXDLIN( 279)					parameter->index = _hx_tmp6;
            				}
HXLINE( 283)				::Reflect_obj::setField(this->data,name,parameter);
            			}
HXLINE( 287)			position = regex->matchedPos();
HXLINE( 288)			lastMatch = (( (Int)(position->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) + ( (Int)(position->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ));
            		}
            		_hx_goto_4:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,_hx___processGLData,(void))


Shader_obj::Shader_obj()
{
}

void Shader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shader);
	HX_MARK_MEMBER_NAME(byteCode,"byteCode");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(glFragmentSource,"glFragmentSource");
	HX_MARK_MEMBER_NAME(glProgram,"glProgram");
	HX_MARK_MEMBER_NAME(glVertexSource,"glVertexSource");
	HX_MARK_MEMBER_NAME(precisionHint,"precisionHint");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_END_CLASS();
}

void Shader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(byteCode,"byteCode");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(glFragmentSource,"glFragmentSource");
	HX_VISIT_MEMBER_NAME(glProgram,"glProgram");
	HX_VISIT_MEMBER_NAME(glVertexSource,"glVertexSource");
	HX_VISIT_MEMBER_NAME(precisionHint,"precisionHint");
	HX_VISIT_MEMBER_NAME(gl,"gl");
}

hx::Val Shader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__init") ) { return hx::Val( _hx___init_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"byteCode") ) { return hx::Val( byteCode); }
		if (HX_FIELD_EQ(inName,"__enable") ) { return hx::Val( _hx___enable_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { return hx::Val( glProgram); }
		if (HX_FIELD_EQ(inName,"__disable") ) { return hx::Val( _hx___disable_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"precisionHint") ) { return hx::Val( precisionHint); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glVertexSource") ) { return hx::Val( glVertexSource); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__processGLData") ) { return hx::Val( _hx___processGLData_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"glFragmentSource") ) { return hx::Val( glFragmentSource); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Shader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::openfl::display::ShaderData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"byteCode") ) { byteCode=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { glProgram=inValue.Cast<  ::lime::graphics::opengl::GLProgram >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"precisionHint") ) { precisionHint=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glVertexSource") ) { glVertexSource=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"glFragmentSource") ) { glFragmentSource=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Shader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("glFragmentSource","\xd0","\xc5","\xca","\xf7"));
	outFields->push(HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1"));
	outFields->push(HX_HCSTRING("glVertexSource","\x24","\x6d","\x4a","\x5b"));
	outFields->push(HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(Shader_obj,byteCode),HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42")},
	{hx::fsObject /*::openfl::display::ShaderData*/ ,(int)offsetof(Shader_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsString,(int)offsetof(Shader_obj,glFragmentSource),HX_HCSTRING("glFragmentSource","\xd0","\xc5","\xca","\xf7")},
	{hx::fsObject /*::lime::graphics::opengl::GLProgram*/ ,(int)offsetof(Shader_obj,glProgram),HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1")},
	{hx::fsString,(int)offsetof(Shader_obj,glVertexSource),HX_HCSTRING("glVertexSource","\x24","\x6d","\x4a","\x5b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Shader_obj,precisionHint),HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c")},
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(Shader_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Shader_obj_sStaticStorageInfo = 0;
#endif

static ::String Shader_obj_sMemberFields[] = {
	HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("glFragmentSource","\xd0","\xc5","\xca","\xf7"),
	HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1"),
	HX_HCSTRING("glVertexSource","\x24","\x6d","\x4a","\x5b"),
	HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("__disable","\xc8","\xba","\xa6","\x32"),
	HX_HCSTRING("__enable","\xa3","\x19","\xb7","\xa0"),
	HX_HCSTRING("__init","\x30","\x9e","\xb3","\xf4"),
	HX_HCSTRING("__processGLData","\x7e","\x0f","\x78","\x7c"),
	::String(null()) };

static void Shader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#endif

hx::Class Shader_obj::__mClass;

void Shader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Shader","\x0f","\xdf","\x61","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
