// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","new",0x4362e03c,"openfl.display.DisplayObjectContainer.new","openfl/display/DisplayObjectContainer.hx",31,0x5f4d3d72)
            	HX_STACK_THIS(this)
HXLINE(  33)		super::__construct();
HXLINE(  35)		this->mouseChildren = true;
HXLINE(  37)		this->_hx___children = ::Array_obj< ::Dynamic>::__new();
HXLINE(  38)		this->_hx___removedChildren = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new()
{
	hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DisplayObjectContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","addChild",0x5694c25f,"openfl.display.DisplayObjectContainer.addChild","openfl/display/DisplayObjectContainer.hx",45,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
HXLINE(  45)		Int _hx_tmp = this->get_numChildren();
HXDLIN(  45)		return this->addChildAt(child,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::openfl::display::DisplayObject child,Int index){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","addChildAt",0xb7119132,"openfl.display.DisplayObjectContainer.addChildAt","openfl/display/DisplayObjectContainer.hx",50,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
            	HX_STACK_ARG(index,"index")
HXLINE(  52)		Bool _hx_tmp;
HXDLIN(  52)		if ((index <= this->_hx___children->length)) {
HXLINE(  52)			_hx_tmp = (index < (int)0);
            		}
            		else {
HXLINE(  52)			_hx_tmp = true;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  54)			HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            		}
HXLINE(  58)		if (hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  60)			this->_hx___children->remove(child);
HXLINE(  61)			this->_hx___children->insert(index,child);
            		}
            		else {
HXLINE(  65)			Bool _hx_tmp1 = hx::IsNotNull( child->parent );
HXDLIN(  65)			if (_hx_tmp1) {
HXLINE(  67)				child->parent->removeChild(child);
            			}
HXLINE(  71)			this->_hx___children->insert(index,child);
HXLINE(  72)			child->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE(  74)			HX_VAR( Bool,addedToStage);
HXDLIN(  74)			Bool _hx_tmp2 = hx::IsNotNull( this->stage );
HXDLIN(  74)			if (_hx_tmp2) {
HXLINE(  74)				addedToStage = hx::IsNull( child->stage );
            			}
            			else {
HXLINE(  74)				addedToStage = false;
            			}
HXLINE(  76)			if (addedToStage) {
HXLINE(  78)				this->_hx___setStageReference(this->stage);
            			}
HXLINE(  82)			Bool _hx_tmp3 = !(child->_hx___transformDirty);
HXDLIN(  82)			if (_hx_tmp3) {
HXLINE(  82)				child->_hx___transformDirty = true;
HXDLIN(  82)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(  83)			Bool _hx_tmp4 = !(child->_hx___renderDirty);
HXDLIN(  83)			if (_hx_tmp4) {
HXLINE(  83)				child->_hx___renderDirty = true;
HXDLIN(  83)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
HXLINE(  84)			Bool _hx_tmp5 = !(this->_hx___renderDirty);
HXDLIN(  84)			if (_hx_tmp5) {
HXLINE(  84)				this->_hx___renderDirty = true;
HXDLIN(  84)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
HXLINE(  86)			HX_VARI(  ::openfl::events::Event,event) =  ::openfl::events::Event_obj::__new(HX_("added",c0,d4,43,1c),true,null());
HXLINE(  87)			event->target = child;
HXLINE(  88)			child->_hx___dispatchEvent(event);
HXLINE(  90)			if (addedToStage) {
HXLINE(  92)				HX_VARI_NAME(  ::openfl::events::Event,event1,"event") =  ::openfl::events::Event_obj::__new(HX_("addedToStage",63,22,55,0c),false,false);
HXLINE(  94)				child->dispatchEvent(event1);
HXLINE(  96)				Bool _hx_tmp6 = hx::IsNotNull( child->_hx___children );
HXDLIN(  96)				if (_hx_tmp6) {
HXLINE(  98)					HX_VARI( Int,_g) = (int)0;
HXDLIN(  98)					HX_VARI( ::Array< ::Dynamic>,_g1) = child->_hx___children;
HXDLIN(  98)					while((_g < _g1->length)){
HXLINE(  98)						HX_VARI(  ::openfl::display::DisplayObject,_child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(  98)						++_g;
HXLINE( 100)						_child->dispatchEvent(event1);
            					}
            				}
            			}
            		}
HXLINE( 110)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

Bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0x2380e0e1,"openfl.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",117,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 117)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

Bool DisplayObjectContainer_obj::contains( ::openfl::display::DisplayObject child){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","contains",0xc3f94cc3,"openfl.display.DisplayObjectContainer.contains","openfl/display/DisplayObjectContainer.hx",122,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
HXLINE( 124)		while(true){
HXLINE( 124)			Bool _hx_tmp;
HXDLIN( 124)			if (hx::IsNotEq( child,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 124)				_hx_tmp = hx::IsNotNull( child );
            			}
            			else {
HXLINE( 124)				_hx_tmp = false;
            			}
HXDLIN( 124)			if (!(_hx_tmp)) {
HXLINE( 124)				goto _hx_goto_1;
            			}
HXLINE( 126)			child = child->parent;
            		}
            		_hx_goto_1:;
HXLINE( 130)		return hx::IsEq( child,hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildAt(Int index){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","getChildAt",0x9ee8eb5d,"openfl.display.DisplayObjectContainer.getChildAt","openfl/display/DisplayObjectContainer.hx",135,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 137)		Bool _hx_tmp;
HXDLIN( 137)		if ((index >= (int)0)) {
HXLINE( 137)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 137)			_hx_tmp = false;
            		}
HXDLIN( 137)		if (_hx_tmp) {
HXLINE( 139)			return this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            		}
HXLINE( 143)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","getChildByName",0x64b33f2c,"openfl.display.DisplayObjectContainer.getChildByName","openfl/display/DisplayObjectContainer.hx",148,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 150)		{
HXLINE( 150)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 150)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 150)			while((_g < _g1->length)){
HXLINE( 150)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 150)				++_g;
HXLINE( 152)				::String _hx_tmp = child->get_name();
HXDLIN( 152)				if ((_hx_tmp == name)) {
HXLINE( 152)					return child;
            				}
            			}
            		}
HXLINE( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

Int DisplayObjectContainer_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","getChildIndex",0xcc3e62e8,"openfl.display.DisplayObjectContainer.getChildIndex","openfl/display/DisplayObjectContainer.hx",162,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
HXLINE( 164)		{
HXLINE( 164)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 164)			HX_VARI( Int,_g) = this->_hx___children->length;
HXDLIN( 164)			while((_g1 < _g)){
HXLINE( 164)				HX_VARI( Int,i) = _g1++;
HXLINE( 166)				if (hx::IsEq( this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 166)					return i;
            				}
            			}
            		}
HXLINE( 170)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","getObjectsUnderPoint",0x85c6693a,"openfl.display.DisplayObjectContainer.getObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",175,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 177)		HX_VARI( ::Array< ::Dynamic>,stack) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 178)		this->_hx___hitTest(point->x,point->y,false,stack,false,hx::ObjectPtr<OBJ_>(this));
HXLINE( 179)		stack->reverse();
HXLINE( 180)		return stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","removeChild",0x1a99d294,"openfl.display.DisplayObjectContainer.removeChild","openfl/display/DisplayObjectContainer.hx",185,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
HXLINE( 187)		Bool _hx_tmp;
HXDLIN( 187)		Bool _hx_tmp1 = hx::IsNotNull( child );
HXDLIN( 187)		if (_hx_tmp1) {
HXLINE( 187)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 187)			_hx_tmp = false;
            		}
HXDLIN( 187)		if (_hx_tmp) {
HXLINE( 189)			child->_hx___dispatchEvent( ::openfl::events::Event_obj::__new(HX_("removed",a0,1f,00,f3),true,null()));
HXLINE( 191)			Bool _hx_tmp2 = hx::IsNotNull( this->stage );
HXDLIN( 191)			if (_hx_tmp2) {
HXLINE( 193)				HX_VARI(  ::openfl::events::Event,event) =  ::openfl::events::Event_obj::__new(HX_("removedFromStage",34,21,76,ba),false,false);
HXLINE( 195)				child->dispatchEvent(event);
HXLINE( 197)				Bool _hx_tmp3 = hx::IsNotNull( child->_hx___children );
HXDLIN( 197)				if (_hx_tmp3) {
HXLINE( 199)					HX_VARI( Int,_g) = (int)0;
HXDLIN( 199)					HX_VARI( ::Array< ::Dynamic>,_g1) = child->_hx___children;
HXDLIN( 199)					while((_g < _g1->length)){
HXLINE( 199)						HX_VARI(  ::openfl::display::DisplayObject,_child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 199)						++_g;
HXLINE( 201)						_child->dispatchEvent(event);
            					}
            				}
HXLINE( 207)				child->_hx___setStageReference(null());
            			}
HXLINE( 211)			child->parent = null();
HXLINE( 212)			this->_hx___children->remove(child);
HXLINE( 213)			this->_hx___removedChildren->push(child);
HXLINE( 214)			Bool _hx_tmp4 = !(child->_hx___transformDirty);
HXDLIN( 214)			if (_hx_tmp4) {
HXLINE( 214)				child->_hx___transformDirty = true;
HXDLIN( 214)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE( 215)			Bool _hx_tmp5 = !(child->_hx___renderDirty);
HXDLIN( 215)			if (_hx_tmp5) {
HXLINE( 215)				child->_hx___renderDirty = true;
HXDLIN( 215)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
HXLINE( 216)			Bool _hx_tmp6 = !(this->_hx___renderDirty);
HXDLIN( 216)			if (_hx_tmp6) {
HXLINE( 216)				this->_hx___renderDirty = true;
HXDLIN( 216)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE( 220)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(Int index){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","removeChildAt",0x52a2d8a7,"openfl.display.DisplayObjectContainer.removeChildAt","openfl/display/DisplayObjectContainer.hx",225,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 227)		Bool _hx_tmp;
HXDLIN( 227)		if ((index >= (int)0)) {
HXLINE( 227)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 227)			_hx_tmp = false;
            		}
HXDLIN( 227)		if (_hx_tmp) {
HXLINE( 229)			 ::openfl::display::DisplayObject _hx_tmp1 = this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 229)			return this->removeChild(_hx_tmp1);
            		}
HXLINE( 233)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(hx::Null< Int >  __o_beginIndex,hx::Null< Int >  __o_endIndex){
Int beginIndex = __o_beginIndex.Default(0);
Int endIndex = __o_endIndex.Default(2147483647);
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","removeChildren",0xfbffdb47,"openfl.display.DisplayObjectContainer.removeChildren","openfl/display/DisplayObjectContainer.hx",238,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 240)		Bool _hx_tmp = (endIndex == (int)2147483647);
HXDLIN( 240)		if (_hx_tmp) {
HXLINE( 242)			endIndex = (this->_hx___children->length - (int)1);
HXLINE( 244)			if ((endIndex < (int)0)) {
HXLINE( 246)				return;
            			}
            		}
HXLINE( 252)		Bool _hx_tmp1 = (beginIndex > (this->_hx___children->length - (int)1));
HXDLIN( 252)		if (_hx_tmp1) {
HXLINE( 254)			return;
            		}
            		else {
HXLINE( 256)			Bool _hx_tmp2;
HXDLIN( 256)			Bool _hx_tmp3;
HXDLIN( 256)			if ((endIndex >= beginIndex)) {
HXLINE( 256)				_hx_tmp3 = (beginIndex < (int)0);
            			}
            			else {
HXLINE( 256)				_hx_tmp3 = true;
            			}
HXDLIN( 256)			if (!(_hx_tmp3)) {
HXLINE( 256)				_hx_tmp2 = (endIndex > this->_hx___children->length);
            			}
            			else {
HXLINE( 256)				_hx_tmp2 = true;
            			}
HXDLIN( 256)			if (_hx_tmp2) {
HXLINE( 258)				HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__new(HX_("The supplied index is out of bounds.",17,96,1b,51)));
            			}
            		}
HXLINE( 262)		HX_VARI( Int,numRemovals) = (endIndex - beginIndex);
HXLINE( 263)		while((numRemovals >= (int)0)){
HXLINE( 265)			this->removeChildAt(beginIndex);
HXLINE( 266)			--numRemovals;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::resolve(::String fieldName){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","resolve",0x8cca40c8,"openfl.display.DisplayObjectContainer.resolve","openfl/display/DisplayObjectContainer.hx",273,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fieldName,"fieldName")
HXLINE( 275)		Bool _hx_tmp = hx::IsNull( this->_hx___children );
HXDLIN( 275)		if (_hx_tmp) {
HXLINE( 275)			return null();
            		}
HXLINE( 277)		{
HXLINE( 277)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 277)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 277)			while((_g < _g1->length)){
HXLINE( 277)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 277)				++_g;
HXLINE( 279)				::String _hx_tmp1 = child->get_name();
HXDLIN( 279)				if ((_hx_tmp1 == fieldName)) {
HXLINE( 281)					return child;
            				}
            			}
            		}
HXLINE( 287)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,resolve,return )

void DisplayObjectContainer_obj::setChildIndex( ::openfl::display::DisplayObject child,Int index){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","setChildIndex",0x114444f4,"openfl.display.DisplayObjectContainer.setChildIndex","openfl/display/DisplayObjectContainer.hx",294,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child,"child")
            	HX_STACK_ARG(index,"index")
HXLINE( 294)		Bool _hx_tmp;
HXDLIN( 294)		Bool _hx_tmp1;
HXDLIN( 294)		if ((index >= (int)0)) {
HXLINE( 294)			_hx_tmp1 = (index <= this->_hx___children->length);
            		}
            		else {
HXLINE( 294)			_hx_tmp1 = false;
            		}
HXDLIN( 294)		if (_hx_tmp1) {
HXLINE( 294)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 294)			_hx_tmp = false;
            		}
HXDLIN( 294)		if (_hx_tmp) {
HXLINE( 296)			this->_hx___children->remove(child);
HXLINE( 297)			this->_hx___children->insert(index,child);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::stopAllMovieClips(){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","stopAllMovieClips",0x46e0f9ce,"openfl.display.DisplayObjectContainer.stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",306,0x5f4d3d72)
            	HX_STACK_THIS(this)
HXLINE( 306)		this->_hx___stopAllMovieClips();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,stopAllMovieClips,(void))

void DisplayObjectContainer_obj::swapChildren( ::openfl::display::DisplayObject child1, ::openfl::display::DisplayObject child2){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","swapChildren",0xe0695f96,"openfl.display.DisplayObjectContainer.swapChildren","openfl/display/DisplayObjectContainer.hx",313,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(child1,"child1")
            	HX_STACK_ARG(child2,"child2")
HXLINE( 313)		Bool _hx_tmp;
HXDLIN( 313)		if (hx::IsEq( child1->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 313)			_hx_tmp = hx::IsEq( child2->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 313)			_hx_tmp = false;
            		}
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 317)			HX_VARI( Int,index1) = this->_hx___children->indexOf(child1,null());
HXLINE( 318)			HX_VARI( Int,index2) = this->_hx___children->indexOf(child2,null());
HXLINE( 341)			this->_hx___children[index1] = child2;
HXLINE( 342)			this->_hx___children[index2] = child1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(Int index1,Int index2){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","swapChildrenAt",0xd5312a29,"openfl.display.DisplayObjectContainer.swapChildrenAt","openfl/display/DisplayObjectContainer.hx",349,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index1,"index1")
            	HX_STACK_ARG(index2,"index2")
HXLINE( 351)		HX_VARI(  ::openfl::display::DisplayObject,swap) = this->_hx___children->__get(index1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 352)		 ::openfl::display::DisplayObject _hx_tmp = this->_hx___children->__get(index2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 352)		this->_hx___children[index1] = _hx_tmp;
HXLINE( 353)		this->_hx___children[index2] = swap;
HXLINE( 354)		swap = null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

void DisplayObjectContainer_obj::_hx___enterFrame(Int deltaTime){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__enterFrame",0x3af993b9,"openfl.display.DisplayObjectContainer.__enterFrame","openfl/display/DisplayObjectContainer.hx",361,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
HXLINE( 361)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 361)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 361)		while((_g < _g1->length)){
HXLINE( 361)			HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 361)			++_g;
HXLINE( 363)			child->_hx___enterFrame(deltaTime);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__getBounds",0xe74ca467,"openfl.display.DisplayObjectContainer.__getBounds","openfl/display/DisplayObjectContainer.hx",370,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 372)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 374)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 374)			return;
            		}
HXLINE( 376)		Bool _hx_tmp = hx::IsNotNull( matrix );
HXDLIN( 376)		if (_hx_tmp) {
HXLINE( 378)			this->_hx___updateTransforms(matrix);
HXLINE( 379)			this->_hx___updateChildren(true);
            		}
HXLINE( 383)		{
HXLINE( 383)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 383)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 383)			while((_g < _g1->length)){
HXLINE( 383)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 383)				++_g;
HXLINE( 385)				Bool _hx_tmp1;
HXDLIN( 385)				Float _hx_tmp2 = child->get_scaleX();
HXDLIN( 385)				if ((_hx_tmp2 != (int)0)) {
HXLINE( 385)					Float _hx_tmp3 = child->get_scaleY();
HXDLIN( 385)					_hx_tmp1 = (_hx_tmp3 == (int)0);
            				}
            				else {
HXLINE( 385)					_hx_tmp1 = true;
            				}
HXDLIN( 385)				if (_hx_tmp1) {
HXLINE( 385)					continue;
            				}
HXLINE( 386)				child->_hx___getBounds(rect,child->_hx___worldTransform);
            			}
            		}
HXLINE( 390)		Bool _hx_tmp4 = hx::IsNotNull( matrix );
HXDLIN( 390)		if (_hx_tmp4) {
HXLINE( 392)			this->_hx___updateTransforms(null());
HXLINE( 393)			this->_hx___updateChildren(true);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__getRenderBounds",0x21a0a9dd,"openfl.display.DisplayObjectContainer.__getRenderBounds","openfl/display/DisplayObjectContainer.hx",400,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 402)		Bool _hx_tmp = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 402)		if (_hx_tmp) {
HXLINE( 404)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 405)			return;
            		}
            		else {
HXLINE( 409)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 413)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 413)			return;
            		}
HXLINE( 415)		Bool _hx_tmp1 = hx::IsNotNull( matrix );
HXDLIN( 415)		if (_hx_tmp1) {
HXLINE( 417)			this->_hx___updateTransforms(matrix);
HXLINE( 418)			this->_hx___updateChildren(true);
            		}
HXLINE( 422)		{
HXLINE( 422)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 422)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 422)			while((_g < _g1->length)){
HXLINE( 422)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 422)				++_g;
HXLINE( 424)				Bool _hx_tmp2;
HXDLIN( 424)				Bool _hx_tmp3;
HXDLIN( 424)				Float _hx_tmp4 = child->get_scaleX();
HXDLIN( 424)				if ((_hx_tmp4 != (int)0)) {
HXLINE( 424)					Float _hx_tmp5 = child->get_scaleY();
HXDLIN( 424)					_hx_tmp3 = (_hx_tmp5 == (int)0);
            				}
            				else {
HXLINE( 424)					_hx_tmp3 = true;
            				}
HXDLIN( 424)				if (!(_hx_tmp3)) {
HXLINE( 424)					_hx_tmp2 = child->_hx___isMask;
            				}
            				else {
HXLINE( 424)					_hx_tmp2 = true;
            				}
HXDLIN( 424)				if (_hx_tmp2) {
HXLINE( 424)					continue;
            				}
HXLINE( 425)				child->_hx___getRenderBounds(rect,child->_hx___worldTransform);
            			}
            		}
HXLINE( 429)		Bool _hx_tmp6 = hx::IsNotNull( matrix );
HXDLIN( 429)		if (_hx_tmp6) {
HXLINE( 431)			this->_hx___updateTransforms(null());
HXLINE( 432)			this->_hx___updateChildren(true);
            		}
            	}


Bool DisplayObjectContainer_obj::_hx___hitTest(Float x,Float y,Bool shapeFlag,::Array< ::Dynamic> stack,Bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__hitTest",0x5a840e01,"openfl.display.DisplayObjectContainer.__hitTest","openfl/display/DisplayObjectContainer.hx",439,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(stack,"stack")
            	HX_STACK_ARG(interactiveOnly,"interactiveOnly")
            	HX_STACK_ARG(hitObject,"hitObject")
HXLINE( 441)		Bool _hx_tmp;
HXDLIN( 441)		Bool _hx_tmp1;
HXDLIN( 441)		Bool _hx_tmp2 = !(!(hitObject->get_visible()));
HXDLIN( 441)		if (_hx_tmp2) {
HXLINE( 441)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 441)			_hx_tmp1 = true;
            		}
HXDLIN( 441)		if (!(_hx_tmp1)) {
HXLINE( 441)			Bool _hx_tmp3;
HXDLIN( 441)			if (interactiveOnly) {
HXLINE( 441)				_hx_tmp3 = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 441)				_hx_tmp3 = false;
            			}
HXDLIN( 441)			if (_hx_tmp3) {
HXLINE( 441)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 441)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 441)			_hx_tmp = true;
            		}
HXDLIN( 441)		if (_hx_tmp) {
HXLINE( 441)			return false;
            		}
HXLINE( 442)		Bool _hx_tmp4;
HXDLIN( 442)		 ::openfl::display::DisplayObject _hx_tmp5 = this->get_mask();
HXDLIN( 442)		Bool _hx_tmp6 = hx::IsNotNull( _hx_tmp5 );
HXDLIN( 442)		if (_hx_tmp6) {
HXLINE( 442)			_hx_tmp4 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 442)			_hx_tmp4 = false;
            		}
HXDLIN( 442)		if (_hx_tmp4) {
HXLINE( 442)			return false;
            		}
HXLINE( 443)		Bool _hx_tmp7;
HXDLIN( 443)		 ::openfl::geom::Rectangle _hx_tmp8 = this->get_scrollRect();
HXDLIN( 443)		Bool _hx_tmp9 = hx::IsNotNull( _hx_tmp8 );
HXDLIN( 443)		if (_hx_tmp9) {
HXLINE( 443)			 ::openfl::geom::Rectangle _hx_tmp10 = this->get_scrollRect();
HXDLIN( 443)			 ::openfl::geom::Point _hx_tmp11 = this->globalToLocal( ::openfl::geom::Point_obj::__new(x,y));
HXDLIN( 443)			_hx_tmp7 = !(_hx_tmp10->containsPoint(_hx_tmp11));
            		}
            		else {
HXLINE( 443)			_hx_tmp7 = false;
            		}
HXDLIN( 443)		if (_hx_tmp7) {
HXLINE( 443)			return false;
            		}
HXLINE( 445)		HX_VARI( Int,i) = this->_hx___children->length;
HXLINE( 446)		if (interactiveOnly) {
HXLINE( 448)			Bool _hx_tmp12;
HXDLIN( 448)			Bool _hx_tmp13 = hx::IsNotNull( stack );
HXDLIN( 448)			if (_hx_tmp13) {
HXLINE( 448)				_hx_tmp12 = !(this->mouseChildren);
            			}
            			else {
HXLINE( 448)				_hx_tmp12 = true;
            			}
HXDLIN( 448)			if (_hx_tmp12) {
HXLINE( 450)				while(true){
HXLINE( 450)					Int _hx_tmp14 = --i;
HXDLIN( 450)					if (!((_hx_tmp14 >= (int)0))) {
HXLINE( 450)						goto _hx_goto_10;
            					}
HXLINE( 452)					Bool _hx_tmp15 = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,null(),true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >());
HXDLIN( 452)					if (_hx_tmp15) {
HXLINE( 454)						Bool _hx_tmp16 = hx::IsNotNull( stack );
HXDLIN( 454)						if (_hx_tmp16) {
HXLINE( 456)							stack->push(hitObject);
            						}
HXLINE( 460)						return true;
            					}
            				}
            				_hx_goto_10:;
            			}
            			else {
HXLINE( 466)				Bool _hx_tmp17 = hx::IsNotNull( stack );
HXDLIN( 466)				if (_hx_tmp17) {
HXLINE( 468)					HX_VARI( Int,length) = stack->length;
HXLINE( 470)					HX_VARI( Bool,interactive) = false;
HXLINE( 471)					HX_VARI( Bool,hitTest) = false;
HXLINE( 473)					while(true){
HXLINE( 473)						Int _hx_tmp18 = --i;
HXDLIN( 473)						if (!((_hx_tmp18 >= (int)0))) {
HXLINE( 473)							goto _hx_goto_11;
            						}
HXLINE( 475)						interactive = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___getInteractive(null());
HXLINE( 477)						Bool _hx_tmp19;
HXDLIN( 477)						if (!(interactive)) {
HXLINE( 477)							if (this->mouseEnabled) {
HXLINE( 477)								_hx_tmp19 = !(hitTest);
            							}
            							else {
HXLINE( 477)								_hx_tmp19 = false;
            							}
            						}
            						else {
HXLINE( 477)							_hx_tmp19 = true;
            						}
HXDLIN( 477)						if (_hx_tmp19) {
HXLINE( 479)							Bool _hx_tmp20 = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >());
HXDLIN( 479)							if (_hx_tmp20) {
HXLINE( 481)								hitTest = true;
HXLINE( 483)								if (interactive) {
HXLINE( 485)									goto _hx_goto_11;
            								}
            							}
            						}
            					}
            					_hx_goto_11:;
HXLINE( 495)					if (hitTest) {
HXLINE( 497)						stack->insert(length,hitObject);
HXLINE( 498)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 506)			while(true){
HXLINE( 506)				Int _hx_tmp21 = --i;
HXDLIN( 506)				if (!((_hx_tmp21 >= (int)0))) {
HXLINE( 506)					goto _hx_goto_12;
            				}
HXLINE( 508)				this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,false,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >());
            			}
            			_hx_goto_12:;
            		}
HXLINE( 514)		return false;
            	}


Bool DisplayObjectContainer_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__hitTestMask",0x4f390f8d,"openfl.display.DisplayObjectContainer.__hitTestMask","openfl/display/DisplayObjectContainer.hx",519,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 521)		HX_VARI( Int,i) = this->_hx___children->length;
HXLINE( 523)		while(true){
HXLINE( 523)			Int _hx_tmp = --i;
HXDLIN( 523)			if (!((_hx_tmp >= (int)0))) {
HXLINE( 523)				goto _hx_goto_13;
            			}
HXLINE( 525)			Bool _hx_tmp1 = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTestMask(x,y);
HXDLIN( 525)			if (_hx_tmp1) {
HXLINE( 527)				return true;
            			}
            		}
            		_hx_goto_13:;
HXLINE( 533)		return false;
            	}


void DisplayObjectContainer_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,Bool recurse){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__readGraphicsData",0x782e37cf,"openfl.display.DisplayObjectContainer.__readGraphicsData","openfl/display/DisplayObjectContainer.hx",538,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(graphicsData,"graphicsData")
            	HX_STACK_ARG(recurse,"recurse")
HXLINE( 540)		this->super::_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 542)		if (recurse) {
HXLINE( 544)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 544)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 544)			while((_g < _g1->length)){
HXLINE( 544)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 544)				++_g;
HXLINE( 546)				child->_hx___readGraphicsData(graphicsData,recurse);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__renderCairo",0x687e990e,"openfl.display.DisplayObjectContainer.__renderCairo","openfl/display/DisplayObjectContainer.hx",555,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 557)		Bool _hx_tmp;
HXDLIN( 557)		if (!(!(this->_hx___renderable))) {
HXLINE( 557)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 557)			_hx_tmp = true;
            		}
HXDLIN( 557)		if (_hx_tmp) {
HXLINE( 557)			return;
            		}
HXLINE( 559)		this->super::_hx___renderCairo(renderSession);
HXLINE( 561)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 563)		{
HXLINE( 563)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 563)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 563)			while((_g < _g1->length)){
HXLINE( 563)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 563)				++_g;
HXLINE( 565)				child->_hx___renderCairo(renderSession);
            			}
            		}
HXLINE( 569)		{
HXLINE( 569)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 569)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___removedChildren;
HXDLIN( 569)			while((_g2 < _g11->length)){
HXLINE( 569)				HX_VARI(  ::openfl::display::DisplayObject,orphan) = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 569)				++_g2;
HXLINE( 571)				Bool _hx_tmp1 = hx::IsNull( orphan->stage );
HXDLIN( 571)				if (_hx_tmp1) {
HXLINE( 573)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 579)		Bool _hx_tmp2 = (this->_hx___removedChildren->length > (int)0);
HXDLIN( 579)		if (_hx_tmp2) {
HXLINE( 581)			this->_hx___removedChildren->removeRange((int)0,this->_hx___removedChildren->length);
            		}
HXLINE( 585)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__renderCairoMask",0x110aa51a,"openfl.display.DisplayObjectContainer.__renderCairoMask","openfl/display/DisplayObjectContainer.hx",590,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 592)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 594)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
HXLINE( 598)		{
HXLINE( 598)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 598)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 598)			while((_g < _g1->length)){
HXLINE( 598)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 598)				++_g;
HXLINE( 600)				child->_hx___renderCairoMask(renderSession);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__renderCanvas",0x09986192,"openfl.display.DisplayObjectContainer.__renderCanvas","openfl/display/DisplayObjectContainer.hx",607,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 609)		Bool _hx_tmp;
HXDLIN( 609)		if (!(!(this->_hx___renderable))) {
HXLINE( 609)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 609)			_hx_tmp = true;
            		}
HXDLIN( 609)		if (_hx_tmp) {
HXLINE( 609)			return;
            		}
HXLINE( 613)		this->super::_hx___renderCanvas(renderSession);
HXLINE( 615)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 617)		{
HXLINE( 617)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 617)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 617)			while((_g < _g1->length)){
HXLINE( 617)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 617)				++_g;
HXLINE( 619)				child->_hx___renderCanvas(renderSession);
            			}
            		}
HXLINE( 623)		{
HXLINE( 623)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 623)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___removedChildren;
HXDLIN( 623)			while((_g2 < _g11->length)){
HXLINE( 623)				HX_VARI(  ::openfl::display::DisplayObject,orphan) = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 623)				++_g2;
HXLINE( 625)				Bool _hx_tmp1 = hx::IsNull( orphan->stage );
HXDLIN( 625)				if (_hx_tmp1) {
HXLINE( 627)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 633)		Bool _hx_tmp2 = (this->_hx___removedChildren->length > (int)0);
HXDLIN( 633)		if (_hx_tmp2) {
HXLINE( 635)			this->_hx___removedChildren->removeRange((int)0,this->_hx___removedChildren->length);
            		}
HXLINE( 639)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__renderCanvasMask",0xd78cff9e,"openfl.display.DisplayObjectContainer.__renderCanvasMask","openfl/display/DisplayObjectContainer.hx",646,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 648)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 648)		if (_hx_tmp) {
HXLINE( 650)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
HXLINE( 654)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 655)		this->_hx___getBounds(bounds,this->_hx___transform);
HXLINE( 657)		renderSession->context->rect((int)0,(int)0,bounds->width,bounds->height);
            	}


void DisplayObjectContainer_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__renderDOM",0xd2304188,"openfl.display.DisplayObjectContainer.__renderDOM","openfl/display/DisplayObjectContainer.hx",668,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 672)		this->super::_hx___renderDOM(renderSession);
HXLINE( 674)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 676)		{
HXLINE( 676)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 676)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 676)			while((_g < _g1->length)){
HXLINE( 676)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 676)				++_g;
HXLINE( 678)				child->_hx___renderDOM(renderSession);
            			}
            		}
HXLINE( 682)		{
HXLINE( 682)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 682)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___removedChildren;
HXDLIN( 682)			while((_g2 < _g11->length)){
HXLINE( 682)				HX_VARI(  ::openfl::display::DisplayObject,orphan) = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 682)				++_g2;
HXLINE( 684)				Bool _hx_tmp = hx::IsNull( orphan->stage );
HXDLIN( 684)				if (_hx_tmp) {
HXLINE( 686)					orphan->_hx___renderDOM(renderSession);
            				}
            			}
            		}
HXLINE( 692)		Bool _hx_tmp1 = (this->_hx___removedChildren->length > (int)0);
HXDLIN( 692)		if (_hx_tmp1) {
HXLINE( 694)			this->_hx___removedChildren->removeRange((int)0,this->_hx___removedChildren->length);
            		}
HXLINE( 698)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__renderGL",0x3eef01bf,"openfl.display.DisplayObjectContainer.__renderGL","openfl/display/DisplayObjectContainer.hx",705,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 707)		Bool _hx_tmp;
HXDLIN( 707)		if (!(!(this->_hx___renderable))) {
HXLINE( 707)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 707)			_hx_tmp = true;
            		}
HXDLIN( 707)		if (_hx_tmp) {
HXLINE( 707)			return;
            		}
HXLINE( 709)		this->super::_hx___renderGL(renderSession);
HXLINE( 711)		renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 713)		{
HXLINE( 713)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 713)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 713)			while((_g < _g1->length)){
HXLINE( 713)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 713)				++_g;
HXLINE( 715)				child->_hx___renderGL(renderSession);
            			}
            		}
HXLINE( 719)		{
HXLINE( 719)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 719)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___removedChildren;
HXDLIN( 719)			while((_g2 < _g11->length)){
HXLINE( 719)				HX_VARI(  ::openfl::display::DisplayObject,orphan) = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 719)				++_g2;
HXLINE( 721)				Bool _hx_tmp1 = hx::IsNull( orphan->stage );
HXDLIN( 721)				if (_hx_tmp1) {
HXLINE( 723)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 729)		Bool _hx_tmp2 = (this->_hx___removedChildren->length > (int)0);
HXDLIN( 729)		if (_hx_tmp2) {
HXLINE( 731)			this->_hx___removedChildren->removeRange((int)0,this->_hx___removedChildren->length);
            		}
HXLINE( 735)		renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__setStageReference",0x58cb6d2b,"openfl.display.DisplayObjectContainer.__setStageReference","openfl/display/DisplayObjectContainer.hx",740,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stage,"stage")
HXLINE( 742)		this->super::_hx___setStageReference(stage);
HXLINE( 744)		Bool _hx_tmp = hx::IsNotNull( this->_hx___children );
HXDLIN( 744)		if (_hx_tmp) {
HXLINE( 746)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 746)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 746)			while((_g < _g1->length)){
HXLINE( 746)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 746)				++_g;
HXLINE( 748)				child->_hx___setStageReference(stage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___stopAllMovieClips(){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__stopAllMovieClips",0xb7ce11ae,"openfl.display.DisplayObjectContainer.__stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",759,0x5f4d3d72)
            	HX_STACK_THIS(this)
HXLINE( 759)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 759)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 759)		while((_g < _g1->length)){
HXLINE( 759)			HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 759)			++_g;
HXLINE( 761)			child->_hx___stopAllMovieClips();
            		}
            	}


void DisplayObjectContainer_obj::_hx___update(Bool transformOnly,Bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__update",0xc6b2e3cd,"openfl.display.DisplayObjectContainer.__update","openfl/display/DisplayObjectContainer.hx",768,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
            	HX_STACK_ARG(updateChildren,"updateChildren")
            	HX_STACK_ARG(maskGraphics,"maskGraphics")
HXLINE( 770)		this->super::_hx___update(transformOnly,updateChildren,maskGraphics);
HXLINE( 773)		Bool _hx_tmp;
HXDLIN( 773)		if (!(this->_hx___renderable)) {
HXLINE( 773)			_hx_tmp = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 773)			_hx_tmp = false;
            		}
HXDLIN( 773)		if (_hx_tmp) {
HXLINE( 775)			return;
            		}
HXLINE( 779)		if (updateChildren) {
HXLINE( 781)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 781)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 781)			while((_g < _g1->length)){
HXLINE( 781)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 781)				++_g;
HXLINE( 783)				child->_hx___update(transformOnly,true,maskGraphics);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___updateChildren(Bool transformOnly){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","__updateChildren",0x0e3ace2c,"openfl.display.DisplayObjectContainer.__updateChildren","openfl/display/DisplayObjectContainer.hx",792,0x5f4d3d72)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
HXLINE( 794)		this->super::_hx___updateChildren(transformOnly);
HXLINE( 796)		{
HXLINE( 796)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 796)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___children;
HXDLIN( 796)			while((_g < _g1->length)){
HXLINE( 796)				HX_VARI(  ::openfl::display::DisplayObject,child) = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 796)				++_g;
HXLINE( 798)				child->_hx___update(transformOnly,true,null());
            			}
            		}
            	}


Int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACK_FRAME("openfl.display.DisplayObjectContainer","get_numChildren",0x73b78b18,"openfl.display.DisplayObjectContainer.get_numChildren","openfl/display/DisplayObjectContainer.hx",814,0x5f4d3d72)
            	HX_STACK_THIS(this)
HXLINE( 814)		return this->_hx___children->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )


DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(tabChildren,"tabChildren");
	HX_MARK_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(tabChildren,"tabChildren");
	HX_VISIT_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn()); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn()); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return hx::Val( getChildAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_numChildren()); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { return hx::Val( tabChildren); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return hx::Val( swapChildren_dyn()); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return hx::Val( mouseChildren); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return hx::Val( getChildIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn()); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return hx::Val( setChildIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return hx::Val( getChildByName_dyn()); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return hx::Val( removeChildren_dyn()); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return hx::Val( swapChildrenAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return hx::Val( get_numChildren_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { return hx::Val( _hx___removedChildren); }
		if (HX_FIELD_EQ(inName,"stopAllMovieClips") ) { return hx::Val( stopAllMovieClips_dyn()); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return hx::Val( getObjectsUnderPoint_dyn()); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return hx::Val( areInaccessibleObjectsUnderPoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tabChildren") ) { tabChildren=inValue.Cast< Bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< Bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { _hx___removedChildren=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"));
	outFields->push(HX_HCSTRING("numChildren","\xa5","\x69","\x80","\x5c"));
	outFields->push(HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"));
	outFields->push(HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,mouseChildren),HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff")},
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,tabChildren),HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObjectContainer_obj,_hx___removedChildren),HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DisplayObjectContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"),
	HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"),
	HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("addChildAt","\x8e","\xad","\x36","\xce"),
	HX_HCSTRING("areInaccessibleObjectsUnderPoint","\x3d","\x22","\x9b","\x1e"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("getChildAt","\xb9","\x07","\x0e","\xb6"),
	HX_HCSTRING("getChildByName","\x88","\xb9","\x73","\xa3"),
	HX_HCSTRING("getChildIndex","\x0c","\x68","\x02","\xb9"),
	HX_HCSTRING("getObjectsUnderPoint","\x96","\x10","\xd5","\x80"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("removeChildAt","\xcb","\xdd","\x66","\x3f"),
	HX_HCSTRING("removeChildren","\xa3","\x55","\xc0","\x3a"),
	HX_HCSTRING("resolve","\xec","\x12","\x60","\x67"),
	HX_HCSTRING("setChildIndex","\x18","\x4a","\x08","\xfe"),
	HX_HCSTRING("stopAllMovieClips","\xf2","\x60","\xf8","\xa0"),
	HX_HCSTRING("swapChildren","\xf2","\x4a","\x53","\xe0"),
	HX_HCSTRING("swapChildrenAt","\x85","\xa4","\xf1","\x13"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("get_numChildren","\x3c","\x21","\x62","\x1d"),
	::String(null()) };

static void DisplayObjectContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObjectContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class DisplayObjectContainer_obj::__mClass;

void DisplayObjectContainer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObjectContainer","\x4a","\x52","\xef","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DisplayObjectContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObjectContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
