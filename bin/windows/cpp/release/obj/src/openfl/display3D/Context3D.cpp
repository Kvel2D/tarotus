// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLRenderbuffer
#include <lime/graphics/opengl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_Context3DStateCache
#include <openfl/_internal/stage3D/Context3DStateCache.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

static const Float _hx_array_data_2[] = {
	1.0,1.0,1.0,1.0,
};
namespace openfl{
namespace display3D{

void Context3D_obj::__construct( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display3D.Context3D","new",0x4f12c019,"openfl.display3D.Context3D.new","openfl/display3D/Context3D.hx",43,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stage3D,"stage3D")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(  61)		this->totalGPUMemory = (int)0;
HXLINE(  60)		this->profile = (int)0;
HXLINE(  57)		this->enableErrorChecking = false;
HXLINE(  56)		this->driverInfo = HX_("OpenGL (Direct blitting)",e6,33,c8,a6);
HXLINE(  55)		this->backBufferWidth = (int)0;
HXLINE(  54)		this->backBufferHeight = (int)0;
HXLINE(  99)		super::__construct(null());
HXLINE( 101)		this->_hx___stage3D = stage3D;
HXLINE( 102)		this->_hx___renderSession = renderSession;
HXLINE( 104)		HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)512,(int)8);
HXDLIN( 104)		this->_hx___vertexConstants = this1;
HXLINE( 105)		HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)512,(int)8);
HXDLIN( 105)		this->_hx___fragmentConstants = this2;
HXLINE( 107)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::fromData( _hx_array_data_2,4);
HXDLIN( 107)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 107)		Bool _hx_tmp = hx::IsNotNull( array );
HXDLIN( 107)		if (_hx_tmp) {
HXLINE( 107)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 107)			_this->byteOffset = (int)0;
HXDLIN( 107)			_this->length = array->get_length();
HXDLIN( 107)			Int _hx_tmp1 = (_this->length * _this->bytesPerElement);
HXDLIN( 107)			_this->byteLength = _hx_tmp1;
HXDLIN( 107)			Int byteLength = _this->byteLength;
HXDLIN( 107)			HX_VARI_NAME(  ::haxe::io::Bytes,this4,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 107)			_this->buffer = this4;
HXDLIN( 107)			_this->copyFromArray(array,null());
HXDLIN( 107)			this3 = _this;
            		}
            		else {
HXLINE( 107)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 107)		this->_hx___positionScale = this3;
HXLINE( 108)		this->_hx___samplerDirty = (int)0;
HXLINE( 109)		Bool fixed = null();
HXDLIN( 109)		 ::openfl::_Vector::ObjectVector _hx_tmp2 =  ::openfl::_Vector::ObjectVector_obj::__new((int)8,fixed,null());
HXDLIN( 109)		this->_hx___samplerTextures = _hx_tmp2;
HXLINE( 110)		this->_hx___samplerStates = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 112)		{
HXLINE( 112)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 112)			while((_g < (int)8)){
HXLINE( 112)				HX_VARI( Int,i) = _g++;
HXLINE( 114)				this->_hx___samplerStates[i] =  ::openfl::_internal::stage3D::SamplerState_obj::__new((int)9729,(int)9729,(int)33071,(int)33071,null(),null());
            			}
            		}
HXLINE( 121)		this->maxBackBufferHeight = (this->maxBackBufferWidth = (int)16384);
HXLINE( 124)		this->_hx___backBufferAntiAlias = (int)0;
HXLINE( 125)		this->_hx___backBufferEnableDepthAndStencil = true;
HXLINE( 126)		this->_hx___backBufferWantsBestResolution = false;
HXLINE( 128)		this->_hx___frameCount = (int)0;
HXLINE( 129)		this->_hx___rttDepthAndStencil = false;
HXLINE( 130)		this->_hx___samplerDirty = (int)0;
HXLINE( 131)		this->_hx___stencilCompareMode = (int)0;
HXLINE( 132)		this->_hx___stencilRef = (int)0;
HXLINE( 133)		this->_hx___stencilReadMask = (int)255;
HXLINE( 137)		Bool _hx_tmp3;
HXDLIN( 137)		Bool _hx_tmp4 = !(this->_hx___hasGLExtension(HX_("GL_OES_packed_depth_stencil",15,ba,96,d2)));
HXDLIN( 137)		if (_hx_tmp4) {
HXLINE( 137)			_hx_tmp3 = this->_hx___hasGLExtension(HX_("GL_EXT_packed_depth_stencil",91,29,49,e0));
            		}
            		else {
HXLINE( 137)			_hx_tmp3 = true;
            		}
HXDLIN( 137)		this->_hx___supportsPackedDepthStencil = _hx_tmp3;
HXLINE( 140)		Bool fixed1 = null();
HXDLIN( 140)		 ::openfl::_Vector::IntVector _hx_tmp5 =  ::openfl::_Vector::IntVector_obj::__new((int)11,fixed1,null());
HXDLIN( 140)		this->_hx___stats = _hx_tmp5;
HXLINE( 141)		Bool fixed2 = null();
HXDLIN( 141)		 ::openfl::_Vector::IntVector _hx_tmp6 =  ::openfl::_Vector::IntVector_obj::__new((int)11,fixed2,null());
HXDLIN( 141)		this->_hx___statsCache = _hx_tmp6;
HXLINE( 148)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 150)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_parameter((int)7936)) );
HXDLIN( 150)		HX_VARI( ::String,vendor) = ( (::String)(Dynamic(hx::DynamicPtr(inVal))) );
HXLINE( 151)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 153)		 ::hx::Object * inVal1 = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_parameter((int)7938)) );
HXDLIN( 153)		HX_VARI( ::String,version) = ( (::String)(Dynamic(hx::DynamicPtr(inVal1))) );
HXLINE( 154)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 156)		 ::hx::Object * inVal2 = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_parameter((int)7937)) );
HXDLIN( 156)		HX_VARI( ::String,renderer) = ( (::String)(Dynamic(hx::DynamicPtr(inVal2))) );
HXLINE( 157)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 160)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 162)		this->driverInfo = ((((((((HX_("OpenGL",8f,bc,28,56) + HX_(" Vendor=",75,5d,11,19)) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + renderer) + HX_(" GLSL=",5f,30,5a,df)) + HX_("<unknown>",b0,91,d8,da));
HXLINE( 172)		{
HXLINE( 172)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 172)			HX_VARI_NAME( Int,_g2,"_g") = this->_hx___stats->get_length();
HXDLIN( 172)			while((_g1 < _g2)){
HXLINE( 172)				HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 174)				this->_hx___stats->set(i1,(int)0);
            			}
            		}
HXLINE( 178)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}

Dynamic Context3D_obj::__CreateEmpty() { return new Context3D_obj; }

hx::ObjectPtr< Context3D_obj > Context3D_obj::__new( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession)
{
	hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct(stage3D,renderSession);
	return _hx_result;
}

Dynamic Context3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void Context3D_obj::clear(hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< Int >  __o_stencil,hx::Null< Int >  __o_mask){
Float red = __o_red.Default(0);
Float green = __o_green.Default(0);
Float blue = __o_blue.Default(0);
Float alpha = __o_alpha.Default(1);
Float depth = __o_depth.Default(1);
Int stencil = __o_stencil.Default(0);
Int mask = __o_mask.Default(7);
            	HX_STACK_FRAME("openfl.display3D.Context3D","clear",0xf8808186,"openfl.display3D.Context3D.clear","openfl/display3D/Context3D.hx",183,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(stencil,"stencil")
            	HX_STACK_ARG(mask,"mask")
HXLINE( 185)		HX_VARI( Int,clearMask) = (int)0;
HXLINE( 187)		if ((((int)mask & (int)(int)1) != (int)0)) {
HXLINE( 189)			clearMask = (int)16384;
HXLINE( 191)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear_color(red,green,blue,alpha);
HXLINE( 192)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 196)		if ((((int)mask & (int)(int)2) != (int)0)) {
HXLINE( 198)			hx::OrEq(clearMask,(int)256);
HXLINE( 200)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear_depth(depth);
HXLINE( 201)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 205)		if ((((int)mask & (int)(int)4) != (int)0)) {
HXLINE( 207)			hx::OrEq(clearMask,(int)1024);
HXLINE( 209)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear_stencil(stencil);
HXLINE( 210)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 214)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear(clearMask);
HXLINE( 215)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC7(Context3D_obj,clear,(void))

void Context3D_obj::configureBackBuffer(Int width,Int height,Int antiAlias,hx::Null< Bool >  __o_enableDepthAndStencil,hx::Null< Bool >  __o_wantsBestResolution,hx::Null< Bool >  __o_wantsBestResolutionOnBrowserZoom){
Bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
Bool wantsBestResolution = __o_wantsBestResolution.Default(false);
Bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_STACK_FRAME("openfl.display3D.Context3D","configureBackBuffer",0x7210edc6,"openfl.display3D.Context3D.configureBackBuffer","openfl/display3D/Context3D.hx",220,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(antiAlias,"antiAlias")
            	HX_STACK_ARG(enableDepthAndStencil,"enableDepthAndStencil")
            	HX_STACK_ARG(wantsBestResolution,"wantsBestResolution")
            	HX_STACK_ARG(wantsBestResolutionOnBrowserZoom,"wantsBestResolutionOnBrowserZoom")
HXLINE( 222)		this->_hx___updateBackbufferViewport();
HXLINE( 224)		this->backBufferWidth = width;
HXLINE( 225)		this->backBufferHeight = height;
HXLINE( 227)		this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 228)		this->_hx___backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 229)		this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 231)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}


HX_DEFINE_DYNAMIC_FUNC6(Context3D_obj,configureBackBuffer,(void))

 ::openfl::display3D::textures::CubeTexture Context3D_obj::createCubeTexture(Int size, ::Dynamic format,Bool optimizeForRenderToTexture,hx::Null< Int >  __o_streamingLevels){
Int streamingLevels = __o_streamingLevels.Default(0);
            	HX_STACK_FRAME("openfl.display3D.Context3D","createCubeTexture",0xbb69e843,"openfl.display3D.Context3D.createCubeTexture","openfl/display3D/Context3D.hx",238,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(optimizeForRenderToTexture,"optimizeForRenderToTexture")
            	HX_STACK_ARG(streamingLevels,"streamingLevels")
HXLINE( 238)		return  ::openfl::display3D::textures::CubeTexture_obj::__new(hx::ObjectPtr<OBJ_>(this),size,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createCubeTexture,return )

 ::openfl::display3D::IndexBuffer3D Context3D_obj::createIndexBuffer(Int numIndices, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_STACK_FRAME("openfl.display3D.Context3D","createIndexBuffer",0x3b80e18f,"openfl.display3D.Context3D.createIndexBuffer","openfl/display3D/Context3D.hx",245,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numIndices,"numIndices")
            	HX_STACK_ARG(bufferUsage,"bufferUsage")
HXLINE( 245)		return  ::openfl::display3D::IndexBuffer3D_obj::__new(hx::ObjectPtr<OBJ_>(this),numIndices,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,createIndexBuffer,return )

 ::openfl::display3D::Program3D Context3D_obj::createProgram(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","createProgram",0x0b5753e1,"openfl.display3D.Context3D.createProgram","openfl/display3D/Context3D.hx",252,0xc899cbb9)
            	HX_STACK_THIS(this)
HXLINE( 252)		return  ::openfl::display3D::Program3D_obj::__new(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createProgram,return )

 ::openfl::display3D::textures::RectangleTexture Context3D_obj::createRectangleTexture(Int width,Int height, ::Dynamic format,Bool optimizeForRenderToTexture){
            	HX_STACK_FRAME("openfl.display3D.Context3D","createRectangleTexture",0x8720f36f,"openfl.display3D.Context3D.createRectangleTexture","openfl/display3D/Context3D.hx",259,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(optimizeForRenderToTexture,"optimizeForRenderToTexture")
HXLINE( 259)		return  ::openfl::display3D::textures::RectangleTexture_obj::__new(hx::ObjectPtr<OBJ_>(this),width,height,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(format),optimizeForRenderToTexture);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createRectangleTexture,return )

 ::openfl::display3D::textures::Texture Context3D_obj::createTexture(Int width,Int height, ::Dynamic format,Bool optimizeForRenderToTexture,hx::Null< Int >  __o_streamingLevels){
Int streamingLevels = __o_streamingLevels.Default(0);
            	HX_STACK_FRAME("openfl.display3D.Context3D","createTexture",0xb63ed238,"openfl.display3D.Context3D.createTexture","openfl/display3D/Context3D.hx",266,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(optimizeForRenderToTexture,"optimizeForRenderToTexture")
            	HX_STACK_ARG(streamingLevels,"streamingLevels")
HXLINE( 266)		return  ::openfl::display3D::textures::Texture_obj::__new(hx::ObjectPtr<OBJ_>(this),width,height,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,createTexture,return )

 ::openfl::display3D::VertexBuffer3D Context3D_obj::createVertexBuffer(Int numVertices,Int data32PerVertex, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_STACK_FRAME("openfl.display3D.Context3D","createVertexBuffer",0x49fb9507,"openfl.display3D.Context3D.createVertexBuffer","openfl/display3D/Context3D.hx",273,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numVertices,"numVertices")
            	HX_STACK_ARG(data32PerVertex,"data32PerVertex")
            	HX_STACK_ARG(bufferUsage,"bufferUsage")
HXLINE( 273)		return  ::openfl::display3D::VertexBuffer3D_obj::__new(hx::ObjectPtr<OBJ_>(this),numVertices,data32PerVertex,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,createVertexBuffer,return )

void Context3D_obj::dispose(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","dispose",0x8ad040d8,"openfl.display3D.Context3D.dispose","openfl/display3D/Context3D.hx",278,0xc899cbb9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,dispose,(void))

void Context3D_obj::drawToBitmapData( ::openfl::display::BitmapData destination){
            	HX_STACK_FRAME("openfl.display3D.Context3D","drawToBitmapData",0x474f45df,"openfl.display3D.Context3D.drawToBitmapData","openfl/display3D/Context3D.hx",285,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(destination,"destination")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,drawToBitmapData,(void))

void Context3D_obj::drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< Int >  __o_firstIndex,hx::Null< Int >  __o_numTriangles){
Int firstIndex = __o_firstIndex.Default(0);
Int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACK_FRAME("openfl.display3D.Context3D","drawTriangles",0x0d837500,"openfl.display3D.Context3D.drawTriangles","openfl/display3D/Context3D.hx",292,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indexBuffer,"indexBuffer")
            	HX_STACK_ARG(firstIndex,"firstIndex")
            	HX_STACK_ARG(numTriangles,"numTriangles")
HXLINE( 294)		Bool _hx_tmp = hx::IsNull( this->_hx___program );
HXDLIN( 294)		if (_hx_tmp) {
HXLINE( 296)			return;
            		}
HXLINE( 300)		this->_hx___flushSamplerState();
HXLINE( 301)		this->_hx___program->_hx___flush();
HXLINE( 303)		HX_VAR( Int,count);
HXDLIN( 303)		if ((numTriangles == (int)-1)) {
HXLINE( 303)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE( 303)			count = (numTriangles * (int)3);
            		}
HXLINE( 305)		{
HXLINE( 305)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = indexBuffer->_hx___id;
HXDLIN( 305)			{
HXLINE( 305)				 ::Dynamic buffer1;
HXDLIN( 305)				Bool _hx_tmp1 = hx::IsNull( buffer );
HXDLIN( 305)				if (_hx_tmp1) {
HXLINE( 305)					buffer1 = null();
            				}
            				else {
HXLINE( 305)					buffer1 = buffer->id;
            				}
HXDLIN( 305)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer((int)34963,hx::DynamicPtr(buffer1));
            			}
            		}
HXLINE( 306)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 308)		{
HXLINE( 308)			Int type = indexBuffer->_hx___elementType;
HXDLIN( 308)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_draw_elements((int)4,count,type,firstIndex);
            		}
HXLINE( 309)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 311)		this->_hx___statsIncrement((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawTriangles,(void))

void Context3D_obj::present(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","present",0x095ffb34,"openfl.display3D.Context3D.present","openfl/display3D/Context3D.hx",317,0xc899cbb9)
            	HX_STACK_THIS(this)
HXLINE( 319)		this->_hx___statsSendToTelemetry();
HXLINE( 326)		this->_hx___statsClear((int)0);
HXLINE( 328)		this->_hx___frameCount++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,present,(void))

void Context3D_obj::setBlendFactors( ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setBlendFactors",0x86d16c6e,"openfl.display3D.Context3D.setBlendFactors","openfl/display3D/Context3D.hx",333,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceFactor,"sourceFactor")
            	HX_STACK_ARG(destinationFactor,"destinationFactor")
HXLINE( 335)		HX_VARI( Bool,updateSrc) = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendSrcFactor(sourceFactor);
HXLINE( 336)		HX_VARI( Bool,updateDest) = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendDestFactor(destinationFactor);
HXLINE( 337)		Bool _hx_tmp;
HXDLIN( 337)		if (!(updateSrc)) {
HXLINE( 337)			_hx_tmp = updateDest;
            		}
            		else {
HXLINE( 337)			_hx_tmp = true;
            		}
HXDLIN( 337)		if (_hx_tmp) {
HXLINE( 339)			this->_hx___updateBlendFactors();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setBlendFactors,(void))

void Context3D_obj::setColorMask(Bool red,Bool green,Bool blue,Bool alpha){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setColorMask",0xad4f5d14,"openfl.display3D.Context3D.setColorMask","openfl/display3D/Context3D.hx",348,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 348)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_color_mask(red,green,blue,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setColorMask,(void))

void Context3D_obj::setCulling( ::Dynamic triangleFaceToCull){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setCulling",0x39687055,"openfl.display3D.Context3D.setCulling","openfl/display3D/Context3D.hx",355,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(triangleFaceToCull,"triangleFaceToCull")
HXLINE( 355)		Bool _hx_tmp = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateCullingMode(triangleFaceToCull);
HXDLIN( 355)		if (_hx_tmp) {
HXLINE( 357)			 ::Dynamic _hx_switch_0 = triangleFaceToCull;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 365)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable((int)2884);
HXLINE( 366)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_cull_face((int)1028);
HXLINE( 363)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 370)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable((int)2884);
HXLINE( 371)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_cull_face((int)1029);
HXLINE( 368)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 375)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable((int)2884);
HXLINE( 376)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_cull_face((int)1032);
HXLINE( 373)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 361)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable((int)2884);
HXDLIN( 361)				goto _hx_goto_3;
            			}
            			/* default */{
HXLINE( 380)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            			}
            			_hx_goto_3:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setCulling,(void))

void Context3D_obj::setDepthTest(Bool depthMask, ::Dynamic passCompareMode){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setDepthTest",0x2d08b41a,"openfl.display3D.Context3D.setDepthTest","openfl/display3D/Context3D.hx",389,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(depthMask,"depthMask")
            	HX_STACK_ARG(passCompareMode,"passCompareMode")
HXLINE( 391)		HX_VARI( Bool,depthTestEnabled) = this->_hx___backBufferEnableDepthAndStencil;
HXLINE( 393)		Bool _hx_tmp = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestEnabled(depthTestEnabled);
HXDLIN( 393)		if (_hx_tmp) {
HXLINE( 395)			if (depthTestEnabled) {
HXLINE( 397)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable((int)2929);
            			}
            			else {
HXLINE( 401)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable((int)2929);
            			}
            		}
HXLINE( 407)		Bool _hx_tmp1 = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestMask(depthMask);
HXDLIN( 407)		if (_hx_tmp1) {
HXLINE( 409)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_mask(depthMask);
            		}
HXLINE( 413)		Bool _hx_tmp2 = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthCompareMode(passCompareMode);
HXDLIN( 413)		if (_hx_tmp2) {
HXLINE( 415)			 ::Dynamic _hx_switch_0 = passCompareMode;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 417)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_func((int)519);
HXDLIN( 417)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 418)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_func((int)514);
HXDLIN( 418)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 419)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_func((int)516);
HXDLIN( 419)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 420)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_func((int)518);
HXDLIN( 420)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE( 421)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_func((int)513);
HXDLIN( 421)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE( 422)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_func((int)515);
HXDLIN( 422)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)6) ){
HXLINE( 423)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_func((int)512);
HXDLIN( 423)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE( 424)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_depth_func((int)517);
HXDLIN( 424)				goto _hx_goto_4;
            			}
            			/* default */{
HXLINE( 427)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            			}
            			_hx_goto_4:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setDepthTest,(void))

void Context3D_obj::setProgram( ::openfl::display3D::Program3D program){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setProgram",0xd9d9d869,"openfl.display3D.Context3D.setProgram","openfl/display3D/Context3D.hx",436,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE( 438)		Bool _hx_tmp = hx::IsNull( program );
HXDLIN( 438)		if (_hx_tmp) {
HXLINE( 440)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            		}
HXLINE( 444)		Bool _hx_tmp1 = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateProgram3D(program);
HXDLIN( 444)		if (_hx_tmp1) {
HXLINE( 446)			program->_hx___use();
HXLINE( 447)			program->_hx___setPositionScale(this->_hx___positionScale);
HXLINE( 449)			this->_hx___program = program;
HXLINE( 451)			hx::OrEq(this->_hx___samplerDirty,this->_hx___program->_hx___samplerUsageMask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setProgram,(void))

void Context3D_obj::setProgramConstantsFromByteArray( ::Dynamic programType,Int firstRegister,Int numRegisters, ::openfl::utils::ByteArrayData data,Int byteArrayOffset){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setProgramConstantsFromByteArray",0xd8990de1,"openfl.display3D.Context3D.setProgramConstantsFromByteArray","openfl/display3D/Context3D.hx",458,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(programType,"programType")
            	HX_STACK_ARG(firstRegister,"firstRegister")
            	HX_STACK_ARG(numRegisters,"numRegisters")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(byteArrayOffset,"byteArrayOffset")
HXLINE( 460)		if ((numRegisters == (int)0)) {
HXLINE( 460)			return;
            		}
HXLINE( 462)		Bool _hx_tmp = (numRegisters == (int)-1);
HXDLIN( 462)		if (_hx_tmp) {
HXLINE( 464)			numRegisters = (((int)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data) >> (int)(int)2) - byteArrayOffset);
            		}
HXLINE( 468)		HX_VARI( Bool,isVertex) = hx::IsEq( programType,(int)1 );
HXLINE( 469)		HX_VAR(  ::lime::utils::ArrayBufferView,dest);
HXDLIN( 469)		if (isVertex) {
HXLINE( 469)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 469)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 471)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 471)		HX_VARI(  ::Dynamic,len) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
HXDLIN( 471)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 471)		Bool _hx_tmp1 = hx::IsNotNull( bytes );
HXDLIN( 471)		if (_hx_tmp1) {
HXLINE( 471)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 471)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE( 471)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 471)			HX_VARI( Int,bufferByteLength) = bytes->length;
HXDLIN( 471)			HX_VARI( Int,newByteLength) = bufferByteLength;
HXDLIN( 471)			Bool _hx_tmp2 = hx::IsNull( len );
HXDLIN( 471)			if (_hx_tmp2) {
HXLINE( 471)				newByteLength = bufferByteLength;
HXDLIN( 471)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 471)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 471)				if ((bufferByteLength < (int)0)) {
HXLINE( 471)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE( 471)				newByteLength = (len * _this->bytesPerElement);
HXDLIN( 471)				if ((newByteLength > bufferByteLength)) {
HXLINE( 471)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 471)			_this->buffer = bytes;
HXDLIN( 471)			_this->byteOffset = (int)0;
HXDLIN( 471)			_this->byteLength = newByteLength;
HXDLIN( 471)			Float _hx_tmp3 = ((Float)newByteLength / (Float)_this->bytesPerElement);
HXDLIN( 471)			_this->length = ::Std_obj::_hx_int(_hx_tmp3);
HXDLIN( 471)			this1 = _this;
            		}
            		else {
HXLINE( 471)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 471)		HX_VARI(  ::lime::utils::ArrayBufferView,floatData) = this1;
HXLINE( 472)		HX_VARI( Int,outOffset) = (firstRegister * (int)4);
HXLINE( 473)		HX_VARI_NAME( Int,_hx_int,"int") = byteArrayOffset;
HXDLIN( 473)		Float _hx_tmp4;
HXDLIN( 473)		if ((_hx_int < (int)0)) {
HXLINE( 473)			_hx_tmp4 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 473)			_hx_tmp4 = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 473)		HX_VARI( Int,inOffset) = ::Std_obj::_hx_int(((Float)_hx_tmp4 / (Float)((Float)4.)));
HXLINE( 475)		{
HXLINE( 475)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 475)			HX_VARI( Int,_g) = (numRegisters * (int)4);
HXDLIN( 475)			while((_g1 < _g)){
HXLINE( 475)				HX_VARI( Int,i) = _g1++;
HXLINE( 477)				{
HXLINE( 477)					Int _hx_tmp5 = floatData->byteOffset;
HXDLIN( 477)					HX_VARI( Float,val) = ::__hxcpp_memory_get_float(floatData->buffer->b,(_hx_tmp5 + ((inOffset + i) * (int)4)));
HXDLIN( 477)					{
HXLINE( 477)						Int _hx_tmp6 = dest->byteOffset;
HXDLIN( 477)						::__hxcpp_memory_set_float(dest->buffer->b,(_hx_tmp6 + ((outOffset + i) * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE( 481)		Bool _hx_tmp7 = hx::IsNotNull( this->_hx___program );
HXDLIN( 481)		if (_hx_tmp7) {
HXLINE( 483)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setProgramConstantsFromByteArray,(void))

void Context3D_obj::setProgramConstantsFromMatrix( ::Dynamic programType,Int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< Bool >  __o_transposedMatrix){
Bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_STACK_FRAME("openfl.display3D.Context3D","setProgramConstantsFromMatrix",0x29e843d1,"openfl.display3D.Context3D.setProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",490,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(programType,"programType")
            	HX_STACK_ARG(firstRegister,"firstRegister")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(transposedMatrix,"transposedMatrix")
HXLINE( 492)		HX_VARI( Bool,isVertex) = hx::IsEq( programType,(int)1 );
HXLINE( 493)		HX_VAR(  ::lime::utils::ArrayBufferView,dest);
HXDLIN( 493)		if (isVertex) {
HXLINE( 493)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 493)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 494)		HX_VARI(  ::openfl::_Vector::FloatVector,source) = matrix->rawData;
HXLINE( 495)		HX_VARI( Int,i) = (firstRegister * (int)4);
HXLINE( 497)		if (transposedMatrix) {
HXLINE( 499)			{
HXLINE( 499)				Int idx = i++;
HXDLIN( 499)				HX_VARI( Float,val) = source->get((int)0);
HXDLIN( 499)				{
HXLINE( 499)					Int byteOffset = (dest->byteOffset + (idx * (int)4));
HXDLIN( 499)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset,val);
            				}
            			}
HXLINE( 500)			{
HXLINE( 500)				Int idx1 = i++;
HXDLIN( 500)				HX_VARI_NAME( Float,val1,"val") = source->get((int)4);
HXDLIN( 500)				{
HXLINE( 500)					Int byteOffset1 = (dest->byteOffset + (idx1 * (int)4));
HXDLIN( 500)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset1,val1);
            				}
            			}
HXLINE( 501)			{
HXLINE( 501)				Int idx2 = i++;
HXDLIN( 501)				HX_VARI_NAME( Float,val2,"val") = source->get((int)8);
HXDLIN( 501)				{
HXLINE( 501)					Int byteOffset2 = (dest->byteOffset + (idx2 * (int)4));
HXDLIN( 501)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset2,val2);
            				}
            			}
HXLINE( 502)			{
HXLINE( 502)				Int idx3 = i++;
HXDLIN( 502)				HX_VARI_NAME( Float,val3,"val") = source->get((int)12);
HXDLIN( 502)				{
HXLINE( 502)					Int byteOffset3 = (dest->byteOffset + (idx3 * (int)4));
HXDLIN( 502)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset3,val3);
            				}
            			}
HXLINE( 504)			{
HXLINE( 504)				Int idx4 = i++;
HXDLIN( 504)				HX_VARI_NAME( Float,val4,"val") = source->get((int)1);
HXDLIN( 504)				{
HXLINE( 504)					Int byteOffset4 = (dest->byteOffset + (idx4 * (int)4));
HXDLIN( 504)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset4,val4);
            				}
            			}
HXLINE( 505)			{
HXLINE( 505)				Int idx5 = i++;
HXDLIN( 505)				HX_VARI_NAME( Float,val5,"val") = source->get((int)5);
HXDLIN( 505)				{
HXLINE( 505)					Int byteOffset5 = (dest->byteOffset + (idx5 * (int)4));
HXDLIN( 505)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset5,val5);
            				}
            			}
HXLINE( 506)			{
HXLINE( 506)				Int idx6 = i++;
HXDLIN( 506)				HX_VARI_NAME( Float,val6,"val") = source->get((int)9);
HXDLIN( 506)				{
HXLINE( 506)					Int byteOffset6 = (dest->byteOffset + (idx6 * (int)4));
HXDLIN( 506)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset6,val6);
            				}
            			}
HXLINE( 507)			{
HXLINE( 507)				Int idx7 = i++;
HXDLIN( 507)				HX_VARI_NAME( Float,val7,"val") = source->get((int)13);
HXDLIN( 507)				{
HXLINE( 507)					Int byteOffset7 = (dest->byteOffset + (idx7 * (int)4));
HXDLIN( 507)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset7,val7);
            				}
            			}
HXLINE( 509)			{
HXLINE( 509)				Int idx8 = i++;
HXDLIN( 509)				HX_VARI_NAME( Float,val8,"val") = source->get((int)2);
HXDLIN( 509)				{
HXLINE( 509)					Int byteOffset8 = (dest->byteOffset + (idx8 * (int)4));
HXDLIN( 509)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset8,val8);
            				}
            			}
HXLINE( 510)			{
HXLINE( 510)				Int idx9 = i++;
HXDLIN( 510)				HX_VARI_NAME( Float,val9,"val") = source->get((int)6);
HXDLIN( 510)				{
HXLINE( 510)					Int byteOffset9 = (dest->byteOffset + (idx9 * (int)4));
HXDLIN( 510)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset9,val9);
            				}
            			}
HXLINE( 511)			{
HXLINE( 511)				Int idx10 = i++;
HXDLIN( 511)				HX_VARI_NAME( Float,val10,"val") = source->get((int)10);
HXDLIN( 511)				{
HXLINE( 511)					Int byteOffset10 = (dest->byteOffset + (idx10 * (int)4));
HXDLIN( 511)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset10,val10);
            				}
            			}
HXLINE( 512)			{
HXLINE( 512)				Int idx11 = i++;
HXDLIN( 512)				HX_VARI_NAME( Float,val11,"val") = source->get((int)14);
HXDLIN( 512)				{
HXLINE( 512)					Int byteOffset11 = (dest->byteOffset + (idx11 * (int)4));
HXDLIN( 512)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset11,val11);
            				}
            			}
HXLINE( 514)			{
HXLINE( 514)				Int idx12 = i++;
HXDLIN( 514)				HX_VARI_NAME( Float,val12,"val") = source->get((int)3);
HXDLIN( 514)				{
HXLINE( 514)					Int byteOffset12 = (dest->byteOffset + (idx12 * (int)4));
HXDLIN( 514)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset12,val12);
            				}
            			}
HXLINE( 515)			{
HXLINE( 515)				Int idx13 = i++;
HXDLIN( 515)				HX_VARI_NAME( Float,val13,"val") = source->get((int)7);
HXDLIN( 515)				{
HXLINE( 515)					Int byteOffset13 = (dest->byteOffset + (idx13 * (int)4));
HXDLIN( 515)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset13,val13);
            				}
            			}
HXLINE( 516)			{
HXLINE( 516)				Int idx14 = i++;
HXDLIN( 516)				HX_VARI_NAME( Float,val14,"val") = source->get((int)11);
HXDLIN( 516)				{
HXLINE( 516)					Int byteOffset14 = (dest->byteOffset + (idx14 * (int)4));
HXDLIN( 516)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset14,val14);
            				}
            			}
HXLINE( 517)			{
HXLINE( 517)				Int idx15 = i++;
HXDLIN( 517)				HX_VARI_NAME( Float,val15,"val") = source->get((int)15);
HXDLIN( 517)				{
HXLINE( 517)					Int byteOffset15 = (dest->byteOffset + (idx15 * (int)4));
HXDLIN( 517)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset15,val15);
            				}
            			}
            		}
            		else {
HXLINE( 521)			{
HXLINE( 521)				Int idx16 = i++;
HXDLIN( 521)				HX_VARI_NAME( Float,val16,"val") = source->get((int)0);
HXDLIN( 521)				{
HXLINE( 521)					Int byteOffset16 = (dest->byteOffset + (idx16 * (int)4));
HXDLIN( 521)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset16,val16);
            				}
            			}
HXLINE( 522)			{
HXLINE( 522)				Int idx17 = i++;
HXDLIN( 522)				HX_VARI_NAME( Float,val17,"val") = source->get((int)1);
HXDLIN( 522)				{
HXLINE( 522)					Int byteOffset17 = (dest->byteOffset + (idx17 * (int)4));
HXDLIN( 522)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset17,val17);
            				}
            			}
HXLINE( 523)			{
HXLINE( 523)				Int idx18 = i++;
HXDLIN( 523)				HX_VARI_NAME( Float,val18,"val") = source->get((int)2);
HXDLIN( 523)				{
HXLINE( 523)					Int byteOffset18 = (dest->byteOffset + (idx18 * (int)4));
HXDLIN( 523)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset18,val18);
            				}
            			}
HXLINE( 524)			{
HXLINE( 524)				Int idx19 = i++;
HXDLIN( 524)				HX_VARI_NAME( Float,val19,"val") = source->get((int)3);
HXDLIN( 524)				{
HXLINE( 524)					Int byteOffset19 = (dest->byteOffset + (idx19 * (int)4));
HXDLIN( 524)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset19,val19);
            				}
            			}
HXLINE( 526)			{
HXLINE( 526)				Int idx20 = i++;
HXDLIN( 526)				HX_VARI_NAME( Float,val20,"val") = source->get((int)4);
HXDLIN( 526)				{
HXLINE( 526)					Int byteOffset20 = (dest->byteOffset + (idx20 * (int)4));
HXDLIN( 526)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset20,val20);
            				}
            			}
HXLINE( 527)			{
HXLINE( 527)				Int idx21 = i++;
HXDLIN( 527)				HX_VARI_NAME( Float,val21,"val") = source->get((int)5);
HXDLIN( 527)				{
HXLINE( 527)					Int byteOffset21 = (dest->byteOffset + (idx21 * (int)4));
HXDLIN( 527)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset21,val21);
            				}
            			}
HXLINE( 528)			{
HXLINE( 528)				Int idx22 = i++;
HXDLIN( 528)				HX_VARI_NAME( Float,val22,"val") = source->get((int)6);
HXDLIN( 528)				{
HXLINE( 528)					Int byteOffset22 = (dest->byteOffset + (idx22 * (int)4));
HXDLIN( 528)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset22,val22);
            				}
            			}
HXLINE( 529)			{
HXLINE( 529)				Int idx23 = i++;
HXDLIN( 529)				HX_VARI_NAME( Float,val23,"val") = source->get((int)7);
HXDLIN( 529)				{
HXLINE( 529)					Int byteOffset23 = (dest->byteOffset + (idx23 * (int)4));
HXDLIN( 529)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset23,val23);
            				}
            			}
HXLINE( 531)			{
HXLINE( 531)				Int idx24 = i++;
HXDLIN( 531)				HX_VARI_NAME( Float,val24,"val") = source->get((int)8);
HXDLIN( 531)				{
HXLINE( 531)					Int byteOffset24 = (dest->byteOffset + (idx24 * (int)4));
HXDLIN( 531)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset24,val24);
            				}
            			}
HXLINE( 532)			{
HXLINE( 532)				Int idx25 = i++;
HXDLIN( 532)				HX_VARI_NAME( Float,val25,"val") = source->get((int)9);
HXDLIN( 532)				{
HXLINE( 532)					Int byteOffset25 = (dest->byteOffset + (idx25 * (int)4));
HXDLIN( 532)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset25,val25);
            				}
            			}
HXLINE( 533)			{
HXLINE( 533)				Int idx26 = i++;
HXDLIN( 533)				HX_VARI_NAME( Float,val26,"val") = source->get((int)10);
HXDLIN( 533)				{
HXLINE( 533)					Int byteOffset26 = (dest->byteOffset + (idx26 * (int)4));
HXDLIN( 533)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset26,val26);
            				}
            			}
HXLINE( 534)			{
HXLINE( 534)				Int idx27 = i++;
HXDLIN( 534)				HX_VARI_NAME( Float,val27,"val") = source->get((int)11);
HXDLIN( 534)				{
HXLINE( 534)					Int byteOffset27 = (dest->byteOffset + (idx27 * (int)4));
HXDLIN( 534)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset27,val27);
            				}
            			}
HXLINE( 536)			{
HXLINE( 536)				Int idx28 = i++;
HXDLIN( 536)				HX_VARI_NAME( Float,val28,"val") = source->get((int)12);
HXDLIN( 536)				{
HXLINE( 536)					Int byteOffset28 = (dest->byteOffset + (idx28 * (int)4));
HXDLIN( 536)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset28,val28);
            				}
            			}
HXLINE( 537)			{
HXLINE( 537)				Int idx29 = i++;
HXDLIN( 537)				HX_VARI_NAME( Float,val29,"val") = source->get((int)13);
HXDLIN( 537)				{
HXLINE( 537)					Int byteOffset29 = (dest->byteOffset + (idx29 * (int)4));
HXDLIN( 537)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset29,val29);
            				}
            			}
HXLINE( 538)			{
HXLINE( 538)				Int idx30 = i++;
HXDLIN( 538)				HX_VARI_NAME( Float,val30,"val") = source->get((int)14);
HXDLIN( 538)				{
HXLINE( 538)					Int byteOffset30 = (dest->byteOffset + (idx30 * (int)4));
HXDLIN( 538)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset30,val30);
            				}
            			}
HXLINE( 539)			{
HXLINE( 539)				Int idx31 = i++;
HXDLIN( 539)				HX_VARI_NAME( Float,val31,"val") = source->get((int)15);
HXDLIN( 539)				{
HXLINE( 539)					Int byteOffset31 = (dest->byteOffset + (idx31 * (int)4));
HXDLIN( 539)					::__hxcpp_memory_set_float(dest->buffer->b,byteOffset31,val31);
            				}
            			}
            		}
HXLINE( 543)		Bool _hx_tmp = hx::IsNotNull( this->_hx___program );
HXDLIN( 543)		if (_hx_tmp) {
HXLINE( 545)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,(int)4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromMatrix,(void))

void Context3D_obj::setProgramConstantsFromVector( ::Dynamic programType,Int firstRegister, ::openfl::_Vector::FloatVector data,hx::Null< Int >  __o_numRegisters){
Int numRegisters = __o_numRegisters.Default(-1);
            	HX_STACK_FRAME("openfl.display3D.Context3D","setProgramConstantsFromVector",0x057dbe53,"openfl.display3D.Context3D.setProgramConstantsFromVector","openfl/display3D/Context3D.hx",552,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(programType,"programType")
            	HX_STACK_ARG(firstRegister,"firstRegister")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(numRegisters,"numRegisters")
HXLINE( 554)		if ((numRegisters == (int)0)) {
HXLINE( 554)			return;
            		}
HXLINE( 556)		if ((numRegisters == (int)-1)) {
HXLINE( 558)			Int _hx_tmp = data->get_length();
HXDLIN( 558)			numRegisters = ((int)_hx_tmp >> (int)(int)2);
            		}
HXLINE( 562)		HX_VARI( Bool,isVertex) = hx::IsEq( programType,(int)1 );
HXLINE( 563)		HX_VAR(  ::lime::utils::ArrayBufferView,dest);
HXDLIN( 563)		if (isVertex) {
HXLINE( 563)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 563)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 566)		HX_VARI( Int,sourceIndex) = (int)0;
HXLINE( 567)		HX_VARI( Int,destIndex) = (firstRegister * (int)4);
HXLINE( 569)		{
HXLINE( 569)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 569)			HX_VARI( Int,_g) = numRegisters;
HXDLIN( 569)			while((_g1 < _g)){
HXLINE( 569)				++_g1;
HXLINE( 571)				{
HXLINE( 571)					Int idx = destIndex++;
HXDLIN( 571)					Int index = sourceIndex++;
HXDLIN( 571)					HX_VARI( Float,val) = data->get(index);
HXDLIN( 571)					{
HXLINE( 571)						Int byteOffset = (dest->byteOffset + (idx * (int)4));
HXDLIN( 571)						::__hxcpp_memory_set_float(dest->buffer->b,byteOffset,val);
            					}
            				}
HXLINE( 572)				{
HXLINE( 572)					Int idx1 = destIndex++;
HXDLIN( 572)					Int index1 = sourceIndex++;
HXDLIN( 572)					HX_VARI_NAME( Float,val1,"val") = data->get(index1);
HXDLIN( 572)					{
HXLINE( 572)						Int byteOffset1 = (dest->byteOffset + (idx1 * (int)4));
HXDLIN( 572)						::__hxcpp_memory_set_float(dest->buffer->b,byteOffset1,val1);
            					}
            				}
HXLINE( 573)				{
HXLINE( 573)					Int idx2 = destIndex++;
HXDLIN( 573)					Int index2 = sourceIndex++;
HXDLIN( 573)					HX_VARI_NAME( Float,val2,"val") = data->get(index2);
HXDLIN( 573)					{
HXLINE( 573)						Int byteOffset2 = (dest->byteOffset + (idx2 * (int)4));
HXDLIN( 573)						::__hxcpp_memory_set_float(dest->buffer->b,byteOffset2,val2);
            					}
            				}
HXLINE( 574)				{
HXLINE( 574)					Int idx3 = destIndex++;
HXDLIN( 574)					Int index3 = sourceIndex++;
HXDLIN( 574)					HX_VARI_NAME( Float,val3,"val") = data->get(index3);
HXDLIN( 574)					{
HXLINE( 574)						Int byteOffset3 = (dest->byteOffset + (idx3 * (int)4));
HXDLIN( 574)						::__hxcpp_memory_set_float(dest->buffer->b,byteOffset3,val3);
            					}
            				}
            			}
            		}
HXLINE( 578)		Bool _hx_tmp1 = hx::IsNotNull( this->_hx___program );
HXDLIN( 578)		if (_hx_tmp1) {
HXLINE( 580)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromVector,(void))

void Context3D_obj::setRenderToBackBuffer(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setRenderToBackBuffer",0x6095d693,"openfl.display3D.Context3D.setRenderToBackBuffer","openfl/display3D/Context3D.hx",587,0xc899cbb9)
            	HX_STACK_THIS(this)
HXLINE( 589)		{
HXLINE( 589)			 ::Dynamic framebuffer = null();
HXDLIN( 589)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_framebuffer((int)36160,hx::DynamicPtr(framebuffer));
            		}
HXLINE( 590)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 592)		this->_hx___renderToTexture = null();
HXLINE( 593)		this->_hx___updateBackbufferViewport();
HXLINE( 594)		this->_hx___updateScissorRectangle();
HXLINE( 595)		this->_hx___updateDepthAndStencilState();
HXLINE( 597)		{
HXLINE( 597)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = this->_hx___positionScale;
HXDLIN( 597)			{
HXLINE( 597)				Int byteOffset = (this1->byteOffset + (int)4);
HXDLIN( 597)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,((Float)1.0));
            			}
            		}
HXLINE( 599)		Bool _hx_tmp = hx::IsNotNull( this->_hx___program );
HXDLIN( 599)		if (_hx_tmp) {
HXLINE( 601)			this->_hx___program->_hx___setPositionScale(this->_hx___positionScale);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,setRenderToBackBuffer,(void))

void Context3D_obj::setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,hx::Null< Bool >  __o_enableDepthAndStencil,hx::Null< Int >  __o_antiAlias,hx::Null< Int >  __o_surfaceSelector){
Bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
Int antiAlias = __o_antiAlias.Default(0);
Int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_STACK_FRAME("openfl.display3D.Context3D","setRenderToTexture",0x25c5d54f,"openfl.display3D.Context3D.setRenderToTexture","openfl/display3D/Context3D.hx",608,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
            	HX_STACK_ARG(enableDepthAndStencil,"enableDepthAndStencil")
            	HX_STACK_ARG(antiAlias,"antiAlias")
            	HX_STACK_ARG(surfaceSelector,"surfaceSelector")
HXLINE( 610)		HX_VARI( Int,width) = (int)0;
HXLINE( 611)		HX_VARI( Int,height) = (int)0;
HXLINE( 613)		Bool _hx_tmp = ::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::Texture >());
HXDLIN( 613)		if (_hx_tmp) {
HXLINE( 615)			HX_VARI(  ::openfl::display3D::textures::Texture,texture2D) = ( ( ::openfl::display3D::textures::Texture)(texture) );
HXLINE( 616)			width = texture2D->_hx___width;
HXLINE( 617)			height = texture2D->_hx___height;
            		}
            		else {
HXLINE( 619)			Bool _hx_tmp1 = ::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >());
HXDLIN( 619)			if (_hx_tmp1) {
HXLINE( 621)				HX_VARI(  ::openfl::display3D::textures::RectangleTexture,rectTexture) = ( ( ::openfl::display3D::textures::RectangleTexture)(texture) );
HXLINE( 622)				width = rectTexture->_hx___width;
HXLINE( 623)				height = rectTexture->_hx___height;
            			}
            			else {
HXLINE( 627)				HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__new(HX_("Invalid texture",92,3e,59,9a),null()));
            			}
            		}
HXLINE( 631)		Bool _hx_tmp2 = hx::IsNull( this->_hx___framebuffer );
HXDLIN( 631)		if (_hx_tmp2) {
HXLINE( 633)			Int _hx_tmp3 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 633)			 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_framebuffer()) );
HXDLIN( 633)			 ::Dynamic _hx_tmp4 = Dynamic(hx::DynamicPtr(inVal));
HXDLIN( 633)			this->_hx___framebuffer =  ::lime::graphics::opengl::GLFramebuffer_obj::__new(_hx_tmp3,_hx_tmp4);
HXLINE( 634)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 638)		{
HXLINE( 638)			HX_VARI(  ::lime::graphics::opengl::GLFramebuffer,framebuffer) = this->_hx___framebuffer;
HXDLIN( 638)			{
HXLINE( 638)				 ::Dynamic framebuffer1;
HXDLIN( 638)				Bool _hx_tmp5 = hx::IsNull( framebuffer );
HXDLIN( 638)				if (_hx_tmp5) {
HXLINE( 638)					framebuffer1 = null();
            				}
            				else {
HXLINE( 638)					framebuffer1 = framebuffer->id;
            				}
HXDLIN( 638)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_framebuffer((int)36160,hx::DynamicPtr(framebuffer1));
            			}
            		}
HXLINE( 639)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 640)		{
HXLINE( 640)			 ::Dynamic texture1 = texture->_hx___textureID->id;
HXDLIN( 640)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_texture2D((int)36160,(int)36064,(int)3553,hx::DynamicPtr(texture1),(int)0);
            		}
HXLINE( 641)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 643)		if (enableDepthAndStencil) {
HXLINE( 645)			Bool _hx_tmp6 = this->_hx___supportsPackedDepthStencil;
HXDLIN( 645)			if (_hx_tmp6) {
HXLINE( 647)				Bool _hx_tmp7 = hx::IsNull( this->_hx___depthStencilRenderBuffer );
HXDLIN( 647)				if (_hx_tmp7) {
HXLINE( 649)					Int _hx_tmp8 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 649)					 ::hx::Object * inVal1 = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_render_buffer()) );
HXDLIN( 649)					 ::Dynamic _hx_tmp9 = Dynamic(hx::DynamicPtr(inVal1));
HXDLIN( 649)					this->_hx___depthStencilRenderBuffer =  ::lime::graphics::opengl::GLRenderbuffer_obj::__new(_hx_tmp8,_hx_tmp9);
HXLINE( 650)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 654)				{
HXLINE( 654)					HX_VARI(  ::lime::graphics::opengl::GLRenderbuffer,renderbuffer) = this->_hx___depthStencilRenderBuffer;
HXDLIN( 654)					{
HXLINE( 654)						 ::Dynamic renderbuffer1;
HXDLIN( 654)						Bool _hx_tmp10 = hx::IsNull( renderbuffer );
HXDLIN( 654)						if (_hx_tmp10) {
HXLINE( 654)							renderbuffer1 = null();
            						}
            						else {
HXLINE( 654)							renderbuffer1 = renderbuffer->id;
            						}
HXDLIN( 654)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_renderbuffer((int)36161,hx::DynamicPtr(renderbuffer1));
            					}
            				}
HXLINE( 655)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 656)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_renderbuffer_storage((int)36161,(int)35056,width,height);
HXLINE( 657)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 659)				{
HXLINE( 659)					 ::Dynamic renderbuffer2 = this->_hx___depthStencilRenderBuffer->id;
HXDLIN( 659)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_renderbuffer((int)36160,(int)33306,(int)36161,hx::DynamicPtr(renderbuffer2));
            				}
HXLINE( 660)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 664)				Bool _hx_tmp11 = hx::IsNull( this->_hx___depthRenderBuffer );
HXDLIN( 664)				if (_hx_tmp11) {
HXLINE( 666)					Int _hx_tmp12 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 666)					 ::hx::Object * inVal2 = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_render_buffer()) );
HXDLIN( 666)					 ::Dynamic _hx_tmp13 = Dynamic(hx::DynamicPtr(inVal2));
HXDLIN( 666)					this->_hx___depthRenderBuffer =  ::lime::graphics::opengl::GLRenderbuffer_obj::__new(_hx_tmp12,_hx_tmp13);
HXLINE( 667)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 671)				Bool _hx_tmp14 = hx::IsNull( this->_hx___stencilRenderBuffer );
HXDLIN( 671)				if (_hx_tmp14) {
HXLINE( 673)					Int _hx_tmp15 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 673)					 ::hx::Object * inVal3 = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_render_buffer()) );
HXDLIN( 673)					 ::Dynamic _hx_tmp16 = Dynamic(hx::DynamicPtr(inVal3));
HXDLIN( 673)					this->_hx___stencilRenderBuffer =  ::lime::graphics::opengl::GLRenderbuffer_obj::__new(_hx_tmp15,_hx_tmp16);
HXLINE( 674)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 678)				{
HXLINE( 678)					HX_VARI_NAME(  ::lime::graphics::opengl::GLRenderbuffer,renderbuffer3,"renderbuffer") = this->_hx___depthRenderBuffer;
HXDLIN( 678)					{
HXLINE( 678)						 ::Dynamic renderbuffer4;
HXDLIN( 678)						Bool _hx_tmp17 = hx::IsNull( renderbuffer3 );
HXDLIN( 678)						if (_hx_tmp17) {
HXLINE( 678)							renderbuffer4 = null();
            						}
            						else {
HXLINE( 678)							renderbuffer4 = renderbuffer3->id;
            						}
HXDLIN( 678)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_renderbuffer((int)36161,hx::DynamicPtr(renderbuffer4));
            					}
            				}
HXLINE( 679)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 680)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_renderbuffer_storage((int)36161,(int)33189,width,height);
HXLINE( 681)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 682)				{
HXLINE( 682)					HX_VARI_NAME(  ::lime::graphics::opengl::GLRenderbuffer,renderbuffer5,"renderbuffer") = this->_hx___stencilRenderBuffer;
HXDLIN( 682)					{
HXLINE( 682)						 ::Dynamic renderbuffer6;
HXDLIN( 682)						Bool _hx_tmp18 = hx::IsNull( renderbuffer5 );
HXDLIN( 682)						if (_hx_tmp18) {
HXLINE( 682)							renderbuffer6 = null();
            						}
            						else {
HXLINE( 682)							renderbuffer6 = renderbuffer5->id;
            						}
HXDLIN( 682)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_renderbuffer((int)36161,hx::DynamicPtr(renderbuffer6));
            					}
            				}
HXLINE( 683)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 684)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_renderbuffer_storage((int)36161,(int)36168,width,height);
HXLINE( 685)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 687)				{
HXLINE( 687)					 ::Dynamic renderbuffer7 = this->_hx___depthRenderBuffer->id;
HXDLIN( 687)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_renderbuffer((int)36160,(int)36096,(int)36161,hx::DynamicPtr(renderbuffer7));
            				}
HXLINE( 688)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 689)				{
HXLINE( 689)					 ::Dynamic renderbuffer8 = this->_hx___stencilRenderBuffer->id;
HXDLIN( 689)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_renderbuffer((int)36160,(int)36128,(int)36161,hx::DynamicPtr(renderbuffer8));
            				}
HXLINE( 690)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
HXLINE( 694)			{
HXLINE( 694)				 ::Dynamic renderbuffer9 = null();
HXDLIN( 694)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_renderbuffer((int)36161,hx::DynamicPtr(renderbuffer9));
            			}
HXLINE( 695)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 699)		this->_hx___setViewport((int)0,(int)0,width,height);
HXLINE( 701)		Bool _hx_tmp19 = this->enableErrorChecking;
HXDLIN( 701)		if (_hx_tmp19) {
HXLINE( 703)			HX_VARI( Int,code) = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_check_framebuffer_status((int)36160)) );
HXLINE( 705)			if ((code != (int)36053)) {
HXLINE( 707)				::haxe::Log_obj::trace(HX_("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",55,db,0b,ac),hx::SourceInfo(HX_("Context3D.hx",7e,2e,cf,45),707,HX_("openfl.display3D.Context3D",a7,bf,a0,2f),HX_("setRenderToTexture",e8,2c,92,46)));
            			}
            		}
HXLINE( 713)		{
HXLINE( 713)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = this->_hx___positionScale;
HXDLIN( 713)			{
HXLINE( 713)				Int byteOffset = (this1->byteOffset + (int)4);
HXDLIN( 713)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,((Float)-1.0));
            			}
            		}
HXLINE( 715)		Bool _hx_tmp20 = hx::IsNotNull( this->_hx___program );
HXDLIN( 715)		if (_hx_tmp20) {
HXLINE( 717)			this->_hx___program->_hx___setPositionScale(this->_hx___positionScale);
            		}
HXLINE( 721)		this->_hx___renderToTexture = texture;
HXLINE( 722)		this->_hx___rttDepthAndStencil = enableDepthAndStencil;
HXLINE( 723)		this->_hx___updateScissorRectangle();
HXLINE( 724)		this->_hx___updateDepthAndStencilState();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setRenderToTexture,(void))

void Context3D_obj::setSamplerStateAt(Int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setSamplerStateAt",0x9f8ad1f7,"openfl.display3D.Context3D.setSamplerStateAt","openfl/display3D/Context3D.hx",729,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sampler,"sampler")
            	HX_STACK_ARG(wrap,"wrap")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(mipfilter,"mipfilter")
HXLINE( 731)		Bool _hx_tmp;
HXDLIN( 731)		if ((sampler >= (int)0)) {
HXLINE( 731)			_hx_tmp = (sampler > (int)8);
            		}
            		else {
HXLINE( 731)			_hx_tmp = true;
            		}
HXDLIN( 731)		if (_hx_tmp) {
HXLINE( 733)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__new(HX_("sampler out of range",de,61,c4,36),null()));
            		}
HXLINE( 737)		HX_VARI(  ::openfl::_internal::stage3D::SamplerState,state) = this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXLINE( 739)		 ::Dynamic _hx_switch_0 = wrap;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 743)			state->wrapModeS = (int)33071;
HXLINE( 744)			state->wrapModeT = (int)33071;
HXLINE( 741)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 748)			state->wrapModeS = (int)33071;
HXLINE( 749)			state->wrapModeT = (int)10497;
HXLINE( 746)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 753)			state->wrapModeS = (int)10497;
HXLINE( 754)			state->wrapModeT = (int)10497;
HXLINE( 751)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 758)			state->wrapModeS = (int)10497;
HXLINE( 759)			state->wrapModeT = (int)33071;
HXLINE( 756)			goto _hx_goto_7;
            		}
            		/* default */{
HXLINE( 763)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__new(HX_("wrap bad enum",52,1c,4c,59),null()));
            		}
            		_hx_goto_7:;
HXLINE( 767)		 ::Dynamic _hx_switch_1 = filter;
            		if (  (_hx_switch_1==(int)0) ){
HXLINE( 795)			state->magFilter = (int)9729;
HXDLIN( 795)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==(int)1) ){
HXLINE( 780)			state->magFilter = (int)9729;
HXDLIN( 780)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==(int)2) ){
HXLINE( 785)			state->magFilter = (int)9729;
HXDLIN( 785)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==(int)3) ){
HXLINE( 790)			state->magFilter = (int)9729;
HXDLIN( 790)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==(int)4) ){
HXLINE( 771)			state->magFilter = (int)9729;
HXDLIN( 771)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==(int)5) ){
HXLINE( 775)			state->magFilter = (int)9728;
HXDLIN( 775)			goto _hx_goto_8;
            		}
            		/* default */{
HXLINE( 799)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__new(HX_("filter bad enum",a4,08,ed,96),null()));
            		}
            		_hx_goto_8:;
HXLINE( 803)		 ::Dynamic _hx_switch_2 = mipfilter;
            		if (  (_hx_switch_2==(int)0) ){
HXLINE( 807)			state->minFilter = (int)9987;
HXDLIN( 807)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_2==(int)1) ){
HXLINE( 811)			state->minFilter = (int)9984;
HXDLIN( 811)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_2==(int)2) ){
HXLINE( 815)			Int _hx_tmp1;
HXDLIN( 815)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 815)				_hx_tmp1 = (int)9728;
            			}
            			else {
HXLINE( 815)				_hx_tmp1 = (int)9729;
            			}
HXDLIN( 815)			state->minFilter = _hx_tmp1;
HXDLIN( 815)			goto _hx_goto_9;
            		}
            		/* default */{
HXLINE( 819)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__new(HX_("mipfiter bad enum",b2,1b,09,c4),null()));
            		}
            		_hx_goto_9:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setSamplerStateAt,(void))

void Context3D_obj::setScissorRectangle( ::openfl::geom::Rectangle rectangle){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setScissorRectangle",0x712bb5ee,"openfl.display3D.Context3D.setScissorRectangle","openfl/display3D/Context3D.hx",826,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rectangle,"rectangle")
HXLINE( 828)		this->_hx___scissorRectangle = rectangle;
HXLINE( 829)		this->_hx___updateScissorRectangle();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setScissorRectangle,(void))

void Context3D_obj::setStencilActions( ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
 ::Dynamic triangleFace = __o_triangleFace.Default(2);
 ::Dynamic compareMode = __o_compareMode.Default(0);
 ::Dynamic actionOnBothPass = __o_actionOnBothPass.Default(5);
 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail.Default(5);
 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail.Default(5);
            	HX_STACK_FRAME("openfl.display3D.Context3D","setStencilActions",0x1fe08e1c,"openfl.display3D.Context3D.setStencilActions","openfl/display3D/Context3D.hx",834,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(triangleFace,"triangleFace")
            	HX_STACK_ARG(compareMode,"compareMode")
            	HX_STACK_ARG(actionOnBothPass,"actionOnBothPass")
            	HX_STACK_ARG(actionOnDepthFail,"actionOnDepthFail")
            	HX_STACK_ARG(actionOnDepthPassStencilFail,"actionOnDepthPassStencilFail")
HXLINE( 836)		this->_hx___stencilCompareMode = compareMode;
HXLINE( 837)		{
HXLINE( 837)			Int fail = this->_hx___getGLStencilAction(actionOnDepthFail);
HXDLIN( 837)			Int zfail = this->_hx___getGLStencilAction(actionOnDepthPassStencilFail);
HXDLIN( 837)			Int zpass = this->_hx___getGLStencilAction(actionOnBothPass);
HXDLIN( 837)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_stencil_op(fail,zfail,zpass);
            		}
HXLINE( 838)		{
HXLINE( 838)			Int func = this->_hx___getGLCompareMode(this->_hx___stencilCompareMode);
HXDLIN( 838)			Int ref = this->_hx___stencilRef;
HXDLIN( 838)			Int mask = this->_hx___stencilReadMask;
HXDLIN( 838)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_stencil_func(func,ref,mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setStencilActions,(void))

void Context3D_obj::setStencilReferenceValue(Int referenceValue,hx::Null< Int >  __o_readMask,hx::Null< Int >  __o_writeMask){
Int readMask = __o_readMask.Default(255);
Int writeMask = __o_writeMask.Default(255);
            	HX_STACK_FRAME("openfl.display3D.Context3D","setStencilReferenceValue",0xaa284f67,"openfl.display3D.Context3D.setStencilReferenceValue","openfl/display3D/Context3D.hx",843,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(referenceValue,"referenceValue")
            	HX_STACK_ARG(readMask,"readMask")
            	HX_STACK_ARG(writeMask,"writeMask")
HXLINE( 845)		this->_hx___stencilReadMask = readMask;
HXLINE( 846)		this->_hx___stencilRef = referenceValue;
HXLINE( 848)		{
HXLINE( 848)			Int func = this->_hx___getGLCompareMode(this->_hx___stencilCompareMode);
HXDLIN( 848)			Int ref = this->_hx___stencilRef;
HXDLIN( 848)			Int mask = this->_hx___stencilReadMask;
HXDLIN( 848)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_stencil_func(func,ref,mask);
            		}
HXLINE( 849)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_stencil_mask(writeMask);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setStencilReferenceValue,(void))

void Context3D_obj::setTextureAt(Int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACK_FRAME("openfl.display3D.Context3D","setTextureAt",0x38d4bfd3,"openfl.display3D.Context3D.setTextureAt","openfl/display3D/Context3D.hx",856,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sampler,"sampler")
            	HX_STACK_ARG(texture,"texture")
HXLINE( 856)		Bool _hx_tmp = hx::IsNotEq( this->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >(),texture );
HXDLIN( 856)		if (_hx_tmp) {
HXLINE( 858)			this->_hx___samplerTextures->set(sampler,texture).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE( 859)			hx::OrEq(this->_hx___samplerDirty,((int)(int)1 << (int)sampler));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setTextureAt,(void))

void Context3D_obj::setVertexBufferAt(Int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< Int >  __o_bufferOffset, ::Dynamic __o_format){
Int bufferOffset = __o_bufferOffset.Default(0);
 ::Dynamic format = __o_format.Default(4);
            	HX_STACK_FRAME("openfl.display3D.Context3D","setVertexBufferAt",0xbb32fa52,"openfl.display3D.Context3D.setVertexBufferAt","openfl/display3D/Context3D.hx",868,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(bufferOffset,"bufferOffset")
            	HX_STACK_ARG(format,"format")
HXLINE( 870)		Bool _hx_tmp = hx::IsNull( buffer );
HXDLIN( 870)		if (_hx_tmp) {
HXLINE( 872)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable_vertex_attrib_array(index);
HXLINE( 873)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 875)			{
HXLINE( 875)				 ::Dynamic buffer1 = null();
HXDLIN( 875)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer((int)34962,hx::DynamicPtr(buffer1));
            			}
HXLINE( 876)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 878)			return;
            		}
HXLINE( 882)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable_vertex_attrib_array(index);
HXLINE( 883)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 885)		{
HXLINE( 885)			HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer2,"buffer") = buffer->_hx___id;
HXDLIN( 885)			{
HXLINE( 885)				 ::Dynamic buffer3;
HXDLIN( 885)				Bool _hx_tmp1 = hx::IsNull( buffer2 );
HXDLIN( 885)				if (_hx_tmp1) {
HXLINE( 885)					buffer3 = null();
            				}
            				else {
HXLINE( 885)					buffer3 = buffer2->id;
            				}
HXDLIN( 885)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer((int)34962,hx::DynamicPtr(buffer3));
            			}
            		}
HXLINE( 886)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 888)		HX_VARI( Int,byteOffset) = (bufferOffset * (int)4);
HXLINE( 890)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 894)			{
HXLINE( 894)				Int stride = buffer->_hx___stride;
HXDLIN( 894)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(index,(int)4,(int)5121,true,stride,byteOffset);
            			}
HXLINE( 895)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 892)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 914)			{
HXLINE( 914)				Int stride1 = buffer->_hx___stride;
HXDLIN( 914)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(index,(int)1,(int)5126,false,stride1,byteOffset);
            			}
HXLINE( 915)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 912)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 909)			{
HXLINE( 909)				Int stride2 = buffer->_hx___stride;
HXDLIN( 909)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(index,(int)2,(int)5126,false,stride2,byteOffset);
            			}
HXLINE( 910)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 907)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 904)			{
HXLINE( 904)				Int stride3 = buffer->_hx___stride;
HXDLIN( 904)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(index,(int)3,(int)5126,false,stride3,byteOffset);
            			}
HXLINE( 905)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 902)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 899)			{
HXLINE( 899)				Int stride4 = buffer->_hx___stride;
HXDLIN( 899)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(index,(int)4,(int)5126,false,stride4,byteOffset);
            			}
HXLINE( 900)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 897)			goto _hx_goto_10;
            		}
            		/* default */{
HXLINE( 919)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            		}
            		_hx_goto_10:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setVertexBufferAt,(void))

void Context3D_obj::_hx___flushSamplerState(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__flushSamplerState",0xbb488366,"openfl.display3D.Context3D.__flushSamplerState","openfl/display3D/Context3D.hx",926,0xc899cbb9)
            	HX_STACK_THIS(this)
HXLINE( 928)		HX_VARI( Int,sampler) = (int)0;
HXLINE( 930)		while((this->_hx___samplerDirty != (int)0)){
HXLINE( 932)			Int _hx_tmp = ((int)this->_hx___samplerDirty & (int)((int)(int)1 << (int)sampler));
HXDLIN( 932)			if ((_hx_tmp != (int)0)) {
HXLINE( 934)				Bool _hx_tmp1 = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateActiveTextureSample(sampler);
HXDLIN( 934)				if (_hx_tmp1) {
HXLINE( 936)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_active_texture(((int)33984 + sampler));
HXLINE( 937)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 941)				HX_VARI(  ::openfl::display3D::textures::TextureBase,texture) = this->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE( 943)				Bool _hx_tmp2 = hx::IsNotNull( texture );
HXDLIN( 943)				if (_hx_tmp2) {
HXLINE( 945)					HX_VARI( Int,target) = texture->_hx___textureTarget;
HXLINE( 947)					{
HXLINE( 947)						HX_VARI_NAME(  ::lime::graphics::opengl::GLTexture,texture1,"texture") = texture->_hx___textureID;
HXDLIN( 947)						{
HXLINE( 947)							 ::Dynamic texture2;
HXDLIN( 947)							Bool _hx_tmp3 = hx::IsNull( texture1 );
HXDLIN( 947)							if (_hx_tmp3) {
HXLINE( 947)								texture2 = null();
            							}
            							else {
HXLINE( 947)								texture2 = texture1->id;
            							}
HXDLIN( 947)							::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,hx::DynamicPtr(texture2));
            						}
            					}
HXLINE( 948)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 960)					 ::openfl::_internal::stage3D::SamplerState _hx_tmp4 = this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXDLIN( 960)					texture->_hx___setSamplerState(_hx_tmp4);
            				}
            				else {
HXLINE( 964)					{
HXLINE( 964)						 ::Dynamic texture3 = null();
HXDLIN( 964)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture((int)3553,hx::DynamicPtr(texture3));
            					}
HXLINE( 965)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 969)				hx::AndEq(this->_hx___samplerDirty,~(((int)(int)1 << (int)sampler)));
            			}
HXLINE( 973)			++sampler;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushSamplerState,(void))

Int Context3D_obj::_hx___getGLCompareMode( ::Dynamic compareMode){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__getGLCompareMode",0xec8b55b4,"openfl.display3D.Context3D.__getGLCompareMode","openfl/display3D/Context3D.hx",982,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(compareMode,"compareMode")
HXLINE( 982)		 ::Dynamic _hx_switch_0 = compareMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 982)			return (int)519;
HXDLIN( 982)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 982)			return (int)514;
HXDLIN( 982)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 982)			return (int)516;
HXDLIN( 982)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 982)			return (int)518;
HXDLIN( 982)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 982)			return (int)513;
HXDLIN( 982)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE( 982)			return (int)515;
HXDLIN( 982)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE( 982)			return (int)512;
HXDLIN( 982)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE( 982)			return (int)517;
HXDLIN( 982)			goto _hx_goto_12;
            		}
            		/* default */{
HXLINE( 982)			return (int)514;
            		}
            		_hx_goto_12:;
HXDLIN( 982)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLCompareMode,return )

Int Context3D_obj::_hx___getGLStencilAction( ::Dynamic stencilAction){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__getGLStencilAction",0xdf4274de,"openfl.display3D.Context3D.__getGLStencilAction","openfl/display3D/Context3D.hx",1001,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stencilAction,"stencilAction")
HXLINE(1001)		 ::Dynamic _hx_switch_0 = stencilAction;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1001)			return (int)7683;
HXDLIN(1001)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1001)			return (int)34056;
HXDLIN(1001)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1001)			return (int)7682;
HXDLIN(1001)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1001)			return (int)34055;
HXDLIN(1001)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1001)			return (int)5386;
HXDLIN(1001)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1001)			return (int)7680;
HXDLIN(1001)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1001)			return (int)7681;
HXDLIN(1001)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1001)			return (int)0;
HXDLIN(1001)			goto _hx_goto_13;
            		}
            		/* default */{
HXLINE(1001)			return (int)7680;
            		}
            		_hx_goto_13:;
HXDLIN(1001)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLStencilAction,return )

Bool Context3D_obj::_hx___hasGLExtension(::String name){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__hasGLExtension",0xeedeef47,"openfl.display3D.Context3D.__hasGLExtension","openfl/display3D/Context3D.hx",1020,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(1020)		HX_VARI( ::Array< ::String >,result) = ::Array_obj< ::String >::__new();
HXDLIN(1020)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_supported_extensions(hx::DynamicPtr(result));
HXDLIN(1020)		Int _hx_tmp = result->indexOf(name,null());
HXDLIN(1020)		return (_hx_tmp != (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___hasGLExtension,return )

void Context3D_obj::_hx___setViewport(Int originX,Int originY,Int width,Int height){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__setViewport",0x44998801,"openfl.display3D.Context3D.__setViewport","openfl/display3D/Context3D.hx",1027,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(originX,"originX")
            	HX_STACK_ARG(originY,"originY")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1027)		Bool _hx_tmp = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateViewport(originX,originY,width,height);
HXDLIN(1027)		if (_hx_tmp) {
HXLINE(1029)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_viewport(originX,originY,width,height);
HXLINE(1030)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,_hx___setViewport,(void))

Int Context3D_obj::_hx___statsAdd(Int stat,Int value){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__statsAdd",0x9eeb6dc9,"openfl.display3D.Context3D.__statsAdd","openfl/display3D/Context3D.hx",1037,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
            	HX_STACK_ARG(value,"value")
HXLINE(1039)		{
HXLINE(1039)			Int value1 = (this->_hx___stats->get(stat) + value);
HXDLIN(1039)			this->_hx___stats->set(stat,value1);
            		}
HXLINE(1040)		return this->_hx___stats->get(stat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___statsAdd,return )

void Context3D_obj::_hx___statsClear(Int stat){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__statsClear",0xef112735,"openfl.display3D.Context3D.__statsClear","openfl/display3D/Context3D.hx",1047,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
HXLINE(1047)		this->_hx___stats->set(stat,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsClear,(void))

void Context3D_obj::_hx___statsDecrement(Int stat){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__statsDecrement",0xf8079fbb,"openfl.display3D.Context3D.__statsDecrement","openfl/display3D/Context3D.hx",1054,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
HXLINE(1054)		Int value = (this->_hx___stats->get(stat) - (int)1);
HXDLIN(1054)		this->_hx___stats->set(stat,value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsDecrement,(void))

void Context3D_obj::_hx___statsIncrement(Int stat){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__statsIncrement",0x1984afd7,"openfl.display3D.Context3D.__statsIncrement","openfl/display3D/Context3D.hx",1061,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
HXLINE(1061)		Int value = (this->_hx___stats->get(stat) + (int)1);
HXDLIN(1061)		this->_hx___stats->set(stat,value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsIncrement,(void))

void Context3D_obj::_hx___statsSendToTelemetry(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__statsSendToTelemetry",0x95ec20be,"openfl.display3D.Context3D.__statsSendToTelemetry","openfl/display3D/Context3D.hx",1066,0xc899cbb9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___statsSendToTelemetry,(void))

Int Context3D_obj::_hx___statsSubtract(Int stat,Int value){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__statsSubtract",0xc326b86c,"openfl.display3D.Context3D.__statsSubtract","openfl/display3D/Context3D.hx",1115,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
            	HX_STACK_ARG(value,"value")
HXLINE(1117)		{
HXLINE(1117)			Int value1 = (this->_hx___stats->get(stat) - value);
HXDLIN(1117)			this->_hx___stats->set(stat,value1);
            		}
HXLINE(1118)		return this->_hx___stats->get(stat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___statsSubtract,return )

void Context3D_obj::_hx___updateDepthAndStencilState(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__updateDepthAndStencilState",0x7fba6d19,"openfl.display3D.Context3D.__updateDepthAndStencilState","openfl/display3D/Context3D.hx",1122,0xc899cbb9)
            	HX_STACK_THIS(this)
HXLINE(1124)		HX_VAR( Bool,depthAndStencil);
HXDLIN(1124)		Bool _hx_tmp = hx::IsNotNull( this->_hx___renderToTexture );
HXDLIN(1124)		if (_hx_tmp) {
HXLINE(1124)			depthAndStencil = this->_hx___rttDepthAndStencil;
            		}
            		else {
HXLINE(1124)			depthAndStencil = this->_hx___backBufferEnableDepthAndStencil;
            		}
HXLINE(1126)		if (depthAndStencil) {
HXLINE(1128)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable((int)2929);
HXLINE(1129)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1130)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable((int)2960);
HXLINE(1131)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE(1135)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable((int)2929);
HXLINE(1136)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1137)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable((int)2960);
HXLINE(1138)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateDepthAndStencilState,(void))

void Context3D_obj::_hx___updateBlendFactors(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__updateBlendFactors",0x00141f63,"openfl.display3D.Context3D.__updateBlendFactors","openfl/display3D/Context3D.hx",1145,0xc899cbb9)
            	HX_STACK_THIS(this)
HXLINE(1147)		Bool _hx_tmp;
HXDLIN(1147)		Bool _hx_tmp1 = hx::IsNotNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor );
HXDLIN(1147)		if (_hx_tmp1) {
HXLINE(1147)			_hx_tmp = hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor );
            		}
            		else {
HXLINE(1147)			_hx_tmp = true;
            		}
HXDLIN(1147)		if (_hx_tmp) {
HXLINE(1149)			return;
            		}
HXLINE(1153)		HX_VARI( Int,src) = (int)1;
HXLINE(1154)		HX_VARI( Int,dest) = (int)0;
HXLINE(1155)		{
HXLINE(1155)			HX_VARI(  ::Dynamic,_g) = ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor;
HXDLIN(1155)			 ::Dynamic _hx_switch_0 = _g;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE(1160)				src = (int)772;
HXDLIN(1160)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE(1161)				src = (int)774;
HXDLIN(1161)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE(1157)				src = (int)1;
HXDLIN(1157)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE(1163)				src = (int)773;
HXDLIN(1163)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE(1164)				src = (int)775;
HXDLIN(1164)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE(1162)				src = (int)771;
HXDLIN(1162)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE(1159)				src = (int)770;
HXDLIN(1159)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==(int)9) ){
HXLINE(1158)				src = (int)0;
HXDLIN(1158)				goto _hx_goto_14;
            			}
            			/* default */{
HXLINE(1166)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            			}
            			_hx_goto_14:;
            		}
HXLINE(1170)		{
HXLINE(1170)			HX_VARI(  ::Dynamic,_g1) = ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor;
HXDLIN(1170)			 ::Dynamic _hx_switch_1 = _g1;
            			if (  (_hx_switch_1==(int)0) ){
HXLINE(1176)				dest = (int)772;
HXDLIN(1176)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_1==(int)2) ){
HXLINE(1172)				dest = (int)1;
HXDLIN(1172)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_1==(int)3) ){
HXLINE(1179)				dest = (int)773;
HXDLIN(1179)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_1==(int)5) ){
HXLINE(1177)				dest = (int)771;
HXDLIN(1177)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_1==(int)6) ){
HXLINE(1178)				dest = (int)769;
HXDLIN(1178)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_1==(int)7) ){
HXLINE(1174)				dest = (int)770;
HXDLIN(1174)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_1==(int)8) ){
HXLINE(1175)				dest = (int)768;
HXDLIN(1175)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_1==(int)9) ){
HXLINE(1173)				dest = (int)0;
HXDLIN(1173)				goto _hx_goto_15;
            			}
            			/* default */{
HXLINE(1181)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            			}
            			_hx_goto_15:;
            		}
HXLINE(1185)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable((int)3042);
HXLINE(1186)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1187)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func(src,dest);
HXLINE(1188)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBlendFactors,(void))

void Context3D_obj::_hx___updateScissorRectangle(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__updateScissorRectangle",0x17db8763,"openfl.display3D.Context3D.__updateScissorRectangle","openfl/display3D/Context3D.hx",1193,0xc899cbb9)
            	HX_STACK_THIS(this)
HXLINE(1195)		Bool _hx_tmp = hx::IsNull( this->_hx___scissorRectangle );
HXDLIN(1195)		if (_hx_tmp) {
HXLINE(1197)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable((int)3089);
HXLINE(1198)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1199)			return;
            		}
HXLINE(1203)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable((int)3089);
HXLINE(1204)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1206)		HX_VARI( Int,height) = (int)0;
HXLINE(1208)		Bool _hx_tmp1 = hx::IsNotNull( this->_hx___renderToTexture );
HXDLIN(1208)		if (_hx_tmp1) {
HXLINE(1210)			Bool _hx_tmp2 = ::Std_obj::is(this->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::Texture >());
HXDLIN(1210)			if (_hx_tmp2) {
HXLINE(1213)				height = ( ( ::openfl::display3D::textures::Texture)(this->_hx___renderToTexture) )->_hx___height;
            			}
            			else {
HXLINE(1215)				Bool _hx_tmp3 = ::Std_obj::is(this->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >());
HXDLIN(1215)				if (_hx_tmp3) {
HXLINE(1218)					height = ( ( ::openfl::display3D::textures::RectangleTexture)(this->_hx___renderToTexture) )->_hx___height;
            				}
            			}
            		}
            		else {
HXLINE(1224)			height = this->backBufferHeight;
            		}
HXLINE(1228)		{
HXLINE(1228)			Int x = ::Std_obj::_hx_int(this->_hx___scissorRectangle->x);
HXLINE(1229)			Int _hx_tmp4 = ::Std_obj::_hx_int(this->_hx___scissorRectangle->y);
HXDLIN(1229)			Int _hx_tmp5 = (height - _hx_tmp4);
HXDLIN(1229)			Int _hx_tmp6 = ::Std_obj::_hx_int(this->_hx___scissorRectangle->height);
HXLINE(1228)			Int y = ::Std_obj::_hx_int((_hx_tmp5 - _hx_tmp6));
HXDLIN(1228)			Int width = ::Std_obj::_hx_int(this->_hx___scissorRectangle->width);
HXDLIN(1228)			Int height1 = ::Std_obj::_hx_int(this->_hx___scissorRectangle->height);
HXDLIN(1228)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_scissor(x,y,width,height1);
            		}
HXLINE(1233)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateScissorRectangle,(void))

void Context3D_obj::_hx___updateBackbufferViewport(){
            	HX_STACK_FRAME("openfl.display3D.Context3D","__updateBackbufferViewport",0x1ffcf0dd,"openfl.display3D.Context3D.__updateBackbufferViewport","openfl/display3D/Context3D.hx",1240,0xc899cbb9)
            	HX_STACK_THIS(this)
HXLINE(1240)		Bool _hx_tmp = hx::IsNull( this->_hx___renderToTexture );
HXDLIN(1240)		if (_hx_tmp) {
HXLINE(1242)			Int _hx_tmp1 = ::Std_obj::_hx_int(this->_hx___stage3D->x);
HXDLIN(1242)			Int _hx_tmp2 = ::Std_obj::_hx_int(this->_hx___stage3D->y);
HXDLIN(1242)			this->_hx___setViewport(_hx_tmp1,_hx_tmp2,this->backBufferWidth,this->backBufferHeight);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBackbufferViewport,(void))

Bool Context3D_obj::set_enableErrorChecking(Bool value){
            	HX_STACK_FRAME("openfl.display3D.Context3D","set_enableErrorChecking",0x101dce5b,"openfl.display3D.Context3D.set_enableErrorChecking","openfl/display3D/Context3D.hx",1251,0xc899cbb9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1251)		return (this->enableErrorChecking = (::openfl::_internal::stage3D::GLUtils_obj::debug = value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,set_enableErrorChecking,return )

Bool Context3D_obj::supportsVideoTexture;

Int Context3D_obj::MAX_SAMPLERS;

Int Context3D_obj::MAX_ATTRIBUTES;

Int Context3D_obj::MAX_PROGRAM_REGISTERS;

 ::openfl::_internal::stage3D::Context3DStateCache Context3D_obj::_hx___stateCache;


Context3D_obj::Context3D_obj()
{
}

void Context3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3D);
	HX_MARK_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_MARK_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_MARK_MEMBER_NAME(driverInfo,"driverInfo");
	HX_MARK_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_MARK_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_MARK_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_MARK_MEMBER_NAME(profile,"profile");
	HX_MARK_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_MARK_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_MARK_MEMBER_NAME(_hx___backBufferEnableDepthAndStencil,"__backBufferEnableDepthAndStencil");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_MARK_MEMBER_NAME(_hx___depthRenderBuffer,"__depthRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___depthStencilRenderBuffer,"__depthStencilRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_MARK_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_MARK_MEMBER_NAME(_hx___program,"__program");
	HX_MARK_MEMBER_NAME(_hx___renderSession,"__renderSession");
	HX_MARK_MEMBER_NAME(_hx___renderToTexture,"__renderToTexture");
	HX_MARK_MEMBER_NAME(_hx___rttDepthAndStencil,"__rttDepthAndStencil");
	HX_MARK_MEMBER_NAME(_hx___samplerDirty,"__samplerDirty");
	HX_MARK_MEMBER_NAME(_hx___samplerTextures,"__samplerTextures");
	HX_MARK_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_MARK_MEMBER_NAME(_hx___scissorRectangle,"__scissorRectangle");
	HX_MARK_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_MARK_MEMBER_NAME(_hx___stats,"__stats");
	HX_MARK_MEMBER_NAME(_hx___statsCache,"__statsCache");
	HX_MARK_MEMBER_NAME(_hx___stencilCompareMode,"__stencilCompareMode");
	HX_MARK_MEMBER_NAME(_hx___stencilRef,"__stencilRef");
	HX_MARK_MEMBER_NAME(_hx___stencilReadMask,"__stencilReadMask");
	HX_MARK_MEMBER_NAME(_hx___stencilRenderBuffer,"__stencilRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___supportsPackedDepthStencil,"__supportsPackedDepthStencil");
	HX_MARK_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_VISIT_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_VISIT_MEMBER_NAME(driverInfo,"driverInfo");
	HX_VISIT_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_VISIT_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_VISIT_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_VISIT_MEMBER_NAME(profile,"profile");
	HX_VISIT_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_VISIT_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_VISIT_MEMBER_NAME(_hx___backBufferEnableDepthAndStencil,"__backBufferEnableDepthAndStencil");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_VISIT_MEMBER_NAME(_hx___depthRenderBuffer,"__depthRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___depthStencilRenderBuffer,"__depthStencilRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_VISIT_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_VISIT_MEMBER_NAME(_hx___program,"__program");
	HX_VISIT_MEMBER_NAME(_hx___renderSession,"__renderSession");
	HX_VISIT_MEMBER_NAME(_hx___renderToTexture,"__renderToTexture");
	HX_VISIT_MEMBER_NAME(_hx___rttDepthAndStencil,"__rttDepthAndStencil");
	HX_VISIT_MEMBER_NAME(_hx___samplerDirty,"__samplerDirty");
	HX_VISIT_MEMBER_NAME(_hx___samplerTextures,"__samplerTextures");
	HX_VISIT_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_VISIT_MEMBER_NAME(_hx___scissorRectangle,"__scissorRectangle");
	HX_VISIT_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_VISIT_MEMBER_NAME(_hx___stats,"__stats");
	HX_VISIT_MEMBER_NAME(_hx___statsCache,"__statsCache");
	HX_VISIT_MEMBER_NAME(_hx___stencilCompareMode,"__stencilCompareMode");
	HX_VISIT_MEMBER_NAME(_hx___stencilRef,"__stencilRef");
	HX_VISIT_MEMBER_NAME(_hx___stencilReadMask,"__stencilReadMask");
	HX_VISIT_MEMBER_NAME(_hx___stencilRenderBuffer,"__stencilRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___supportsPackedDepthStencil,"__supportsPackedDepthStencil");
	HX_VISIT_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Context3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return hx::Val( profile); }
		if (HX_FIELD_EQ(inName,"__stats") ) { return hx::Val( _hx___stats); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__program") ) { return hx::Val( _hx___program); }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { return hx::Val( _hx___stage3D); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { return hx::Val( driverInfo); }
		if (HX_FIELD_EQ(inName,"setCulling") ) { return hx::Val( setCulling_dyn()); }
		if (HX_FIELD_EQ(inName,"setProgram") ) { return hx::Val( setProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsAdd") ) { return hx::Val( _hx___statsAdd_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__frameCount") ) { return hx::Val( _hx___frameCount); }
		if (HX_FIELD_EQ(inName,"__statsCache") ) { return hx::Val( _hx___statsCache); }
		if (HX_FIELD_EQ(inName,"__stencilRef") ) { return hx::Val( _hx___stencilRef); }
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return hx::Val( setColorMask_dyn()); }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { return hx::Val( setDepthTest_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { return hx::Val( setTextureAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsClear") ) { return hx::Val( _hx___statsClear_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer); }
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		if (HX_FIELD_EQ(inName,"__setViewport") ) { return hx::Val( _hx___setViewport_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { return hx::Val( totalGPUMemory); }
		if (HX_FIELD_EQ(inName,"__samplerDirty") ) { return hx::Val( _hx___samplerDirty); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { return hx::Val( backBufferWidth); }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { return hx::Val( _hx___positionScale); }
		if (HX_FIELD_EQ(inName,"__renderSession") ) { return hx::Val( _hx___renderSession); }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { return hx::Val( _hx___samplerStates); }
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { return hx::Val( setBlendFactors_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsSubtract") ) { return hx::Val( _hx___statsSubtract_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { return hx::Val( backBufferHeight); }
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { return hx::Val( drawToBitmapData_dyn()); }
		if (HX_FIELD_EQ(inName,"__hasGLExtension") ) { return hx::Val( _hx___hasGLExtension_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsDecrement") ) { return hx::Val( _hx___statsDecrement_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsIncrement") ) { return hx::Val( _hx___statsIncrement_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderToTexture") ) { return hx::Val( _hx___renderToTexture); }
		if (HX_FIELD_EQ(inName,"__samplerTextures") ) { return hx::Val( _hx___samplerTextures); }
		if (HX_FIELD_EQ(inName,"__stencilReadMask") ) { return hx::Val( _hx___stencilReadMask); }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { return hx::Val( _hx___vertexConstants); }
		if (HX_FIELD_EQ(inName,"createCubeTexture") ) { return hx::Val( createCubeTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return hx::Val( createIndexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { return hx::Val( setSamplerStateAt_dyn()); }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { return hx::Val( setStencilActions_dyn()); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return hx::Val( setVertexBufferAt_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { return hx::Val( maxBackBufferWidth); }
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { return hx::Val( _hx___scissorRectangle); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return hx::Val( createVertexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { return hx::Val( setRenderToTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { return hx::Val( _hx___getGLCompareMode_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { return hx::Val( enableErrorChecking); }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { return hx::Val( maxBackBufferHeight); }
		if (HX_FIELD_EQ(inName,"__depthRenderBuffer") ) { return hx::Val( _hx___depthRenderBuffer); }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { return hx::Val( _hx___fragmentConstants); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return hx::Val( configureBackBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { return hx::Val( setScissorRectangle_dyn()); }
		if (HX_FIELD_EQ(inName,"__flushSamplerState") ) { return hx::Val( _hx___flushSamplerState_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__rttDepthAndStencil") ) { return hx::Val( _hx___rttDepthAndStencil); }
		if (HX_FIELD_EQ(inName,"__stencilCompareMode") ) { return hx::Val( _hx___stencilCompareMode); }
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { return hx::Val( _hx___getGLStencilAction_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateBlendFactors") ) { return hx::Val( _hx___updateBlendFactors_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { return hx::Val( _hx___backBufferAntiAlias); }
		if (HX_FIELD_EQ(inName,"__stencilRenderBuffer") ) { return hx::Val( _hx___stencilRenderBuffer); }
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { return hx::Val( setRenderToBackBuffer_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createRectangleTexture") ) { return hx::Val( createRectangleTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsSendToTelemetry") ) { return hx::Val( _hx___statsSendToTelemetry_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"set_enableErrorChecking") ) { return hx::Val( set_enableErrorChecking_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { return hx::Val( setStencilReferenceValue_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateScissorRectangle") ) { return hx::Val( _hx___updateScissorRectangle_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__depthStencilRenderBuffer") ) { return hx::Val( _hx___depthStencilRenderBuffer); }
		if (HX_FIELD_EQ(inName,"__updateBackbufferViewport") ) { return hx::Val( _hx___updateBackbufferViewport_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__supportsPackedDepthStencil") ) { return hx::Val( _hx___supportsPackedDepthStencil); }
		if (HX_FIELD_EQ(inName,"__updateDepthAndStencilState") ) { return hx::Val( _hx___updateDepthAndStencilState_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { return hx::Val( setProgramConstantsFromMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { return hx::Val( setProgramConstantsFromVector_dyn()); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { return hx::Val( _hx___backBufferWantsBestResolution); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { return hx::Val( setProgramConstantsFromByteArray_dyn()); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"__backBufferEnableDepthAndStencil") ) { return hx::Val( _hx___backBufferEnableDepthAndStencil); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__stateCache") ) { outValue = _hx___stateCache; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { outValue = supportsVideoTexture; return true; }
	}
	return false;
}

hx::Val Context3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { profile=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stats") ) { _hx___stats=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__program") ) { _hx___program=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { _hx___stage3D=inValue.Cast<  ::openfl::display::Stage3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { driverInfo=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__frameCount") ) { _hx___frameCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__statsCache") ) { _hx___statsCache=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilRef") ) { _hx___stencilRef=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { totalGPUMemory=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerDirty") ) { _hx___samplerDirty=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { backBufferWidth=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { _hx___positionScale=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderSession") ) { _hx___renderSession=inValue.Cast<  ::openfl::_internal::renderer::RenderSession >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { _hx___samplerStates=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { backBufferHeight=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderToTexture") ) { _hx___renderToTexture=inValue.Cast<  ::openfl::display3D::textures::TextureBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerTextures") ) { _hx___samplerTextures=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilReadMask") ) { _hx___stencilReadMask=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { _hx___vertexConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { maxBackBufferWidth=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { _hx___scissorRectangle=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enableErrorChecking(inValue) );enableErrorChecking=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { maxBackBufferHeight=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__depthRenderBuffer") ) { _hx___depthRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { _hx___fragmentConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__rttDepthAndStencil") ) { _hx___rttDepthAndStencil=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilCompareMode") ) { _hx___stencilCompareMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { _hx___backBufferAntiAlias=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilRenderBuffer") ) { _hx___stencilRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__depthStencilRenderBuffer") ) { _hx___depthStencilRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__supportsPackedDepthStencil") ) { _hx___supportsPackedDepthStencil=inValue.Cast< Bool >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { _hx___backBufferWantsBestResolution=inValue.Cast< Bool >(); return inValue; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"__backBufferEnableDepthAndStencil") ) { _hx___backBufferEnableDepthAndStencil=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__stateCache") ) { _hx___stateCache=ioValue.Cast<  ::openfl::_internal::stage3D::Context3DStateCache >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { supportsVideoTexture=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

void Context3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"));
	outFields->push(HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"));
	outFields->push(HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"));
	outFields->push(HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"));
	outFields->push(HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"));
	outFields->push(HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"));
	outFields->push(HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"));
	outFields->push(HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"));
	outFields->push(HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"));
	outFields->push(HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce"));
	outFields->push(HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"));
	outFields->push(HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32"));
	outFields->push(HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76"));
	outFields->push(HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"));
	outFields->push(HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"));
	outFields->push(HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"));
	outFields->push(HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"));
	outFields->push(HX_HCSTRING("__program","\x64","\x9b","\x47","\x75"));
	outFields->push(HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17"));
	outFields->push(HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a"));
	outFields->push(HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce"));
	outFields->push(HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32"));
	outFields->push(HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14"));
	outFields->push(HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"));
	outFields->push(HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"));
	outFields->push(HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"));
	outFields->push(HX_HCSTRING("__stats","\xff","\xce","\x69","\xee"));
	outFields->push(HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82"));
	outFields->push(HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56"));
	outFields->push(HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0"));
	outFields->push(HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68"));
	outFields->push(HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34"));
	outFields->push(HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa"));
	outFields->push(HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Context3D_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferHeight),HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferWidth),HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c")},
	{hx::fsString,(int)offsetof(Context3D_obj,driverInfo),HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3")},
	{hx::fsBool,(int)offsetof(Context3D_obj,enableErrorChecking),HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferHeight),HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferWidth),HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,profile),HX_HCSTRING("profile","\x29","\x49","\x49","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,totalGPUMemory),HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___backBufferAntiAlias),HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferEnableDepthAndStencil),HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolution),HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___depthRenderBuffer),HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___depthStencilRenderBuffer),HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___fragmentConstants),HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65")},
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(Context3D_obj,_hx___framebuffer),HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___frameCount),HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___positionScale),HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a")},
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(int)offsetof(Context3D_obj,_hx___program),HX_HCSTRING("__program","\x64","\x9b","\x47","\x75")},
	{hx::fsObject /*::openfl::_internal::renderer::RenderSession*/ ,(int)offsetof(Context3D_obj,_hx___renderSession),HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17")},
	{hx::fsObject /*::openfl::display3D::textures::TextureBase*/ ,(int)offsetof(Context3D_obj,_hx___renderToTexture),HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___rttDepthAndStencil),HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___samplerDirty),HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(Context3D_obj,_hx___samplerTextures),HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,_hx___samplerStates),HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Context3D_obj,_hx___scissorRectangle),HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77")},
	{hx::fsObject /*::openfl::display::Stage3D*/ ,(int)offsetof(Context3D_obj,_hx___stage3D),HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(Context3D_obj,_hx___stats),HX_HCSTRING("__stats","\xff","\xce","\x69","\xee")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(Context3D_obj,_hx___statsCache),HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,_hx___stencilCompareMode),HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___stencilRef),HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___stencilReadMask),HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___stencilRenderBuffer),HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___supportsPackedDepthStencil),HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___vertexConstants),HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3D_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Context3D_obj::supportsVideoTexture,HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_SAMPLERS,HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_ATTRIBUTES,HX_HCSTRING("MAX_ATTRIBUTES","\xf2","\x89","\xd4","\x39")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_PROGRAM_REGISTERS,HX_HCSTRING("MAX_PROGRAM_REGISTERS","\xfa","\x9b","\x3d","\x0f")},
	{hx::fsObject /*::openfl::_internal::stage3D::Context3DStateCache*/ ,(void *) &Context3D_obj::_hx___stateCache,HX_HCSTRING("__stateCache","\x91","\x71","\x8f","\xe9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3D_obj_sMemberFields[] = {
	HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"),
	HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"),
	HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"),
	HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"),
	HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"),
	HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"),
	HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"),
	HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"),
	HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"),
	HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce"),
	HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"),
	HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32"),
	HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76"),
	HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"),
	HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"),
	HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"),
	HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"),
	HX_HCSTRING("__program","\x64","\x9b","\x47","\x75"),
	HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17"),
	HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a"),
	HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce"),
	HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32"),
	HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14"),
	HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"),
	HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"),
	HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"),
	HX_HCSTRING("__stats","\xff","\xce","\x69","\xee"),
	HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82"),
	HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56"),
	HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0"),
	HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68"),
	HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34"),
	HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa"),
	HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("createCubeTexture","\xca","\x46","\x30","\xc8"),
	HX_HCSTRING("createIndexBuffer","\x16","\x40","\x47","\x48"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("createRectangleTexture","\x88","\x8b","\xb3","\xf2"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("createVertexBuffer","\xa0","\xec","\xc7","\x6a"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("setBlendFactors","\x35","\x4b","\xcd","\xf5"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setCulling","\xee","\x06","\x67","\xa6"),
	HX_HCSTRING("setDepthTest","\xf3","\xe2","\xcc","\xc7"),
	HX_HCSTRING("setProgram","\x02","\x6f","\xd8","\x46"),
	HX_HCSTRING("setProgramConstantsFromByteArray","\x3a","\x1f","\x12","\xd4"),
	HX_HCSTRING("setProgramConstantsFromMatrix","\xd8","\xd0","\x45","\xbe"),
	HX_HCSTRING("setProgramConstantsFromVector","\x5a","\x4b","\xdb","\x99"),
	HX_HCSTRING("setRenderToBackBuffer","\x9a","\x84","\xfb","\xad"),
	HX_HCSTRING("setRenderToTexture","\xe8","\x2c","\x92","\x46"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("setScissorRectangle","\x35","\x04","\x2c","\x03"),
	HX_HCSTRING("setStencilActions","\xa3","\xec","\xa6","\x2c"),
	HX_HCSTRING("setStencilReferenceValue","\xc0","\xdf","\xa3","\x11"),
	HX_HCSTRING("setTextureAt","\xac","\xee","\x98","\xd3"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("__flushSamplerState","\xad","\xd1","\x48","\x4d"),
	HX_HCSTRING("__getGLCompareMode","\x4d","\xad","\x57","\x0d"),
	HX_HCSTRING("__getGLStencilAction","\xb7","\xa4","\x86","\x0d"),
	HX_HCSTRING("__hasGLExtension","\xa0","\xfe","\x45","\x9c"),
	HX_HCSTRING("__setViewport","\x08","\x57","\x7e","\x15"),
	HX_HCSTRING("__statsAdd","\x62","\x04","\xea","\x0b"),
	HX_HCSTRING("__statsClear","\x0e","\x56","\xd5","\x89"),
	HX_HCSTRING("__statsDecrement","\x14","\xaf","\x6e","\xa5"),
	HX_HCSTRING("__statsIncrement","\x30","\xbf","\xeb","\xc6"),
	HX_HCSTRING("__statsSendToTelemetry","\xd7","\xb8","\x7e","\x01"),
	HX_HCSTRING("__statsSubtract","\x33","\x97","\x22","\x32"),
	HX_HCSTRING("__updateDepthAndStencilState","\xf2","\x9d","\xe7","\xb2"),
	HX_HCSTRING("__updateBlendFactors","\x3c","\x4f","\x58","\x2e"),
	HX_HCSTRING("__updateScissorRectangle","\xbc","\x17","\x57","\x7f"),
	HX_HCSTRING("__updateBackbufferViewport","\x76","\x09","\xc0","\x09"),
	HX_HCSTRING("set_enableErrorChecking","\x22","\x4c","\xd0","\xc4"),
	::String(null()) };

static void Context3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_ATTRIBUTES,"MAX_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_PROGRAM_REGISTERS,"MAX_PROGRAM_REGISTERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___stateCache,"__stateCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_ATTRIBUTES,"MAX_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_PROGRAM_REGISTERS,"MAX_PROGRAM_REGISTERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___stateCache,"__stateCache");
};

#endif

hx::Class Context3D_obj::__mClass;

static ::String Context3D_obj_sStaticFields[] = {
	HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67"),
	HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06"),
	HX_HCSTRING("MAX_ATTRIBUTES","\xf2","\x89","\xd4","\x39"),
	HX_HCSTRING("MAX_PROGRAM_REGISTERS","\xfa","\x9b","\x3d","\x0f"),
	HX_HCSTRING("__stateCache","\x91","\x71","\x8f","\xe9"),
	::String(null())
};

void Context3D_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.Context3D","\xa7","\xbf","\xa0","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3D_obj::__SetStatic;
	__mClass->mMarkFunc = Context3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3D_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",46,0xc899cbb9)
HXLINE(  46)		supportsVideoTexture = false;
            	}
{
            	HX_STACK_FRAME("openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",48,0xc899cbb9)
HXLINE(  48)		MAX_SAMPLERS = (int)8;
            	}
{
            	HX_STACK_FRAME("openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",49,0xc899cbb9)
HXLINE(  49)		MAX_ATTRIBUTES = (int)16;
            	}
{
            	HX_STACK_FRAME("openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",50,0xc899cbb9)
HXLINE(  50)		MAX_PROGRAM_REGISTERS = (int)128;
            	}
{
            	HX_STACK_FRAME("openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",52,0xc899cbb9)
HXLINE(  52)		_hx___stateCache =  ::openfl::_internal::stage3D::Context3DStateCache_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace display3D
