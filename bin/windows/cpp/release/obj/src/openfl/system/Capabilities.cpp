// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_system_Display
#include <lime/system/Display.h>
#endif
#ifndef INCLUDED_lime_system_DisplayMode
#include <lime/system/DisplayMode.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_system_Capabilities
#include <openfl/system/Capabilities.h>
#endif

namespace openfl{
namespace _hx_system{

void Capabilities_obj::__construct() { }

Dynamic Capabilities_obj::__CreateEmpty() { return new Capabilities_obj; }

hx::ObjectPtr< Capabilities_obj > Capabilities_obj::__new()
{
	hx::ObjectPtr< Capabilities_obj > _hx_result = new Capabilities_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Capabilities_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Capabilities_obj > _hx_result = new Capabilities_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Capabilities_obj::avHardwareDisable;

::String Capabilities_obj::cpuArchitecture;

Bool Capabilities_obj::hasAccessibility;

Bool Capabilities_obj::hasAudio;

Bool Capabilities_obj::hasAudioEncoder;

Bool Capabilities_obj::hasEmbeddedVideo;

Bool Capabilities_obj::hasIME;

Bool Capabilities_obj::hasMP3;

Bool Capabilities_obj::hasPrinting;

Bool Capabilities_obj::hasScreenBroadcast;

Bool Capabilities_obj::hasScreenPlayback;

Bool Capabilities_obj::hasStreamingAudio;

Bool Capabilities_obj::hasStreamingVideo;

Bool Capabilities_obj::hasTLS;

Bool Capabilities_obj::hasVideoEncoder;

Bool Capabilities_obj::isDebugger;

Bool Capabilities_obj::isEmbeddedInAcrobat;

Bool Capabilities_obj::localFileReadDisable;

::String Capabilities_obj::manufacturer;

Int Capabilities_obj::maxLevelIDC;

::String Capabilities_obj::playerType;

::String Capabilities_obj::screenColor;

::String Capabilities_obj::serverString;

Bool Capabilities_obj::supports32BitProcesses;

Bool Capabilities_obj::supports64BitProcesses;

 ::Dynamic Capabilities_obj::touchscreenType;

Bool Capabilities_obj::hasMultiChannelAudio(::String type){
            	HX_STACK_FRAME("openfl.system.Capabilities","hasMultiChannelAudio",0xb0db92e9,"openfl.system.Capabilities.hasMultiChannelAudio","openfl/system/Capabilities.hx",47,0xabe25da7)
            	HX_STACK_ARG(type,"type")
HXLINE(  47)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Capabilities_obj,hasMultiChannelAudio,return )

::String Capabilities_obj::get_os(){
            	HX_STACK_FRAME("openfl.system.Capabilities","get_os",0x7acb30a4,"openfl.system.Capabilities.get_os","openfl/system/Capabilities.hx",80,0xabe25da7)
HXLINE(  80)		return ::Sys_obj::systemName();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Capabilities_obj,get_os,return )

Float Capabilities_obj::get_pixelAspectRatio(){
            	HX_STACK_FRAME("openfl.system.Capabilities","get_pixelAspectRatio",0xa176c2ad,"openfl.system.Capabilities.get_pixelAspectRatio","openfl/system/Capabilities.hx",88,0xabe25da7)
HXLINE(  88)		return (int)1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Capabilities_obj,get_pixelAspectRatio,return )

Float Capabilities_obj::get_screenDPI(){
            	HX_STACK_FRAME("openfl.system.Capabilities","get_screenDPI",0x6de6afd1,"openfl.system.Capabilities.get_screenDPI","openfl/system/Capabilities.hx",89,0xabe25da7)
HXLINE(  91)		HX_VARI(  ::lime::ui::Window,window) = ::openfl::Lib_obj::application->_hx___windows->__get((int)0).StaticCast<  ::lime::ui::Window >();
HXLINE(  93)		Bool _hx_tmp = hx::IsNotNull( window );
HXDLIN(  93)		if (_hx_tmp) {
HXLINE(  95)			HX_VARI(  ::lime::_hx_system::Display,display) = window->get_display();
HXLINE(  97)			Bool _hx_tmp1 = hx::IsNotNull( display );
HXDLIN(  97)			if (_hx_tmp1) {
HXLINE(  99)				return display->dpi;
            			}
            		}
HXLINE( 105)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Capabilities_obj,get_screenDPI,return )

Float Capabilities_obj::get_screenResolutionX(){
            	HX_STACK_FRAME("openfl.system.Capabilities","get_screenResolutionX",0x9f8b6e20,"openfl.system.Capabilities.get_screenResolutionX","openfl/system/Capabilities.hx",110,0xabe25da7)
HXLINE( 112)		HX_VARI(  ::openfl::display::Stage,stage) = ::openfl::Lib_obj::current->stage;
HXLINE( 113)		HX_VARI( Int,resolutionX) = (int)0;
HXLINE( 115)		Bool _hx_tmp = hx::IsNotNull( stage->window );
HXDLIN( 115)		if (_hx_tmp) {
HXLINE( 117)			HX_VARI(  ::lime::_hx_system::Display,display) = stage->window->get_display();
HXLINE( 119)			Bool _hx_tmp1 = hx::IsNotNull( display );
HXDLIN( 119)			if (_hx_tmp1) {
HXLINE( 121)				resolutionX = display->currentMode->width;
            			}
            		}
HXLINE( 127)		if ((resolutionX > (int)0)) {
HXLINE( 129)			return resolutionX;
            		}
HXLINE( 133)		return stage->stageWidth;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Capabilities_obj,get_screenResolutionX,return )

Float Capabilities_obj::get_screenResolutionY(){
            	HX_STACK_FRAME("openfl.system.Capabilities","get_screenResolutionY",0x9f8b6e21,"openfl.system.Capabilities.get_screenResolutionY","openfl/system/Capabilities.hx",138,0xabe25da7)
HXLINE( 140)		HX_VARI(  ::openfl::display::Stage,stage) = ::openfl::Lib_obj::current->stage;
HXLINE( 141)		HX_VARI( Int,resolutionY) = (int)0;
HXLINE( 143)		Bool _hx_tmp = hx::IsNotNull( stage->window );
HXDLIN( 143)		if (_hx_tmp) {
HXLINE( 145)			HX_VARI(  ::lime::_hx_system::Display,display) = stage->window->get_display();
HXLINE( 147)			Bool _hx_tmp1 = hx::IsNotNull( display );
HXDLIN( 147)			if (_hx_tmp1) {
HXLINE( 149)				resolutionY = display->currentMode->height;
            			}
            		}
HXLINE( 155)		if ((resolutionY > (int)0)) {
HXLINE( 157)			return resolutionY;
            		}
HXLINE( 161)		return stage->stageHeight;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Capabilities_obj,get_screenResolutionY,return )

::String Capabilities_obj::get_language(){
            	HX_STACK_FRAME("openfl.system.Capabilities","get_language",0xce1cefd8,"openfl.system.Capabilities.get_language","openfl/system/Capabilities.hx",174,0xabe25da7)
HXLINE( 174)		return HX_("en-US",02,7f,50,70);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Capabilities_obj,get_language,return )

::String Capabilities_obj::get_version(){
            	HX_STACK_FRAME("openfl.system.Capabilities","get_version",0xb346e798,"openfl.system.Capabilities.get_version","openfl/system/Capabilities.hx",181,0xabe25da7)
HXLINE( 184)		HX_VARI( ::String,value) = HX_("WIN",fc,43,42,00);
HXLINE( 207)		::String _hx_tmp = ::StringTools_obj::replace(HX_("4.1.0",79,51,63,0f),HX_(".",2e,00,00,00),HX_(",",2c,00,00,00));
HXDLIN( 207)		value = (HX_("WIN",fc,43,42,00) + ((HX_(" ",20,00,00,00) + _hx_tmp) + HX_(",0",84,26,00,00)));
HXLINE( 211)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Capabilities_obj,get_version,return )


Capabilities_obj::Capabilities_obj()
{
}

bool Capabilities_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"os") ) { if (inCallProp == hx::paccAlways) { outValue = get_os(); return true; } }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"hasIME") ) { outValue = hasIME; return true; }
		if (HX_FIELD_EQ(inName,"hasMP3") ) { outValue = hasMP3; return true; }
		if (HX_FIELD_EQ(inName,"hasTLS") ) { outValue = hasTLS; return true; }
		if (HX_FIELD_EQ(inName,"get_os") ) { outValue = get_os_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { if (inCallProp == hx::paccAlways) { outValue = get_version(); return true; } }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasAudio") ) { outValue = hasAudio; return true; }
		if (HX_FIELD_EQ(inName,"language") ) { if (inCallProp == hx::paccAlways) { outValue = get_language(); return true; } }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"screenDPI") ) { if (inCallProp == hx::paccAlways) { outValue = get_screenDPI(); return true; } }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isDebugger") ) { outValue = isDebugger; return true; }
		if (HX_FIELD_EQ(inName,"playerType") ) { outValue = playerType; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hasPrinting") ) { outValue = hasPrinting; return true; }
		if (HX_FIELD_EQ(inName,"maxLevelIDC") ) { outValue = maxLevelIDC; return true; }
		if (HX_FIELD_EQ(inName,"screenColor") ) { outValue = screenColor; return true; }
		if (HX_FIELD_EQ(inName,"get_version") ) { outValue = get_version_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"manufacturer") ) { outValue = manufacturer; return true; }
		if (HX_FIELD_EQ(inName,"serverString") ) { outValue = serverString; return true; }
		if (HX_FIELD_EQ(inName,"get_language") ) { outValue = get_language_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_screenDPI") ) { outValue = get_screenDPI_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cpuArchitecture") ) { outValue = cpuArchitecture; return true; }
		if (HX_FIELD_EQ(inName,"hasAudioEncoder") ) { outValue = hasAudioEncoder; return true; }
		if (HX_FIELD_EQ(inName,"hasVideoEncoder") ) { outValue = hasVideoEncoder; return true; }
		if (HX_FIELD_EQ(inName,"touchscreenType") ) { outValue = touchscreenType; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hasAccessibility") ) { outValue = hasAccessibility; return true; }
		if (HX_FIELD_EQ(inName,"hasEmbeddedVideo") ) { outValue = hasEmbeddedVideo; return true; }
		if (HX_FIELD_EQ(inName,"pixelAspectRatio") ) { if (inCallProp == hx::paccAlways) { outValue = get_pixelAspectRatio(); return true; } }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"avHardwareDisable") ) { outValue = avHardwareDisable; return true; }
		if (HX_FIELD_EQ(inName,"hasScreenPlayback") ) { outValue = hasScreenPlayback; return true; }
		if (HX_FIELD_EQ(inName,"hasStreamingAudio") ) { outValue = hasStreamingAudio; return true; }
		if (HX_FIELD_EQ(inName,"hasStreamingVideo") ) { outValue = hasStreamingVideo; return true; }
		if (HX_FIELD_EQ(inName,"screenResolutionX") ) { if (inCallProp == hx::paccAlways) { outValue = get_screenResolutionX(); return true; } }
		if (HX_FIELD_EQ(inName,"screenResolutionY") ) { if (inCallProp == hx::paccAlways) { outValue = get_screenResolutionY(); return true; } }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"hasScreenBroadcast") ) { outValue = hasScreenBroadcast; return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isEmbeddedInAcrobat") ) { outValue = isEmbeddedInAcrobat; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"localFileReadDisable") ) { outValue = localFileReadDisable; return true; }
		if (HX_FIELD_EQ(inName,"hasMultiChannelAudio") ) { outValue = hasMultiChannelAudio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_pixelAspectRatio") ) { outValue = get_pixelAspectRatio_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_screenResolutionX") ) { outValue = get_screenResolutionX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_screenResolutionY") ) { outValue = get_screenResolutionY_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"supports32BitProcesses") ) { outValue = supports32BitProcesses; return true; }
		if (HX_FIELD_EQ(inName,"supports64BitProcesses") ) { outValue = supports64BitProcesses; return true; }
	}
	return false;
}

bool Capabilities_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"hasIME") ) { hasIME=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hasMP3") ) { hasMP3=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hasTLS") ) { hasTLS=ioValue.Cast< Bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasAudio") ) { hasAudio=ioValue.Cast< Bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isDebugger") ) { isDebugger=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"playerType") ) { playerType=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hasPrinting") ) { hasPrinting=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"maxLevelIDC") ) { maxLevelIDC=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"screenColor") ) { screenColor=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"manufacturer") ) { manufacturer=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"serverString") ) { serverString=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cpuArchitecture") ) { cpuArchitecture=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"hasAudioEncoder") ) { hasAudioEncoder=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hasVideoEncoder") ) { hasVideoEncoder=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"touchscreenType") ) { touchscreenType=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hasAccessibility") ) { hasAccessibility=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hasEmbeddedVideo") ) { hasEmbeddedVideo=ioValue.Cast< Bool >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"avHardwareDisable") ) { avHardwareDisable=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hasScreenPlayback") ) { hasScreenPlayback=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hasStreamingAudio") ) { hasStreamingAudio=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hasStreamingVideo") ) { hasStreamingVideo=ioValue.Cast< Bool >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"hasScreenBroadcast") ) { hasScreenBroadcast=ioValue.Cast< Bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isEmbeddedInAcrobat") ) { isEmbeddedInAcrobat=ioValue.Cast< Bool >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"localFileReadDisable") ) { localFileReadDisable=ioValue.Cast< Bool >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"supports32BitProcesses") ) { supports32BitProcesses=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"supports64BitProcesses") ) { supports64BitProcesses=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Capabilities_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Capabilities_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Capabilities_obj::avHardwareDisable,HX_HCSTRING("avHardwareDisable","\xab","\x62","\x32","\x9a")},
	{hx::fsString,(void *) &Capabilities_obj::cpuArchitecture,HX_HCSTRING("cpuArchitecture","\x1b","\xa2","\xc9","\xca")},
	{hx::fsBool,(void *) &Capabilities_obj::hasAccessibility,HX_HCSTRING("hasAccessibility","\xd4","\x3e","\x39","\x17")},
	{hx::fsBool,(void *) &Capabilities_obj::hasAudio,HX_HCSTRING("hasAudio","\x1c","\xc3","\xd8","\xb3")},
	{hx::fsBool,(void *) &Capabilities_obj::hasAudioEncoder,HX_HCSTRING("hasAudioEncoder","\xe0","\x21","\x7b","\x20")},
	{hx::fsBool,(void *) &Capabilities_obj::hasEmbeddedVideo,HX_HCSTRING("hasEmbeddedVideo","\xd7","\x96","\x81","\xbc")},
	{hx::fsBool,(void *) &Capabilities_obj::hasIME,HX_HCSTRING("hasIME","\xc7","\xfc","\x36","\xbb")},
	{hx::fsBool,(void *) &Capabilities_obj::hasMP3,HX_HCSTRING("hasMP3","\x56","\x08","\x3a","\xbb")},
	{hx::fsBool,(void *) &Capabilities_obj::hasPrinting,HX_HCSTRING("hasPrinting","\x4f","\x34","\xe1","\xfb")},
	{hx::fsBool,(void *) &Capabilities_obj::hasScreenBroadcast,HX_HCSTRING("hasScreenBroadcast","\xbb","\x97","\x24","\x21")},
	{hx::fsBool,(void *) &Capabilities_obj::hasScreenPlayback,HX_HCSTRING("hasScreenPlayback","\xa1","\x92","\x10","\x71")},
	{hx::fsBool,(void *) &Capabilities_obj::hasStreamingAudio,HX_HCSTRING("hasStreamingAudio","\x0e","\xba","\x1a","\x5c")},
	{hx::fsBool,(void *) &Capabilities_obj::hasStreamingVideo,HX_HCSTRING("hasStreamingVideo","\xb3","\x55","\x96","\x6b")},
	{hx::fsBool,(void *) &Capabilities_obj::hasTLS,HX_HCSTRING("hasTLS","\xc1","\x54","\x3f","\xbb")},
	{hx::fsBool,(void *) &Capabilities_obj::hasVideoEncoder,HX_HCSTRING("hasVideoEncoder","\xdb","\x74","\xfc","\x2e")},
	{hx::fsBool,(void *) &Capabilities_obj::isDebugger,HX_HCSTRING("isDebugger","\x2b","\x36","\x9a","\x0b")},
	{hx::fsBool,(void *) &Capabilities_obj::isEmbeddedInAcrobat,HX_HCSTRING("isEmbeddedInAcrobat","\x7d","\x1e","\x22","\xf6")},
	{hx::fsBool,(void *) &Capabilities_obj::localFileReadDisable,HX_HCSTRING("localFileReadDisable","\xeb","\x2e","\x91","\x02")},
	{hx::fsString,(void *) &Capabilities_obj::manufacturer,HX_HCSTRING("manufacturer","\x51","\x1a","\x55","\x14")},
	{hx::fsInt,(void *) &Capabilities_obj::maxLevelIDC,HX_HCSTRING("maxLevelIDC","\xc8","\xdf","\x35","\x9c")},
	{hx::fsString,(void *) &Capabilities_obj::playerType,HX_HCSTRING("playerType","\xbb","\xce","\xca","\xaf")},
	{hx::fsString,(void *) &Capabilities_obj::screenColor,HX_HCSTRING("screenColor","\x57","\xbe","\xe1","\x01")},
	{hx::fsString,(void *) &Capabilities_obj::serverString,HX_HCSTRING("serverString","\xf4","\xdb","\x68","\x98")},
	{hx::fsBool,(void *) &Capabilities_obj::supports32BitProcesses,HX_HCSTRING("supports32BitProcesses","\xd3","\xe5","\x56","\xaa")},
	{hx::fsBool,(void *) &Capabilities_obj::supports64BitProcesses,HX_HCSTRING("supports64BitProcesses","\xf2","\xda","\xdf","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Capabilities_obj::touchscreenType,HX_HCSTRING("touchscreenType","\xc5","\x5c","\xc7","\x58")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Capabilities_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Capabilities_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Capabilities_obj::avHardwareDisable,"avHardwareDisable");
	HX_MARK_MEMBER_NAME(Capabilities_obj::cpuArchitecture,"cpuArchitecture");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasAccessibility,"hasAccessibility");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasAudio,"hasAudio");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasAudioEncoder,"hasAudioEncoder");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasEmbeddedVideo,"hasEmbeddedVideo");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasIME,"hasIME");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasMP3,"hasMP3");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasPrinting,"hasPrinting");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasScreenBroadcast,"hasScreenBroadcast");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasScreenPlayback,"hasScreenPlayback");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasStreamingAudio,"hasStreamingAudio");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasStreamingVideo,"hasStreamingVideo");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasTLS,"hasTLS");
	HX_MARK_MEMBER_NAME(Capabilities_obj::hasVideoEncoder,"hasVideoEncoder");
	HX_MARK_MEMBER_NAME(Capabilities_obj::isDebugger,"isDebugger");
	HX_MARK_MEMBER_NAME(Capabilities_obj::isEmbeddedInAcrobat,"isEmbeddedInAcrobat");
	HX_MARK_MEMBER_NAME(Capabilities_obj::localFileReadDisable,"localFileReadDisable");
	HX_MARK_MEMBER_NAME(Capabilities_obj::manufacturer,"manufacturer");
	HX_MARK_MEMBER_NAME(Capabilities_obj::maxLevelIDC,"maxLevelIDC");
	HX_MARK_MEMBER_NAME(Capabilities_obj::playerType,"playerType");
	HX_MARK_MEMBER_NAME(Capabilities_obj::screenColor,"screenColor");
	HX_MARK_MEMBER_NAME(Capabilities_obj::serverString,"serverString");
	HX_MARK_MEMBER_NAME(Capabilities_obj::supports32BitProcesses,"supports32BitProcesses");
	HX_MARK_MEMBER_NAME(Capabilities_obj::supports64BitProcesses,"supports64BitProcesses");
	HX_MARK_MEMBER_NAME(Capabilities_obj::touchscreenType,"touchscreenType");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Capabilities_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Capabilities_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::avHardwareDisable,"avHardwareDisable");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::cpuArchitecture,"cpuArchitecture");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasAccessibility,"hasAccessibility");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasAudio,"hasAudio");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasAudioEncoder,"hasAudioEncoder");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasEmbeddedVideo,"hasEmbeddedVideo");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasIME,"hasIME");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasMP3,"hasMP3");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasPrinting,"hasPrinting");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasScreenBroadcast,"hasScreenBroadcast");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasScreenPlayback,"hasScreenPlayback");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasStreamingAudio,"hasStreamingAudio");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasStreamingVideo,"hasStreamingVideo");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasTLS,"hasTLS");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::hasVideoEncoder,"hasVideoEncoder");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::isDebugger,"isDebugger");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::isEmbeddedInAcrobat,"isEmbeddedInAcrobat");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::localFileReadDisable,"localFileReadDisable");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::manufacturer,"manufacturer");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::maxLevelIDC,"maxLevelIDC");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::playerType,"playerType");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::screenColor,"screenColor");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::serverString,"serverString");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::supports32BitProcesses,"supports32BitProcesses");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::supports64BitProcesses,"supports64BitProcesses");
	HX_VISIT_MEMBER_NAME(Capabilities_obj::touchscreenType,"touchscreenType");
};

#endif

hx::Class Capabilities_obj::__mClass;

static ::String Capabilities_obj_sStaticFields[] = {
	HX_HCSTRING("avHardwareDisable","\xab","\x62","\x32","\x9a"),
	HX_HCSTRING("cpuArchitecture","\x1b","\xa2","\xc9","\xca"),
	HX_HCSTRING("hasAccessibility","\xd4","\x3e","\x39","\x17"),
	HX_HCSTRING("hasAudio","\x1c","\xc3","\xd8","\xb3"),
	HX_HCSTRING("hasAudioEncoder","\xe0","\x21","\x7b","\x20"),
	HX_HCSTRING("hasEmbeddedVideo","\xd7","\x96","\x81","\xbc"),
	HX_HCSTRING("hasIME","\xc7","\xfc","\x36","\xbb"),
	HX_HCSTRING("hasMP3","\x56","\x08","\x3a","\xbb"),
	HX_HCSTRING("hasPrinting","\x4f","\x34","\xe1","\xfb"),
	HX_HCSTRING("hasScreenBroadcast","\xbb","\x97","\x24","\x21"),
	HX_HCSTRING("hasScreenPlayback","\xa1","\x92","\x10","\x71"),
	HX_HCSTRING("hasStreamingAudio","\x0e","\xba","\x1a","\x5c"),
	HX_HCSTRING("hasStreamingVideo","\xb3","\x55","\x96","\x6b"),
	HX_HCSTRING("hasTLS","\xc1","\x54","\x3f","\xbb"),
	HX_HCSTRING("hasVideoEncoder","\xdb","\x74","\xfc","\x2e"),
	HX_HCSTRING("isDebugger","\x2b","\x36","\x9a","\x0b"),
	HX_HCSTRING("isEmbeddedInAcrobat","\x7d","\x1e","\x22","\xf6"),
	HX_HCSTRING("localFileReadDisable","\xeb","\x2e","\x91","\x02"),
	HX_HCSTRING("manufacturer","\x51","\x1a","\x55","\x14"),
	HX_HCSTRING("maxLevelIDC","\xc8","\xdf","\x35","\x9c"),
	HX_HCSTRING("playerType","\xbb","\xce","\xca","\xaf"),
	HX_HCSTRING("screenColor","\x57","\xbe","\xe1","\x01"),
	HX_HCSTRING("serverString","\xf4","\xdb","\x68","\x98"),
	HX_HCSTRING("supports32BitProcesses","\xd3","\xe5","\x56","\xaa"),
	HX_HCSTRING("supports64BitProcesses","\xf2","\xda","\xdf","\x7d"),
	HX_HCSTRING("touchscreenType","\xc5","\x5c","\xc7","\x58"),
	HX_HCSTRING("hasMultiChannelAudio","\x72","\x08","\xff","\xd2"),
	HX_HCSTRING("get_os","\x6d","\xf8","\x2f","\xa3"),
	HX_HCSTRING("get_pixelAspectRatio","\x36","\x38","\x9a","\xc3"),
	HX_HCSTRING("get_screenDPI","\x28","\x63","\x54","\xf9"),
	HX_HCSTRING("get_screenResolutionX","\x77","\xd0","\x6e","\x5c"),
	HX_HCSTRING("get_screenResolutionY","\x78","\xd0","\x6e","\x5c"),
	HX_HCSTRING("get_language","\x61","\x34","\x2b","\x2f"),
	HX_HCSTRING("get_version","\x2f","\x47","\xec","\x02"),
	::String(null())
};

void Capabilities_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.system.Capabilities","\x57","\xc7","\x7b","\xbd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Capabilities_obj::__GetStatic;
	__mClass->mSetStaticField = &Capabilities_obj::__SetStatic;
	__mClass->mMarkFunc = Capabilities_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Capabilities_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Capabilities_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Capabilities_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Capabilities_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Capabilities_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Capabilities_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",10,0xabe25da7)
HXLINE(  10)		avHardwareDisable = true;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",11,0xabe25da7)
HXLINE(  11)		cpuArchitecture = HX_("",00,00,00,00);
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",12,0xabe25da7)
HXLINE(  12)		hasAccessibility = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",13,0xabe25da7)
HXLINE(  13)		hasAudio = true;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",14,0xabe25da7)
HXLINE(  14)		hasAudioEncoder = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",15,0xabe25da7)
HXLINE(  15)		hasEmbeddedVideo = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",16,0xabe25da7)
HXLINE(  16)		hasIME = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",17,0xabe25da7)
HXLINE(  17)		hasMP3 = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",18,0xabe25da7)
HXLINE(  18)		hasPrinting = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",19,0xabe25da7)
HXLINE(  19)		hasScreenBroadcast = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",20,0xabe25da7)
HXLINE(  20)		hasScreenPlayback = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",21,0xabe25da7)
HXLINE(  21)		hasStreamingAudio = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",22,0xabe25da7)
HXLINE(  22)		hasStreamingVideo = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",23,0xabe25da7)
HXLINE(  23)		hasTLS = true;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",24,0xabe25da7)
HXLINE(  24)		hasVideoEncoder = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",25,0xabe25da7)
HXLINE(  25)		isDebugger = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",26,0xabe25da7)
HXLINE(  26)		isEmbeddedInAcrobat = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",28,0xabe25da7)
HXLINE(  28)		localFileReadDisable = false;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",29,0xabe25da7)
HXLINE(  29)		manufacturer = HX_("OpenFL Contributors",c8,ce,85,c7);
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",30,0xabe25da7)
HXLINE(  30)		maxLevelIDC = (int)0;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",33,0xabe25da7)
HXLINE(  33)		playerType = HX_("OpenFL",b0,bb,28,56);
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",34,0xabe25da7)
HXLINE(  34)		screenColor = HX_("color",63,71,5c,4a);
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",38,0xabe25da7)
HXLINE(  38)		serverString = HX_("",00,00,00,00);
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",39,0xabe25da7)
HXLINE(  39)		supports32BitProcesses = true;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",40,0xabe25da7)
HXLINE(  40)		supports64BitProcesses = true;
            	}
{
            	HX_STACK_FRAME("openfl.system.Capabilities","boot",0x100970a9,"openfl.system.Capabilities.boot","openfl/system/Capabilities.hx",41,0xabe25da7)
HXLINE(  41)		touchscreenType = (int)0;
            	}
}

} // end namespace openfl
} // end namespace system
