// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_AssetLibrary
#include <lime/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_Assets
#include <lime/Assets.h>
#endif
#ifndef INCLUDED_lime_app_Event_Void_Void
#include <lime/app/Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise
#include <lime/app/Promise.h>
#endif
#ifndef INCLUDED_lime_audio_AudioBuffer
#include <lime/audio/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_Bytes
#include <lime/utils/Bytes.h>
#endif
#ifndef INCLUDED_openfl_AssetCache
#include <openfl/AssetCache.h>
#endif
#ifndef INCLUDED_openfl_AssetLibrary
#include <openfl/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_IAssetCache
#include <openfl/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

hx::ObjectPtr< Assets_obj > Assets_obj::__new()
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Dynamic Assets_obj::cache;

 ::openfl::events::EventDispatcher Assets_obj::dispatcher;

void Assets_obj::addEventListener(::String type, ::Dynamic listener,hx::Null< Bool >  __o_useCapture,hx::Null< Int >  __o_priority,hx::Null< Bool >  __o_useWeakReference){
Bool useCapture = __o_useCapture.Default(false);
Int priority = __o_priority.Default(0);
Bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_STACK_FRAME("openfl.Assets","addEventListener",0x08307d1a,"openfl.Assets.addEventListener","openfl/Assets.hx",54,0x989d477c)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(listener,"listener")
            	HX_STACK_ARG(useCapture,"useCapture")
            	HX_STACK_ARG(priority,"priority")
            	HX_STACK_ARG(useWeakReference,"useWeakReference")
HXLINE(  56)		Bool _hx_tmp = !(::lime::Assets_obj::onChange->has(::openfl::Assets_obj::LimeAssets_onChange_dyn()));
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  58)			::lime::Assets_obj::onChange->add(::openfl::Assets_obj::LimeAssets_onChange_dyn(),null(),null());
            		}
HXLINE(  62)		::openfl::Assets_obj::dispatcher->addEventListener(type,listener,useCapture,priority,useWeakReference);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assets_obj,addEventListener,(void))

Bool Assets_obj::dispatchEvent( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.Assets","dispatchEvent",0xff6e3393,"openfl.Assets.dispatchEvent","openfl/Assets.hx",69,0x989d477c)
            	HX_STACK_ARG(event,"event")
HXLINE(  69)		return ::openfl::Assets_obj::dispatcher->dispatchEvent(event);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,dispatchEvent,return )

Bool Assets_obj::exists(::String id,::String type){
            	HX_STACK_FRAME("openfl.Assets","exists",0xd3fc5ce9,"openfl.Assets.exists","openfl/Assets.hx",81,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE(  81)		return ::lime::Assets_obj::exists(id,type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::openfl::display::BitmapData Assets_obj::getBitmapData(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","getBitmapData",0xc93c7e82,"openfl.Assets.getBitmapData","openfl/Assets.hx",93,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE(  97)		Bool _hx_tmp;
HXDLIN(  97)		Bool _hx_tmp1;
HXDLIN(  97)		if (useCache) {
HXLINE(  97)			_hx_tmp1 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            		}
            		else {
HXLINE(  97)			_hx_tmp1 = false;
            		}
HXDLIN(  97)		if (_hx_tmp1) {
HXLINE(  97)			_hx_tmp = ::openfl::IAssetCache_obj::hasBitmapData(::openfl::Assets_obj::cache,id);
            		}
            		else {
HXLINE(  97)			_hx_tmp = false;
            		}
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  99)			HX_VARI(  ::openfl::display::BitmapData,bitmapData) = ::openfl::IAssetCache_obj::getBitmapData(::openfl::Assets_obj::cache,id);
HXLINE( 101)			if (::openfl::Assets_obj::isValidBitmapData(bitmapData)) {
HXLINE( 103)				return bitmapData;
            			}
            		}
HXLINE( 109)		HX_VARI(  ::lime::graphics::Image,image) = ::lime::Assets_obj::getImage(id,false);
HXLINE( 111)		Bool _hx_tmp2 = hx::IsNotNull( image );
HXDLIN( 111)		if (_hx_tmp2) {
HXLINE( 116)			HX_VARI_NAME(  ::openfl::display::BitmapData,bitmapData1,"bitmapData") = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE( 119)			Bool _hx_tmp3;
HXDLIN( 119)			if (useCache) {
HXLINE( 119)				_hx_tmp3 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 119)				_hx_tmp3 = false;
            			}
HXDLIN( 119)			if (_hx_tmp3) {
HXLINE( 121)				::openfl::IAssetCache_obj::setBitmapData(::openfl::Assets_obj::cache,id,bitmapData1);
            			}
HXLINE( 125)			return bitmapData1;
            		}
HXLINE( 131)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getBitmapData,return )

 ::openfl::utils::ByteArrayData Assets_obj::getBytes(::String id){
            	HX_STACK_FRAME("openfl.Assets","getBytes",0xa062f442,"openfl.Assets.getBytes","openfl/Assets.hx",144,0x989d477c)
            	HX_STACK_ARG(id,"id")
HXLINE( 144)		 ::lime::utils::Bytes _hx_tmp = ::lime::Assets_obj::getBytes(id);
HXDLIN( 144)		return ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

 ::openfl::text::Font Assets_obj::getFont(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","getFont",0x9addf9d8,"openfl.Assets.getFont","openfl/Assets.hx",156,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 160)		Bool _hx_tmp;
HXDLIN( 160)		Bool _hx_tmp1;
HXDLIN( 160)		if (useCache) {
HXLINE( 160)			_hx_tmp1 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            		}
            		else {
HXLINE( 160)			_hx_tmp1 = false;
            		}
HXDLIN( 160)		if (_hx_tmp1) {
HXLINE( 160)			_hx_tmp = ::openfl::IAssetCache_obj::hasFont(::openfl::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 160)			_hx_tmp = false;
            		}
HXDLIN( 160)		if (_hx_tmp) {
HXLINE( 162)			return ::openfl::IAssetCache_obj::getFont(::openfl::Assets_obj::cache,id);
            		}
HXLINE( 166)		HX_VARI(  ::lime::text::Font,limeFont) = ::lime::Assets_obj::getFont(id,false);
HXLINE( 168)		Bool _hx_tmp2 = hx::IsNotNull( limeFont );
HXDLIN( 168)		if (_hx_tmp2) {
HXLINE( 173)			HX_VARI(  ::openfl::text::Font,font) = ::openfl::text::Font_obj::_hx___fromLimeFont(limeFont);
HXLINE( 176)			Bool _hx_tmp3;
HXDLIN( 176)			if (useCache) {
HXLINE( 176)				_hx_tmp3 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 176)				_hx_tmp3 = false;
            			}
HXDLIN( 176)			if (_hx_tmp3) {
HXLINE( 178)				::openfl::IAssetCache_obj::setFont(::openfl::Assets_obj::cache,id,font);
            			}
HXLINE( 182)			return font;
            		}
HXLINE( 188)		return  ::openfl::text::Font_obj::__new(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

 ::lime::AssetLibrary Assets_obj::getLibrary(::String name){
            	HX_STACK_FRAME("openfl.Assets","getLibrary",0x9baef692,"openfl.Assets.getLibrary","openfl/Assets.hx",195,0x989d477c)
            	HX_STACK_ARG(name,"name")
HXLINE( 195)		return ::lime::Assets_obj::getLibrary(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLibrary,return )

 ::openfl::display::MovieClip Assets_obj::getMovieClip(::String id){
            	HX_STACK_FRAME("openfl.Assets","getMovieClip",0x1d5e25f7,"openfl.Assets.getMovieClip","openfl/Assets.hx",206,0x989d477c)
            	HX_STACK_ARG(id,"id")
HXLINE( 210)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 210)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 211)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 211)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 212)		HX_VARI(  ::openfl::AssetLibrary,library) = ( ( ::openfl::AssetLibrary)(::openfl::Assets_obj::getLibrary(libraryName)) );
HXLINE( 214)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 214)		if (_hx_tmp2) {
HXLINE( 216)			Bool _hx_tmp3 = library->exists(symbolName,HX_("MOVIE_CLIP",1f,e1,aa,77));
HXDLIN( 216)			if (_hx_tmp3) {
HXLINE( 218)				Bool _hx_tmp4 = library->isLocal(symbolName,HX_("MOVIE_CLIP",1f,e1,aa,77));
HXDLIN( 218)				if (_hx_tmp4) {
HXLINE( 220)					return library->getMovieClip(symbolName);
            				}
            				else {
HXLINE( 224)					::haxe::Log_obj::trace(((HX_("[openfl.Assets] MovieClip asset \"",09,87,ab,4e) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),875,HX_("openfl.Assets",c1,41,e1,a0),HX_("printError",5b,20,bc,cb)));
            				}
            			}
            			else {
HXLINE( 230)				::haxe::Log_obj::trace(((HX_("[openfl.Assets] There is no MovieClip asset with an ID of \"",47,50,6c,1a) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),875,HX_("openfl.Assets",c1,41,e1,a0),HX_("printError",5b,20,bc,cb)));
            			}
            		}
            		else {
HXLINE( 236)			::haxe::Log_obj::trace(((HX_("[openfl.Assets] There is no asset library named \"",58,a0,33,5b) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),875,HX_("openfl.Assets",c1,41,e1,a0),HX_("printError",5b,20,bc,cb)));
            		}
HXLINE( 242)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getMovieClip,return )

 ::openfl::media::Sound Assets_obj::getMusic(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","getMusic",0xf325bc7c,"openfl.Assets.getMusic","openfl/Assets.hx",261,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 261)		 ::lime::audio::AudioBuffer _hx_tmp = ::lime::Assets_obj::getAudioBuffer(id,useCache);
HXDLIN( 261)		return ::openfl::media::Sound_obj::fromAudioBuffer(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getMusic,return )

::String Assets_obj::getPath(::String id){
            	HX_STACK_FRAME("openfl.Assets","getPath",0xa16f81ae,"openfl.Assets.getPath","openfl/Assets.hx",286,0x989d477c)
            	HX_STACK_ARG(id,"id")
HXLINE( 286)		return ::lime::Assets_obj::getPath(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

 ::openfl::media::Sound Assets_obj::getSound(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","getSound",0x639778a6,"openfl.Assets.getSound","openfl/Assets.hx",298,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 302)		Bool _hx_tmp;
HXDLIN( 302)		Bool _hx_tmp1;
HXDLIN( 302)		if (useCache) {
HXLINE( 302)			_hx_tmp1 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            		}
            		else {
HXLINE( 302)			_hx_tmp1 = false;
            		}
HXDLIN( 302)		if (_hx_tmp1) {
HXLINE( 302)			_hx_tmp = ::openfl::IAssetCache_obj::hasSound(::openfl::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 302)			_hx_tmp = false;
            		}
HXDLIN( 302)		if (_hx_tmp) {
HXLINE( 304)			HX_VARI(  ::openfl::media::Sound,sound) = ::openfl::IAssetCache_obj::getSound(::openfl::Assets_obj::cache,id);
HXLINE( 306)			if (::openfl::Assets_obj::isValidSound(sound)) {
HXLINE( 308)				return sound;
            			}
            		}
HXLINE( 315)		HX_VARI(  ::lime::audio::AudioBuffer,buffer) = ::lime::Assets_obj::getAudioBuffer(id,false);
HXLINE( 317)		Bool _hx_tmp2 = hx::IsNotNull( buffer );
HXDLIN( 317)		if (_hx_tmp2) {
HXLINE( 322)			HX_VARI_NAME(  ::openfl::media::Sound,sound1,"sound") = ::openfl::media::Sound_obj::fromAudioBuffer(buffer);
HXLINE( 325)			Bool _hx_tmp3;
HXDLIN( 325)			if (useCache) {
HXLINE( 325)				_hx_tmp3 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 325)				_hx_tmp3 = false;
            			}
HXDLIN( 325)			if (_hx_tmp3) {
HXLINE( 327)				::openfl::IAssetCache_obj::setSound(::openfl::Assets_obj::cache,id,sound1);
            			}
HXLINE( 331)			return sound1;
            		}
HXLINE( 346)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getSound,return )

::String Assets_obj::getText(::String id){
            	HX_STACK_FRAME("openfl.Assets","getText",0xa41768b6,"openfl.Assets.getText","openfl/Assets.hx",359,0x989d477c)
            	HX_STACK_ARG(id,"id")
HXLINE( 359)		return ::lime::Assets_obj::getText(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

Bool Assets_obj::hasEventListener(::String type){
            	HX_STACK_FRAME("openfl.Assets","hasEventListener",0x23b6a041,"openfl.Assets.hasEventListener","openfl/Assets.hx",366,0x989d477c)
            	HX_STACK_ARG(type,"type")
HXLINE( 366)		return ::openfl::Assets_obj::dispatcher->hasEventListener(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasEventListener,return )

Bool Assets_obj::isLocal(::String id,::String type,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","isLocal",0x9a115974,"openfl.Assets.isLocal","openfl/Assets.hx",378,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 382)		Bool _hx_tmp;
HXDLIN( 382)		if (useCache) {
HXLINE( 382)			_hx_tmp = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            		}
            		else {
HXLINE( 382)			_hx_tmp = false;
            		}
HXDLIN( 382)		if (_hx_tmp) {
HXLINE( 384)			Bool _hx_tmp1;
HXDLIN( 384)			if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE( 384)				_hx_tmp1 = hx::IsNull( type );
            			}
            			else {
HXLINE( 384)				_hx_tmp1 = true;
            			}
HXDLIN( 384)			if (_hx_tmp1) {
HXLINE( 386)				Bool _hx_tmp2 = ::openfl::IAssetCache_obj::hasBitmapData(::openfl::Assets_obj::cache,id);
HXDLIN( 386)				if (_hx_tmp2) {
HXLINE( 386)					return true;
            				}
            			}
HXLINE( 390)			Bool _hx_tmp3;
HXDLIN( 390)			if ((type != HX_("FONT",cf,25,81,2e))) {
HXLINE( 390)				_hx_tmp3 = hx::IsNull( type );
            			}
            			else {
HXLINE( 390)				_hx_tmp3 = true;
            			}
HXDLIN( 390)			if (_hx_tmp3) {
HXLINE( 392)				Bool _hx_tmp4 = ::openfl::IAssetCache_obj::hasFont(::openfl::Assets_obj::cache,id);
HXDLIN( 392)				if (_hx_tmp4) {
HXLINE( 392)					return true;
            				}
            			}
HXLINE( 396)			Bool _hx_tmp5;
HXDLIN( 396)			Bool _hx_tmp6;
HXDLIN( 396)			if ((type != HX_("SOUND",af,c4,ba,fe))) {
HXLINE( 396)				_hx_tmp6 = (type == HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE( 396)				_hx_tmp6 = true;
            			}
HXDLIN( 396)			if (!(_hx_tmp6)) {
HXLINE( 396)				_hx_tmp5 = hx::IsNull( type );
            			}
            			else {
HXLINE( 396)				_hx_tmp5 = true;
            			}
HXDLIN( 396)			if (_hx_tmp5) {
HXLINE( 398)				Bool _hx_tmp7 = ::openfl::IAssetCache_obj::hasSound(::openfl::Assets_obj::cache,id);
HXDLIN( 398)				if (_hx_tmp7) {
HXLINE( 398)					return true;
            				}
            			}
            		}
HXLINE( 404)		Int _hx_tmp8 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 404)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp8);
HXLINE( 405)		Int _hx_tmp9 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 405)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp9 + (int)1),null());
HXLINE( 406)		HX_VARI(  ::lime::AssetLibrary,library) = ::openfl::Assets_obj::getLibrary(libraryName);
HXLINE( 408)		Bool _hx_tmp10 = hx::IsNotNull( library );
HXDLIN( 408)		if (_hx_tmp10) {
HXLINE( 410)			return library->isLocal(symbolName,type);
            		}
HXLINE( 416)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,isLocal,return )

Bool Assets_obj::isValidBitmapData( ::openfl::display::BitmapData bitmapData){
            	HX_STACK_FRAME("openfl.Assets","isValidBitmapData",0xc2fb171e,"openfl.Assets.isValidBitmapData","openfl/Assets.hx",439,0x989d477c)
            	HX_STACK_ARG(bitmapData,"bitmapData")
HXLINE( 439)		Bool _hx_tmp = hx::IsNotNull( bitmapData );
HXDLIN( 439)		if (_hx_tmp) {
HXLINE( 439)			return hx::IsNotNull( bitmapData->image );
            		}
            		else {
HXLINE( 439)			return false;
            		}
HXDLIN( 439)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidBitmapData,return )

Bool Assets_obj::isValidSound( ::openfl::media::Sound sound){
            	HX_STACK_FRAME("openfl.Assets","isValidSound",0x9717a58a,"openfl.Assets.isValidSound","openfl/Assets.hx",455,0x989d477c)
            	HX_STACK_ARG(sound,"sound")
HXLINE( 455)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidSound,return )

::Array< ::String > Assets_obj::list(::String type){
            	HX_STACK_FRAME("openfl.Assets","list",0xb0f58e2b,"openfl.Assets.list","openfl/Assets.hx",474,0x989d477c)
            	HX_STACK_ARG(type,"type")
HXLINE( 474)		return ::lime::Assets_obj::list(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

 ::lime::app::Future Assets_obj::loadBitmapData(::String id, ::Dynamic __o_useCache, ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1,::String,id, ::lime::app::Promise,promise, ::Dynamic,useCache) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.Assets","loadBitmapData",0x79a7538c,"openfl.Assets.loadBitmapData","openfl/Assets.hx",517,0x989d477c)
            			HX_STACK_ARG(image,"image")
HXLINE( 517)			Bool _hx_tmp4 = hx::IsNotNull( image );
HXDLIN( 517)			if (_hx_tmp4) {
HXLINE( 522)				HX_VARI_NAME(  ::openfl::display::BitmapData,bitmapData1,"bitmapData") = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE( 525)				Bool _hx_tmp5;
HXDLIN( 525)				if (useCache) {
HXLINE( 525)					_hx_tmp5 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            				}
            				else {
HXLINE( 525)					_hx_tmp5 = false;
            				}
HXDLIN( 525)				if (_hx_tmp5) {
HXLINE( 527)					::openfl::IAssetCache_obj::setBitmapData(::openfl::Assets_obj::cache,id,bitmapData1);
            				}
HXLINE( 531)				promise->complete(bitmapData1);
            			}
            			else {
HXLINE( 535)				promise->error(((HX_("[Assets] Could not load Image \"",f0,0b,f7,ed) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","loadBitmapData",0x79a7538c,"openfl.Assets.loadBitmapData","openfl/Assets.hx",487,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 489)		Bool _hx_tmp = hx::IsNull( useCache );
HXDLIN( 489)		if (_hx_tmp) {
HXLINE( 489)			useCache = true;
            		}
HXLINE( 491)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 493)		Bool _hx_tmp1 = hx::IsNotNull( handler );
HXDLIN( 493)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("openfl.Assets","loadBitmapData",0x79a7538c,"openfl.Assets.loadBitmapData","openfl/Assets.hx",496,0x989d477c)
            				HX_STACK_ARG(_,"_")
HXLINE( 496)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 495)			promise->future->onComplete(handler);
HXLINE( 496)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 502)		Bool _hx_tmp2;
HXDLIN( 502)		Bool _hx_tmp3;
HXDLIN( 502)		if (useCache) {
HXLINE( 502)			_hx_tmp3 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            		}
            		else {
HXLINE( 502)			_hx_tmp3 = false;
            		}
HXDLIN( 502)		if (_hx_tmp3) {
HXLINE( 502)			_hx_tmp2 = ::openfl::IAssetCache_obj::hasBitmapData(::openfl::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 502)			_hx_tmp2 = false;
            		}
HXDLIN( 502)		if (_hx_tmp2) {
HXLINE( 504)			HX_VARI(  ::openfl::display::BitmapData,bitmapData) = ::openfl::IAssetCache_obj::getBitmapData(::openfl::Assets_obj::cache,id);
HXLINE( 506)			if (::openfl::Assets_obj::isValidBitmapData(bitmapData)) {
HXLINE( 508)				promise->complete(bitmapData);
HXLINE( 509)				return promise->future;
            			}
            		}
HXLINE( 515)		::lime::Assets_obj::loadImage(id,false)->onComplete( ::Dynamic(new _hx_Closure_1(id,promise,useCache)))->onError(promise->error_dyn())->onProgress(promise->progress_dyn());
HXLINE( 543)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadBitmapData,return )

 ::lime::app::Future Assets_obj::loadBytes(::String id, ::Dynamic handler){
            	HX_STACK_FRAME("openfl.Assets","loadBytes",0xeb3c3b78,"openfl.Assets.loadBytes","openfl/Assets.hx",556,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 558)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 559)		HX_VARI(  ::lime::app::Future,future) = ::lime::Assets_obj::loadBytes(id);
HXLINE( 561)		Bool _hx_tmp = hx::IsNotNull( handler );
HXDLIN( 561)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("openfl.Assets","loadBytes",0xeb3c3b78,"openfl.Assets.loadBytes","openfl/Assets.hx",564,0x989d477c)
            				HX_STACK_ARG(_,"_")
HXLINE( 564)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::lime::app::Promise,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::Bytes bytes){
            				HX_STACK_FRAME("openfl.Assets","loadBytes",0xeb3c3b78,"openfl.Assets.loadBytes","openfl/Assets.hx",566,0x989d477c)
            				HX_STACK_ARG(bytes,"bytes")
HXLINE( 566)				promise->complete(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(bytes));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::lime::app::Promise,promise) HXARGC(1)
            			void _hx_run(Float progress){
            				HX_STACK_FRAME("openfl.Assets","loadBytes",0xeb3c3b78,"openfl.Assets.loadBytes","openfl/Assets.hx",567,0x989d477c)
            				HX_STACK_ARG(progress,"progress")
HXLINE( 567)				promise->progress(progress);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::lime::app::Promise,promise) HXARGC(1)
            			void _hx_run( ::Dynamic msg){
            				HX_STACK_FRAME("openfl.Assets","loadBytes",0xeb3c3b78,"openfl.Assets.loadBytes","openfl/Assets.hx",568,0x989d477c)
            				HX_STACK_ARG(msg,"msg")
HXLINE( 568)				promise->error(msg);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 563)			promise->future->onComplete(handler);
HXLINE( 564)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
HXLINE( 566)			future->onComplete( ::Dynamic(new _hx_Closure_1(promise)));
HXLINE( 567)			future->onProgress( ::Dynamic(new _hx_Closure_2(promise)));
HXLINE( 568)			future->onError( ::Dynamic(new _hx_Closure_3(promise)));
            		}
HXLINE( 572)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadBytes,return )

 ::lime::app::Future Assets_obj::loadFont(::String id, ::Dynamic __o_useCache, ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1,::String,id, ::lime::app::Promise,promise, ::Dynamic,useCache) HXARGC(1)
            		void _hx_run( ::lime::text::Font limeFont){
            			HX_STACK_FRAME("openfl.Assets","loadFont",0x37540b62,"openfl.Assets.loadFont","openfl/Assets.hx",607,0x989d477c)
            			HX_STACK_ARG(limeFont,"limeFont")
HXLINE( 612)			HX_VARI(  ::openfl::text::Font,font) = ::openfl::text::Font_obj::_hx___fromLimeFont(limeFont);
HXLINE( 615)			Bool _hx_tmp5;
HXDLIN( 615)			if (useCache) {
HXLINE( 615)				_hx_tmp5 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 615)				_hx_tmp5 = false;
            			}
HXDLIN( 615)			if (_hx_tmp5) {
HXLINE( 617)				::openfl::IAssetCache_obj::setFont(::openfl::Assets_obj::cache,id,font);
            			}
HXLINE( 621)			promise->complete(font);
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","loadFont",0x37540b62,"openfl.Assets.loadFont","openfl/Assets.hx",585,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 587)		Bool _hx_tmp = hx::IsNull( useCache );
HXDLIN( 587)		if (_hx_tmp) {
HXLINE( 587)			useCache = true;
            		}
HXLINE( 589)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 591)		Bool _hx_tmp1 = hx::IsNotNull( handler );
HXDLIN( 591)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("openfl.Assets","loadFont",0x37540b62,"openfl.Assets.loadFont","openfl/Assets.hx",594,0x989d477c)
            				HX_STACK_ARG(_,"_")
HXLINE( 594)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 593)			promise->future->onComplete(handler);
HXLINE( 594)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 600)		Bool _hx_tmp2;
HXDLIN( 600)		Bool _hx_tmp3;
HXDLIN( 600)		if (useCache) {
HXLINE( 600)			_hx_tmp3 = ( (Bool)( ::Dynamic(::openfl::Assets_obj::cache->__Field(HX_("get_enabled",98,64,2b,04),hx::paccDynamic))()) );
            		}
            		else {
HXLINE( 600)			_hx_tmp3 = false;
            		}
HXDLIN( 600)		if (_hx_tmp3) {
HXLINE( 600)			_hx_tmp2 = ::openfl::IAssetCache_obj::hasFont(::openfl::Assets_obj::cache,id);
            		}
            		else {
HXLINE( 600)			_hx_tmp2 = false;
            		}
HXDLIN( 600)		if (_hx_tmp2) {
HXLINE( 602)			 ::openfl::text::Font _hx_tmp4 = ::openfl::IAssetCache_obj::getFont(::openfl::Assets_obj::cache,id);
HXDLIN( 602)			promise->complete(_hx_tmp4);
HXLINE( 603)			return promise->future;
            		}
HXLINE( 607)		::lime::Assets_obj::loadFont(id)->onComplete( ::Dynamic(new _hx_Closure_1(id,promise,useCache)))->onError(promise->error_dyn())->onProgress(promise->progress_dyn());
HXLINE( 627)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadFont,return )

 ::lime::app::Future Assets_obj::loadLibrary(::String name, ::Dynamic handler){
            	HX_STACK_FRAME("openfl.Assets","loadLibrary",0x44d0f748,"openfl.Assets.loadLibrary","openfl/Assets.hx",638,0x989d477c)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 640)		HX_VARI(  ::lime::app::Future,future) = ::lime::Assets_obj::loadLibrary(name);
HXLINE( 642)		Bool _hx_tmp = hx::IsNotNull( handler );
HXDLIN( 642)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("openfl.Assets","loadLibrary",0x44d0f748,"openfl.Assets.loadLibrary","openfl/Assets.hx",645,0x989d477c)
            				HX_STACK_ARG(_,"_")
HXLINE( 645)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 644)			future->onComplete(handler);
HXLINE( 645)			future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 649)		return future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadLibrary,return )

 ::lime::app::Future Assets_obj::loadMusic(::String id, ::Dynamic __o_useCache, ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run( ::lime::audio::AudioBuffer buffer){
            			HX_STACK_FRAME("openfl.Assets","loadMusic",0x3dff03b2,"openfl.Assets.loadMusic","openfl/Assets.hx",672,0x989d477c)
            			HX_STACK_ARG(buffer,"buffer")
HXLINE( 672)			Bool _hx_tmp1 = hx::IsNotNull( buffer );
HXDLIN( 672)			if (_hx_tmp1) {
HXLINE( 677)				 ::openfl::media::Sound _hx_tmp2 = ::openfl::media::Sound_obj::fromAudioBuffer(buffer);
HXDLIN( 677)				promise->complete(_hx_tmp2);
            			}
            			else {
HXLINE( 682)				promise->error(((HX_("[Assets] Could not load Sound \"",64,be,27,e3) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","loadMusic",0x3dff03b2,"openfl.Assets.loadMusic","openfl/Assets.hx",662,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 664)		Bool _hx_tmp = hx::IsNull( useCache );
HXDLIN( 664)		if (_hx_tmp) {
HXLINE( 664)			useCache = true;
            		}
HXLINE( 668)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 670)		::lime::Assets_obj::loadAudioBuffer(id,useCache)->onComplete( ::Dynamic(new _hx_Closure_0(id,promise)))->onError(promise->error_dyn())->onProgress(promise->progress_dyn());
HXLINE( 687)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadMusic,return )

 ::lime::app::Future Assets_obj::loadMovieClip(::String id, ::Dynamic handler){
            	HX_STACK_FRAME("openfl.Assets","loadMovieClip",0xd38a402d,"openfl.Assets.loadMovieClip","openfl/Assets.hx",706,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 708)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 710)		Bool _hx_tmp = hx::IsNotNull( handler );
HXDLIN( 710)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("openfl.Assets","loadMovieClip",0xd38a402d,"openfl.Assets.loadMovieClip","openfl/Assets.hx",713,0x989d477c)
            				HX_STACK_ARG(_,"_")
HXLINE( 713)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 712)			promise->future->onComplete(handler);
HXLINE( 713)			promise->future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 719)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 719)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp1);
HXLINE( 720)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 720)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp2 + (int)1),null());
HXLINE( 721)		HX_VARI(  ::openfl::AssetLibrary,library) = ( ( ::openfl::AssetLibrary)(::openfl::Assets_obj::getLibrary(libraryName)) );
HXLINE( 723)		Bool _hx_tmp3 = hx::IsNotNull( library );
HXDLIN( 723)		if (_hx_tmp3) {
HXLINE( 725)			Bool _hx_tmp4 = library->exists(symbolName,HX_("MOVIE_CLIP",1f,e1,aa,77));
HXDLIN( 725)			if (_hx_tmp4) {
HXLINE( 727)				 ::lime::app::Future _hx_tmp5 = library->loadMovieClip(symbolName);
HXDLIN( 727)				promise->completeWith(_hx_tmp5);
            			}
            			else {
HXLINE( 731)				promise->error(((HX_("[Assets] There is no MovieClip asset with an ID of \"",8f,8e,f2,7d) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 737)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 743)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadMovieClip,return )

 ::lime::app::Future Assets_obj::loadSound(::String id, ::Dynamic __o_useCache, ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run( ::lime::audio::AudioBuffer buffer){
            			HX_STACK_FRAME("openfl.Assets","loadSound",0xae70bfdc,"openfl.Assets.loadSound","openfl/Assets.hx",766,0x989d477c)
            			HX_STACK_ARG(buffer,"buffer")
HXLINE( 766)			Bool _hx_tmp1 = hx::IsNotNull( buffer );
HXDLIN( 766)			if (_hx_tmp1) {
HXLINE( 771)				 ::openfl::media::Sound _hx_tmp2 = ::openfl::media::Sound_obj::fromAudioBuffer(buffer);
HXDLIN( 771)				promise->complete(_hx_tmp2);
            			}
            			else {
HXLINE( 776)				promise->error(((HX_("[Assets] Could not load Sound \"",64,be,27,e3) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("openfl.Assets","loadSound",0xae70bfdc,"openfl.Assets.loadSound","openfl/Assets.hx",756,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 758)		Bool _hx_tmp = hx::IsNull( useCache );
HXDLIN( 758)		if (_hx_tmp) {
HXLINE( 758)			useCache = true;
            		}
HXLINE( 762)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 764)		::lime::Assets_obj::loadAudioBuffer(id,useCache)->onComplete( ::Dynamic(new _hx_Closure_0(id,promise)))->onError(promise->error_dyn())->onProgress(promise->progress_dyn());
HXLINE( 781)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadSound,return )

 ::lime::app::Future Assets_obj::loadText(::String id, ::Dynamic handler){
            	HX_STACK_FRAME("openfl.Assets","loadText",0x408d7a40,"openfl.Assets.loadText","openfl/Assets.hx",800,0x989d477c)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 802)		HX_VARI(  ::lime::app::Future,future) = ::lime::Assets_obj::loadText(id);
HXLINE( 804)		Bool _hx_tmp = hx::IsNotNull( handler );
HXDLIN( 804)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("openfl.Assets","loadText",0x408d7a40,"openfl.Assets.loadText","openfl/Assets.hx",807,0x989d477c)
            				HX_STACK_ARG(_,"_")
HXLINE( 807)				handler(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 806)			future->onComplete(handler);
HXLINE( 807)			future->onError( ::Dynamic(new _hx_Closure_0(handler)));
            		}
HXLINE( 811)		return future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadText,return )

void Assets_obj::registerLibrary(::String name, ::openfl::AssetLibrary library){
            	HX_STACK_FRAME("openfl.Assets","registerLibrary",0x9230822b,"openfl.Assets.registerLibrary","openfl/Assets.hx",823,0x989d477c)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(library,"library")
HXLINE( 823)		::lime::Assets_obj::registerLibrary(name,library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,registerLibrary,(void))

void Assets_obj::removeEventListener(::String type, ::Dynamic listener,hx::Null< Bool >  __o_capture){
Bool capture = __o_capture.Default(false);
            	HX_STACK_FRAME("openfl.Assets","removeEventListener",0x6a2b249d,"openfl.Assets.removeEventListener","openfl/Assets.hx",830,0x989d477c)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(listener,"listener")
            	HX_STACK_ARG(capture,"capture")
HXLINE( 830)		::openfl::Assets_obj::dispatcher->removeEventListener(type,listener,capture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,removeEventListener,(void))

hx::Class Assets_obj::resolveClass(::String name){
            	HX_STACK_FRAME("openfl.Assets","resolveClass",0x76ca4479,"openfl.Assets.resolveClass","openfl/Assets.hx",837,0x989d477c)
            	HX_STACK_ARG(name,"name")
HXLINE( 837)		return ::Type_obj::resolveClass(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,resolveClass,return )

hx::Class Assets_obj::resolveEnum(::String name){
            	HX_STACK_FRAME("openfl.Assets","resolveEnum",0x1314a1e0,"openfl.Assets.resolveEnum","openfl/Assets.hx",842,0x989d477c)
            	HX_STACK_ARG(name,"name")
HXLINE( 844)		HX_VARI( hx::Class,value) = ::Type_obj::resolveEnum(name);
HXLINE( 856)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,resolveEnum,return )

void Assets_obj::unloadLibrary(::String name){
            	HX_STACK_FRAME("openfl.Assets","unloadLibrary",0x6a51c84f,"openfl.Assets.unloadLibrary","openfl/Assets.hx",863,0x989d477c)
            	HX_STACK_ARG(name,"name")
HXLINE( 863)		::lime::Assets_obj::unloadLibrary(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,unloadLibrary,(void))

void Assets_obj::printError(::String message){
            	HX_STACK_FRAME("openfl.Assets","printError",0xd89969e8,"openfl.Assets.printError","openfl/Assets.hx",875,0x989d477c)
            	HX_STACK_ARG(message,"message")
HXLINE( 875)		::haxe::Log_obj::trace(message,hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),875,HX_("openfl.Assets",c1,41,e1,a0),HX_("printError",5b,20,bc,cb)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,printError,(void))

void Assets_obj::LimeAssets_onChange(){
            	HX_STACK_FRAME("openfl.Assets","LimeAssets_onChange",0xaa15d389,"openfl.Assets.LimeAssets_onChange","openfl/Assets.hx",889,0x989d477c)
HXLINE( 889)		::openfl::Assets_obj::dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),null(),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,LimeAssets_onChange,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = cache; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMusic") ) { outValue = getMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = getSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFont") ) { outValue = loadFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMusic") ) { outValue = loadMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadSound") ) { outValue = loadSound_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dispatcher") ) { outValue = dispatcher; return true; }
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"printError") ) { outValue = printError_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolveEnum") ) { outValue = resolveEnum_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { outValue = getMovieClip_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidSound") ) { outValue = isValidSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolveClass") ) { outValue = resolveClass_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { outValue = dispatchEvent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { outValue = getBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMovieClip") ) { outValue = loadMovieClip_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unloadLibrary") ) { outValue = unloadLibrary_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadBitmapData") ) { outValue = loadBitmapData_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"registerLibrary") ) { outValue = registerLibrary_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addEventListener") ) { outValue = addEventListener_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasEventListener") ) { outValue = hasEventListener_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"isValidBitmapData") ) { outValue = isValidBitmapData_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { outValue = removeEventListener_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"LimeAssets_onChange") ) { outValue = LimeAssets_onChange_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dispatcher") ) { dispatcher=ioValue.Cast<  ::openfl::events::EventDispatcher >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::IAssetCache*/ ,(void *) &Assets_obj::cache,HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*::openfl::events::EventDispatcher*/ ,(void *) &Assets_obj::dispatcher,HX_HCSTRING("dispatcher","\xa7","\xc9","\x00","\x5a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::dispatcher,"dispatcher");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::dispatcher,"dispatcher");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("dispatcher","\xa7","\xc9","\x00","\x5a"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getBitmapData","\xef","\x11","\x33","\x90"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getLibrary","\x05","\xad","\xd1","\x8e"),
	HX_HCSTRING("getMovieClip","\x2a","\x9f","\x71","\x27"),
	HX_HCSTRING("getMusic","\x2f","\xe0","\x31","\x70"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getSound","\x59","\x9c","\xa3","\xe0"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("hasEventListener","\xf4","\x2e","\xea","\x0c"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("isValidBitmapData","\x0b","\x65","\xe4","\xe6"),
	HX_HCSTRING("isValidSound","\xbd","\x1e","\x2b","\xa1"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadBitmapData","\x7f","\xbf","\x71","\xca"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadLibrary","\x75","\xe5","\x0d","\x10"),
	HX_HCSTRING("loadMusic","\x9f","\x1c","\x92","\x2b"),
	HX_HCSTRING("loadMovieClip","\x9a","\xd3","\x80","\x9a"),
	HX_HCSTRING("loadSound","\xc9","\xd8","\x03","\x9c"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("registerLibrary","\xd8","\x8a","\x84","\xf2"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("resolveClass","\xac","\xbd","\xdd","\x80"),
	HX_HCSTRING("resolveEnum","\x0d","\x90","\x51","\xde"),
	HX_HCSTRING("unloadLibrary","\xbc","\x5b","\x48","\x31"),
	HX_HCSTRING("printError","\x5b","\x20","\xbc","\xcb"),
	HX_HCSTRING("LimeAssets_onChange","\xb6","\x36","\x60","\x95"),
	::String(null())
};

void Assets_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.Assets","\xc1","\x41","\xe1","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.Assets","boot",0xaa5df5ff,"openfl.Assets.boot","openfl/Assets.hx",49,0x989d477c)
HXLINE(  49)		cache =  ::openfl::AssetCache_obj::__new();
            	}
{
            	HX_STACK_FRAME("openfl.Assets","boot",0xaa5df5ff,"openfl.Assets.boot","openfl/Assets.hx",51,0x989d477c)
HXLINE(  51)		dispatcher =  ::openfl::events::EventDispatcher_obj::__new(null());
            	}
}

} // end namespace openfl
