// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Dude
#include <Dude.h>
#endif
#ifndef INCLUDED_Entity
#include <Entity.h>
#endif

static const ::String _hx_array_data_0[] = {
	HX_("Dave",0c,84,3c,2d),HX_("Stephen",e5,1a,ab,4e),HX_("Max",84,c2,3a,00),HX_("Vinny",c6,22,31,ca),
};

void Dude_obj::__construct(){
            	HX_STACK_FRAME("Dude","new",0x7499e364,"Dude.new","Entity.hx",94,0x5c8a675b)
            	HX_STACK_THIS(this)
HXLINE( 110)		this->info = HX_("",00,00,00,00);
HXLINE( 109)		Int _hx_tmp = ((::Dude_obj::names->length - (int)1) + (int)1);
HXDLIN( 109)		Float _hx_tmp1 = ::Math_obj::random();
HXDLIN( 109)		Int _hx_tmp2 = ::Math_obj::floor((_hx_tmp * _hx_tmp1));
HXDLIN( 109)		this->name = ::Dude_obj::names->__get(_hx_tmp2);
HXLINE( 107)		this->hp_max = (int)1;
HXLINE( 106)		this->hp = (int)1;
HXLINE( 104)		this->dead = false;
HXLINE( 103)		this->dy = (int)0;
HXLINE( 102)		this->dx = (int)0;
HXLINE( 101)		this->moved = false;
HXLINE( 100)		this->attacked = false;
HXLINE(  99)		this->active = false;
HXLINE(  98)		this->real_y = (int)0;
HXLINE(  97)		this->real_x = (int)0;
HXLINE(  96)		this->y = (int)0;
HXLINE(  95)		this->x = (int)0;
HXLINE(  94)		super::__construct();
            	}

Dynamic Dude_obj::__CreateEmpty() { return new Dude_obj; }

hx::ObjectPtr< Dude_obj > Dude_obj::__new()
{
	hx::ObjectPtr< Dude_obj > _hx_result = new Dude_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Dude_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Dude_obj > _hx_result = new Dude_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic Dude_obj::classs;

::Array< ::String > Dude_obj::names;


Dude_obj::Dude_obj()
{
}

void Dude_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Dude);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(real_x,"real_x");
	HX_MARK_MEMBER_NAME(real_y,"real_y");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(attacked,"attacked");
	HX_MARK_MEMBER_NAME(moved,"moved");
	HX_MARK_MEMBER_NAME(dx,"dx");
	HX_MARK_MEMBER_NAME(dy,"dy");
	HX_MARK_MEMBER_NAME(dead,"dead");
	HX_MARK_MEMBER_NAME(hp,"hp");
	HX_MARK_MEMBER_NAME(hp_max,"hp_max");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(info,"info");
	HX_MARK_END_CLASS();
}

void Dude_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(real_x,"real_x");
	HX_VISIT_MEMBER_NAME(real_y,"real_y");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(attacked,"attacked");
	HX_VISIT_MEMBER_NAME(moved,"moved");
	HX_VISIT_MEMBER_NAME(dx,"dx");
	HX_VISIT_MEMBER_NAME(dy,"dy");
	HX_VISIT_MEMBER_NAME(dead,"dead");
	HX_VISIT_MEMBER_NAME(hp,"hp");
	HX_VISIT_MEMBER_NAME(hp_max,"hp_max");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(info,"info");
}

hx::Val Dude_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { return hx::Val( dx); }
		if (HX_FIELD_EQ(inName,"dy") ) { return hx::Val( dy); }
		if (HX_FIELD_EQ(inName,"hp") ) { return hx::Val( hp); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dead") ) { return hx::Val( dead); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"info") ) { return hx::Val( info); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { return hx::Val( moved); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"real_x") ) { return hx::Val( real_x); }
		if (HX_FIELD_EQ(inName,"real_y") ) { return hx::Val( real_y); }
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active); }
		if (HX_FIELD_EQ(inName,"hp_max") ) { return hx::Val( hp_max); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"attacked") ) { return hx::Val( attacked); }
	}
	return super::__Field(inName,inCallProp);
}

bool Dude_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { outValue = names; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"classs") ) { outValue = classs; return true; }
	}
	return false;
}

hx::Val Dude_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Int >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { dx=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dy") ) { dy=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hp") ) { hp=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dead") ) { dead=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { moved=inValue.Cast< Bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"real_x") ) { real_x=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"real_y") ) { real_y=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hp_max") ) { hp_max=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"attacked") ) { attacked=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Dude_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { names=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"classs") ) { classs=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Dude_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("real_x","\x17","\xb2","\x97","\xfc"));
	outFields->push(HX_HCSTRING("real_y","\x18","\xb2","\x97","\xfc"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("attacked","\x27","\xd6","\xdc","\x00"));
	outFields->push(HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"));
	outFields->push(HX_HCSTRING("dx","\x94","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("dy","\x95","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("dead","\xa4","\x4e","\x66","\x42"));
	outFields->push(HX_HCSTRING("hp","\x08","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("hp_max","\xad","\xce","\x1c","\x51"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Dude_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Dude_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Dude_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Dude_obj,real_x),HX_HCSTRING("real_x","\x17","\xb2","\x97","\xfc")},
	{hx::fsInt,(int)offsetof(Dude_obj,real_y),HX_HCSTRING("real_y","\x18","\xb2","\x97","\xfc")},
	{hx::fsBool,(int)offsetof(Dude_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsBool,(int)offsetof(Dude_obj,attacked),HX_HCSTRING("attacked","\x27","\xd6","\xdc","\x00")},
	{hx::fsBool,(int)offsetof(Dude_obj,moved),HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c")},
	{hx::fsInt,(int)offsetof(Dude_obj,dx),HX_HCSTRING("dx","\x94","\x57","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Dude_obj,dy),HX_HCSTRING("dy","\x95","\x57","\x00","\x00")},
	{hx::fsBool,(int)offsetof(Dude_obj,dead),HX_HCSTRING("dead","\xa4","\x4e","\x66","\x42")},
	{hx::fsInt,(int)offsetof(Dude_obj,hp),HX_HCSTRING("hp","\x08","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Dude_obj,hp_max),HX_HCSTRING("hp_max","\xad","\xce","\x1c","\x51")},
	{hx::fsString,(int)offsetof(Dude_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(Dude_obj,info),HX_HCSTRING("info","\x6e","\x38","\xbb","\x45")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Dude_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Dude_obj::classs,HX_HCSTRING("classs","\x3b","\xb9","\x10","\x05")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Dude_obj::names,HX_HCSTRING("names","\xc8","\x8f","\x84","\x96")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Dude_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("real_x","\x17","\xb2","\x97","\xfc"),
	HX_HCSTRING("real_y","\x18","\xb2","\x97","\xfc"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("attacked","\x27","\xd6","\xdc","\x00"),
	HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"),
	HX_HCSTRING("dx","\x94","\x57","\x00","\x00"),
	HX_HCSTRING("dy","\x95","\x57","\x00","\x00"),
	HX_HCSTRING("dead","\xa4","\x4e","\x66","\x42"),
	HX_HCSTRING("hp","\x08","\x5b","\x00","\x00"),
	HX_HCSTRING("hp_max","\xad","\xce","\x1c","\x51"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"),
	::String(null()) };

static void Dude_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Dude_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Dude_obj::classs,"classs");
	HX_MARK_MEMBER_NAME(Dude_obj::names,"names");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Dude_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Dude_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Dude_obj::classs,"classs");
	HX_VISIT_MEMBER_NAME(Dude_obj::names,"names");
};

#endif

hx::Class Dude_obj::__mClass;

static ::String Dude_obj_sStaticFields[] = {
	HX_HCSTRING("classs","\x3b","\xb9","\x10","\x05"),
	HX_HCSTRING("names","\xc8","\x8f","\x84","\x96"),
	::String(null())
};

void Dude_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Dude","\x72","\xa1","\x4b","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Dude_obj::__GetStatic;
	__mClass->mSetStaticField = &Dude_obj::__SetStatic;
	__mClass->mMarkFunc = Dude_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Dude_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Dude_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Dude_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Dude_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dude_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dude_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Dude_obj::__boot()
{
{
            	HX_STACK_FRAME("Dude","boot",0x8a2614ae,"Dude.boot","Entity.hx",105,0x5c8a675b)
HXLINE( 105)		classs = hx::ClassOf< ::Dude >();
            	}
{
            	HX_STACK_FRAME("Dude","boot",0x8a2614ae,"Dude.boot","Entity.hx",108,0x5c8a675b)
HXLINE( 108)		names = ::Array_obj< ::String >::fromData( _hx_array_data_0,4);
            	}
}

